                        .module maintain.c
                        .area data(ram, con, rel)
 0000           _mainStep:
 0000                   .blkb 1
                        .area idata
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001           _workStep:
 0001                   .blkb 1
                        .area idata
 0001 00                .byte 0
                        .area data(ram, con, rel)
 0002           _subStep:
 0002                   .blkb 1
                        .area idata
 0002 00                .byte 0
                        .area data(ram, con, rel)
 0003           _waitMotor0:
 0003                   .blkb 1
                        .area idata
 0003 00                .byte 0
                        .area data(ram, con, rel)
 0004           _waitMotor1:
 0004                   .blkb 1
                        .area idata
 0004 00                .byte 0
                        .area data(ram, con, rel)
 0005           _waitMotor2:
 0005                   .blkb 1
                        .area idata
 0005 00                .byte 0
                        .area data(ram, con, rel)
 0006           _waitMotor3:
 0006                   .blkb 1
                        .area idata
 0006 00                .byte 0
                        .area data(ram, con, rel)
 0007           _waitMotor4:
 0007                   .blkb 1
                        .area idata
 0007 00                .byte 0
                        .area data(ram, con, rel)
 0008           _waitStartKey:
 0008                   .blkb 1
                        .area idata
 0008 00                .byte 0
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                        .even
 0000           _SetMaintianSubfunctionQuitFlag::
 0000           ; 
 0000           ; 
 0000           ; #include <iom1280v.h>
 0000           ; #include "B1404_LIB.h"
 0000           ; #include "Common.h"
 0000           ; #include "eeprom.h"
 0000           ; 
 0000           ; 
 0000           ; // 维护功能程序
 0000           ; 
 0000           ; static unsigned char mainStep = 0;
 0000           ; static unsigned char workStep = 0;
 0000           ; static unsigned char subStep = 0;
 0000           ; 
 0000           ; static unsigned char waitMotor0 = 0;
 0000           ; static unsigned char waitMotor1 = 0;
 0000           ; static unsigned char waitMotor2 = 0;
 0000           ; static unsigned char waitMotor3 = 0;
 0000           ; static unsigned char waitMotor4 = 0;
 0000           ; static unsigned char waitStartKey = 0;
 0000           ; 
 0000           ; static unsigned char quitFlag;
 0000           ; static unsigned char timeOut;
 0000           ; 
 0000           ; static signed int DropHeightFactor;
 0000           ; 
 0000           ; extern unsigned int MaintainSubFunParam;
 0000           ; 
 0000           ; unsigned char SetMaintianSubfunctionQuitFlag(void){
 0000           ; 	quitFlag = 1;
 0000 81E0              ldi R24,1
 0002 80930700          sts _quitFlag,R24
 0006           ;       return 0;
 0006 0027              clr R16
 0008           L1:
 0008                   .dbline 0 ; func end
 0008 0895              ret
 000A           ;              i -> y+2
 000A           ;              n -> y+3
                        .even
 000A           _SetNeedleOnMixPosFactor::
 000A 1A93              st -y,r17
 000C 0A93              st -y,r16
 000E 2397              sbiw R28,3
 0010           ; }
 0010           ; 
 0010           ; // 设置滴样针到混匀池右边缘的调节因子
 0010           ; // 范围-30 ~ 30
 0010           ; // 不在此范围,可以查询原设置值
 0010           ; void SetNeedleOnMixPosFactor(signed int n)
 0010           ; {
 0010           ;       signed char i;
 0010           ;       if(n < 30 && n > -30) // 参数范围判断
 0010 8B81              ldd R24,y+3
 0012 9C81              ldd R25,y+4
 0014 8E31              cpi R24,30
 0016 E0E0              ldi R30,0
 0018 9E07              cpc R25,R30
 001A 9CF4              brge L3
 001C           X0:
 001C 82EE              ldi R24,-30
 001E 9FEF              ldi R25,-1
 0020 2B80              ldd R2,y+3
 0022 3C80              ldd R3,y+4
 0024 8215              cp R24,R2
 0026 9305              cpc R25,R3
 0028 64F4              brge L3
 002A           X1:
 002A           ; 	{	
 002A           ; 		EEPROM_WRITE(EEP_ADD_NEEDLE_MIX_ADJ, n);
 002A 82E0              ldi R24,2
 002C 90E0              ldi R25,0
 002E 9983              std y+1,R25
 0030 8883              std y+0,R24
 0032 9E01              movw R18,R28
 0034 2D5F              subi R18,253  ; offset = 3
 0036 3F4F              sbci R19,255
 0038 0CED              ldi R16,220
 003A 10E0              ldi R17,0
 003C 0E940000          xcall _EEPROMWriteBytes_extIO
 0040           ;       }
 0040 22C0              xjmp L4
 0042           L3:
 0042           ; 	else
 0042           ; 	{
 0042           ; 		EEPROM_READ(EEP_ADD_NEEDLE_MIX_ADJ, i);		// 重新读取写入的设置值
 0042 81E0              ldi R24,1
 0044 90E0              ldi R25,0
 0046 9983              std y+1,R25
 0048 8883              std y+0,R24
 004A 9E01              movw R18,R28
 004C 2E5F              subi R18,254  ; offset = 2
 004E 3F4F              sbci R19,255
 0050 0CED              ldi R16,220
 0052 10E0              ldi R17,0
 0054 0E940000          xcall _EEPROMReadBytes_extIO
 0058           ;               Uart0ReUnable;
 0058 8091C100          lds R24,193
 005C 8F7E              andi R24,239
 005E 8093C100          sts 193,R24
 0062           ;               uart_Printf("%s $%4d\r\n",strM4102, i);
 0062 2A80              ldd R2,y+2
 0064 3324              clr R3
 0066 27FC              sbrc R2,7
 0068 3094              com R3
 006A 3982              std y+1,R3
 006C 2882              std y+0,R2
 006E 20E0              ldi R18,<_strM4102
 0070 30E0              ldi R19,>_strM4102
 0072 00E0              ldi R16,<L5
 0074 10E0              ldi R17,>L5
 0076 0E940000          xcall _uart_Printf
 007A           ;               Uart0ReEnable;
 007A 8091C100          lds R24,193
 007E 8061              ori R24,16
 0080 8093C100          sts 193,R24
 0084           ;               return;
 0084 35C0              xjmp L2
 0086           L4:
 0086           ; 	}
 0086           ; 	EEPROM_READ(EEP_ADD_NEEDLE_MIX_ADJ, i);		// 重新读取写入的设置值
 0086 81E0              ldi R24,1
 0088 90E0              ldi R25,0
 008A 9983              std y+1,R25
 008C 8883              std y+0,R24
 008E 9E01              movw R18,R28
 0090 2E5F              subi R18,254  ; offset = 2
 0092 3F4F              sbci R19,255
 0094 0CED              ldi R16,220
 0096 10E0              ldi R17,0
 0098 0E940000          xcall _EEPROMReadBytes_extIO
 009C           ;       if(i > 30 || i < -30) // 保存的值有异常
 009C 8EE1              ldi R24,30
 009E 2A80              ldd R2,y+2
 00A0 8215              cp R24,R2
 00A2 1CF0              brlt L8
 00A4           X2:
 00A4 822D              mov R24,R2
 00A6 823E              cpi R24,226
 00A8 6CF4              brge L6
 00AA           X3:
 00AA           L8:
 00AA           ; 	{		
 00AA           ; 		i = 0;
 00AA 2224              clr R2
 00AC 2A82              std y+2,R2
 00AE           ;               EEPROM_WRITE(EEP_ADD_NEEDLE_MIX_ADJ, i);
 00AE 81E0              ldi R24,1
 00B0 90E0              ldi R25,0
 00B2 9983              std y+1,R25
 00B4 8883              std y+0,R24
 00B6 9E01              movw R18,R28
 00B8 2E5F              subi R18,254  ; offset = 2
 00BA 3F4F              sbci R19,255
 00BC 0CED              ldi R16,220
 00BE 10E0              ldi R17,0
 00C0 0E940000          xcall _EEPROMWriteBytes_extIO
 00C4           ;       }
 00C4           L6:
 00C4           ; 	Uart0ReUnable;
 00C4 8091C100          lds R24,193
 00C8 8F7E              andi R24,239
 00CA 8093C100          sts 193,R24
 00CE           ;       uart_Printf("%s $%4d\r\n",strM4102, i);
 00CE 2A80              ldd R2,y+2
 00D0 3324              clr R3
 00D2 27FC              sbrc R2,7
 00D4 3094              com R3
 00D6 3982              std y+1,R3
 00D8 2882              std y+0,R2
 00DA 20E0              ldi R18,<_strM4102
 00DC 30E0              ldi R19,>_strM4102
 00DE 00E0              ldi R16,<L5
 00E0 10E0              ldi R17,>L5
 00E2 0E940000          xcall _uart_Printf
 00E6           ;       Uart0ReEnable;
 00E6 8091C100          lds R24,193
 00EA 8061              ori R24,16
 00EC 8093C100          sts 193,R24
 00F0           L2:
 00F0                   .dbline 0 ; func end
 00F0 2596              adiw R28,5
 00F2 0895              ret
 00F4           ;             si -> R20,R21
 00F4           ;             sc -> y+2
                        .even
 00F4           _GetNeedleOnMixCenterPos::
 00F4 4A93              st -y,R20
 00F6 5A93              st -y,R21
 00F8 2397              sbiw R28,3
 00FA           ; }
 00FA           ; 
 00FA           ; signed int GetNeedleOnMixCenterPos(void)
 00FA           ; {
 00FA           ;       signed int si;
 00FA           ;       signed char sc;
 00FA           ;       EEPROM_READ(EEP_ADD_NEEDLE_MIX_ADJ, sc);                // 重新读取写入的设置值
 00FA 81E0              ldi R24,1
 00FC 90E0              ldi R25,0
 00FE 9983              std y+1,R25
 0100 8883              std y+0,R24
 0102 9E01              movw R18,R28
 0104 2E5F              subi R18,254  ; offset = 2
 0106 3F4F              sbci R19,255
 0108 0CED              ldi R16,220
 010A 10E0              ldi R17,0
 010C 0E940000          xcall _EEPROMReadBytes_extIO
 0110           ;       if(sc>30 || sc<-30){            // 保存的值有异常
 0110 8EE1              ldi R24,30
 0112 2A80              ldd R2,y+2
 0114 8215              cp R24,R2
 0116 1CF0              brlt L12
 0118           X4:
 0118 822D              mov R24,R2
 011A 823E              cpi R24,226
 011C 6CF4              brge L10
 011E           X5:
 011E           L12:
 011E           ; 		sc = 0;
 011E 2224              clr R2
 0120 2A82              std y+2,R2
 0122           ;               EEPROM_WRITE(EEP_ADD_NEEDLE_MIX_ADJ, sc);
 0122 81E0              ldi R24,1
 0124 90E0              ldi R25,0
 0126 9983              std y+1,R25
 0128 8883              std y+0,R24
 012A 9E01              movw R18,R28
 012C 2E5F              subi R18,254  ; offset = 2
 012E 3F4F              sbci R19,255
 0130 0CED              ldi R16,220
 0132 10E0              ldi R17,0
 0134 0E940000          xcall _EEPROMWriteBytes_extIO
 0138           ;               }
 0138           L10:
 0138           ; 	si = _POS_NEEDLE_ON_MIXCENTRE + (signed int)sc;
 0138 4A81              ldd R20,y+2
 013A 5527              clr R21
 013C 47FD              sbrc R20,7
 013E 5095              com R21
 0140 4D5B              subi R20,189  ; offset = 323
 0142 5E4F              sbci R21,254
 0144           ;       return si;
 0144 8A01              movw R16,R20
 0146           L9:
 0146                   .dbline 0 ; func end
 0146 2396              adiw R28,3
 0148 5991              ld R21,y+
 014A 4991              ld R20,y+
 014C 0895              ret
 014E           ;             si -> R20,R21
 014E           ;             sc -> y+2
                        .even
 014E           _GetNeedleOnMixSidePos::
 014E 4A93              st -y,R20
 0150 5A93              st -y,R21
 0152 2397              sbiw R28,3
 0154           ; }
 0154           ; 
 0154           ; 
 0154           ; signed int GetNeedleOnMixSidePos(void)
 0154           ; {
 0154           ;       signed int si;
 0154           ;       signed char sc;
 0154           ;       EEPROM_READ(EEP_ADD_NEEDLE_MIX_ADJ, sc);                // 重新读取写入的设置值
 0154 81E0              ldi R24,1
 0156 90E0              ldi R25,0
 0158 9983              std y+1,R25
 015A 8883              std y+0,R24
 015C 9E01              movw R18,R28
 015E 2E5F              subi R18,254  ; offset = 2
 0160 3F4F              sbci R19,255
 0162 0CED              ldi R16,220
 0164 10E0              ldi R17,0
 0166 0E940000          xcall _EEPROMReadBytes_extIO
 016A           ;       if(sc>30 || sc<-30){            // 保存的值有异常
 016A 8EE1              ldi R24,30
 016C 2A80              ldd R2,y+2
 016E 8215              cp R24,R2
 0170 1CF0              brlt L16
 0172           X6:
 0172 822D              mov R24,R2
 0174 823E              cpi R24,226
 0176 6CF4              brge L14
 0178           X7:
 0178           L16:
 0178           ; 		sc = 0;
 0178 2224              clr R2
 017A 2A82              std y+2,R2
 017C           ;               EEPROM_WRITE(EEP_ADD_NEEDLE_MIX_ADJ, sc);
 017C 81E0              ldi R24,1
 017E 90E0              ldi R25,0
 0180 9983              std y+1,R25
 0182 8883              std y+0,R24
 0184 9E01              movw R18,R28
 0186 2E5F              subi R18,254  ; offset = 2
 0188 3F4F              sbci R19,255
 018A 0CED              ldi R16,220
 018C 10E0              ldi R17,0
 018E 0E940000          xcall _EEPROMWriteBytes_extIO
 0192           ;               }
 0192           L14:
 0192           ; 	si = _POS_NEEDLE_ON_MIXSIDE + (signed int)sc;
 0192 4A81              ldd R20,y+2
 0194 5527              clr R21
 0196 47FD              sbrc R20,7
 0198 5095              com R21
 019A 415A              subi R20,161  ; offset = 351
 019C 5E4F              sbci R21,254
 019E           ;       return si;
 019E 8A01              movw R16,R20
 01A0           L13:
 01A0                   .dbline 0 ; func end
 01A0 2396              adiw R28,3
 01A2 5991              ld R21,y+
 01A4 4991              ld R20,y+
 01A6 0895              ret
 01A8           ;              n -> y+2
                        .even
 01A8           _SetDropHeightFactor::
 01A8 1A93              st -y,r17
 01AA 0A93              st -y,r16
 01AC 2297              sbiw R28,2
 01AE           ; }
 01AE           ; 
 01AE           ; 
 01AE           ; // 设置滴样针滴样的高度调节因子
 01AE           ; // 范围-100 ~ 200
 01AE           ; // 不在此范围,可以查询原设置值
 01AE           ; void SetDropHeightFactor(signed int n)
 01AE           ; {
 01AE           ;       if(n <= 200 && n >= -100)
 01AE 88EC              ldi R24,200
 01B0 90E0              ldi R25,0
 01B2 2A80              ldd R2,y+2
 01B4 3B80              ldd R3,y+3
 01B6 8215              cp R24,R2
 01B8 9305              cpc R25,R3
 01BA 8CF0              brlt L18
 01BC           X8:
 01BC C101              movw R24,R2
 01BE 8C39              cpi R24,156
 01C0 EFEF              ldi R30,255
 01C2 9E07              cpc R25,R30
 01C4 64F0              brlt L18
 01C6           X9:
 01C6           ; 	{	// 参数范围判断
 01C6           ; 		EEPROM_WRITE(EEP_ADD_DROP_HEIGHT_ADJ, n);
 01C6 82E0              ldi R24,2
 01C8 90E0              ldi R25,0
 01CA 9983              std y+1,R25
 01CC 8883              std y+0,R24
 01CE 9E01              movw R18,R28
 01D0 2E5F              subi R18,254  ; offset = 2
 01D2 3F4F              sbci R19,255
 01D4 0DED              ldi R16,221
 01D6 10E0              ldi R17,0
 01D8 0E940000          xcall _EEPROMWriteBytes_extIO
 01DC           ;       }
 01DC 21C0              xjmp L19
 01DE           L18:
 01DE           ; 	else
 01DE           ; 	{
 01DE           ; 		EEPROM_READ(EEP_ADD_DROP_HEIGHT_ADJ, DropHeightFactor);		// 重新读取写入的设置值
 01DE 82E0              ldi R24,2
 01E0 90E0              ldi R25,0
 01E2 9983              std y+1,R25
 01E4 8883              std y+0,R24
 01E6 20E0              ldi R18,<_DropHeightFactor
 01E8 30E0              ldi R19,>_DropHeightFactor
 01EA 0DED              ldi R16,221
 01EC 10E0              ldi R17,0
 01EE 0E940000          xcall _EEPROMReadBytes_extIO
 01F2           ;               Uart0ReUnable;
 01F2 8091C100          lds R24,193
 01F6 8F7E              andi R24,239
 01F8 8093C100          sts 193,R24
 01FC           ;               uart_Printf("%s $%4d\r\n",strM4104, DropHeightFactor);
 01FC 20900400          lds R2,_DropHeightFactor
 0200 30900500          lds R3,_DropHeightFactor+1
 0204 3982              std y+1,R3
 0206 2882              std y+0,R2
 0208 20E0              ldi R18,<_strM4104
 020A 30E0              ldi R19,>_strM4104
 020C 00E0              ldi R16,<L5
 020E 10E0              ldi R17,>L5
 0210 0E940000          xcall _uart_Printf
 0214           ;               Uart0ReEnable;
 0214 8091C100          lds R24,193
 0218 8061              ori R24,16
 021A 8093C100          sts 193,R24
 021E           ;               return;
 021E 3EC0              xjmp L17
 0220           L19:
 0220           ; 	}
 0220           ; 	EEPROM_READ(EEP_ADD_DROP_HEIGHT_ADJ, DropHeightFactor);		// 重新读取写入的设置值
 0220 82E0              ldi R24,2
 0222 90E0              ldi R25,0
 0224 9983              std y+1,R25
 0226 8883              std y+0,R24
 0228 20E0              ldi R18,<_DropHeightFactor
 022A 30E0              ldi R19,>_DropHeightFactor
 022C 0DED              ldi R16,221
 022E 10E0              ldi R17,0
 0230 0E940000          xcall _EEPROMReadBytes_extIO
 0234           ;       if(DropHeightFactor > 200 || DropHeightFactor < -100)
 0234 20900400          lds R2,_DropHeightFactor
 0238 30900500          lds R3,_DropHeightFactor+1
 023C 88EC              ldi R24,200
 023E 90E0              ldi R25,0
 0240 8215              cp R24,R2
 0242 9305              cpc R25,R3
 0244 2CF0              brlt L22
 0246           X10:
 0246 C101              movw R24,R2
 0248 8C39              cpi R24,156
 024A EFEF              ldi R30,255
 024C 9E07              cpc R25,R30
 024E 84F4              brge L20
 0250           X11:
 0250           L22:
 0250           ; 	{		// 保存的值有异常
 0250           ; 		DropHeightFactor = 0;
 0250 2224              clr R2
 0252 3324              clr R3
 0254 30920500          sts _DropHeightFactor+1,R3
 0258 20920400          sts _DropHeightFactor,R2
 025C           ;               EEPROM_WRITE(EEP_ADD_DROP_HEIGHT_ADJ, DropHeightFactor);
 025C 82E0              ldi R24,2
 025E 90E0              ldi R25,0
 0260 9983              std y+1,R25
 0262 8883              std y+0,R24
 0264 20E0              ldi R18,<_DropHeightFactor
 0266 30E0              ldi R19,>_DropHeightFactor
 0268 0DED              ldi R16,221
 026A 10E0              ldi R17,0
 026C 0E940000          xcall _EEPROMWriteBytes_extIO
 0270           ;       }
 0270           L20:
 0270           ; 	Uart0ReUnable;
 0270 8091C100          lds R24,193
 0274 8F7E              andi R24,239
 0276 8093C100          sts 193,R24
 027A           ;       uart_Printf("%s $%4d\r\n",strM4104, DropHeightFactor);
 027A 20900400          lds R2,_DropHeightFactor
 027E 30900500          lds R3,_DropHeightFactor+1
 0282 3982              std y+1,R3
 0284 2882              std y+0,R2
 0286 20E0              ldi R18,<_strM4104
 0288 30E0              ldi R19,>_strM4104
 028A 00E0              ldi R16,<L5
 028C 10E0              ldi R17,>L5
 028E 0E940000          xcall _uart_Printf
 0292           ;       Uart0ReEnable;
 0292 8091C100          lds R24,193
 0296 8061              ori R24,16
 0298 8093C100          sts 193,R24
 029C           L17:
 029C                   .dbline 0 ; func end
 029C 2496              adiw R28,4
 029E 0895              ret
 02A0           ;             si -> R20,R21
 02A0           ;             sc -> y+2
                        .even
 02A0           _GetDropHeight::
 02A0 4A93              st -y,R20
 02A2 5A93              st -y,R21
 02A4 2497              sbiw R28,4
 02A6           ; }
 02A6           ; 
 02A6           ; signed int GetDropHeight(void)
 02A6           ; {
 02A6           ;       signed int si;
 02A6           ;       signed int sc;
 02A6           ;       EEPROM_READ(EEP_ADD_DROP_HEIGHT_ADJ, sc);               // 重新读取写入的设置值
 02A6 82E0              ldi R24,2
 02A8 90E0              ldi R25,0
 02AA 9983              std y+1,R25
 02AC 8883              std y+0,R24
 02AE 9E01              movw R18,R28
 02B0 2E5F              subi R18,254  ; offset = 2
 02B2 3F4F              sbci R19,255
 02B4 0DED              ldi R16,221
 02B6 10E0              ldi R17,0
 02B8 0E940000          xcall _EEPROMReadBytes_extIO
 02BC           ;       if(sc > 200 || sc < -100)
 02BC 88EC              ldi R24,200
 02BE 90E0              ldi R25,0
 02C0 2A80              ldd R2,y+2
 02C2 3B80              ldd R3,y+3
 02C4 8215              cp R24,R2
 02C6 9305              cpc R25,R3
 02C8 2CF0              brlt L26
 02CA           X12:
 02CA C101              movw R24,R2
 02CC 8C39              cpi R24,156
 02CE EFEF              ldi R30,255
 02D0 9E07              cpc R25,R30
 02D2 2CF5              brge L24
 02D4           X13:
 02D4           L26:
 02D4           ; 	{	// 保存的值有异常
 02D4           ; 		sc = 0;
 02D4 2224              clr R2
 02D6 3324              clr R3
 02D8 3B82              std y+3,R3
 02DA 2A82              std y+2,R2
 02DC           ;               EEPROM_WRITE(EEP_ADD_DROP_HEIGHT_ADJ, sc);
 02DC 82E0              ldi R24,2
 02DE 90E0              ldi R25,0
 02E0 9983              std y+1,R25
 02E2 8883              std y+0,R24
 02E4 9E01              movw R18,R28
 02E6 2E5F              subi R18,254  ; offset = 2
 02E8 3F4F              sbci R19,255
 02EA 0DED              ldi R16,221
 02EC 10E0              ldi R17,0
 02EE 0E940000          xcall _EEPROMWriteBytes_extIO
 02F2           ;               Uart0ReUnable;
 02F2 8091C100          lds R24,193
 02F6 8F7E              andi R24,239
 02F8 8093C100          sts 193,R24
 02FC           ;               uart_Printf("%s $%4d\r\n",strE3936, DropHeightFactor);
 02FC 20900400          lds R2,_DropHeightFactor
 0300 30900500          lds R3,_DropHeightFactor+1
 0304 3982              std y+1,R3
 0306 2882              std y+0,R2
 0308 20E0              ldi R18,<_strE3936
 030A 30E0              ldi R19,>_strE3936
 030C 00E0              ldi R16,<L5
 030E 10E0              ldi R17,>L5
 0310 0E940000          xcall _uart_Printf
 0314           ;               Uart0ReEnable;
 0314 8091C100          lds R24,193
 0318 8061              ori R24,16
 031A 8093C100          sts 193,R24
 031E           ;       }
 031E           L24:
 031E           ; 	si = _POS_CARD_DROP + (signed int)sc;
 031E 4A81              ldd R20,y+2
 0320 5B81              ldd R21,y+3
 0322 4458              subi R20,132  ; offset = 380
 0324 5E4F              sbci R21,254
 0326           ;       return si;
 0326 8A01              movw R16,R20
 0328           L23:
 0328                   .dbline 0 ; func end
 0328 2496              adiw R28,4
 032A 5991              ld R21,y+
 032C 4991              ld R20,y+
 032E 0895              ret
 0330           ;              i -> y+2
 0330           ;              n -> y+3
                        .even
 0330           _SetMixHeight::
 0330 1A93              st -y,r17
 0332 0A93              st -y,r16
 0334 2397              sbiw R28,3
 0336           ; }
 0336           ; 
 0336           ; signed char SetMixHeight(signed char n)
 0336           ; {
 0336           ;       signed char i;
 0336           ;       if(n <= 100 && n >= -100)
 0336 84E6              ldi R24,100
 0338 2B80              ldd R2,y+3
 033A 8215              cp R24,R2
 033C 74F0              brlt L28
 033E           X14:
 033E 822D              mov R24,R2
 0340 8C39              cpi R24,156
 0342 5CF0              brlt L28
 0344           X15:
 0344           ; 	{	// 参数范围判断
 0344           ; 		EEPROM_WRITE(EEP_ADD_MIX_HEIGHT_ADJ, n);
 0344 81E0              ldi R24,1
 0346 90E0              ldi R25,0
 0348 9983              std y+1,R25
 034A 8883              std y+0,R24
 034C 9E01              movw R18,R28
 034E 2D5F              subi R18,253  ; offset = 3
 0350 3F4F              sbci R19,255
 0352 0EED              ldi R16,222
 0354 10E0              ldi R17,0
 0356 0E940000          xcall _EEPROMWriteBytes_extIO
 035A           ;       }
 035A           L28:
 035A           ; 	EEPROM_READ(EEP_ADD_MIX_HEIGHT_ADJ, i);		// 重新读取写入的设置值
 035A 81E0              ldi R24,1
 035C 90E0              ldi R25,0
 035E 9983              std y+1,R25
 0360 8883              std y+0,R24
 0362 9E01              movw R18,R28
 0364 2E5F              subi R18,254  ; offset = 2
 0366 3F4F              sbci R19,255
 0368 0EED              ldi R16,222
 036A 10E0              ldi R17,0
 036C 0E940000          xcall _EEPROMReadBytes_extIO
 0370           ;       if(i > 100 || i < -100)
 0370 84E6              ldi R24,100
 0372 2A80              ldd R2,y+2
 0374 8215              cp R24,R2
 0376 1CF0              brlt L32
 0378           X16:
 0378 822D              mov R24,R2
 037A 8C39              cpi R24,156
 037C 6CF4              brge L30
 037E           X17:
 037E           L32:
 037E           ; 	{		// 保存的值有异常
 037E           ; 		i = 0;
 037E 2224              clr R2
 0380 2A82              std y+2,R2
 0382           ;               EEPROM_WRITE(EEP_ADD_MIX_HEIGHT_ADJ, i);
 0382 81E0              ldi R24,1
 0384 90E0              ldi R25,0
 0386 9983              std y+1,R25
 0388 8883              std y+0,R24
 038A 9E01              movw R18,R28
 038C 2E5F              subi R18,254  ; offset = 2
 038E 3F4F              sbci R19,255
 0390 0EED              ldi R16,222
 0392 10E0              ldi R17,0
 0394 0E940000          xcall _EEPROMWriteBytes_extIO
 0398           ;       }
 0398           L30:
 0398           ; 	return i;
 0398 0A81              ldd R16,y+2
 039A           L27:
 039A                   .dbline 0 ; func end
 039A 2596              adiw R28,5
 039C 0895              ret
 039E           ;             si -> R20,R21
 039E           ;             sc -> y+2
                        .even
 039E           _GetMixHeight::
 039E 4A93              st -y,R20
 03A0 5A93              st -y,R21
 03A2 2397              sbiw R28,3
 03A4           ; }
 03A4           ; 
 03A4           ; signed int GetMixHeight(void)
 03A4           ; {
 03A4           ;       signed int si;
 03A4           ;       signed char sc;
 03A4           ;       EEPROM_READ(EEP_ADD_MIX_HEIGHT_ADJ, sc);                // 重新读取写入的设置值
 03A4 81E0              ldi R24,1
 03A6 90E0              ldi R25,0
 03A8 9983              std y+1,R25
 03AA 8883              std y+0,R24
 03AC 9E01              movw R18,R28
 03AE 2E5F              subi R18,254  ; offset = 2
 03B0 3F4F              sbci R19,255
 03B2 0EED              ldi R16,222
 03B4 10E0              ldi R17,0
 03B6 0E940000          xcall _EEPROMReadBytes_extIO
 03BA           ;       if(sc > 100 || sc < -100)
 03BA 84E6              ldi R24,100
 03BC 2A80              ldd R2,y+2
 03BE 8215              cp R24,R2
 03C0 1CF0              brlt L36
 03C2           X18:
 03C2 822D              mov R24,R2
 03C4 8C39              cpi R24,156
 03C6 6CF4              brge L34
 03C8           X19:
 03C8           L36:
 03C8           ; 	{		// 保存的值有异常
 03C8           ; 		sc = 0;
 03C8 2224              clr R2
 03CA 2A82              std y+2,R2
 03CC           ;               EEPROM_WRITE(EEP_ADD_MIX_HEIGHT_ADJ, sc);
 03CC 81E0              ldi R24,1
 03CE 90E0              ldi R25,0
 03D0 9983              std y+1,R25
 03D2 8883              std y+0,R24
 03D4 9E01              movw R18,R28
 03D6 2E5F              subi R18,254  ; offset = 2
 03D8 3F4F              sbci R19,255
 03DA 0EED              ldi R16,222
 03DC 10E0              ldi R17,0
 03DE 0E940000          xcall _EEPROMWriteBytes_extIO
 03E2           ;       }
 03E2           L34:
 03E2           ; 	si = _POS_CARD_MIX + (signed int)sc;
 03E2 4A81              ldd R20,y+2
 03E4 5527              clr R21
 03E6 47FD              sbrc R20,7
 03E8 5095              com R21
 03EA 4057              subi R20,112  ; offset = 400
 03EC 5E4F              sbci R21,254
 03EE           ;       return si;
 03EE 8A01              movw R16,R20
 03F0           L33:
 03F0                   .dbline 0 ; func end
 03F0 2396              adiw R28,3
 03F2 5991              ld R21,y+
 03F4 4991              ld R20,y+
 03F6 0895              ret
                        .even
 03F8           _CardLoadStartAdjust::
 03F8 4A93              st -y,R20
 03FA 5A93              st -y,R21
 03FC 2397              sbiw R28,3
 03FE           ; }
 03FE           ; 
 03FE           ; unsigned char CardLoadStartAdjust(void){
 03FE           ;       // 卡片装载起始位调整
 03FE           ;       if(waitMotor0){ if(GetMotState(MOT_CARD_LOAD)!=STA_SLAVE_FREE)  return 0;       waitMotor0 = 0; }
 03FE 20900300          lds R2,_waitMotor0
 0402 2220              tst R2
 0404 51F0              breq L38
 0406           X20:
 0406 04E0              ldi R16,4
 0408 0E940000          xcall _GetMotState
 040C 0130              cpi R16,1
 040E 11F0              breq L40
 0410           X21:
 0410 0027              clr R16
 0412 35C0              xjmp L37
 0414           L40:
 0414 2224              clr R2
 0416 20920300          sts _waitMotor0,R2
 041A           L38:
 041A           ; 
 041A           ; 	switch(mainStep){
 041A 40910000          lds R20,_mainStep
 041E 5527              clr R21
 0420 4030              cpi R20,0
 0422 4507              cpc R20,R21
 0424 29F0              breq L45
 0426           X22:
 0426 4130              cpi R20,1
 0428 E0E0              ldi R30,0
 042A 5E07              cpc R21,R30
 042C 91F0              breq L46
 042E           X23:
 042E 26C0              xjmp L43
 0430           L45:
 0430           ; 		case 0:
 0430           ; 			SetMotRunPam(MOT_CARD_LOAD, 64, 20, CURRENT_CARD_LOAD);
 0430 84E0              ldi R24,4
 0432 8A83              std y+2,R24
 0434 84E1              ldi R24,20
 0436 8883              std y+0,R24
 0438 20E4              ldi R18,64
 043A 04E0              ldi R16,4
 043C 0E940000          xcall _SetMotRunPam
 0440           ;                       MotInitCheck(MOT_CARD_LOAD);    // 卡片装载小车回到起始位等待调整
 0440 04E0              ldi R16,4
 0442 0E940000          xcall _MotInitCheck
 0446           ;                       waitMotor0 = 1;
 0446 81E0              ldi R24,1
 0448 80930300          sts _waitMotor0,R24
 044C           ;                       mainStep = 1;
 044C 80930000          sts _mainStep,R24
 0450           ;                       break;
 0450 15C0              xjmp L43
 0452           L46:
 0452           ; 		case 1:
 0452           ; 			Uart0ReUnable;
 0452 8091C100          lds R24,193
 0456 8F7E              andi R24,239
 0458 8093C100          sts 193,R24
 045C           ;                       uart_Printf("%s\r\n",strM4105);
 045C 20E0              ldi R18,<_strM4105
 045E 30E0              ldi R19,>_strM4105
 0460 00E0              ldi R16,<L47
 0462 10E0              ldi R17,>L47
 0464 0E940000          xcall _uart_Printf
 0468           ;                       Uart0ReEnable;
 0468 8091C100          lds R24,193
 046C 8061              ori R24,16
 046E 8093C100          sts 193,R24
 0472           ;                       mainStep = 0;
 0472 2224              clr R2
 0474 20920000          sts _mainStep,R2
 0478           ;                       return 1;
 0478 01E0              ldi R16,1
 047A 01C0              xjmp L37
 047C           L43:
 047C           ; 			break;
 047C           ; 		default:
 047C           ; 			break;
 047C           ; 		}
 047C           ; 	return 0;
 047C 0027              clr R16
 047E           L37:
 047E                   .dbline 0 ; func end
 047E 2396              adiw R28,3
 0480 5991              ld R21,y+
 0482 4991              ld R20,y+
 0484 0895              ret
                        .even
 0486           _CardLoadEndAdjust::
 0486 4A93              st -y,R20
 0488 5A93              st -y,R21
 048A 2397              sbiw R28,3
 048C           ; }
 048C           ; 
 048C           ; unsigned char CardLoadEndAdjust(void){
 048C           ;       // 卡片装载终点位调整
 048C           ;       if(waitMotor0){ if(GetMotState(MOT_CARD_LOAD)!=STA_SLAVE_FREE)  return 0;       waitMotor0 = 0; }
 048C 20900300          lds R2,_waitMotor0
 0490 2220              tst R2
 0492 51F0              breq L49
 0494           X24:
 0494 04E0              ldi R16,4
 0496 0E940000          xcall _GetMotState
 049A 0130              cpi R16,1
 049C 11F0              breq L51
 049E           X25:
 049E 0027              clr R16
 04A0 37C0              xjmp L48
 04A2           L51:
 04A2 2224              clr R2
 04A4 20920300          sts _waitMotor0,R2
 04A8           L49:
 04A8           ; 
 04A8           ; 	switch(mainStep){
 04A8 40910000          lds R20,_mainStep
 04AC 5527              clr R21
 04AE 4030              cpi R20,0
 04B0 4507              cpc R20,R21
 04B2 29F0              breq L56
 04B4           X26:
 04B4 4130              cpi R20,1
 04B6 E0E0              ldi R30,0
 04B8 5E07              cpc R21,R30
 04BA A1F0              breq L57
 04BC           X27:
 04BC 28C0              xjmp L54
 04BE           L56:
 04BE           ; 		case 0:
 04BE           ; 			SetMotRunPam(MOT_CARD_LOAD, 64, 20, CURRENT_CARD_LOAD);
 04BE 84E0              ldi R24,4
 04C0 8A83              std y+2,R24
 04C2 84E1              ldi R24,20
 04C4 8883              std y+0,R24
 04C6 20E4              ldi R18,64
 04C8 04E0              ldi R16,4
 04CA 0E940000          xcall _SetMotRunPam
 04CE           ;                       MotAdjustPosition(MOT_CARD_LOAD,_POS_CARDLOAD_RING);    // 卡片装载小冲位置调整
 04CE 20E4              ldi R18,1600
 04D0 36E0              ldi R19,6
 04D2 04E0              ldi R16,4
 04D4 0E940000          xcall _MotAdjustPosition
 04D8           ;                       waitMotor0 = 1;
 04D8 81E0              ldi R24,1
 04DA 80930300          sts _waitMotor0,R24
 04DE           ;                       mainStep = 1;
 04DE 80930000          sts _mainStep,R24
 04E2           ;                       break;
 04E2 15C0              xjmp L54
 04E4           L57:
 04E4           ; 		case 1:
 04E4           ; 			Uart0ReUnable;
 04E4 8091C100          lds R24,193
 04E8 8F7E              andi R24,239
 04EA 8093C100          sts 193,R24
 04EE           ;                       uart_Printf("%s\r\n",strM4106);
 04EE 20E0              ldi R18,<_strM4106
 04F0 30E0              ldi R19,>_strM4106
 04F2 00E0              ldi R16,<L47
 04F4 10E0              ldi R17,>L47
 04F6 0E940000          xcall _uart_Printf
 04FA           ;                       Uart0ReEnable;
 04FA 8091C100          lds R24,193
 04FE 8061              ori R24,16
 0500 8093C100          sts 193,R24
 0504           ;                       mainStep = 0;
 0504 2224              clr R2
 0506 20920000          sts _mainStep,R2
 050A           ;                       return 1;
 050A 01E0              ldi R16,1
 050C 01C0              xjmp L48
 050E           L54:
 050E           ; 			break;
 050E           ; 		default:
 050E           ; 			break;
 050E           ; 		}
 050E           ; 	return 0;
 050E 0027              clr R16
 0510           L48:
 0510                   .dbline 0 ; func end
 0510 2396              adiw R28,3
 0512 5991              ld R21,y+
 0514 4991              ld R20,y+
 0516 0895              ret
                        .even
 0518           _CardUnloadStartAdjust::
 0518 4A93              st -y,R20
 051A 5A93              st -y,R21
 051C 2397              sbiw R28,3
 051E           ; }
 051E           ; 
 051E           ; unsigned char CardUnloadStartAdjust(void){
 051E           ;       // 卡片卸载起始位调整
 051E           ;       if(waitMotor0){ if(GetMotState(MOT_CARD_UNLOAD)!=STA_SLAVE_FREE)        return 0;       waitMotor0 = 0; }
 051E 20900300          lds R2,_waitMotor0
 0522 2220              tst R2
 0524 51F0              breq L59
 0526           X28:
 0526 05E0              ldi R16,5
 0528 0E940000          xcall _GetMotState
 052C 0130              cpi R16,1
 052E 11F0              breq L61
 0530           X29:
 0530 0027              clr R16
 0532 35C0              xjmp L58
 0534           L61:
 0534 2224              clr R2
 0536 20920300          sts _waitMotor0,R2
 053A           L59:
 053A           ; 
 053A           ; 	switch(mainStep){
 053A 40910000          lds R20,_mainStep
 053E 5527              clr R21
 0540 4030              cpi R20,0
 0542 4507              cpc R20,R21
 0544 29F0              breq L66
 0546           X30:
 0546 4130              cpi R20,1
 0548 E0E0              ldi R30,0
 054A 5E07              cpc R21,R30
 054C 91F0              breq L67
 054E           X31:
 054E 26C0              xjmp L64
 0550           L66:
 0550           ; 		case 0:
 0550           ; 			SetMotRunPam(MOT_CARD_UNLOAD, 64, 20, CURRENT_CARD_UNLOAD);
 0550 84E0              ldi R24,4
 0552 8A83              std y+2,R24
 0554 84E1              ldi R24,20
 0556 8883              std y+0,R24
 0558 20E4              ldi R18,64
 055A 05E0              ldi R16,5
 055C 0E940000          xcall _SetMotRunPam
 0560           ;                       MotInitCheck(MOT_CARD_UNLOAD);  // 卡片装载小车回到起始位等待调整
 0560 05E0              ldi R16,5
 0562 0E940000          xcall _MotInitCheck
 0566           ;                       waitMotor0 = 1;
 0566 81E0              ldi R24,1
 0568 80930300          sts _waitMotor0,R24
 056C           ;                       mainStep = 1;
 056C 80930000          sts _mainStep,R24
 0570           ;                       break;
 0570 15C0              xjmp L64
 0572           L67:
 0572           ; 		case 1:
 0572           ; 			Uart0ReUnable;
 0572 8091C100          lds R24,193
 0576 8F7E              andi R24,239
 0578 8093C100          sts 193,R24
 057C           ;                       uart_Printf("%s\r\n",strM4107);
 057C 20E0              ldi R18,<_strM4107
 057E 30E0              ldi R19,>_strM4107
 0580 00E0              ldi R16,<L47
 0582 10E0              ldi R17,>L47
 0584 0E940000          xcall _uart_Printf
 0588           ;                       Uart0ReEnable;;
 0588 8091C100          lds R24,193
 058C 8061              ori R24,16
 058E 8093C100          sts 193,R24
 0592           ;                       mainStep = 0;
 0592 2224              clr R2
 0594 20920000          sts _mainStep,R2
 0598           ;                       return 1;
 0598 01E0              ldi R16,1
 059A 01C0              xjmp L58
 059C           L64:
 059C           ; 			break;
 059C           ; 		default:
 059C           ; 			break;
 059C           ; 		}
 059C           ; 	return 0;
 059C 0027              clr R16
 059E           L58:
 059E                   .dbline 0 ; func end
 059E 2396              adiw R28,3
 05A0 5991              ld R21,y+
 05A2 4991              ld R20,y+
 05A4 0895              ret
                        .even
 05A6           _CardUnloadEndAdjust::
 05A6 4A93              st -y,R20
 05A8 5A93              st -y,R21
 05AA 2397              sbiw R28,3
 05AC           ; }
 05AC           ; 
 05AC           ; unsigned char CardUnloadEndAdjust(void){
 05AC           ;       // 卡片卸载终点位调整
 05AC           ;       if(waitMotor0){ if(GetMotState(MOT_CARD_UNLOAD)!=STA_SLAVE_FREE)        return 0;       waitMotor0 = 0; }
 05AC 20900300          lds R2,_waitMotor0
 05B0 2220              tst R2
 05B2 51F0              breq L69
 05B4           X32:
 05B4 05E0              ldi R16,5
 05B6 0E940000          xcall _GetMotState
 05BA 0130              cpi R16,1
 05BC 11F0              breq L71
 05BE           X33:
 05BE 0027              clr R16
 05C0 37C0              xjmp L68
 05C2           L71:
 05C2 2224              clr R2
 05C4 20920300          sts _waitMotor0,R2
 05C8           L69:
 05C8           ; 
 05C8           ; 	switch(mainStep){
 05C8 40910000          lds R20,_mainStep
 05CC 5527              clr R21
 05CE 4030              cpi R20,0
 05D0 4507              cpc R20,R21
 05D2 29F0              breq L76
 05D4           X34:
 05D4 4130              cpi R20,1
 05D6 E0E0              ldi R30,0
 05D8 5E07              cpc R21,R30
 05DA A1F0              breq L77
 05DC           X35:
 05DC 28C0              xjmp L74
 05DE           L76:
 05DE           ; 		case 0:
 05DE           ; 			SetMotRunPam(MOT_CARD_UNLOAD, 64, 20, CURRENT_CARD_UNLOAD);
 05DE 84E0              ldi R24,4
 05E0 8A83              std y+2,R24
 05E2 84E1              ldi R24,20
 05E4 8883              std y+0,R24
 05E6 20E4              ldi R18,64
 05E8 05E0              ldi R16,5
 05EA 0E940000          xcall _SetMotRunPam
 05EE           ;                       MotAdjustPosition(MOT_CARD_UNLOAD,_POS_UNLOAD_OUT);     // 卡片装载小冲位置调整
 05EE 20E4              ldi R18,1600
 05F0 36E0              ldi R19,6
 05F2 05E0              ldi R16,5
 05F4 0E940000          xcall _MotAdjustPosition
 05F8           ;                       waitMotor0 = 1;
 05F8 81E0              ldi R24,1
 05FA 80930300          sts _waitMotor0,R24
 05FE           ;                       mainStep = 1;
 05FE 80930000          sts _mainStep,R24
 0602           ;                       break;
 0602 15C0              xjmp L74
 0604           L77:
 0604           ; 		case 1:
 0604           ; 			Uart0ReUnable;
 0604 8091C100          lds R24,193
 0608 8F7E              andi R24,239
 060A 8093C100          sts 193,R24
 060E           ;                       uart_Printf("%s\r\n",strM4108);
 060E 20E0              ldi R18,<_strM4108
 0610 30E0              ldi R19,>_strM4108
 0612 00E0              ldi R16,<L47
 0614 10E0              ldi R17,>L47
 0616 0E940000          xcall _uart_Printf
 061A           ;                       Uart0ReEnable;
 061A 8091C100          lds R24,193
 061E 8061              ori R24,16
 0620 8093C100          sts 193,R24
 0624           ;                       mainStep = 0;
 0624 2224              clr R2
 0626 20920000          sts _mainStep,R2
 062A           ;                       return 1;
 062A 01E0              ldi R16,1
 062C 01C0              xjmp L68
 062E           L74:
 062E           ; 			break;
 062E           ; 		default:
 062E           ; 			break;
 062E           ; 		}
 062E           ; 	return 0;
 062E 0027              clr R16
 0630           L68:
 0630                   .dbline 0 ; func end
 0630 2396              adiw R28,3
 0632 5991              ld R21,y+
 0634 4991              ld R20,y+
 0636 0895              ret
 0638           ;              n -> R16
                        .even
 0638           _SetLiquidPhotoAdjustNum::
 0638           ; }
 0638           ; 
 0638           ; static unsigned char LiquidPhoNum;
 0638           ; void SetLiquidPhotoAdjustNum(unsigned char n){
 0638           ; 	if(n>2)
 0638 82E0              ldi R24,2
 063A 8017              cp R24,R16
 063C 08F4              brsh L79
 063E           X36:
 063E           ; 		n = 2;
 063E 02E0              ldi R16,2
 0640           L79:
 0640           ; 	LiquidPhoNum = n;
 0640 00930300          sts _LiquidPhoNum,R16
 0644           L78:
 0644                   .dbline 0 ; func end
 0644 0895              ret
 0646           ;          pInfo -> R20,R21
 0646           ;     pInfoEvent -> R20,R21
                        .even
 0646           _LiquidPhotoAdj_Even::
 0646 0E940000          xcall push_xgsetF000
 064A A801              movw R20,R16
 064C 2697              sbiw R28,6
 064E           ; }
 064E           ; unsigned char LiquidPhotoAdj_Even(INFO_EVENT * pInfoEvent){
 064E           ;       unsigned char * pInfo;
 064E           ;       switch(mainStep){
 064E 60910000          lds R22,_mainStep
 0652 7727              clr R23
 0654 6130              cpi R22,1
 0656 E0E0              ldi R30,0
 0658 7E07              cpc R23,R30
 065A 09F0              breq L85
 065C           X37:
 065C 2EC0              xjmp L83
 065E           L85:
 065E           ; 		case 1:
 065E           ; 			if(pInfoEvent->event == INFO_LIQ_PHO_ADJ){
 065E FA01              movw R30,R20
 0660 8181              ldd R24,z+1
 0662 8B30              cpi R24,11
 0664 51F5              brne L83
 0666           X38:
 0666           ; 				pInfo = &(pInfoEvent->info[0]);
 0666 4E5F              subi R20,254  ; offset = 2
 0668 5F4F              sbci R21,255
 066A           ;                               if(*(pInfo) == LiquidPhoNum){
 066A 20900300          lds R2,_LiquidPhoNum
 066E FA01              movw R30,R20
 0670 3080              ldd R3,z+0
 0672 3214              cp R3,R2
 0674 11F5              brne L83
 0676           X39:
 0676           ; 					// 输出液路光耦调整结果
 0676           ; 					Uart0ReUnable;
 0676 8091C100          lds R24,193
 067A 8F7E              andi R24,239
 067C 8093C100          sts 193,R24
 0680           ;                                       uart_Printf("%s $%4d Num $%4d PWM $%4d Vol\r\n",strM4109, LiquidPhoNum, *(pInfo+1), *(pInfo+2));
 0680 2280              ldd R2,z+2
 0682 3324              clr R3
 0684 3D82              std y+5,R3
 0686 2C82              std y+4,R2
 0688 2180              ldd R2,z+1
 068A 3324              clr R3
 068C 3B82              std y+3,R3
 068E 2A82              std y+2,R2
 0690 20900300          lds R2,_LiquidPhoNum
 0694 3324              clr R3
 0696 3982              std y+1,R3
 0698 2882              std y+0,R2
 069A 20E0              ldi R18,<_strM4109
 069C 30E0              ldi R19,>_strM4109
 069E 00E0              ldi R16,<L90
 06A0 10E0              ldi R17,>L90
 06A2 0E940000          xcall _uart_Printf
 06A6           ;                                       Uart0ReEnable;
 06A6 8091C100          lds R24,193
 06AA 8061              ori R24,16
 06AC 8093C100          sts 193,R24
 06B0           ;                                       mainStep = 2;
 06B0 82E0              ldi R24,2
 06B2 80930000          sts _mainStep,R24
 06B6           ;                                       return 1;
 06B6 01E0              ldi R16,1
 06B8 01C0              xjmp L81
 06BA           L83:
 06BA           ; 					}
 06BA           ; 				}
 06BA           ; 			break;
 06BA           ; 		default:
 06BA           ; 			break;
 06BA           ; 		}
 06BA           ; 	return 0;
 06BA 0027              clr R16
 06BC           L81:
 06BC                   .dbline 0 ; func end
 06BC 2696              adiw R28,6
 06BE 0C940000          xjmp pop_xgsetF000
                        .even
 06C2           _LiquidPhotoAdjust::
 06C2 4A93              st -y,R20
 06C4 5A93              st -y,R21
 06C6 2297              sbiw R28,2
 06C8           ; }
 06C8           ; unsigned char LiquidPhotoAdjust(void){
 06C8           ;       switch(mainStep){
 06C8 40910000          lds R20,_mainStep
 06CC 5527              clr R21
 06CE 4030              cpi R20,0
 06D0 4507              cpc R20,R21
 06D2 29F0              breq L95
 06D4           X40:
 06D4 4230              cpi R20,2
 06D6 E0E0              ldi R30,0
 06D8 5E07              cpc R21,R30
 06DA 69F0              breq L96
 06DC           X41:
 06DC 26C0              xjmp L93
 06DE           L95:
 06DE           ; 		case 0:
 06DE           ; 			SetLiquidPhotoAdjust(LiquidPhoNum);
 06DE 00910300          lds R16,_LiquidPhoNum
 06E2 0E940000          xcall _SetLiquidPhotoAdjust
 06E6           ;                       mainStep = 1;
 06E6 81E0              ldi R24,1
 06E8 80930000          sts _mainStep,R24
 06EC           ;                       RegisterLiquidEvenProcess(LiquidPhotoAdj_Even);
 06EC 00E0              ldi R16,<PL_LiquidPhotoAdj_Even
 06EE 10E0              ldi R17,>PL_LiquidPhotoAdj_Even
 06F0 0E940000          xcall _RegisterLiquidEvenProcess
 06F4           ;                       break;
 06F4 1AC0              xjmp L93
 06F6           L96:
 06F6           ; 		case 2:
 06F6           ; 			Uart0ReUnable;
 06F6 8091C100          lds R24,193
 06FA 8F7E              andi R24,239
 06FC 8093C100          sts 193,R24
 0700           ;                       uart_Printf("%s $%4d\r\n",strM4110, LiquidPhoNum);
 0700 20900300          lds R2,_LiquidPhoNum
 0704 3324              clr R3
 0706 3982              std y+1,R3
 0708 2882              std y+0,R2
 070A 20E0              ldi R18,<_strM4110
 070C 30E0              ldi R19,>_strM4110
 070E 00E0              ldi R16,<L5
 0710 10E0              ldi R17,>L5
 0712 0E940000          xcall _uart_Printf
 0716           ;                       Uart0ReEnable;
 0716 8091C100          lds R24,193
 071A 8061              ori R24,16
 071C 8093C100          sts 193,R24
 0720           ;                       mainStep = 0;
 0720 2224              clr R2
 0722 20920000          sts _mainStep,R2
 0726           ;                       return 1;
 0726 01E0              ldi R16,1
 0728 01C0              xjmp L91
 072A           L93:
 072A           ; 			break;
 072A           ; 		default:
 072A           ; 			break;
 072A           ; 		}
 072A           ; 	return 0;
 072A 0027              clr R16
 072C           L91:
 072C                   .dbline 0 ; func end
 072C 2296              adiw R28,2
 072E 5991              ld R21,y+
 0730 4991              ld R20,y+
 0732 0895              ret
 0734           ;              n -> R16
                        .even
 0734           _SetCardStorePhotoAdjustNum::
 0734           ; }
 0734           ; 
 0734           ; static unsigned char CardStorePhoNum;
 0734           ; void SetCardStorePhotoAdjustNum(unsigned char n){
 0734           ; //	if(n>6)
 0734           ; //		n = 6;
 0734           ; 	if(n > 5)
 0734 85E0              ldi R24,5
 0736 8017              cp R24,R16
 0738 08F4              brsh L98
 073A           X42:
 073A           ; 		n = 5;
 073A 05E0              ldi R16,5
 073C           L98:
 073C           ; 	if(n == 0)
 073C 0023              tst R16
 073E 09F4              brne L100
 0740           X43:
 0740           ; 		n = 1;
 0740 01E0              ldi R16,1
 0742           L100:
 0742           ; 	CardStorePhoNum = n;
 0742 00930200          sts _CardStorePhoNum,R16
 0746           L97:
 0746                   .dbline 0 ; func end
 0746 0895              ret
 0748           ;          pInfo -> R20,R21
 0748           ;     pInfoEvent -> R20,R21
                        .even
 0748           _CardStorePhotoAdj_Even::
 0748 0E940000          xcall push_xgsetF000
 074C A801              movw R20,R16
 074E 2897              sbiw R28,8
 0750           ; }
 0750           ; unsigned char CardStorePhotoAdj_Even(INFO_EVENT * pInfoEvent){
 0750           ;       unsigned char * pInfo;
 0750           ;       switch(mainStep){
 0750 60910000          lds R22,_mainStep
 0754 7727              clr R23
 0756 6130              cpi R22,1
 0758 E0E0              ldi R30,0
 075A 7E07              cpc R23,R30
 075C 09F0              breq L106
 075E           X44:
 075E 2CC0              xjmp L104
 0760           L106:
 0760           ; 		case 1:
 0760           ; 			if(pInfoEvent->event == INFO_STORE_CAL){
 0760 FA01              movw R30,R20
 0762 8181              ldd R24,z+1
 0764 8A31              cpi R24,26
 0766 41F5              brne L104
 0768           X45:
 0768           ; 				pInfo = &(pInfoEvent->info[0]);
 0768 4E5F              subi R20,254  ; offset = 2
 076A 5F4F              sbci R21,255
 076C           ;               //              if(*(pInfo) == CardStorePhoNum){
 076C           ;                                       // 输出液路光耦调整结果
 076C           ;                                       Uart0ReUnable;
 076C 8091C100          lds R24,193
 0770 8F7E              andi R24,239
 0772 8093C100          sts 193,R24
 0776           ;                                       uart_Printf("%s $%4d $%4d $%4d $%4d\r\n",strM4111, (*(pInfo)), *(pInfo+1), *(pInfo+2), *(pInfo+3));
 0776 FA01              movw R30,R20
 0778 2380              ldd R2,z+3
 077A 3324              clr R3
 077C 3F82              std y+7,R3
 077E 2E82              std y+6,R2
 0780 2280              ldd R2,z+2
 0782 3324              clr R3
 0784 3D82              std y+5,R3
 0786 2C82              std y+4,R2
 0788 2180              ldd R2,z+1
 078A 3324              clr R3
 078C 3B82              std y+3,R3
 078E 2A82              std y+2,R2
 0790 2080              ldd R2,z+0
 0792 3324              clr R3
 0794 3982              std y+1,R3
 0796 2882              std y+0,R2
 0798 20E0              ldi R18,<_strM4111
 079A 30E0              ldi R19,>_strM4111
 079C 00E0              ldi R16,<L109
 079E 10E0              ldi R17,>L109
 07A0 0E940000          xcall _uart_Printf
 07A4           ;                                       Uart0ReEnable;
 07A4 8091C100          lds R24,193
 07A8 8061              ori R24,16
 07AA 8093C100          sts 193,R24
 07AE           ;                                       mainStep = 2;
 07AE 82E0              ldi R24,2
 07B0 80930000          sts _mainStep,R24
 07B4           ;                                       return 1;
 07B4 01E0              ldi R16,1
 07B6 01C0              xjmp L102
 07B8           L104:
 07B8           ; 		//			}
 07B8           ; 				}
 07B8           ; 			break;
 07B8           ; 		default:
 07B8           ; 			break;
 07B8           ; 		}
 07B8           ; 	return 0;
 07B8 0027              clr R16
 07BA           L102:
 07BA                   .dbline 0 ; func end
 07BA 2896              adiw R28,8
 07BC 0C940000          xjmp pop_xgsetF000
                        .even
 07C0           _CardStorePhotoAdjust::
 07C0 4A93              st -y,R20
 07C2 5A93              st -y,R21
 07C4 2297              sbiw R28,2
 07C6           ; }
 07C6           ; unsigned char CardStorePhotoAdjust(void){
 07C6           ;       switch(mainStep){
 07C6 40910000          lds R20,_mainStep
 07CA 5527              clr R21
 07CC 4030              cpi R20,0
 07CE 4507              cpc R20,R21
 07D0 29F0              breq L114
 07D2           X46:
 07D2 4230              cpi R20,2
 07D4 E0E0              ldi R30,0
 07D6 5E07              cpc R21,R30
 07D8 69F0              breq L115
 07DA           X47:
 07DA 26C0              xjmp L112
 07DC           L114:
 07DC           ; 		case 0:
 07DC           ; 			SetStoreCAL(CardStorePhoNum);
 07DC 00910200          lds R16,_CardStorePhoNum
 07E0 0E940000          xcall _SetStoreCAL
 07E4           ;                       mainStep = 1;
 07E4 81E0              ldi R24,1
 07E6 80930000          sts _mainStep,R24
 07EA           ;                       RegisterCardStoreEvenProcess(CardStorePhotoAdj_Even);
 07EA 00E0              ldi R16,<PL_CardStorePhotoAdj_Even
 07EC 10E0              ldi R17,>PL_CardStorePhotoAdj_Even
 07EE 0E940000          xcall _RegisterCardStoreEvenProcess
 07F2           ;                       break;
 07F2 1AC0              xjmp L112
 07F4           L115:
 07F4           ; 		case 2:
 07F4           ; 			Uart0ReUnable;
 07F4 8091C100          lds R24,193
 07F8 8F7E              andi R24,239
 07FA 8093C100          sts 193,R24
 07FE           ;                       uart_Printf("%s $%4d\r\n",strM4112, CardStorePhoNum);
 07FE 20900200          lds R2,_CardStorePhoNum
 0802 3324              clr R3
 0804 3982              std y+1,R3
 0806 2882              std y+0,R2
 0808 20E0              ldi R18,<_strM4112
 080A 30E0              ldi R19,>_strM4112
 080C 00E0              ldi R16,<L5
 080E 10E0              ldi R17,>L5
 0810 0E940000          xcall _uart_Printf
 0814           ;                       Uart0ReEnable;
 0814 8091C100          lds R24,193
 0818 8061              ori R24,16
 081A 8093C100          sts 193,R24
 081E           ;                       mainStep = 0;
 081E 2224              clr R2
 0820 20920000          sts _mainStep,R2
 0824           ;                       return 1;
 0824 01E0              ldi R16,1
 0826 01C0              xjmp L110
 0828           L112:
 0828           ; 			break;
 0828           ; 		default:
 0828           ; 			break;
 0828           ; 		}
 0828           ; 	return 0;
 0828 0027              clr R16
 082A           L110:
 082A                   .dbline 0 ; func end
 082A 2296              adiw R28,2
 082C 5991              ld R21,y+
 082E 4991              ld R20,y+
 0830 0895              ret
                        .even
 0832           _TurnPlateCheck::
 0832 4A93              st -y,R20
 0834 5A93              st -y,R21
 0836 2397              sbiw R28,3
 0838           ; }
 0838           ; unsigned char TurnPlateCheck(void){
 0838           ;       // 转盘测试
 0838           ;       if(WaitDelayTime(1))            return 0;
 0838 01E0              ldi R16,1
 083A 0E940000          xcall _WaitDelayTime
 083E 0023              tst R16
 0840 11F0              breq L117
 0842           X48:
 0842 0027              clr R16
 0844 7CC0              xjmp L116
 0846           L117:
 0846           ; 	if(waitMotor0){	if(GetMotState(MOT_TURN_PLATE)!=STA_SLAVE_FREE)	return 0;	waitMotor0 = 0;	}
 0846 20900300          lds R2,_waitMotor0
 084A 2220              tst R2
 084C 51F0              breq L119
 084E           X49:
 084E 01E0              ldi R16,1
 0850 0E940000          xcall _GetMotState
 0854 0130              cpi R16,1
 0856 11F0              breq L121
 0858           X50:
 0858 0027              clr R16
 085A 71C0              xjmp L116
 085C           L121:
 085C 2224              clr R2
 085E 20920300          sts _waitMotor0,R2
 0862           L119:
 0862           ; 
 0862           ; 	switch(mainStep){
 0862 40910000          lds R20,_mainStep
 0866 5527              clr R21
 0868 4030              cpi R20,0
 086A 4507              cpc R20,R21
 086C 99F0              breq L126
 086E           X51:
 086E 4130              cpi R20,1
 0870 E0E0              ldi R30,0
 0872 5E07              cpc R21,R30
 0874 01F1              breq L127
 0876           X52:
 0876 4230              cpi R20,2
 0878 E0E0              ldi R30,0
 087A 5E07              cpc R21,R30
 087C 41F1              breq L128
 087E           X53:
 087E 4330              cpi R20,3
 0880 E0E0              ldi R30,0
 0882 5E07              cpc R21,R30
 0884 09F4              brne X57
 0886 3CC0              xjmp L131
 0888           X57:
 0888           X54:
 0888 4430              cpi R20,4
 088A E0E0              ldi R30,0
 088C 5E07              cpc R21,R30
 088E 09F4              brne X58
 0890 40C0              xjmp L132
 0892           X58:
 0892           X55:
 0892 54C0              xjmp L124
 0894           L126:
 0894           ; 		case 0:
 0894           ; 			SetMotRunPam(MOT_TURN_PLATE,120,10,CURRENT_TURN_PLATE);
 0894 81E0              ldi R24,1
 0896 8A83              std y+2,R24
 0898 8AE0              ldi R24,10
 089A 8883              std y+0,R24
 089C 28E7              ldi R18,120
 089E 01E0              ldi R16,1
 08A0 0E940000          xcall _SetMotRunPam
 08A4           ;               //      MotRun(MOT_TURN_PLATE,8000);
 08A4           ;                       MotInitCheck(MOT_TURN_PLATE);
 08A4 01E0              ldi R16,1
 08A6 0E940000          xcall _MotInitCheck
 08AA           ;                       waitMotor0 = 1;
 08AA 81E0              ldi R24,1
 08AC 80930300          sts _waitMotor0,R24
 08B0           ;                       mainStep = 1;
 08B0 80930000          sts _mainStep,R24
 08B4           ;                       break;
 08B4 43C0              xjmp L124
 08B6           L127:
 08B6           ; 		case 1:
 08B6           ; 			SetDelayTime(1, 10);
 08B6 2AE0              ldi R18,10
 08B8 30E0              ldi R19,0
 08BA 01E0              ldi R16,1
 08BC 0E940000          xcall _SetDelayTime
 08C0           ;                       mainStep = 2;
 08C0 82E0              ldi R24,2
 08C2 80930000          sts _mainStep,R24
 08C6           ;                       subStep = 0;
 08C6 2224              clr R2
 08C8 20920200          sts _subStep,R2
 08CC           ;                       break;
 08CC 37C0              xjmp L124
 08CE           L128:
 08CE           ; 		case 2:
 08CE           ; 			subStep ++;
 08CE 80910200          lds R24,_subStep
 08D2 8F5F              subi R24,255    ; addi 1
 08D4 80930200          sts _subStep,R24
 08D8           ;                       if(subStep<30){
 08D8 8E31              cpi R24,30
 08DA 58F4              brsh L129
 08DC           X56:
 08DC           ; 				MotRunToSite(MOT_TURN_PLATE, subStep);
 08DC 282F              mov R18,R24
 08DE 01E0              ldi R16,1
 08E0 0E940000          xcall _MotRunToSite
 08E4           ;                               waitMotor0 = 1;
 08E4 81E0              ldi R24,1
 08E6 80930300          sts _waitMotor0,R24
 08EA           ;                               mainStep = 3;
 08EA 83E0              ldi R24,3
 08EC 80930000          sts _mainStep,R24
 08F0           ;                               }
 08F0 25C0              xjmp L124
 08F2           L129:
 08F2           ; 			else{
 08F2           ; 				waitMotor0 = 1;
 08F2 81E0              ldi R24,1
 08F4 80930300          sts _waitMotor0,R24
 08F8           ;                               mainStep = 4;
 08F8 84E0              ldi R24,4
 08FA 80930000          sts _mainStep,R24
 08FE           ;                               }
 08FE           ;                       break;
 08FE 1EC0              xjmp L124
 0900           L131:
 0900           ; 		case 3:
 0900           ; 			SetDelayTime(1, 5);
 0900 25E0              ldi R18,5
 0902 30E0              ldi R19,0
 0904 01E0              ldi R16,1
 0906 0E940000          xcall _SetDelayTime
 090A           ;                       mainStep = 2;
 090A 82E0              ldi R24,2
 090C 80930000          sts _mainStep,R24
 0910           ;                       break;
 0910 15C0              xjmp L124
 0912           L132:
 0912           ; 		case 4:
 0912           ; 			Uart0ReUnable;
 0912 8091C100          lds R24,193
 0916 8F7E              andi R24,239
 0918 8093C100          sts 193,R24
 091C           ;                       uart_Printf("%s\r\n",strM4120);
 091C 20E0              ldi R18,<_strM4120
 091E 30E0              ldi R19,>_strM4120
 0920 00E0              ldi R16,<L47
 0922 10E0              ldi R17,>L47
 0924 0E940000          xcall _uart_Printf
 0928           ;                       Uart0ReEnable;
 0928 8091C100          lds R24,193
 092C 8061              ori R24,16
 092E 8093C100          sts 193,R24
 0932           ;                       mainStep = 0;
 0932 2224              clr R2
 0934 20920000          sts _mainStep,R2
 0938           ;                       return 1;
 0938 01E0              ldi R16,1
 093A 01C0              xjmp L116
 093C           L124:
 093C           ; 			break;
 093C           ; 		default:
 093C           ; 			break;
 093C           ; 		}
 093C           ; 	return 0;
 093C 0027              clr R16
 093E           L116:
 093E                   .dbline 0 ; func end
 093E 2396              adiw R28,3
 0940 5991              ld R21,y+
 0942 4991              ld R20,y+
 0944 0895              ret
                        .even
 0946           _NeedleTurnCheck::
 0946 4A93              st -y,R20
 0948 5A93              st -y,R21
 094A 2397              sbiw R28,3
 094C           ; }
 094C           ; 
 094C           ; unsigned char NeedleTurnCheck(void){
 094C           ;       // 旋转臂测试
 094C           ;       if(WaitDelayTime(1))            return 0;
 094C 01E0              ldi R16,1
 094E 0E940000          xcall _WaitDelayTime
 0952 0023              tst R16
 0954 11F0              breq L134
 0956           X59:
 0956 0027              clr R16
 0958 C3C0              xjmp L133
 095A           L134:
 095A           ; 	if(waitMotor0){	if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 095A 20900300          lds R2,_waitMotor0
 095E 2220              tst R2
 0960 51F0              breq L136
 0962           X60:
 0962 02E0              ldi R16,2
 0964 0E940000          xcall _GetMotState
 0968 0130              cpi R16,1
 096A 11F0              breq L138
 096C           X61:
 096C 0027              clr R16
 096E B8C0              xjmp L133
 0970           L138:
 0970 2224              clr R2
 0972 20920300          sts _waitMotor0,R2
 0976           L136:
 0976           ; 	if(waitMotor1){	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotor1 = 0;	}
 0976 20900400          lds R2,_waitMotor1
 097A 2220              tst R2
 097C 59F0              breq L140
 097E           X62:
 097E 03E0              ldi R16,3
 0980 0E940000          xcall _GetMotState
 0984 402F              mov R20,R16
 0986 0130              cpi R16,1
 0988 11F0              breq L142
 098A           X63:
 098A 0027              clr R16
 098C A9C0              xjmp L133
 098E           L142:
 098E 2224              clr R2
 0990 20920400          sts _waitMotor1,R2
 0994           L140:
 0994           ; 
 0994           ; 	switch(mainStep){
 0994 40910000          lds R20,_mainStep
 0998 5527              clr R21
 099A 4030              cpi R20,0
 099C 4507              cpc R20,R21
 099E 49F1              breq L147
 09A0           X64:
 09A0 4130              cpi R20,1
 09A2 E0E0              ldi R30,0
 09A4 5E07              cpc R21,R30
 09A6 09F4              brne X73
 09A8 35C0              xjmp L148
 09AA           X73:
 09AA           X65:
 09AA 4230              cpi R20,2
 09AC E0E0              ldi R30,0
 09AE 5E07              cpc R21,R30
 09B0 09F4              brne X74
 09B2 42C0              xjmp L149
 09B4           X74:
 09B4           X66:
 09B4 4330              cpi R20,3
 09B6 E0E0              ldi R30,0
 09B8 5E07              cpc R21,R30
 09BA 09F4              brne X75
 09BC 46C0              xjmp L150
 09BE           X75:
 09BE           X67:
 09BE 4430              cpi R20,4
 09C0 E0E0              ldi R30,0
 09C2 5E07              cpc R21,R30
 09C4 09F4              brne X76
 09C6 4CC0              xjmp L151
 09C8           X76:
 09C8           X68:
 09C8 4530              cpi R20,5
 09CA E0E0              ldi R30,0
 09CC 5E07              cpc R21,R30
 09CE 09F4              brne X77
 09D0 50C0              xjmp L152
 09D2           X77:
 09D2           X69:
 09D2 4630              cpi R20,6
 09D4 E0E0              ldi R30,0
 09D6 5E07              cpc R21,R30
 09D8 09F4              brne X78
 09DA 57C0              xjmp L153
 09DC           X78:
 09DC           X70:
 09DC 4730              cpi R20,7
 09DE E0E0              ldi R30,0
 09E0 5E07              cpc R21,R30
 09E2 09F4              brne X79
 09E4 5BC0              xjmp L154
 09E6           X79:
 09E6           X71:
 09E6 4830              cpi R20,8
 09E8 E0E0              ldi R30,0
 09EA 5E07              cpc R21,R30
 09EC 09F4              brne X80
 09EE 62C0              xjmp L155
 09F0           X80:
 09F0           X72:
 09F0 76C0              xjmp L145
 09F2           L147:
 09F2           ; 		case 0:
 09F2           ; 			SetMotRunPam(MOT_SAMP_NEEDLE,240,10,CURRENT_SAMP_NEEDLE);
 09F2 83E0              ldi R24,3
 09F4 8A83              std y+2,R24
 09F6 8AE0              ldi R24,10
 09F8 8883              std y+0,R24
 09FA 20EF              ldi R18,240
 09FC 03E0              ldi R16,3
 09FE 0E940000          xcall _SetMotRunPam
 0A02           ;                       MotInitCheck(MOT_SAMP_NEEDLE);
 0A02 03E0              ldi R16,3
 0A04 0E940000          xcall _MotInitCheck
 0A08           ;                       waitMotor1 = 1;
 0A08 81E0              ldi R24,1
 0A0A 80930400          sts _waitMotor1,R24
 0A0E           ;                       mainStep = 1;
 0A0E 80930000          sts _mainStep,R24
 0A12           ;                       break;
 0A12 65C0              xjmp L145
 0A14           L148:
 0A14           ; 		case 1:
 0A14           ; 			SetMotRunPam(MOT_SAMP_TRUN,120,40,CURRENT_SAMP_TRUN);
 0A14 84E0              ldi R24,4
 0A16 8A83              std y+2,R24
 0A18 88E2              ldi R24,40
 0A1A 8883              std y+0,R24
 0A1C 28E7              ldi R18,120
 0A1E 02E0              ldi R16,2
 0A20 0E940000          xcall _SetMotRunPam
 0A24           ;                       MotInitCheck(MOT_SAMP_TRUN);
 0A24 02E0              ldi R16,2
 0A26 0E940000          xcall _MotInitCheck
 0A2A           ;                       waitMotor0 = 1;
 0A2A 81E0              ldi R24,1
 0A2C 80930300          sts _waitMotor0,R24
 0A30           ;                       mainStep = 2;
 0A30 82E0              ldi R24,2
 0A32 80930000          sts _mainStep,R24
 0A36           ;                       break;
 0A36 53C0              xjmp L145
 0A38           L149:
 0A38           ; 		case 2:
 0A38           ; 			SetDelayTime(1, 10);
 0A38 2AE0              ldi R18,10
 0A3A 30E0              ldi R19,0
 0A3C 01E0              ldi R16,1
 0A3E 0E940000          xcall _SetDelayTime
 0A42           ;                       mainStep = 3;
 0A42 83E0              ldi R24,3
 0A44 80930000          sts _mainStep,R24
 0A48           ;                       break;
 0A48 4AC0              xjmp L145
 0A4A           L150:
 0A4A           ; 		case 3:
 0A4A           ; 			MotRunTo(MOT_SAMP_TRUN, _POS_NEEDLE_ON_MIXSIDE);
 0A4A 2FE5              ldi R18,351
 0A4C 31E0              ldi R19,1
 0A4E 02E0              ldi R16,2
 0A50 0E940000          xcall _MotRunTo
 0A54           ;                       waitMotor0 = 1;
 0A54 81E0              ldi R24,1
 0A56 80930300          sts _waitMotor0,R24
 0A5A           ;                       mainStep = 4;
 0A5A 84E0              ldi R24,4
 0A5C 80930000          sts _mainStep,R24
 0A60           L151:
 0A60           ; 		case 4:
 0A60           ; 			SetDelayTime(1, 10);
 0A60 2AE0              ldi R18,10
 0A62 30E0              ldi R19,0
 0A64 01E0              ldi R16,1
 0A66 0E940000          xcall _SetDelayTime
 0A6A           ;                       mainStep = 5;
 0A6A 85E0              ldi R24,5
 0A6C 80930000          sts _mainStep,R24
 0A70           ;                       break;
 0A70 36C0              xjmp L145
 0A72           L152:
 0A72           ; 		case 5:
 0A72           ; 			MotRunTo(MOT_SAMP_TRUN, _POS_SAMPTURN_SAMP);
 0A72 24ED              ldi R18,980
 0A74 33E0              ldi R19,3
 0A76 02E0              ldi R16,2
 0A78 0E940000          xcall _MotRunTo
 0A7C           ;                       waitMotor0 = 1;
 0A7C 81E0              ldi R24,1
 0A7E 80930300          sts _waitMotor0,R24
 0A82           ;                       mainStep = 6;
 0A82 86E0              ldi R24,6
 0A84 80930000          sts _mainStep,R24
 0A88           ;                       break;
 0A88 2AC0              xjmp L145
 0A8A           L153:
 0A8A           ; 		case 6:
 0A8A           ; 			SetDelayTime(1, 10);
 0A8A 2AE0              ldi R18,10
 0A8C 30E0              ldi R19,0
 0A8E 01E0              ldi R16,1
 0A90 0E940000          xcall _SetDelayTime
 0A94           ;                       mainStep = 7;
 0A94 87E0              ldi R24,7
 0A96 80930000          sts _mainStep,R24
 0A9A           ;                       break;
 0A9A 21C0              xjmp L145
 0A9C           L154:
 0A9C           ; 		case 7:
 0A9C           ; 			MotRunTo(MOT_SAMP_TRUN, 0);
 0A9C 2227              clr R18
 0A9E 3327              clr R19
 0AA0 02E0              ldi R16,2
 0AA2 0E940000          xcall _MotRunTo
 0AA6           ;                       waitMotor0 = 1;
 0AA6 81E0              ldi R24,1
 0AA8 80930300          sts _waitMotor0,R24
 0AAC           ;                       mainStep = 8;
 0AAC 88E0              ldi R24,8
 0AAE 80930000          sts _mainStep,R24
 0AB2           ;                       break;
 0AB2 15C0              xjmp L145
 0AB4           L155:
 0AB4           ; 		case 8:
 0AB4           ; 			Uart0ReUnable;
 0AB4 8091C100          lds R24,193
 0AB8 8F7E              andi R24,239
 0ABA 8093C100          sts 193,R24
 0ABE           ;                       uart_Printf("%s\r\n",strM4121);
 0ABE 20E0              ldi R18,<_strM4121
 0AC0 30E0              ldi R19,>_strM4121
 0AC2 00E0              ldi R16,<L47
 0AC4 10E0              ldi R17,>L47
 0AC6 0E940000          xcall _uart_Printf
 0ACA           ;                       Uart0ReEnable;
 0ACA 8091C100          lds R24,193
 0ACE 8061              ori R24,16
 0AD0 8093C100          sts 193,R24
 0AD4           ;                       mainStep = 0;
 0AD4 2224              clr R2
 0AD6 20920000          sts _mainStep,R2
 0ADA           ;                       return 1;
 0ADA 01E0              ldi R16,1
 0ADC 01C0              xjmp L133
 0ADE           L145:
 0ADE           ; 			break;
 0ADE           ; 		default:
 0ADE           ; 			break;
 0ADE           ; 		}
 0ADE           ; 	return 0;
 0ADE 0027              clr R16
 0AE0           L133:
 0AE0                   .dbline 0 ; func end
 0AE0 2396              adiw R28,3
 0AE2 5991              ld R21,y+
 0AE4 4991              ld R20,y+
 0AE6 0895              ret
                        .even
 0AE8           _NeedleUpdownCheck::
 0AE8 4A93              st -y,R20
 0AEA 5A93              st -y,R21
 0AEC 2397              sbiw R28,3
 0AEE           ; }
 0AEE           ; 
 0AEE           ; unsigned char NeedleUpdownCheck(void){
 0AEE           ;       // 取样针上下运行测试
 0AEE           ;       if(WaitDelayTime(1))            return 0;
 0AEE 01E0              ldi R16,1
 0AF0 0E940000          xcall _WaitDelayTime
 0AF4 0023              tst R16
 0AF6 11F0              breq L157
 0AF8           X81:
 0AF8 0027              clr R16
 0AFA D5C0              xjmp L156
 0AFC           L157:
 0AFC           ; 	if(waitMotor0){	if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 0AFC 20900300          lds R2,_waitMotor0
 0B00 2220              tst R2
 0B02 51F0              breq L159
 0B04           X82:
 0B04 02E0              ldi R16,2
 0B06 0E940000          xcall _GetMotState
 0B0A 0130              cpi R16,1
 0B0C 11F0              breq L161
 0B0E           X83:
 0B0E 0027              clr R16
 0B10 CAC0              xjmp L156
 0B12           L161:
 0B12 2224              clr R2
 0B14 20920300          sts _waitMotor0,R2
 0B18           L159:
 0B18           ; 	if(waitMotor1){	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotor1 = 0;	}
 0B18 20900400          lds R2,_waitMotor1
 0B1C 2220              tst R2
 0B1E 59F0              breq L163
 0B20           X84:
 0B20 03E0              ldi R16,3
 0B22 0E940000          xcall _GetMotState
 0B26 402F              mov R20,R16
 0B28 0130              cpi R16,1
 0B2A 11F0              breq L165
 0B2C           X85:
 0B2C 0027              clr R16
 0B2E BBC0              xjmp L156
 0B30           L165:
 0B30 2224              clr R2
 0B32 20920400          sts _waitMotor1,R2
 0B36           L163:
 0B36           ; 
 0B36           ; 	switch(mainStep){
 0B36 40910000          lds R20,_mainStep
 0B3A 5527              clr R21
 0B3C 4030              cpi R20,0
 0B3E 4507              cpc R20,R21
 0B40 09F4              brne X96
 0B42 2EC0              xjmp L170
 0B44           X96:
 0B44           X86:
 0B44 4130              cpi R20,1
 0B46 E0E0              ldi R30,0
 0B48 5E07              cpc R21,R30
 0B4A 09F4              brne X97
 0B4C 3AC0              xjmp L171
 0B4E           X97:
 0B4E           X87:
 0B4E 4230              cpi R20,2
 0B50 E0E0              ldi R30,0
 0B52 5E07              cpc R21,R30
 0B54 09F4              brne X98
 0B56 47C0              xjmp L172
 0B58           X98:
 0B58           X88:
 0B58 4330              cpi R20,3
 0B5A E0E0              ldi R30,0
 0B5C 5E07              cpc R21,R30
 0B5E 09F4              brne X99
 0B60 4BC0              xjmp L173
 0B62           X99:
 0B62           X89:
 0B62 4430              cpi R20,4
 0B64 E0E0              ldi R30,0
 0B66 5E07              cpc R21,R30
 0B68 09F4              brne X100
 0B6A 51C0              xjmp L174
 0B6C           X100:
 0B6C           X90:
 0B6C 4530              cpi R20,5
 0B6E E0E0              ldi R30,0
 0B70 5E07              cpc R21,R30
 0B72 09F4              brne X101
 0B74 55C0              xjmp L175
 0B76           X101:
 0B76           X91:
 0B76 4630              cpi R20,6
 0B78 E0E0              ldi R30,0
 0B7A 5E07              cpc R21,R30
 0B7C 09F4              brne X102
 0B7E 5CC0              xjmp L176
 0B80           X102:
 0B80           X92:
 0B80 4730              cpi R20,7
 0B82 E0E0              ldi R30,0
 0B84 5E07              cpc R21,R30
 0B86 09F4              brne X103
 0B88 60C0              xjmp L177
 0B8A           X103:
 0B8A           X93:
 0B8A 4830              cpi R20,8
 0B8C E0E0              ldi R30,0
 0B8E 5E07              cpc R21,R30
 0B90 09F4              brne X104
 0B92 67C0              xjmp L178
 0B94           X104:
 0B94           X94:
 0B94 4930              cpi R20,9
 0B96 E0E0              ldi R30,0
 0B98 5E07              cpc R21,R30
 0B9A 09F4              brne X105
 0B9C 6EC0              xjmp L179
 0B9E           X105:
 0B9E           X95:
 0B9E 82C0              xjmp L168
 0BA0           L170:
 0BA0           ; 		case 0:
 0BA0           ; 			SetMotRunPam(MOT_SAMP_NEEDLE,240,10,CURRENT_SAMP_NEEDLE);
 0BA0 83E0              ldi R24,3
 0BA2 8A83              std y+2,R24
 0BA4 8AE0              ldi R24,10
 0BA6 8883              std y+0,R24
 0BA8 20EF              ldi R18,240
 0BAA 03E0              ldi R16,3
 0BAC 0E940000          xcall _SetMotRunPam
 0BB0           ;                       MotInitCheck(MOT_SAMP_NEEDLE);
 0BB0 03E0              ldi R16,3
 0BB2 0E940000          xcall _MotInitCheck
 0BB6           ;                       waitMotor1 = 1;
 0BB6 81E0              ldi R24,1
 0BB8 80930400          sts _waitMotor1,R24
 0BBC           ;                       mainStep = 1;
 0BBC 80930000          sts _mainStep,R24
 0BC0           ;                       break;
 0BC0 71C0              xjmp L168
 0BC2           L171:
 0BC2           ; 		case 1:
 0BC2           ; 			SetMotRunPam(MOT_SAMP_TRUN,120,10,CURRENT_SAMP_TRUN);
 0BC2 84E0              ldi R24,4
 0BC4 8A83              std y+2,R24
 0BC6 8AE0              ldi R24,10
 0BC8 8883              std y+0,R24
 0BCA 28E7              ldi R18,120
 0BCC 02E0              ldi R16,2
 0BCE 0E940000          xcall _SetMotRunPam
 0BD2           ;                       MotInitCheck(MOT_SAMP_TRUN);
 0BD2 02E0              ldi R16,2
 0BD4 0E940000          xcall _MotInitCheck
 0BD8           ;                       waitMotor0 = 1;
 0BD8 81E0              ldi R24,1
 0BDA 80930300          sts _waitMotor0,R24
 0BDE           ;                       mainStep = 2;
 0BDE 82E0              ldi R24,2
 0BE0 80930000          sts _mainStep,R24
 0BE4           ;                       break;
 0BE4 5FC0              xjmp L168
 0BE6           L172:
 0BE6           ; 		case 2:
 0BE6           ; 			SetDelayTime(1, 10);
 0BE6 2AE0              ldi R18,10
 0BE8 30E0              ldi R19,0
 0BEA 01E0              ldi R16,1
 0BEC 0E940000          xcall _SetDelayTime
 0BF0           ;                       mainStep = 3;
 0BF0 83E0              ldi R24,3
 0BF2 80930000          sts _mainStep,R24
 0BF6           ;                       break;
 0BF6 56C0              xjmp L168
 0BF8           L173:
 0BF8           ; 		case 3:
 0BF8           ; 			MotRunTo(MOT_SAMP_TRUN, _POS_SAMPTURN_SAMP);
 0BF8 24ED              ldi R18,980
 0BFA 33E0              ldi R19,3
 0BFC 02E0              ldi R16,2
 0BFE 0E940000          xcall _MotRunTo
 0C02           ;                       waitMotor0 = 1;
 0C02 81E0              ldi R24,1
 0C04 80930300          sts _waitMotor0,R24
 0C08           ;                       mainStep = 4;
 0C08 84E0              ldi R24,4
 0C0A 80930000          sts _mainStep,R24
 0C0E           L174:
 0C0E           ; 		case 4:
 0C0E           ; 			SetDelayTime(1, 10);
 0C0E 2AE0              ldi R18,10
 0C10 30E0              ldi R19,0
 0C12 01E0              ldi R16,1
 0C14 0E940000          xcall _SetDelayTime
 0C18           ;                       mainStep = 5;
 0C18 85E0              ldi R24,5
 0C1A 80930000          sts _mainStep,R24
 0C1E           ;                       break;
 0C1E 42C0              xjmp L168
 0C20           L175:
 0C20           ; 		case 5:
 0C20           ; 			MotRunTo(MOT_SAMP_NEEDLE, _POS_SAMP_DOWN);
 0C20 28EA              ldi R18,1960
 0C22 37E0              ldi R19,7
 0C24 03E0              ldi R16,3
 0C26 0E940000          xcall _MotRunTo
 0C2A           ;                       waitMotor1 = 1;
 0C2A 81E0              ldi R24,1
 0C2C 80930400          sts _waitMotor1,R24
 0C30           ;                       mainStep = 6;
 0C30 86E0              ldi R24,6
 0C32 80930000          sts _mainStep,R24
 0C36           ;                       break;
 0C36 36C0              xjmp L168
 0C38           L176:
 0C38           ; 		case 6:
 0C38           ; 			SetDelayTime(1, 10);
 0C38 2AE0              ldi R18,10
 0C3A 30E0              ldi R19,0
 0C3C 01E0              ldi R16,1
 0C3E 0E940000          xcall _SetDelayTime
 0C42           ;                       mainStep = 7;
 0C42 87E0              ldi R24,7
 0C44 80930000          sts _mainStep,R24
 0C48           ;                       break;
 0C48 2DC0              xjmp L168
 0C4A           L177:
 0C4A           ; 		case 7:
 0C4A           ; 			MotRunTo(MOT_SAMP_NEEDLE, 0);
 0C4A 2227              clr R18
 0C4C 3327              clr R19
 0C4E 03E0              ldi R16,3
 0C50 0E940000          xcall _MotRunTo
 0C54           ;                       waitMotor1 = 1;
 0C54 81E0              ldi R24,1
 0C56 80930400          sts _waitMotor1,R24
 0C5A           ;                       mainStep = 8;
 0C5A 88E0              ldi R24,8
 0C5C 80930000          sts _mainStep,R24
 0C60           ;                       break;
 0C60 21C0              xjmp L168
 0C62           L178:
 0C62           ; 		case 8:
 0C62           ; 			MotRunTo(MOT_SAMP_TRUN, 0);
 0C62 2227              clr R18
 0C64 3327              clr R19
 0C66 02E0              ldi R16,2
 0C68 0E940000          xcall _MotRunTo
 0C6C           ;                       waitMotor0 = 1;
 0C6C 81E0              ldi R24,1
 0C6E 80930300          sts _waitMotor0,R24
 0C72           ;                       mainStep = 9;
 0C72 89E0              ldi R24,9
 0C74 80930000          sts _mainStep,R24
 0C78           ;                       break;
 0C78 15C0              xjmp L168
 0C7A           L179:
 0C7A           ; 		case 9:
 0C7A           ; 			Uart0ReUnable;
 0C7A 8091C100          lds R24,193
 0C7E 8F7E              andi R24,239
 0C80 8093C100          sts 193,R24
 0C84           ;                       uart_Printf("%s\r\n",strM4122);
 0C84 20E0              ldi R18,<_strM4122
 0C86 30E0              ldi R19,>_strM4122
 0C88 00E0              ldi R16,<L47
 0C8A 10E0              ldi R17,>L47
 0C8C 0E940000          xcall _uart_Printf
 0C90           ;                       Uart0ReEnable;
 0C90 8091C100          lds R24,193
 0C94 8061              ori R24,16
 0C96 8093C100          sts 193,R24
 0C9A           ;                       mainStep = 0;
 0C9A 2224              clr R2
 0C9C 20920000          sts _mainStep,R2
 0CA0           ;                       return 1;
 0CA0 01E0              ldi R16,1
 0CA2 01C0              xjmp L156
 0CA4           L168:
 0CA4           ; 			break;
 0CA4           ; 		default:
 0CA4           ; 			break;
 0CA4           ; 		}
 0CA4           ; 	return 0;
 0CA4 0027              clr R16
 0CA6           L156:
 0CA6                   .dbline 0 ; func end
 0CA6 2396              adiw R28,3
 0CA8 5991              ld R21,y+
 0CAA 4991              ld R20,y+
 0CAC 0895              ret
                        .even
 0CAE           _CardStoreMoveCheck::
 0CAE 4A93              st -y,R20
 0CB0 5A93              st -y,R21
 0CB2 2397              sbiw R28,3
 0CB4           ; }
 0CB4           ; 
 0CB4           ; unsigned char CardStoreMoveCheck(void){
 0CB4           ;       // 片仓小车运行测试
 0CB4           ;       if(WaitDelayTime(1))            return 0;
 0CB4 01E0              ldi R16,1
 0CB6 0E940000          xcall _WaitDelayTime
 0CBA 0023              tst R16
 0CBC 11F0              breq L181
 0CBE           X106:
 0CBE 0027              clr R16
 0CC0 B8C0              xjmp L180
 0CC2           L181:
 0CC2           ; 	if(waitMotor0){	if(GetMotState(MOT_STORE_CARD_MOVE)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 0CC2 20900300          lds R2,_waitMotor0
 0CC6 2220              tst R2
 0CC8 51F0              breq L183
 0CCA           X107:
 0CCA 08E0              ldi R16,8
 0CCC 0E940000          xcall _GetMotState
 0CD0 0130              cpi R16,1
 0CD2 11F0              breq L185
 0CD4           X108:
 0CD4 0027              clr R16
 0CD6 ADC0              xjmp L180
 0CD8           L185:
 0CD8 2224              clr R2
 0CDA 20920300          sts _waitMotor0,R2
 0CDE           L183:
 0CDE           ; 
 0CDE           ; 	switch(mainStep)
 0CDE 40910000          lds R20,_mainStep
 0CE2 5527              clr R21
 0CE4 4431              cpi R20,20
 0CE6 E0E0              ldi R30,0
 0CE8 5E07              cpc R21,R30
 0CEA 09F4              brne X121
 0CEC 54C0              xjmp L195
 0CEE           X121:
 0CEE           X109:
 0CEE 84E1              ldi R24,20
 0CF0 90E0              ldi R25,0
 0CF2 8417              cp R24,R20
 0CF4 9507              cpc R25,R21
 0CF6 E4F0              brlt L204
 0CF8           X110:
 0CF8           L203:
 0CF8 4030              cpi R20,0
 0CFA 4507              cpc R20,R21
 0CFC 21F1              breq L190
 0CFE           X111:
 0CFE 4130              cpi R20,1
 0D00 E0E0              ldi R30,0
 0D02 5E07              cpc R21,R30
 0D04 81F1              breq L191
 0D06           X112:
 0D06 4230              cpi R20,2
 0D08 E0E0              ldi R30,0
 0D0A 5E07              cpc R21,R30
 0D0C 09F4              brne X122
 0D0E 34C0              xjmp L192
 0D10           X122:
 0D10           X113:
 0D10 4330              cpi R20,3
 0D12 E0E0              ldi R30,0
 0D14 5E07              cpc R21,R30
 0D16 09F4              brne X123
 0D18 49C0              xjmp L196
 0D1A           X123:
 0D1A           X114:
 0D1A 4430              cpi R20,4
 0D1C E0E0              ldi R30,0
 0D1E 5E07              cpc R21,R30
 0D20 09F4              brne X124
 0D22 4DC0              xjmp L197
 0D24           X124:
 0D24           X115:
 0D24 4530              cpi R20,5
 0D26 E0E0              ldi R30,0
 0D28 5E07              cpc R21,R30
 0D2A 09F4              brne X125
 0D2C 6CC0              xjmp L202
 0D2E           X125:
 0D2E           X116:
 0D2E 80C0              xjmp L188
 0D30           L204:
 0D30 4233              cpi R20,50
 0D32 E0E0              ldi R30,0
 0D34 5E07              cpc R21,R30
 0D36 09F4              brne X126
 0D38 4EC0              xjmp L198
 0D3A           X126:
 0D3A           X117:
 0D3A 4333              cpi R20,51
 0D3C E0E0              ldi R30,0
 0D3E 5E07              cpc R21,R30
 0D40 09F4              brne X127
 0D42 52C0              xjmp L199
 0D44           X127:
 0D44           X118:
 0D44 75C0              xjmp L188
 0D46           L190:
 0D46           ; 	{
 0D46           ; 		case 0:
 0D46           ; 			SetMotRunPam(MOT_STORE_CARD_MOVE,160,10,CURRENT_STORE_MOVE);
 0D46 8AE0              ldi R24,10
 0D48 8A83              std y+2,R24
 0D4A 8883              std y+0,R24
 0D4C 20EA              ldi R18,160
 0D4E 08E0              ldi R16,8
 0D50 0E940000          xcall _SetMotRunPam
 0D54           ;                       MotInitCheck(MOT_STORE_CARD_MOVE);
 0D54 08E0              ldi R16,8
 0D56 0E940000          xcall _MotInitCheck
 0D5A           ;                       waitMotor0 = 1;
 0D5A 81E0              ldi R24,1
 0D5C 80930300          sts _waitMotor0,R24
 0D60           ;                       mainStep = 1;
 0D60 80930000          sts _mainStep,R24
 0D64           ;                       break;
 0D64 65C0              xjmp L188
 0D66           L191:
 0D66           ; 		case 1:
 0D66           ; 			SetDelayTime(1, 5);
 0D66 25E0              ldi R18,5
 0D68 30E0              ldi R19,0
 0D6A 01E0              ldi R16,1
 0D6C 0E940000          xcall _SetDelayTime
 0D70           ;                       mainStep = 2;
 0D70 82E0              ldi R24,2
 0D72 80930000          sts _mainStep,R24
 0D76           ;                       break;
 0D76 5CC0              xjmp L188
 0D78           L192:
 0D78           ; 		case 2:
 0D78           ; 			if(GetMotorMonitorState(MOT_STORE_CARD_MOVE,ZeroMonitor) == 1)		// 判断取片小车是否回到零位
 0D78 2227              clr R18
 0D7A 08E0              ldi R16,8
 0D7C 0E940000          xcall _GetMotorMonitorState
 0D80 402F              mov R20,R16
 0D82 0130              cpi R16,1
 0D84 21F4              brne L193
 0D86           X119:
 0D86           ; 			{
 0D86           ; 				mainStep = 20;
 0D86 84E1              ldi R24,20
 0D88 80930000          sts _mainStep,R24
 0D8C           ;                       }
 0D8C 51C0              xjmp L188
 0D8E           L193:
 0D8E           ; 			else
 0D8E           ; 			{
 0D8E           ; 				mainStep = 0;
 0D8E 2224              clr R2
 0D90 20920000          sts _mainStep,R2
 0D94           ;                       }
 0D94           ;                       break;
 0D94 4DC0              xjmp L188
 0D96           L195:
 0D96           ; 		case 20:
 0D96           ; 			MotRunTo(MOT_STORE_CARD_MOVE, 2550);
 0D96 26EF              ldi R18,2550
 0D98 39E0              ldi R19,9
 0D9A 08E0              ldi R16,8
 0D9C 0E940000          xcall _MotRunTo
 0DA0           ;                       waitMotor0 = 1;
 0DA0 81E0              ldi R24,1
 0DA2 80930300          sts _waitMotor0,R24
 0DA6           ;                       mainStep = 3;
 0DA6 83E0              ldi R24,3
 0DA8 80930000          sts _mainStep,R24
 0DAC           L196:
 0DAC           ; 		case 3:
 0DAC           ; 			SetDelayTime(1, 10);
 0DAC 2AE0              ldi R18,10
 0DAE 30E0              ldi R19,0
 0DB0 01E0              ldi R16,1
 0DB2 0E940000          xcall _SetDelayTime
 0DB6           ;                       mainStep = 4;
 0DB6 84E0              ldi R24,4
 0DB8 80930000          sts _mainStep,R24
 0DBC           ;                       break;
 0DBC 39C0              xjmp L188
 0DBE           L197:
 0DBE           ; 		case 4:
 0DBE           ; 			MotRunTo(MOT_STORE_CARD_MOVE, 0);
 0DBE 2227              clr R18
 0DC0 3327              clr R19
 0DC2 08E0              ldi R16,8
 0DC4 0E940000          xcall _MotRunTo
 0DC8           ;                       waitMotor0 = 1;
 0DC8 81E0              ldi R24,1
 0DCA 80930300          sts _waitMotor0,R24
 0DCE           ;                       mainStep = 50;
 0DCE 82E3              ldi R24,50
 0DD0 80930000          sts _mainStep,R24
 0DD4           ;                       break;
 0DD4 2DC0              xjmp L188
 0DD6           L198:
 0DD6           ; 		case 50:
 0DD6           ; 			SetDelayTime(1, 5);
 0DD6 25E0              ldi R18,5
 0DD8 30E0              ldi R19,0
 0DDA 01E0              ldi R16,1
 0DDC 0E940000          xcall _SetDelayTime
 0DE0           ;                       mainStep = 51;
 0DE0 83E3              ldi R24,51
 0DE2 80930000          sts _mainStep,R24
 0DE6           ;                       break;
 0DE6 24C0              xjmp L188
 0DE8           L199:
 0DE8           ; 		case 51:
 0DE8           ; 			if(GetMotorMonitorState(MOT_STORE_CARD_MOVE,ZeroMonitor) == 1)		// 判断取片小车是否回到零位
 0DE8 2227              clr R18
 0DEA 08E0              ldi R16,8
 0DEC 0E940000          xcall _GetMotorMonitorState
 0DF0 402F              mov R20,R16
 0DF2 0130              cpi R16,1
 0DF4 21F4              brne L200
 0DF6           X120:
 0DF6           ; 			{
 0DF6           ; 				mainStep = 5;
 0DF6 85E0              ldi R24,5
 0DF8 80930000          sts _mainStep,R24
 0DFC           ;                       }
 0DFC 19C0              xjmp L188
 0DFE           L200:
 0DFE           ; 			else
 0DFE           ; 			{
 0DFE           ; 				mainStep = 4;
 0DFE 84E0              ldi R24,4
 0E00 80930000          sts _mainStep,R24
 0E04           ;                       }
 0E04           ;                       break;
 0E04 15C0              xjmp L188
 0E06           L202:
 0E06           ; 		case 5:
 0E06           ; 			Uart0ReUnable;
 0E06 8091C100          lds R24,193
 0E0A 8F7E              andi R24,239
 0E0C 8093C100          sts 193,R24
 0E10           ;                       uart_Printf("%s\r\n",strM4123);
 0E10 20E0              ldi R18,<_strM4123
 0E12 30E0              ldi R19,>_strM4123
 0E14 00E0              ldi R16,<L47
 0E16 10E0              ldi R17,>L47
 0E18 0E940000          xcall _uart_Printf
 0E1C           ;                       Uart0ReEnable;
 0E1C 8091C100          lds R24,193
 0E20 8061              ori R24,16
 0E22 8093C100          sts 193,R24
 0E26           ;                       mainStep = 0;
 0E26 2224              clr R2
 0E28 20920000          sts _mainStep,R2
 0E2C           ;                       return 1;
 0E2C 01E0              ldi R16,1
 0E2E 01C0              xjmp L180
 0E30           L188:
 0E30           ; 			break;
 0E30           ; 		default:
 0E30           ; 			break;
 0E30           ; 		}
 0E30           ; 	return 0;
 0E30 0027              clr R16
 0E32           L180:
 0E32                   .dbline 0 ; func end
 0E32 2396              adiw R28,3
 0E34 5991              ld R21,y+
 0E36 4991              ld R20,y+
 0E38 0895              ret
                        .even
 0E3A           _CardTakeHookCheck::
 0E3A 0E940000          xcall push_xgset300C
 0E3E 2397              sbiw R28,3
 0E40           ; }
 0E40           ; 
 0E40           ; unsigned char CardTakeHookCheck(void){
 0E40           ;       // 片仓取片钩子运行测试
 0E40           ;       if(WaitDelayTime(1))            return 0;
 0E40 01E0              ldi R16,1
 0E42 0E940000          xcall _WaitDelayTime
 0E46 0023              tst R16
 0E48 11F0              breq L206
 0E4A           X128:
 0E4A 0027              clr R16
 0E4C A2C0              xjmp L205
 0E4E           L206:
 0E4E           ; 	if(waitMotor0){	if(GetMotState(MOT_STORE_CARD_MOVE)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 0E4E 20900300          lds R2,_waitMotor0
 0E52 2220              tst R2
 0E54 51F0              breq L208
 0E56           X129:
 0E56 08E0              ldi R16,8
 0E58 0E940000          xcall _GetMotState
 0E5C 0130              cpi R16,1
 0E5E 11F0              breq L210
 0E60           X130:
 0E60 0027              clr R16
 0E62 97C0              xjmp L205
 0E64           L210:
 0E64 2224              clr R2
 0E66 20920300          sts _waitMotor0,R2
 0E6A           L208:
 0E6A           ; 
 0E6A           ; 	switch(mainStep){
 0E6A 40910000          lds R20,_mainStep
 0E6E 5527              clr R21
 0E70 4030              cpi R20,0
 0E72 4507              cpc R20,R21
 0E74 19F1              breq L215
 0E76           X131:
 0E76 4130              cpi R20,1
 0E78 E0E0              ldi R30,0
 0E7A 5E07              cpc R21,R30
 0E7C 79F1              breq L216
 0E7E           X132:
 0E7E 4230              cpi R20,2
 0E80 E0E0              ldi R30,0
 0E82 5E07              cpc R21,R30
 0E84 09F4              brne X139
 0E86 33C0              xjmp L217
 0E88           X139:
 0E88           X133:
 0E88 4330              cpi R20,3
 0E8A E0E0              ldi R30,0
 0E8C 5E07              cpc R21,R30
 0E8E 09F4              brne X140
 0E90 3DC0              xjmp L218
 0E92           X140:
 0E92           X134:
 0E92 4430              cpi R20,4
 0E94 E0E0              ldi R30,0
 0E96 5E07              cpc R21,R30
 0E98 09F4              brne X141
 0E9A 41C0              xjmp L219
 0E9C           X141:
 0E9C           X135:
 0E9C 4530              cpi R20,5
 0E9E E0E0              ldi R30,0
 0EA0 5E07              cpc R21,R30
 0EA2 09F4              brne X142
 0EA4 48C0              xjmp L220
 0EA6           X142:
 0EA6           X136:
 0EA6 4630              cpi R20,6
 0EA8 E0E0              ldi R30,0
 0EAA 5E07              cpc R21,R30
 0EAC 09F4              brne X143
 0EAE 4FC0              xjmp L221
 0EB0           X143:
 0EB0           X137:
 0EB0 4730              cpi R20,7
 0EB2 E0E0              ldi R30,0
 0EB4 5E07              cpc R21,R30
 0EB6 09F4              brne X144
 0EB8 56C0              xjmp L222
 0EBA           X144:
 0EBA           X138:
 0EBA 6AC0              xjmp L213
 0EBC           L215:
 0EBC           ; 		case 0:
 0EBC           ; 			SetMotRunPam(MOT_STORE_CARD_MOVE,160,10,CURRENT_STORE_MOVE);
 0EBC 8AE0              ldi R24,10
 0EBE 8A83              std y+2,R24
 0EC0 8883              std y+0,R24
 0EC2 20EA              ldi R18,160
 0EC4 08E0              ldi R16,8
 0EC6 0E940000          xcall _SetMotRunPam
 0ECA           ;                       MotInitCheck(MOT_STORE_CARD_MOVE);
 0ECA 08E0              ldi R16,8
 0ECC 0E940000          xcall _MotInitCheck
 0ED0           ;                       waitMotor0 = 1;
 0ED0 81E0              ldi R24,1
 0ED2 80930300          sts _waitMotor0,R24
 0ED6           ;                       mainStep = 1;
 0ED6 80930000          sts _mainStep,R24
 0EDA           ;                       break;
 0EDA 5AC0              xjmp L213
 0EDC           L216:
 0EDC           ; 		case 1:
 0EDC           ; 			SetDelayTime(1, 5);
 0EDC 25E0              ldi R18,5
 0EDE 30E0              ldi R19,0
 0EE0 01E0              ldi R16,1
 0EE2 0E940000          xcall _SetDelayTime
 0EE6           ;                       mainStep = 2;
 0EE6 82E0              ldi R24,2
 0EE8 80930000          sts _mainStep,R24
 0EEC           ;                       break;
 0EEC 51C0              xjmp L213
 0EEE           L217:
 0EEE           ; 		case 2:
 0EEE           ; 			MotRunTo(MOT_STORE_CARD_MOVE, CalCardStorePos(1));
 0EEE 01E0              ldi R16,1
 0EF0 10E0              ldi R17,0
 0EF2 0E940000          xcall _CalCardStorePos
 0EF6 5801              movw R10,R16
 0EF8 9501              movw R18,R10
 0EFA 08E0              ldi R16,8
 0EFC 0E940000          xcall _MotRunTo
 0F00           ;                       waitMotor0 = 1;
 0F00 81E0              ldi R24,1
 0F02 80930300          sts _waitMotor0,R24
 0F06           ;                       mainStep = 3;
 0F06 83E0              ldi R24,3
 0F08 80930000          sts _mainStep,R24
 0F0C           L218:
 0F0C           ; 		case 3:
 0F0C           ; 			SetDelayTime(1, 5);
 0F0C 25E0              ldi R18,5
 0F0E 30E0              ldi R19,0
 0F10 01E0              ldi R16,1
 0F12 0E940000          xcall _SetDelayTime
 0F16           ;                       mainStep = 4;
 0F16 84E0              ldi R24,4
 0F18 80930000          sts _mainStep,R24
 0F1C           ;                       break;
 0F1C 39C0              xjmp L213
 0F1E           L219:
 0F1E           ; 		case 4:
 0F1E           ; 			SetCardTrolleyState(1);	// 钩片抬起
 0F1E 01E0              ldi R16,1
 0F20 0E940000          xcall _SetCardTrolleyState
 0F24           ;                       SetDelayTime(1, 20);
 0F24 24E1              ldi R18,20
 0F26 30E0              ldi R19,0
 0F28 01E0              ldi R16,1
 0F2A 0E940000          xcall _SetDelayTime
 0F2E           ;                       mainStep = 5;
 0F2E 85E0              ldi R24,5
 0F30 80930000          sts _mainStep,R24
 0F34           ;                       break;
 0F34 2DC0              xjmp L213
 0F36           L220:
 0F36           ; 		case 5:
 0F36           ; 			SetCardTrolleyState(0);
 0F36 0027              clr R16
 0F38 0E940000          xcall _SetCardTrolleyState
 0F3C           ;                       SetDelayTime(1, 5);
 0F3C 25E0              ldi R18,5
 0F3E 30E0              ldi R19,0
 0F40 01E0              ldi R16,1
 0F42 0E940000          xcall _SetDelayTime
 0F46           ;                       mainStep = 6;
 0F46 86E0              ldi R24,6
 0F48 80930000          sts _mainStep,R24
 0F4C           ;                       break;
 0F4C 21C0              xjmp L213
 0F4E           L221:
 0F4E           ; 		case 6:
 0F4E           ; 			MotRunTo(MOT_STORE_CARD_MOVE, 0);
 0F4E 2227              clr R18
 0F50 3327              clr R19
 0F52 08E0              ldi R16,8
 0F54 0E940000          xcall _MotRunTo
 0F58           ;                       waitMotor0 = 1;
 0F58 81E0              ldi R24,1
 0F5A 80930300          sts _waitMotor0,R24
 0F5E           ;                       mainStep = 7;
 0F5E 87E0              ldi R24,7
 0F60 80930000          sts _mainStep,R24
 0F64           ;                       break;
 0F64 15C0              xjmp L213
 0F66           L222:
 0F66           ; 		case 7:
 0F66           ; 			Uart0ReUnable;
 0F66 8091C100          lds R24,193
 0F6A 8F7E              andi R24,239
 0F6C 8093C100          sts 193,R24
 0F70           ;                       uart_Printf("%s\r\n",strM4124);
 0F70 20E0              ldi R18,<_strM4124
 0F72 30E0              ldi R19,>_strM4124
 0F74 00E0              ldi R16,<L47
 0F76 10E0              ldi R17,>L47
 0F78 0E940000          xcall _uart_Printf
 0F7C           ;                       Uart0ReEnable;
 0F7C 8091C100          lds R24,193
 0F80 8061              ori R24,16
 0F82 8093C100          sts 193,R24
 0F86           ;                       mainStep = 0;
 0F86 2224              clr R2
 0F88 20920000          sts _mainStep,R2
 0F8C           ;                       return 1;
 0F8C 01E0              ldi R16,1
 0F8E 01C0              xjmp L205
 0F90           L213:
 0F90           ; 			break;
 0F90           ; 		default:
 0F90           ; 			break;
 0F90           ; 		}
 0F90           ; 	return 0;
 0F90 0027              clr R16
 0F92           L205:
 0F92                   .dbline 0 ; func end
 0F92 2396              adiw R28,3
 0F94 0C940000          xjmp pop_xgset300C
                        .even
 0F98           _CardLoadCheck::
 0F98 4A93              st -y,R20
 0F9A 5A93              st -y,R21
 0F9C 2397              sbiw R28,3
 0F9E           ; }
 0F9E           ; 
 0F9E           ; unsigned char CardLoadCheck(void){
 0F9E           ;       // 卡片装载小车运行测试
 0F9E           ;       if(WaitDelayTime(1))            return 0;
 0F9E 01E0              ldi R16,1
 0FA0 0E940000          xcall _WaitDelayTime
 0FA4 0023              tst R16
 0FA6 11F0              breq L224
 0FA8           X145:
 0FA8 0027              clr R16
 0FAA B8C0              xjmp L223
 0FAC           L224:
 0FAC           ; 	if(waitMotor0){	if(GetMotState(MOT_CARD_LOAD)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 0FAC 20900300          lds R2,_waitMotor0
 0FB0 2220              tst R2
 0FB2 51F0              breq L226
 0FB4           X146:
 0FB4 04E0              ldi R16,4
 0FB6 0E940000          xcall _GetMotState
 0FBA 0130              cpi R16,1
 0FBC 11F0              breq L228
 0FBE           X147:
 0FBE 0027              clr R16
 0FC0 ADC0              xjmp L223
 0FC2           L228:
 0FC2 2224              clr R2
 0FC4 20920300          sts _waitMotor0,R2
 0FC8           L226:
 0FC8           ; 
 0FC8           ; 	switch(mainStep){
 0FC8 40910000          lds R20,_mainStep
 0FCC 5527              clr R21
 0FCE 4431              cpi R20,20
 0FD0 E0E0              ldi R30,0
 0FD2 5E07              cpc R21,R30
 0FD4 09F4              brne X160
 0FD6 56C0              xjmp L238
 0FD8           X160:
 0FD8           X148:
 0FD8 84E1              ldi R24,20
 0FDA 90E0              ldi R25,0
 0FDC 8417              cp R24,R20
 0FDE 9507              cpc R25,R21
 0FE0 ECF0              brlt L247
 0FE2           X149:
 0FE2           L246:
 0FE2 4030              cpi R20,0
 0FE4 4507              cpc R20,R21
 0FE6 29F1              breq L233
 0FE8           X150:
 0FE8 4130              cpi R20,1
 0FEA E0E0              ldi R30,0
 0FEC 5E07              cpc R21,R30
 0FEE 09F4              brne X161
 0FF0 31C0              xjmp L234
 0FF2           X161:
 0FF2           X151:
 0FF2 4230              cpi R20,2
 0FF4 E0E0              ldi R30,0
 0FF6 5E07              cpc R21,R30
 0FF8 09F4              brne X162
 0FFA 35C0              xjmp L235
 0FFC           X162:
 0FFC           X152:
 0FFC 4330              cpi R20,3
 0FFE E0E0              ldi R30,0
 1000 5E07              cpc R21,R30
 1002 09F4              brne X163
 1004 4AC0              xjmp L239
 1006           X163:
 1006           X153:
 1006 4430              cpi R20,4
 1008 E0E0              ldi R30,0
 100A 5E07              cpc R21,R30
 100C 09F4              brne X164
 100E 4EC0              xjmp L240
 1010           X164:
 1010           X154:
 1010 4530              cpi R20,5
 1012 E0E0              ldi R30,0
 1014 5E07              cpc R21,R30
 1016 09F4              brne X165
 1018 6BC0              xjmp L245
 101A           X165:
 101A           X155:
 101A 7FC0              xjmp L231
 101C           L247:
 101C 4233              cpi R20,50
 101E E0E0              ldi R30,0
 1020 5E07              cpc R21,R30
 1022 09F4              brne X166
 1024 4FC0              xjmp L241
 1026           X166:
 1026           X156:
 1026 4333              cpi R20,51
 1028 E0E0              ldi R30,0
 102A 5E07              cpc R21,R30
 102C 09F4              brne X167
 102E 52C0              xjmp L242
 1030           X167:
 1030           X157:
 1030 74C0              xjmp L231
 1032           L233:
 1032           ; 		case 0:
 1032           ; 			SetMotRunPam(MOT_CARD_LOAD,100,20,CURRENT_CARD_LOAD);
 1032 84E0              ldi R24,4
 1034 8A83              std y+2,R24
 1036 84E1              ldi R24,20
 1038 8883              std y+0,R24
 103A 24E6              ldi R18,100
 103C 04E0              ldi R16,4
 103E 0E940000          xcall _SetMotRunPam
 1042           ;                       MotInitCheck(MOT_CARD_LOAD);
 1042 04E0              ldi R16,4
 1044 0E940000          xcall _MotInitCheck
 1048           ;                       waitMotor0 = 1;
 1048 81E0              ldi R24,1
 104A 80930300          sts _waitMotor0,R24
 104E           ;                       mainStep = 1;
 104E 80930000          sts _mainStep,R24
 1052           ;                       break;
 1052 63C0              xjmp L231
 1054           L234:
 1054           ; 		case 1:
 1054           ; 			SetDelayTime(1, 5);
 1054 25E0              ldi R18,5
 1056 30E0              ldi R19,0
 1058 01E0              ldi R16,1
 105A 0E940000          xcall _SetDelayTime
 105E           ;                       mainStep = 2;
 105E 82E0              ldi R24,2
 1060 80930000          sts _mainStep,R24
 1064           ;                       break;
 1064 5AC0              xjmp L231
 1066           L235:
 1066           ; 		case 2:
 1066           ; 			if(GetMotorMonitorState(MOT_CARD_LOAD,ZeroMonitor) == 1)		// 判断吸样针是否回到零位
 1066 2227              clr R18
 1068 04E0              ldi R16,4
 106A 0E940000          xcall _GetMotorMonitorState
 106E 402F              mov R20,R16
 1070 0130              cpi R16,1
 1072 21F4              brne L236
 1074           X158:
 1074           ; 			{
 1074           ; 				mainStep = 20;
 1074 84E1              ldi R24,20
 1076 80930000          sts _mainStep,R24
 107A           ;                       }
 107A 4FC0              xjmp L231
 107C           L236:
 107C           ; 			else
 107C           ; 			{
 107C           ; 				mainStep = 0;
 107C 2224              clr R2
 107E 20920000          sts _mainStep,R2
 1082           ;                       }
 1082           ;                       break;
 1082 4BC0              xjmp L231
 1084           L238:
 1084           ; 		case 20:
 1084           ; 			MotRunTo(MOT_CARD_LOAD,_POS_CARDLOAD_RING);
 1084 20E4              ldi R18,1600
 1086 36E0              ldi R19,6
 1088 04E0              ldi R16,4
 108A 0E940000          xcall _MotRunTo
 108E           ;                       waitMotor0 = 1;
 108E 81E0              ldi R24,1
 1090 80930300          sts _waitMotor0,R24
 1094           ;                       mainStep = 3;
 1094 83E0              ldi R24,3
 1096 80930000          sts _mainStep,R24
 109A           L239:
 109A           ; 		case 3:
 109A           ; 			SetDelayTime(1, 10);
 109A 2AE0              ldi R18,10
 109C 30E0              ldi R19,0
 109E 01E0              ldi R16,1
 10A0 0E940000          xcall _SetDelayTime
 10A4           ;                       mainStep = 4;
 10A4 84E0              ldi R24,4
 10A6 80930000          sts _mainStep,R24
 10AA           ;                       break;
 10AA 37C0              xjmp L231
 10AC           L240:
 10AC           ; 		case 4:
 10AC           ; 			MotRunTo(MOT_CARD_LOAD, 0);
 10AC 2227              clr R18
 10AE 3327              clr R19
 10B0 04E0              ldi R16,4
 10B2 0E940000          xcall _MotRunTo
 10B6           ;                       waitMotor0 = 1;
 10B6 81E0              ldi R24,1
 10B8 80930300          sts _waitMotor0,R24
 10BC           ;                       mainStep = 5;
 10BC 85E0              ldi R24,5
 10BE 80930000          sts _mainStep,R24
 10C2           ;                       break;
 10C2 2BC0              xjmp L231
 10C4           L241:
 10C4           ; 		case 50:
 10C4           ; 			SetDelayTime(1, 5);
 10C4 25E0              ldi R18,5
 10C6 30E0              ldi R19,0
 10C8 01E0              ldi R16,1
 10CA 0E940000          xcall _SetDelayTime
 10CE           ;                       mainStep = 51;
 10CE 83E3              ldi R24,51
 10D0 80930000          sts _mainStep,R24
 10D4           L242:
 10D4           ; 		case 51:
 10D4           ; 			if(GetMotorMonitorState(MOT_CARD_LOAD,ZeroMonitor) == 1)		// 判断吸样针是否回到零位
 10D4 2227              clr R18
 10D6 04E0              ldi R16,4
 10D8 0E940000          xcall _GetMotorMonitorState
 10DC 402F              mov R20,R16
 10DE 0130              cpi R16,1
 10E0 21F4              brne L243
 10E2           X159:
 10E2           ; 			{
 10E2           ; 				mainStep = 5;
 10E2 85E0              ldi R24,5
 10E4 80930000          sts _mainStep,R24
 10E8           ;                       }
 10E8 03C0              xjmp L244
 10EA           L243:
 10EA           ; 			else
 10EA           ; 			{
 10EA           ; 				mainStep = 4;
 10EA 84E0              ldi R24,4
 10EC 80930000          sts _mainStep,R24
 10F0           ;                       }
 10F0           L244:
 10F0           L245:
 10F0           ; 		case 5:
 10F0           ; 			Uart0ReUnable;
 10F0 8091C100          lds R24,193
 10F4 8F7E              andi R24,239
 10F6 8093C100          sts 193,R24
 10FA           ;                       uart_Printf("%s\r\n",strM4125);
 10FA 20E0              ldi R18,<_strM4125
 10FC 30E0              ldi R19,>_strM4125
 10FE 00E0              ldi R16,<L47
 1100 10E0              ldi R17,>L47
 1102 0E940000          xcall _uart_Printf
 1106           ;                       Uart0ReEnable;
 1106 8091C100          lds R24,193
 110A 8061              ori R24,16
 110C 8093C100          sts 193,R24
 1110           ;                       mainStep = 0;
 1110 2224              clr R2
 1112 20920000          sts _mainStep,R2
 1116           ;                       return 1;
 1116 01E0              ldi R16,1
 1118 01C0              xjmp L223
 111A           L231:
 111A           ; 			break;
 111A           ; 		default:
 111A           ; 			break;
 111A           ; 		}
 111A           ; 	return 0;
 111A 0027              clr R16
 111C           L223:
 111C                   .dbline 0 ; func end
 111C 2396              adiw R28,3
 111E 5991              ld R21,y+
 1120 4991              ld R20,y+
 1122 0895              ret
                        .even
 1124           _CardUnloadCheck::
 1124 4A93              st -y,R20
 1126 5A93              st -y,R21
 1128 2397              sbiw R28,3
 112A           ; }
 112A           ; 
 112A           ; unsigned char CardUnloadCheck(void){
 112A           ;       // 卡片卸载小车运行测试
 112A           ;       if(WaitDelayTime(1))            return 0;
 112A 01E0              ldi R16,1
 112C 0E940000          xcall _WaitDelayTime
 1130 0023              tst R16
 1132 11F0              breq L249
 1134           X168:
 1134 0027              clr R16
 1136 7AC0              xjmp L248
 1138           L249:
 1138           ; 	if(waitMotor0){	if(GetMotState(MOT_CARD_UNLOAD)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1138 20900300          lds R2,_waitMotor0
 113C 2220              tst R2
 113E 51F0              breq L251
 1140           X169:
 1140 05E0              ldi R16,5
 1142 0E940000          xcall _GetMotState
 1146 0130              cpi R16,1
 1148 11F0              breq L253
 114A           X170:
 114A 0027              clr R16
 114C 6FC0              xjmp L248
 114E           L253:
 114E 2224              clr R2
 1150 20920300          sts _waitMotor0,R2
 1154           L251:
 1154           ; 
 1154           ; 	switch(mainStep){
 1154 40910000          lds R20,_mainStep
 1158 5527              clr R21
 115A 4030              cpi R20,0
 115C 4507              cpc R20,R21
 115E B1F0              breq L258
 1160           X171:
 1160 4130              cpi R20,1
 1162 E0E0              ldi R30,0
 1164 5E07              cpc R21,R30
 1166 19F1              breq L259
 1168           X172:
 1168 4230              cpi R20,2
 116A E0E0              ldi R30,0
 116C 5E07              cpc R21,R30
 116E 41F1              breq L260
 1170           X173:
 1170 4330              cpi R20,3
 1172 E0E0              ldi R30,0
 1174 5E07              cpc R21,R30
 1176 79F1              breq L261
 1178           X174:
 1178 4430              cpi R20,4
 117A E0E0              ldi R30,0
 117C 5E07              cpc R21,R30
 117E A1F1              breq L262
 1180           X175:
 1180 4530              cpi R20,5
 1182 E0E0              ldi R30,0
 1184 5E07              cpc R21,R30
 1186 09F4              brne X177
 1188 3BC0              xjmp L263
 118A           X177:
 118A           X176:
 118A 4FC0              xjmp L256
 118C           L258:
 118C           ; 		case 0:
 118C           ; 			SetMotRunPam(MOT_CARD_UNLOAD,100,20,CURRENT_CARD_UNLOAD);
 118C 84E0              ldi R24,4
 118E 8A83              std y+2,R24
 1190 84E1              ldi R24,20
 1192 8883              std y+0,R24
 1194 24E6              ldi R18,100
 1196 05E0              ldi R16,5
 1198 0E940000          xcall _SetMotRunPam
 119C           ;                       MotInitCheck(MOT_CARD_UNLOAD);
 119C 05E0              ldi R16,5
 119E 0E940000          xcall _MotInitCheck
 11A2           ;                       waitMotor0 = 1;
 11A2 81E0              ldi R24,1
 11A4 80930300          sts _waitMotor0,R24
 11A8           ;                       mainStep = 1;
 11A8 80930000          sts _mainStep,R24
 11AC           ;                       break;
 11AC 3EC0              xjmp L256
 11AE           L259:
 11AE           ; 		case 1:
 11AE           ; 			SetDelayTime(1, 10);
 11AE 2AE0              ldi R18,10
 11B0 30E0              ldi R19,0
 11B2 01E0              ldi R16,1
 11B4 0E940000          xcall _SetDelayTime
 11B8           ;                       mainStep = 2;
 11B8 82E0              ldi R24,2
 11BA 80930000          sts _mainStep,R24
 11BE           ;                       break;
 11BE 35C0              xjmp L256
 11C0           L260:
 11C0           ; 		case 2:
 11C0           ; 			MotRunTo(MOT_CARD_UNLOAD, _POS_UNLOAD_OUT);
 11C0 20E4              ldi R18,1600
 11C2 36E0              ldi R19,6
 11C4 05E0              ldi R16,5
 11C6 0E940000          xcall _MotRunTo
 11CA           ;                       waitMotor0 = 1;
 11CA 81E0              ldi R24,1
 11CC 80930300          sts _waitMotor0,R24
 11D0           ;                       mainStep = 3;
 11D0 83E0              ldi R24,3
 11D2 80930000          sts _mainStep,R24
 11D6           L261:
 11D6           ; 		case 3:
 11D6           ; 			SetDelayTime(1, 10);
 11D6 2AE0              ldi R18,10
 11D8 30E0              ldi R19,0
 11DA 01E0              ldi R16,1
 11DC 0E940000          xcall _SetDelayTime
 11E0           ;                       mainStep = 4;
 11E0 84E0              ldi R24,4
 11E2 80930000          sts _mainStep,R24
 11E6           ;                       break;
 11E6 21C0              xjmp L256
 11E8           L262:
 11E8           ; 		case 4:
 11E8           ; 			MotRunTo(MOT_CARD_UNLOAD, 0);
 11E8 2227              clr R18
 11EA 3327              clr R19
 11EC 05E0              ldi R16,5
 11EE 0E940000          xcall _MotRunTo
 11F2           ;                       waitMotor0 = 1;
 11F2 81E0              ldi R24,1
 11F4 80930300          sts _waitMotor0,R24
 11F8           ;                       mainStep = 5;
 11F8 85E0              ldi R24,5
 11FA 80930000          sts _mainStep,R24
 11FE           ;                       break;
 11FE 15C0              xjmp L256
 1200           L263:
 1200           ; 		case 5:
 1200           ; 			Uart0ReUnable;
 1200 8091C100          lds R24,193
 1204 8F7E              andi R24,239
 1206 8093C100          sts 193,R24
 120A           ;                       uart_Printf("%s\r\n",strM4126);
 120A 20E0              ldi R18,<_strM4126
 120C 30E0              ldi R19,>_strM4126
 120E 00E0              ldi R16,<L47
 1210 10E0              ldi R17,>L47
 1212 0E940000          xcall _uart_Printf
 1216           ;                       Uart0ReEnable;
 1216 8091C100          lds R24,193
 121A 8061              ori R24,16
 121C 8093C100          sts 193,R24
 1220           ;                       mainStep = 0;
 1220 2224              clr R2
 1222 20920000          sts _mainStep,R2
 1226           ;                       return 1;
 1226 01E0              ldi R16,1
 1228 01C0              xjmp L248
 122A           L256:
 122A           ; 			break;
 122A           ; 		default:
 122A           ; 			break;
 122A           ; 		}
 122A           ; 	return 0;
 122A 0027              clr R16
 122C           L248:
 122C                   .dbline 0 ; func end
 122C 2396              adiw R28,3
 122E 5991              ld R21,y+
 1230 4991              ld R20,y+
 1232 0895              ret
                        .even
 1234           _DiluentPumpCheck::
 1234 4A93              st -y,R20
 1236 5A93              st -y,R21
 1238 2397              sbiw R28,3
 123A           ; }
 123A           ; 
 123A           ; unsigned char DiluentPumpCheck(void){
 123A           ;       // 稀释液泵运行测试
 123A           ;       if(WaitDelayTime(1))            return 0;
 123A 01E0              ldi R16,1
 123C 0E940000          xcall _WaitDelayTime
 1240 0023              tst R16
 1242 11F0              breq L265
 1244           X178:
 1244 0027              clr R16
 1246 86C0              xjmp L264
 1248           L265:
 1248           ; 	if(waitMotor0){	if(GetMotState(MOT_DILUENT)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1248 20900300          lds R2,_waitMotor0
 124C 2220              tst R2
 124E 51F0              breq L267
 1250           X179:
 1250 09E0              ldi R16,9
 1252 0E940000          xcall _GetMotState
 1256 0130              cpi R16,1
 1258 11F0              breq L269
 125A           X180:
 125A 0027              clr R16
 125C 7BC0              xjmp L264
 125E           L269:
 125E 2224              clr R2
 1260 20920300          sts _waitMotor0,R2
 1264           L267:
 1264           ; 	if(waitMotor1){	if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1264 20900400          lds R2,_waitMotor1
 1268 2220              tst R2
 126A 59F0              breq L271
 126C           X181:
 126C 0BE0              ldi R16,11
 126E 0E940000          xcall _GetMotState
 1272 402F              mov R20,R16
 1274 0130              cpi R16,1
 1276 11F0              breq L273
 1278           X182:
 1278 0027              clr R16
 127A 6CC0              xjmp L264
 127C           L273:
 127C 2224              clr R2
 127E 20920300          sts _waitMotor0,R2
 1282           L271:
 1282           ; 
 1282           ; 	switch(mainStep){
 1282 40910000          lds R20,_mainStep
 1286 5527              clr R21
 1288 4030              cpi R20,0
 128A 4507              cpc R20,R21
 128C 91F0              breq L278
 128E           X183:
 128E 4130              cpi R20,1
 1290 E0E0              ldi R30,0
 1292 5E07              cpc R21,R30
 1294 01F1              breq L279
 1296           X184:
 1296 4230              cpi R20,2
 1298 E0E0              ldi R30,0
 129A 5E07              cpc R21,R30
 129C 29F1              breq L280
 129E           X185:
 129E 4330              cpi R20,3
 12A0 E0E0              ldi R30,0
 12A2 5E07              cpc R21,R30
 12A4 69F1              breq L281
 12A6           X186:
 12A6 4430              cpi R20,4
 12A8 E0E0              ldi R30,0
 12AA 5E07              cpc R21,R30
 12AC 09F4              brne X188
 12AE 3CC0              xjmp L282
 12B0           X188:
 12B0           X187:
 12B0 50C0              xjmp L276
 12B2           L278:
 12B2           ; 		case 0:
 12B2           ; 			SetMotRunPam(MOT_DILUENT, 100, 2, CURRENT_DILUENT);
 12B2 84E0              ldi R24,4
 12B4 8A83              std y+2,R24
 12B6 82E0              ldi R24,2
 12B8 8883              std y+0,R24
 12BA 24E6              ldi R18,100
 12BC 09E0              ldi R16,9
 12BE 0E940000          xcall _SetMotRunPam
 12C2           ;                       MotRun(MOT_DILUENT, 800);
 12C2 20E2              ldi R18,800
 12C4 33E0              ldi R19,3
 12C6 09E0              ldi R16,9
 12C8 0E940000          xcall _MotRun
 12CC           ;                       waitMotor0 = 1;
 12CC 81E0              ldi R24,1
 12CE 80930300          sts _waitMotor0,R24
 12D2           ;                       mainStep = 1;
 12D2 80930000          sts _mainStep,R24
 12D6           L279:
 12D6           ; 		case 1:
 12D6           ; 			SetDelayTime(1, 10);
 12D6 2AE0              ldi R18,10
 12D8 30E0              ldi R19,0
 12DA 01E0              ldi R16,1
 12DC 0E940000          xcall _SetDelayTime
 12E0           ;                       mainStep = 2;
 12E0 82E0              ldi R24,2
 12E2 80930000          sts _mainStep,R24
 12E6           ;                       break;
 12E6 35C0              xjmp L276
 12E8           L280:
 12E8           ; 		case 2:
 12E8           ; 			MotRun(MOT_DILUENT, 800);
 12E8 20E2              ldi R18,800
 12EA 33E0              ldi R19,3
 12EC 09E0              ldi R16,9
 12EE 0E940000          xcall _MotRun
 12F2           ;                       waitMotor0 = 1;
 12F2 81E0              ldi R24,1
 12F4 80930300          sts _waitMotor0,R24
 12F8           ;                       mainStep = 3;
 12F8 83E0              ldi R24,3
 12FA 80930000          sts _mainStep,R24
 12FE           ;                       break;
 12FE 29C0              xjmp L276
 1300           L281:
 1300           ; 		case 3:
 1300           ; 			SetMotRunPam(MOT_EFFLUENT, 200, 2, CURRENT_EFFLUENT);
 1300 84E0              ldi R24,4
 1302 8A83              std y+2,R24
 1304 82E0              ldi R24,2
 1306 8883              std y+0,R24
 1308 28EC              ldi R18,200
 130A 0BE0              ldi R16,11
 130C 0E940000          xcall _SetMotRunPam
 1310           ;                       //MotRun(MOT_EFFLUENT, 8000);
 1310           ;                       MotRun(MOT_EFFLUENT, 3000);
 1310 28EB              ldi R18,3000
 1312 3BE0              ldi R19,11
 1314 0BE0              ldi R16,11
 1316 0E940000          xcall _MotRun
 131A           ;                       waitMotor1 = 1;
 131A 81E0              ldi R24,1
 131C 80930400          sts _waitMotor1,R24
 1320           ;                       mainStep = 4;
 1320 84E0              ldi R24,4
 1322 80930000          sts _mainStep,R24
 1326           ;                       break;
 1326 15C0              xjmp L276
 1328           L282:
 1328           ; 		case 4:
 1328           ; 			Uart0ReUnable;
 1328 8091C100          lds R24,193
 132C 8F7E              andi R24,239
 132E 8093C100          sts 193,R24
 1332           ;                       uart_Printf("%s\r\n",strM4129);
 1332 20E0              ldi R18,<_strM4129
 1334 30E0              ldi R19,>_strM4129
 1336 00E0              ldi R16,<L47
 1338 10E0              ldi R17,>L47
 133A 0E940000          xcall _uart_Printf
 133E           ;                       Uart0ReEnable;
 133E 8091C100          lds R24,193
 1342 8061              ori R24,16
 1344 8093C100          sts 193,R24
 1348           ;                       mainStep = 0;
 1348 2224              clr R2
 134A 20920000          sts _mainStep,R2
 134E           ;                       return 1;
 134E 01E0              ldi R16,1
 1350 01C0              xjmp L264
 1352           L276:
 1352           ; 			break;
 1352           ; 		default:
 1352           ; 			break;
 1352           ; 		}
 1352           ; 	return 0;
 1352 0027              clr R16
 1354           L264:
 1354                   .dbline 0 ; func end
 1354 2396              adiw R28,3
 1356 5991              ld R21,y+
 1358 4991              ld R20,y+
 135A 0895              ret
                        .even
 135C           _LeanerPumpCheck::
 135C 4A93              st -y,R20
 135E 5A93              st -y,R21
 1360 2397              sbiw R28,3
 1362           ; }
 1362           ; 
 1362           ; unsigned char LeanerPumpCheck(void){
 1362           ;       // 清洗液泵运行测试
 1362           ;       if(WaitDelayTime(1))            return 0;
 1362 01E0              ldi R16,1
 1364 0E940000          xcall _WaitDelayTime
 1368 0023              tst R16
 136A 11F0              breq L284
 136C           X189:
 136C 0027              clr R16
 136E 86C0              xjmp L283
 1370           L284:
 1370           ; 	if(waitMotor0){	if(GetMotState(MOT_FLUID)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1370 20900300          lds R2,_waitMotor0
 1374 2220              tst R2
 1376 51F0              breq L286
 1378           X190:
 1378 0AE0              ldi R16,10
 137A 0E940000          xcall _GetMotState
 137E 0130              cpi R16,1
 1380 11F0              breq L288
 1382           X191:
 1382 0027              clr R16
 1384 7BC0              xjmp L283
 1386           L288:
 1386 2224              clr R2
 1388 20920300          sts _waitMotor0,R2
 138C           L286:
 138C           ; 	if(waitMotor1){	if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 138C 20900400          lds R2,_waitMotor1
 1390 2220              tst R2
 1392 59F0              breq L290
 1394           X192:
 1394 0BE0              ldi R16,11
 1396 0E940000          xcall _GetMotState
 139A 402F              mov R20,R16
 139C 0130              cpi R16,1
 139E 11F0              breq L292
 13A0           X193:
 13A0 0027              clr R16
 13A2 6CC0              xjmp L283
 13A4           L292:
 13A4 2224              clr R2
 13A6 20920300          sts _waitMotor0,R2
 13AA           L290:
 13AA           ; 
 13AA           ; 	switch(mainStep){
 13AA 40910000          lds R20,_mainStep
 13AE 5527              clr R21
 13B0 4030              cpi R20,0
 13B2 4507              cpc R20,R21
 13B4 91F0              breq L297
 13B6           X194:
 13B6 4130              cpi R20,1
 13B8 E0E0              ldi R30,0
 13BA 5E07              cpc R21,R30
 13BC 01F1              breq L298
 13BE           X195:
 13BE 4230              cpi R20,2
 13C0 E0E0              ldi R30,0
 13C2 5E07              cpc R21,R30
 13C4 29F1              breq L299
 13C6           X196:
 13C6 4330              cpi R20,3
 13C8 E0E0              ldi R30,0
 13CA 5E07              cpc R21,R30
 13CC 69F1              breq L300
 13CE           X197:
 13CE 4430              cpi R20,4
 13D0 E0E0              ldi R30,0
 13D2 5E07              cpc R21,R30
 13D4 09F4              brne X199
 13D6 3CC0              xjmp L301
 13D8           X199:
 13D8           X198:
 13D8 50C0              xjmp L295
 13DA           L297:
 13DA           ; 		case 0:
 13DA           ; 			SetMotRunPam(MOT_FLUID, 80, 2, CURRENT_FLUID);
 13DA 84E0              ldi R24,4
 13DC 8A83              std y+2,R24
 13DE 82E0              ldi R24,2
 13E0 8883              std y+0,R24
 13E2 20E5              ldi R18,80
 13E4 0AE0              ldi R16,10
 13E6 0E940000          xcall _SetMotRunPam
 13EA           ;                       MotRun(MOT_FLUID, 800);
 13EA 20E2              ldi R18,800
 13EC 33E0              ldi R19,3
 13EE 0AE0              ldi R16,10
 13F0 0E940000          xcall _MotRun
 13F4           ;                       waitMotor0 = 1;
 13F4 81E0              ldi R24,1
 13F6 80930300          sts _waitMotor0,R24
 13FA           ;                       mainStep = 1;
 13FA 80930000          sts _mainStep,R24
 13FE           L298:
 13FE           ; 		case 1:
 13FE           ; 			SetDelayTime(1, 10);
 13FE 2AE0              ldi R18,10
 1400 30E0              ldi R19,0
 1402 01E0              ldi R16,1
 1404 0E940000          xcall _SetDelayTime
 1408           ;                       mainStep = 2;
 1408 82E0              ldi R24,2
 140A 80930000          sts _mainStep,R24
 140E           ;                       break;
 140E 35C0              xjmp L295
 1410           L299:
 1410           ; 		case 2:
 1410           ; 			MotRun(MOT_FLUID, 800);
 1410 20E2              ldi R18,800
 1412 33E0              ldi R19,3
 1414 0AE0              ldi R16,10
 1416 0E940000          xcall _MotRun
 141A           ;                       waitMotor0 = 1;
 141A 81E0              ldi R24,1
 141C 80930300          sts _waitMotor0,R24
 1420           ;                       mainStep = 3;
 1420 83E0              ldi R24,3
 1422 80930000          sts _mainStep,R24
 1426           ;                       break;
 1426 29C0              xjmp L295
 1428           L300:
 1428           ; 		case 3:
 1428           ; 			SetMotRunPam(MOT_EFFLUENT, 200, 2, CURRENT_EFFLUENT);
 1428 84E0              ldi R24,4
 142A 8A83              std y+2,R24
 142C 82E0              ldi R24,2
 142E 8883              std y+0,R24
 1430 28EC              ldi R18,200
 1432 0BE0              ldi R16,11
 1434 0E940000          xcall _SetMotRunPam
 1438           ;                       //MotRun(MOT_EFFLUENT, 2000);
 1438           ;                       MotRun(MOT_EFFLUENT, 3000);
 1438 28EB              ldi R18,3000
 143A 3BE0              ldi R19,11
 143C 0BE0              ldi R16,11
 143E 0E940000          xcall _MotRun
 1442           ;                       waitMotor1 = 1;
 1442 81E0              ldi R24,1
 1444 80930400          sts _waitMotor1,R24
 1448           ;                       mainStep = 4;
 1448 84E0              ldi R24,4
 144A 80930000          sts _mainStep,R24
 144E           ;                       break;
 144E 15C0              xjmp L295
 1450           L301:
 1450           ; 		case 4:
 1450           ; 			Uart0ReUnable;
 1450 8091C100          lds R24,193
 1454 8F7E              andi R24,239
 1456 8093C100          sts 193,R24
 145A           ;                       uart_Printf("%s\r\n",strM4130);
 145A 20E0              ldi R18,<_strM4130
 145C 30E0              ldi R19,>_strM4130
 145E 00E0              ldi R16,<L47
 1460 10E0              ldi R17,>L47
 1462 0E940000          xcall _uart_Printf
 1466           ;                       Uart0ReEnable;
 1466 8091C100          lds R24,193
 146A 8061              ori R24,16
 146C 8093C100          sts 193,R24
 1470           ;                       mainStep = 0;
 1470 2224              clr R2
 1472 20920000          sts _mainStep,R2
 1476           ;                       return 1;
 1476 01E0              ldi R16,1
 1478 01C0              xjmp L283
 147A           L295:
 147A           ; 			break;
 147A           ; 		default:
 147A           ; 			break;
 147A           ; 		}
 147A           ; 	return 0;
 147A 0027              clr R16
 147C           L283:
 147C                   .dbline 0 ; func end
 147C 2396              adiw R28,3
 147E 5991              ld R21,y+
 1480 4991              ld R20,y+
 1482 0895              ret
                        .even
 1484           _EffluentPumpCheck::
 1484 4A93              st -y,R20
 1486 5A93              st -y,R21
 1488 2397              sbiw R28,3
 148A           ; }
 148A           ; 
 148A           ; unsigned char EffluentPumpCheck(void){
 148A           ;       // 废液泵运行测试
 148A           ;       if(WaitDelayTime(1))            return 0;
 148A 01E0              ldi R16,1
 148C 0E940000          xcall _WaitDelayTime
 1490 0023              tst R16
 1492 11F0              breq L303
 1494           X200:
 1494 0027              clr R16
 1496 5EC0              xjmp L302
 1498           L303:
 1498           ; 	if(waitMotor0){	if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1498 20900300          lds R2,_waitMotor0
 149C 2220              tst R2
 149E 51F0              breq L305
 14A0           X201:
 14A0 0BE0              ldi R16,11
 14A2 0E940000          xcall _GetMotState
 14A6 0130              cpi R16,1
 14A8 11F0              breq L307
 14AA           X202:
 14AA 0027              clr R16
 14AC 53C0              xjmp L302
 14AE           L307:
 14AE 2224              clr R2
 14B0 20920300          sts _waitMotor0,R2
 14B4           L305:
 14B4           ; 
 14B4           ; 	switch(mainStep){
 14B4 40910000          lds R20,_mainStep
 14B8 5527              clr R21
 14BA 4030              cpi R20,0
 14BC 4507              cpc R20,R21
 14BE 69F0              breq L312
 14C0           X203:
 14C0 4130              cpi R20,1
 14C2 E0E0              ldi R30,0
 14C4 5E07              cpc R21,R30
 14C6 D9F0              breq L313
 14C8           X204:
 14C8 4230              cpi R20,2
 14CA E0E0              ldi R30,0
 14CC 5E07              cpc R21,R30
 14CE 01F1              breq L314
 14D0           X205:
 14D0 4330              cpi R20,3
 14D2 E0E0              ldi R30,0
 14D4 5E07              cpc R21,R30
 14D6 41F1              breq L315
 14D8           X206:
 14D8 3CC0              xjmp L310
 14DA           L312:
 14DA           ; 		case 0:
 14DA           ; 			SetMotRunPam(MOT_EFFLUENT, 200, 2, CURRENT_EFFLUENT);
 14DA 84E0              ldi R24,4
 14DC 8A83              std y+2,R24
 14DE 82E0              ldi R24,2
 14E0 8883              std y+0,R24
 14E2 28EC              ldi R18,200
 14E4 0BE0              ldi R16,11
 14E6 0E940000          xcall _SetMotRunPam
 14EA           ;                       MotRun(MOT_EFFLUENT, 800);
 14EA 20E2              ldi R18,800
 14EC 33E0              ldi R19,3
 14EE 0BE0              ldi R16,11
 14F0 0E940000          xcall _MotRun
 14F4           ;                       waitMotor0 = 1;
 14F4 81E0              ldi R24,1
 14F6 80930300          sts _waitMotor0,R24
 14FA           ;                       mainStep = 1;
 14FA 80930000          sts _mainStep,R24
 14FE           L313:
 14FE           ; 		case 1:
 14FE           ; 			SetDelayTime(1, 10);
 14FE 2AE0              ldi R18,10
 1500 30E0              ldi R19,0
 1502 01E0              ldi R16,1
 1504 0E940000          xcall _SetDelayTime
 1508           ;                       mainStep = 2;
 1508 82E0              ldi R24,2
 150A 80930000          sts _mainStep,R24
 150E           ;                       break;
 150E 21C0              xjmp L310
 1510           L314:
 1510           ; 		case 2:
 1510           ; 			MotRun(MOT_EFFLUENT, 800);
 1510 20E2              ldi R18,800
 1512 33E0              ldi R19,3
 1514 0BE0              ldi R16,11
 1516 0E940000          xcall _MotRun
 151A           ;                       waitMotor0 = 1;
 151A 81E0              ldi R24,1
 151C 80930300          sts _waitMotor0,R24
 1520           ;                       mainStep = 3;
 1520 83E0              ldi R24,3
 1522 80930000          sts _mainStep,R24
 1526           ;                       break;
 1526 15C0              xjmp L310
 1528           L315:
 1528           ; 		case 3:
 1528           ; 			Uart0ReUnable;
 1528 8091C100          lds R24,193
 152C 8F7E              andi R24,239
 152E 8093C100          sts 193,R24
 1532           ;                       uart_Printf("%s\r\n",strM4131);
 1532 20E0              ldi R18,<_strM4131
 1534 30E0              ldi R19,>_strM4131
 1536 00E0              ldi R16,<L47
 1538 10E0              ldi R17,>L47
 153A 0E940000          xcall _uart_Printf
 153E           ;                       Uart0ReEnable;
 153E 8091C100          lds R24,193
 1542 8061              ori R24,16
 1544 8093C100          sts 193,R24
 1548           ;                       mainStep = 0;
 1548 2224              clr R2
 154A 20920000          sts _mainStep,R2
 154E           ;                       return 1;
 154E 01E0              ldi R16,1
 1550 01C0              xjmp L302
 1552           L310:
 1552           ; 			break;
 1552           ; 		default:
 1552           ; 			break;
 1552           ; 		}
 1552           ; 	return 0;
 1552 0027              clr R16
 1554           L302:
 1554                   .dbline 0 ; func end
 1554 2396              adiw R28,3
 1556 5991              ld R21,y+
 1558 4991              ld R20,y+
 155A 0895              ret
                        .even
 155C           _SamplingSyringCheck::
 155C 4A93              st -y,R20
 155E 5A93              st -y,R21
 1560 2397              sbiw R28,3
 1562           ; }
 1562           ; /*
 1562           ; unsigned char SamplingSyringCheck(void){
 1562           ;       // 取样注射泵运行测试
 1562           ;       unsigned char i;
 1562           ;       if(WaitDelayTime(1))            return 0;
 1562           ;       if(waitMotor0){ if(GetMotState(MOT_SAMP_PUMP)!=STA_SLAVE_FREE)          return 0;       waitMotor0 = 0; }
 1562           ; 
 1562           ; //    i = MaintainSubFunParam ;
 1562           ; //    if(i==0)
 1562           ; //            i = 1;
 1562           ;       switch(mainStep){
 1562           ;               case 0:
 1562           ;                       SetMotRunPam(MOT_SAMP_PUMP, 200, 10, CURRENT_SAMP_PUMP);
 1562           ;                       MotInitCheck(MOT_SAMP_PUMP);
 1562           ;                       waitMotor0 = 1;
 1562           ;                       mainStep = 1;
 1562           ;                       i = 1;
 1562           ;                       break;
 1562           ;               case 1:
 1562           ;                       i--;
 1562           ;                       SetDelayTime(1, 10);
 1562           ;                       mainStep = 2;
 1562           ;                       break;
 1562           ;               case 2:
 1562           ;                       MotRunTo(MOT_SAMP_PUMP, 4800);
 1562           ;                       waitMotor0 = 1;
 1562           ;                       mainStep = 3;
 1562           ;               case 3:
 1562           ;                       SetDelayTime(1, 10);
 1562           ;                       mainStep = 4;
 1562           ;                       break;
 1562           ;               case 4:
 1562           ;                       MotRunTo(MOT_SAMP_PUMP, 0);
 1562           ;                       waitMotor0 = 1;
 1562           ;                       if(i != 0)
 1562           ;                               mainStep = 1;
 1562           ;                       else
 1562           ;                               mainStep = 5;
 1562           ;                       break;
 1562           ;               case 5:
 1562           ;                       uart_Printf("%s\r\n",strM4132);
 1562           ;                       mainStep = 0;
 1562           ;                       return 1;
 1562           ;                       break;
 1562           ;               default:
 1562           ;                       break;
 1562           ;               }
 1562           ;       return 0;
 1562           ; }
 1562           ; */
 1562           ; //2016-5-17日 修改 如下：
 1562           ; unsigned char SamplingSyringCheck(void){
 1562           ;       // 取样注射泵运行测试
 1562           ;       if(WaitDelayTime(1))            return 0;
 1562 01E0              ldi R16,1
 1564 0E940000          xcall _WaitDelayTime
 1568 0023              tst R16
 156A 11F0              breq L317
 156C           X207:
 156C 0027              clr R16
 156E 7BC0              xjmp L316
 1570           L317:
 1570           ; 	if(waitMotor0){	if(GetMotState(MOT_SAMP_PUMP)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1570 20900300          lds R2,_waitMotor0
 1574 2220              tst R2
 1576 51F0              breq L319
 1578           X208:
 1578 0CE0              ldi R16,12
 157A 0E940000          xcall _GetMotState
 157E 0130              cpi R16,1
 1580 11F0              breq L321
 1582           X209:
 1582 0027              clr R16
 1584 70C0              xjmp L316
 1586           L321:
 1586 2224              clr R2
 1588 20920300          sts _waitMotor0,R2
 158C           L319:
 158C           ; 
 158C           ; 	switch(mainStep){
 158C 40910000          lds R20,_mainStep
 1590 5527              clr R21
 1592 4030              cpi R20,0
 1594 4507              cpc R20,R21
 1596 B1F0              breq L326
 1598           X210:
 1598 4130              cpi R20,1
 159A E0E0              ldi R30,0
 159C 5E07              cpc R21,R30
 159E 19F1              breq L327
 15A0           X211:
 15A0 4230              cpi R20,2
 15A2 E0E0              ldi R30,0
 15A4 5E07              cpc R21,R30
 15A6 41F1              breq L328
 15A8           X212:
 15A8 4330              cpi R20,3
 15AA E0E0              ldi R30,0
 15AC 5E07              cpc R21,R30
 15AE 81F1              breq L329
 15B0           X213:
 15B0 4430              cpi R20,4
 15B2 E0E0              ldi R30,0
 15B4 5E07              cpc R21,R30
 15B6 A9F1              breq L330
 15B8           X214:
 15B8 4530              cpi R20,5
 15BA E0E0              ldi R30,0
 15BC 5E07              cpc R21,R30
 15BE 09F4              brne X216
 15C0 3CC0              xjmp L331
 15C2           X216:
 15C2           X215:
 15C2 50C0              xjmp L324
 15C4           L326:
 15C4           ; 		case 0:
 15C4           ; 			SetMotRunPam(MOT_SAMP_PUMP, 200, 10, CURRENT_SAMP_PUMP);
 15C4 86E0              ldi R24,6
 15C6 8A83              std y+2,R24
 15C8 8AE0              ldi R24,10
 15CA 8883              std y+0,R24
 15CC 28EC              ldi R18,200
 15CE 0CE0              ldi R16,12
 15D0 0E940000          xcall _SetMotRunPam
 15D4           ;                       MotInitCheck(MOT_SAMP_PUMP);
 15D4 0CE0              ldi R16,12
 15D6 0E940000          xcall _MotInitCheck
 15DA           ;                       waitMotor0 = 1;
 15DA 81E0              ldi R24,1
 15DC 80930300          sts _waitMotor0,R24
 15E0           ;                       mainStep = 1;
 15E0 80930000          sts _mainStep,R24
 15E4           ;                       break;
 15E4 3FC0              xjmp L324
 15E6           L327:
 15E6           ; 		case 1:
 15E6           ; 			SetDelayTime(1, 10);
 15E6 2AE0              ldi R18,10
 15E8 30E0              ldi R19,0
 15EA 01E0              ldi R16,1
 15EC 0E940000          xcall _SetDelayTime
 15F0           ;                       mainStep = 2;
 15F0 82E0              ldi R24,2
 15F2 80930000          sts _mainStep,R24
 15F6           ;                       break;
 15F6 36C0              xjmp L324
 15F8           L328:
 15F8           ; 		case 2:
 15F8           ; 			MotRunTo(MOT_SAMP_PUMP, 4800);
 15F8 20EC              ldi R18,4800
 15FA 32E1              ldi R19,18
 15FC 0CE0              ldi R16,12
 15FE 0E940000          xcall _MotRunTo
 1602           ;                       waitMotor0 = 1;
 1602 81E0              ldi R24,1
 1604 80930300          sts _waitMotor0,R24
 1608           ;                       mainStep = 3;
 1608 83E0              ldi R24,3
 160A 80930000          sts _mainStep,R24
 160E           ;                       break;
 160E 2AC0              xjmp L324
 1610           L329:
 1610           ; 		case 3:
 1610           ; 			SetDelayTime(1, 10);
 1610 2AE0              ldi R18,10
 1612 30E0              ldi R19,0
 1614 01E0              ldi R16,1
 1616 0E940000          xcall _SetDelayTime
 161A           ;                       mainStep = 4;
 161A 84E0              ldi R24,4
 161C 80930000          sts _mainStep,R24
 1620           ;                       break;
 1620 21C0              xjmp L324
 1622           L330:
 1622           ; 		case 4:
 1622           ; 			MotRunTo(MOT_SAMP_PUMP, 0);
 1622 2227              clr R18
 1624 3327              clr R19
 1626 0CE0              ldi R16,12
 1628 0E940000          xcall _MotRunTo
 162C           ;                       waitMotor0 = 1;
 162C 81E0              ldi R24,1
 162E 80930300          sts _waitMotor0,R24
 1632           ;                       mainStep = 5;
 1632 85E0              ldi R24,5
 1634 80930000          sts _mainStep,R24
 1638           ;                       break;
 1638 15C0              xjmp L324
 163A           L331:
 163A           ; 		case 5:
 163A           ; 			Uart0ReUnable;
 163A 8091C100          lds R24,193
 163E 8F7E              andi R24,239
 1640 8093C100          sts 193,R24
 1644           ;                       uart_Printf("%s\r\n",strM4132);
 1644 20E0              ldi R18,<_strM4132
 1646 30E0              ldi R19,>_strM4132
 1648 00E0              ldi R16,<L47
 164A 10E0              ldi R17,>L47
 164C 0E940000          xcall _uart_Printf
 1650           ;                       Uart0ReEnable;
 1650 8091C100          lds R24,193
 1654 8061              ori R24,16
 1656 8093C100          sts 193,R24
 165A           ;                       mainStep = 0;
 165A 2224              clr R2
 165C 20920000          sts _mainStep,R2
 1660           ;                       return 1;
 1660 01E0              ldi R16,1
 1662 01C0              xjmp L316
 1664           L324:
 1664           ; 			break;
 1664           ; 		default:
 1664           ; 			break;
 1664           ; 		}
 1664           ; 	return 0;
 1664 0027              clr R16
 1666           L316:
 1666                   .dbline 0 ; func end
 1666 2396              adiw R28,3
 1668 5991              ld R21,y+
 166A 4991              ld R20,y+
 166C 0895              ret
 166E           ;          pInfo -> R20,R21
 166E           ;     pInfoEvent -> R20,R21
                        .even
 166E           _LiquidPhotoCheck_Even::
 166E 0E940000          xcall push_xgsetF000
 1672 A801              movw R20,R16
 1674 2897              sbiw R28,8
 1676           ; }
 1676           ; 
 1676           ; unsigned char LiquidPhotoCheck_Even(INFO_EVENT * pInfoEvent){
 1676           ;       unsigned char * pInfo;
 1676           ;       switch(mainStep){
 1676 60910000          lds R22,_mainStep
 167A 7727              clr R23
 167C 6130              cpi R22,1
 167E E0E0              ldi R30,0
 1680 7E07              cpc R23,R30
 1682 09F0              breq L336
 1684           X217:
 1684 2CC0              xjmp L334
 1686           L336:
 1686           ; 		case 1:
 1686           ; 			if(pInfoEvent->event == INFO_LIQ_PHO_VAL){
 1686 FA01              movw R30,R20
 1688 8181              ldd R24,z+1
 168A 8A30              cpi R24,10
 168C 41F5              brne L334
 168E           X218:
 168E           ; 				pInfo = &(pInfoEvent->info[0]);
 168E 4E5F              subi R20,254  ; offset = 2
 1690 5F4F              sbci R21,255
 1692           ;                               // 输出液路光耦信息
 1692           ;                               Uart0ReUnable;
 1692 8091C100          lds R24,193
 1696 8F7E              andi R24,239
 1698 8093C100          sts 193,R24
 169C           ;                               uart_Printf("%s $%4d $%4d $%4d $%4d\r\n",strM4133, *(pInfo), *(pInfo+1), *(pInfo+2), *(pInfo+3));
 169C FA01              movw R30,R20
 169E 2380              ldd R2,z+3
 16A0 3324              clr R3
 16A2 3F82              std y+7,R3
 16A4 2E82              std y+6,R2
 16A6 2280              ldd R2,z+2
 16A8 3324              clr R3
 16AA 3D82              std y+5,R3
 16AC 2C82              std y+4,R2
 16AE 2180              ldd R2,z+1
 16B0 3324              clr R3
 16B2 3B82              std y+3,R3
 16B4 2A82              std y+2,R2
 16B6 2080              ldd R2,z+0
 16B8 3324              clr R3
 16BA 3982              std y+1,R3
 16BC 2882              std y+0,R2
 16BE 20E0              ldi R18,<_strM4133
 16C0 30E0              ldi R19,>_strM4133
 16C2 00E0              ldi R16,<L109
 16C4 10E0              ldi R17,>L109
 16C6 0E940000          xcall _uart_Printf
 16CA           ;                               Uart0ReEnable;
 16CA 8091C100          lds R24,193
 16CE 8061              ori R24,16
 16D0 8093C100          sts 193,R24
 16D4           ;                               mainStep = 2;
 16D4 82E0              ldi R24,2
 16D6 80930000          sts _mainStep,R24
 16DA           ;                               return 1;
 16DA 01E0              ldi R16,1
 16DC 01C0              xjmp L332
 16DE           L334:
 16DE           ; 				}
 16DE           ; 			break;
 16DE           ; 		default:
 16DE           ; 			break;
 16DE           ; 		}
 16DE           ; 	return 0;
 16DE 0027              clr R16
 16E0           L332:
 16E0                   .dbline 0 ; func end
 16E0 2896              adiw R28,8
 16E2 0C940000          xjmp pop_xgsetF000
                        .even
 16E6           _LiquidPhotoCheck::
 16E6 4A93              st -y,R20
 16E8 5A93              st -y,R21
 16EA           ; }
 16EA           ; unsigned char LiquidPhotoCheck(void)
 16EA           ; {
 16EA           ;       switch(mainStep){
 16EA 40910000          lds R20,_mainStep
 16EE 5527              clr R21
 16F0 4030              cpi R20,0
 16F2 4507              cpc R20,R21
 16F4 29F0              breq L343
 16F6           X219:
 16F6 4230              cpi R20,2
 16F8 E0E0              ldi R30,0
 16FA 5E07              cpc R21,R30
 16FC 59F0              breq L344
 16FE           X220:
 16FE 1FC0              xjmp L341
 1700           L343:
 1700           ; 		case 0:
 1700           ; 			GetLiquidPhotoInfo();
 1700 0E940000          xcall _GetLiquidPhotoInfo
 1704           ;                       mainStep = 1;
 1704 81E0              ldi R24,1
 1706 80930000          sts _mainStep,R24
 170A           ;                       RegisterLiquidEvenProcess(LiquidPhotoCheck_Even);
 170A 00E0              ldi R16,<PL_LiquidPhotoCheck_Even
 170C 10E0              ldi R17,>PL_LiquidPhotoCheck_Even
 170E 0E940000          xcall _RegisterLiquidEvenProcess
 1712           ;                       break;
 1712 15C0              xjmp L341
 1714           L344:
 1714           ; 		case 2:
 1714           ; 			Uart0ReUnable;
 1714 8091C100          lds R24,193
 1718 8F7E              andi R24,239
 171A 8093C100          sts 193,R24
 171E           ;                       uart_Printf("%s\r\n",strM4134);
 171E 20E0              ldi R18,<_strM4134
 1720 30E0              ldi R19,>_strM4134
 1722 00E0              ldi R16,<L47
 1724 10E0              ldi R17,>L47
 1726 0E940000          xcall _uart_Printf
 172A           ;                       Uart0ReEnable;
 172A 8091C100          lds R24,193
 172E 8061              ori R24,16
 1730 8093C100          sts 193,R24
 1734           ;                       mainStep = 0;
 1734 2224              clr R2
 1736 20920000          sts _mainStep,R2
 173A           ;                       return 1;
 173A 01E0              ldi R16,1
 173C 01C0              xjmp L339
 173E           L341:
 173E           ; 			break;
 173E           ; 		default:
 173E           ; 			break;
 173E           ; 		}
 173E           ; 	return 0;
 173E 0027              clr R16
 1740           L339:
 1740                   .dbline 0 ; func end
 1740 5991              ld R21,y+
 1742 4991              ld R20,y+
 1744 0895              ret
 1746           ;          pInfo -> R20,R21
 1746           ;     pInfoEvent -> R20,R21
                        .even
 1746           _CardStorePhotoCheck_Even::
 1746 0E940000          xcall push_xgsetF000
 174A A801              movw R20,R16
 174C 2897              sbiw R28,8
 174E           ; }
 174E           ; 
 174E           ; unsigned char CardStorePhotoCheck_Even(INFO_EVENT * pInfoEvent){
 174E           ;       unsigned char * pInfo;
 174E           ;       switch(mainStep){
 174E 60910000          lds R22,_mainStep
 1752 7727              clr R23
 1754 6130              cpi R22,1
 1756 E0E0              ldi R30,0
 1758 7E07              cpc R23,R30
 175A 09F0              breq L349
 175C           X221:
 175C 2CC0              xjmp L347
 175E           L349:
 175E           ; 		case 1:
 175E           ; 			if(pInfoEvent->event == INFO_STORE_PHO_VOL){
 175E FA01              movw R30,R20
 1760 8181              ldd R24,z+1
 1762 8C31              cpi R24,28
 1764 41F5              brne L347
 1766           X222:
 1766           ; 				pInfo = &(pInfoEvent->info[0]);
 1766 4E5F              subi R20,254  ; offset = 2
 1768 5F4F              sbci R21,255
 176A           ;                       //      if(*(pInfo) == CardStorePhoNum){
 176A           ;                                       // 输出液路光耦调整结果
 176A           ;                                       Uart0ReUnable;
 176A 8091C100          lds R24,193
 176E 8F7E              andi R24,239
 1770 8093C100          sts 193,R24
 1774           ;                                       uart_Printf("%s $%4d $%4d L $%4d H $%4d\r\n",strM4135, *(pInfo), *(pInfo+1), *(pInfo+2), *(pInfo+3));
 1774 FA01              movw R30,R20
 1776 2380              ldd R2,z+3
 1778 3324              clr R3
 177A 3F82              std y+7,R3
 177C 2E82              std y+6,R2
 177E 2280              ldd R2,z+2
 1780 3324              clr R3
 1782 3D82              std y+5,R3
 1784 2C82              std y+4,R2
 1786 2180              ldd R2,z+1
 1788 3324              clr R3
 178A 3B82              std y+3,R3
 178C 2A82              std y+2,R2
 178E 2080              ldd R2,z+0
 1790 3324              clr R3
 1792 3982              std y+1,R3
 1794 2882              std y+0,R2
 1796 20E0              ldi R18,<_strM4135
 1798 30E0              ldi R19,>_strM4135
 179A 00E0              ldi R16,<L352
 179C 10E0              ldi R17,>L352
 179E 0E940000          xcall _uart_Printf
 17A2           ;                                       Uart0ReEnable;
 17A2 8091C100          lds R24,193
 17A6 8061              ori R24,16
 17A8 8093C100          sts 193,R24
 17AC           ;                                       mainStep = 2;
 17AC 82E0              ldi R24,2
 17AE 80930000          sts _mainStep,R24
 17B2           ;                                       return 1;
 17B2 01E0              ldi R16,1
 17B4 01C0              xjmp L345
 17B6           L347:
 17B6           ; 			//		}
 17B6           ; 				}
 17B6           ; 			break;
 17B6           ; 		default:
 17B6           ; 			break;
 17B6           ; 		}
 17B6           ; 	return 0;
 17B6 0027              clr R16
 17B8           L345:
 17B8                   .dbline 0 ; func end
 17B8 2896              adiw R28,8
 17BA 0C940000          xjmp pop_xgsetF000
                        .even
 17BE           _CardStorePhotoCheck::
 17BE 4A93              st -y,R20
 17C0 5A93              st -y,R21
 17C2 2297              sbiw R28,2
 17C4           ; }
 17C4           ; unsigned char CardStorePhotoCheck(void){
 17C4           ;       switch(mainStep){
 17C4 40910000          lds R20,_mainStep
 17C8 5527              clr R21
 17CA 4030              cpi R20,0
 17CC 4507              cpc R20,R21
 17CE 29F0              breq L357
 17D0           X223:
 17D0 4230              cpi R20,2
 17D2 E0E0              ldi R30,0
 17D4 5E07              cpc R21,R30
 17D6 69F0              breq L358
 17D8           X224:
 17D8 26C0              xjmp L355
 17DA           L357:
 17DA           ; 		case 0:
 17DA           ; 			GetStorePhoVol(CardStorePhoNum);
 17DA 00910200          lds R16,_CardStorePhoNum
 17DE 0E940000          xcall _GetStorePhoVol
 17E2           ;                       mainStep = 1;
 17E2 81E0              ldi R24,1
 17E4 80930000          sts _mainStep,R24
 17E8           ;                       RegisterCardStoreEvenProcess(CardStorePhotoCheck_Even);
 17E8 00E0              ldi R16,<PL_CardStorePhotoCheck_Even
 17EA 10E0              ldi R17,>PL_CardStorePhotoCheck_Even
 17EC 0E940000          xcall _RegisterCardStoreEvenProcess
 17F0           ;                       break;
 17F0 1AC0              xjmp L355
 17F2           L358:
 17F2           ; 		case 2:
 17F2           ; 			Uart0ReUnable;
 17F2 8091C100          lds R24,193
 17F6 8F7E              andi R24,239
 17F8 8093C100          sts 193,R24
 17FC           ;                       uart_Printf("%s $%4d\r\n",strM4136, CardStorePhoNum);
 17FC 20900200          lds R2,_CardStorePhoNum
 1800 3324              clr R3
 1802 3982              std y+1,R3
 1804 2882              std y+0,R2
 1806 20E0              ldi R18,<_strM4136
 1808 30E0              ldi R19,>_strM4136
 180A 00E0              ldi R16,<L5
 180C 10E0              ldi R17,>L5
 180E 0E940000          xcall _uart_Printf
 1812           ;                       Uart0ReEnable;
 1812 8091C100          lds R24,193
 1816 8061              ori R24,16
 1818 8093C100          sts 193,R24
 181C           ;                       mainStep = 0;
 181C 2224              clr R2
 181E 20920000          sts _mainStep,R2
 1822           ;                       return 1;
 1822 01E0              ldi R16,1
 1824 01C0              xjmp L353
 1826           L355:
 1826           ; 			break;
 1826           ; 		default:
 1826           ; 			break;
 1826           ; 		}
 1826           ; 	return 0;
 1826 0027              clr R16
 1828           L353:
 1828                   .dbline 0 ; func end
 1828 2296              adiw R28,2
 182A 5991              ld R21,y+
 182C 4991              ld R20,y+
 182E 0895              ret
                        .even
 1830           _NeedleOnMixSideCheck::
 1830 0E940000          xcall push_xgset300C
 1834 2397              sbiw R28,3
 1836           ; }
 1836           ; 
 1836           ; unsigned char NeedleOnMixSideCheck(void){
 1836           ;       // 旋转臂测试
 1836           ;       if(WaitDelayTime(1))            return 0;
 1836 01E0              ldi R16,1
 1838 0E940000          xcall _WaitDelayTime
 183C 0023              tst R16
 183E 11F0              breq L360
 1840           X225:
 1840 0027              clr R16
 1842 D7C0              xjmp L359
 1844           L360:
 1844           ; 	if(waitMotor0){	if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1844 20900300          lds R2,_waitMotor0
 1848 2220              tst R2
 184A 51F0              breq L362
 184C           X226:
 184C 02E0              ldi R16,2
 184E 0E940000          xcall _GetMotState
 1852 0130              cpi R16,1
 1854 11F0              breq L364
 1856           X227:
 1856 0027              clr R16
 1858 CCC0              xjmp L359
 185A           L364:
 185A 2224              clr R2
 185C 20920300          sts _waitMotor0,R2
 1860           L362:
 1860           ; 	if(waitMotor1){	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotor1 = 0;	}
 1860 20900400          lds R2,_waitMotor1
 1864 2220              tst R2
 1866 59F0              breq L366
 1868           X228:
 1868 03E0              ldi R16,3
 186A 0E940000          xcall _GetMotState
 186E 402F              mov R20,R16
 1870 0130              cpi R16,1
 1872 11F0              breq L368
 1874           X229:
 1874 0027              clr R16
 1876 BDC0              xjmp L359
 1878           L368:
 1878 2224              clr R2
 187A 20920400          sts _waitMotor1,R2
 187E           L366:
 187E           ; 
 187E           ; 	switch(mainStep){
 187E 40910000          lds R20,_mainStep
 1882 5527              clr R21
 1884 4030              cpi R20,0
 1886 4507              cpc R20,R21
 1888 09F4              brne X240
 188A 2EC0              xjmp L373
 188C           X240:
 188C           X230:
 188C 4130              cpi R20,1
 188E E0E0              ldi R30,0
 1890 5E07              cpc R21,R30
 1892 09F4              brne X241
 1894 3AC0              xjmp L374
 1896           X241:
 1896           X231:
 1896 4230              cpi R20,2
 1898 E0E0              ldi R30,0
 189A 5E07              cpc R21,R30
 189C 09F4              brne X242
 189E 47C0              xjmp L375
 18A0           X242:
 18A0           X232:
 18A0 4330              cpi R20,3
 18A2 E0E0              ldi R30,0
 18A4 5E07              cpc R21,R30
 18A6 09F4              brne X243
 18A8 4BC0              xjmp L376
 18AA           X243:
 18AA           X233:
 18AA 4430              cpi R20,4
 18AC E0E0              ldi R30,0
 18AE 5E07              cpc R21,R30
 18B0 09F4              brne X244
 18B2 53C0              xjmp L377
 18B4           X244:
 18B4           X234:
 18B4 4530              cpi R20,5
 18B6 E0E0              ldi R30,0
 18B8 5E07              cpc R21,R30
 18BA 09F4              brne X245
 18BC 57C0              xjmp L378
 18BE           X245:
 18BE           X235:
 18BE 4630              cpi R20,6
 18C0 E0E0              ldi R30,0
 18C2 5E07              cpc R21,R30
 18C4 09F4              brne X246
 18C6 5EC0              xjmp L379
 18C8           X246:
 18C8           X236:
 18C8 4730              cpi R20,7
 18CA E0E0              ldi R30,0
 18CC 5E07              cpc R21,R30
 18CE 09F4              brne X247
 18D0 62C0              xjmp L380
 18D2           X247:
 18D2           X237:
 18D2 4830              cpi R20,8
 18D4 E0E0              ldi R30,0
 18D6 5E07              cpc R21,R30
 18D8 09F4              brne X248
 18DA 69C0              xjmp L381
 18DC           X248:
 18DC           X238:
 18DC 4930              cpi R20,9
 18DE E0E0              ldi R30,0
 18E0 5E07              cpc R21,R30
 18E2 09F4              brne X249
 18E4 70C0              xjmp L382
 18E6           X249:
 18E6           X239:
 18E6 84C0              xjmp L371
 18E8           L373:
 18E8           ; 		case 0:
 18E8           ; 			SetMotRunPam(MOT_SAMP_NEEDLE,240,10,CURRENT_SAMP_NEEDLE);
 18E8 83E0              ldi R24,3
 18EA 8A83              std y+2,R24
 18EC 8AE0              ldi R24,10
 18EE 8883              std y+0,R24
 18F0 20EF              ldi R18,240
 18F2 03E0              ldi R16,3
 18F4 0E940000          xcall _SetMotRunPam
 18F8           ;                       MotInitCheck(MOT_SAMP_NEEDLE);
 18F8 03E0              ldi R16,3
 18FA 0E940000          xcall _MotInitCheck
 18FE           ;                       waitMotor1 = 1;
 18FE 81E0              ldi R24,1
 1900 80930400          sts _waitMotor1,R24
 1904           ;                       mainStep = 1;
 1904 80930000          sts _mainStep,R24
 1908           ;                       break;
 1908 73C0              xjmp L371
 190A           L374:
 190A           ; 		case 1:
 190A           ; 			SetMotRunPam(MOT_SAMP_TRUN,120,40,CURRENT_SAMP_TRUN);
 190A 84E0              ldi R24,4
 190C 8A83              std y+2,R24
 190E 88E2              ldi R24,40
 1910 8883              std y+0,R24
 1912 28E7              ldi R18,120
 1914 02E0              ldi R16,2
 1916 0E940000          xcall _SetMotRunPam
 191A           ;                       MotInitCheck(MOT_SAMP_TRUN);
 191A 02E0              ldi R16,2
 191C 0E940000          xcall _MotInitCheck
 1920           ;                       waitMotor0 = 1;
 1920 81E0              ldi R24,1
 1922 80930300          sts _waitMotor0,R24
 1926           ;                       mainStep = 2;
 1926 82E0              ldi R24,2
 1928 80930000          sts _mainStep,R24
 192C           ;                       break;
 192C 61C0              xjmp L371
 192E           L375:
 192E           ; 		case 2:
 192E           ; 			SetDelayTime(1, 5);
 192E 25E0              ldi R18,5
 1930 30E0              ldi R19,0
 1932 01E0              ldi R16,1
 1934 0E940000          xcall _SetDelayTime
 1938           ;                       mainStep = 3;
 1938 83E0              ldi R24,3
 193A 80930000          sts _mainStep,R24
 193E           ;                       break;
 193E 58C0              xjmp L371
 1940           L376:
 1940           ; 		case 3:
 1940           ; 			MotRunTo(MOT_SAMP_TRUN, GetNeedleOnMixSidePos());
 1940 0E94A700          xcall _GetNeedleOnMixSidePos
 1944 5801              movw R10,R16
 1946 9501              movw R18,R10
 1948 02E0              ldi R16,2
 194A 0E940000          xcall _MotRunTo
 194E           ;                       waitMotor0 = 1;
 194E 81E0              ldi R24,1
 1950 80930300          sts _waitMotor0,R24
 1954           ;                       mainStep = 4;
 1954 84E0              ldi R24,4
 1956 80930000          sts _mainStep,R24
 195A           L377:
 195A           ; 		case 4:
 195A           ; 			SetDelayTime(1, 5);
 195A 25E0              ldi R18,5
 195C 30E0              ldi R19,0
 195E 01E0              ldi R16,1
 1960 0E940000          xcall _SetDelayTime
 1964           ;                       mainStep = 5;
 1964 85E0              ldi R24,5
 1966 80930000          sts _mainStep,R24
 196A           ;                       break;
 196A 42C0              xjmp L371
 196C           L378:
 196C           ; 		case 5:
 196C           ; 			MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_TOP);
 196C 28E6              ldi R18,360
 196E 31E0              ldi R19,1
 1970 03E0              ldi R16,3
 1972 0E940000          xcall _MotRunTo
 1976           ;                       waitMotor1 = 1;
 1976 81E0              ldi R24,1
 1978 80930400          sts _waitMotor1,R24
 197C           ;                       mainStep = 6;
 197C 86E0              ldi R24,6
 197E 80930000          sts _mainStep,R24
 1982           ;                       break;
 1982 36C0              xjmp L371
 1984           L379:
 1984           ; 		case 6:
 1984           ; 			SetDelayTime(1, 30);
 1984 2EE1              ldi R18,30
 1986 30E0              ldi R19,0
 1988 01E0              ldi R16,1
 198A 0E940000          xcall _SetDelayTime
 198E           ;                       mainStep = 7;
 198E 87E0              ldi R24,7
 1990 80930000          sts _mainStep,R24
 1994           ;                       break;
 1994 2DC0              xjmp L371
 1996           L380:
 1996           ; 		case 7:
 1996           ; 			MotRunTo(MOT_SAMP_NEEDLE, 0);
 1996 2227              clr R18
 1998 3327              clr R19
 199A 03E0              ldi R16,3
 199C 0E940000          xcall _MotRunTo
 19A0           ;                       waitMotor1 = 1;
 19A0 81E0              ldi R24,1
 19A2 80930400          sts _waitMotor1,R24
 19A6           ;                       mainStep = 8;
 19A6 88E0              ldi R24,8
 19A8 80930000          sts _mainStep,R24
 19AC           ;                       break;
 19AC 21C0              xjmp L371
 19AE           L381:
 19AE           ; 		case 8:
 19AE           ; 			MotRunTo(MOT_SAMP_TRUN, 0);
 19AE 2227              clr R18
 19B0 3327              clr R19
 19B2 02E0              ldi R16,2
 19B4 0E940000          xcall _MotRunTo
 19B8           ;                       waitMotor0 = 1;
 19B8 81E0              ldi R24,1
 19BA 80930300          sts _waitMotor0,R24
 19BE           ;                       mainStep = 9;
 19BE 89E0              ldi R24,9
 19C0 80930000          sts _mainStep,R24
 19C4           ;                       break;
 19C4 15C0              xjmp L371
 19C6           L382:
 19C6           ; 		case 9:
 19C6           ; 			Uart0ReUnable;
 19C6 8091C100          lds R24,193
 19CA 8F7E              andi R24,239
 19CC 8093C100          sts 193,R24
 19D0           ;                       uart_Printf("%s\r\n",strM4137);
 19D0 20E0              ldi R18,<_strM4137
 19D2 30E0              ldi R19,>_strM4137
 19D4 00E0              ldi R16,<L47
 19D6 10E0              ldi R17,>L47
 19D8 0E940000          xcall _uart_Printf
 19DC           ;                       Uart0ReEnable;
 19DC 8091C100          lds R24,193
 19E0 8061              ori R24,16
 19E2 8093C100          sts 193,R24
 19E6           ;                       mainStep = 0;
 19E6 2224              clr R2
 19E8 20920000          sts _mainStep,R2
 19EC           ;                       return 1;
 19EC 01E0              ldi R16,1
 19EE 01C0              xjmp L359
 19F0           L371:
 19F0           ; 			break;
 19F0           ; 		default:
 19F0           ; 			break;
 19F0           ; 		}
 19F0           ; 	return 0;
 19F0 0027              clr R16
 19F2           L359:
 19F2                   .dbline 0 ; func end
 19F2 2396              adiw R28,3
 19F4 0C940000          xjmp pop_xgset300C
                        .even
 19F8           _DropHeightCheck::
 19F8 0E940000          xcall push_xgset300C
 19FC 2397              sbiw R28,3
 19FE           ; }
 19FE           ; unsigned char DropHeightCheck(void){
 19FE           ;       if(WaitDelayTime(1))            return 0;
 19FE 01E0              ldi R16,1
 1A00 0E940000          xcall _WaitDelayTime
 1A04 0023              tst R16
 1A06 11F0              breq L384
 1A08           X250:
 1A08 0027              clr R16
 1A0A F2C0              xjmp L383
 1A0C           L384:
 1A0C           ; 	if(waitMotor0){	if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1A0C 20900300          lds R2,_waitMotor0
 1A10 2220              tst R2
 1A12 51F0              breq L386
 1A14           X251:
 1A14 02E0              ldi R16,2
 1A16 0E940000          xcall _GetMotState
 1A1A 0130              cpi R16,1
 1A1C 11F0              breq L388
 1A1E           X252:
 1A1E 0027              clr R16
 1A20 E7C0              xjmp L383
 1A22           L388:
 1A22 2224              clr R2
 1A24 20920300          sts _waitMotor0,R2
 1A28           L386:
 1A28           ; 	if(waitMotor1){	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotor1 = 0;	}
 1A28 20900400          lds R2,_waitMotor1
 1A2C 2220              tst R2
 1A2E 59F0              breq L390
 1A30           X253:
 1A30 03E0              ldi R16,3
 1A32 0E940000          xcall _GetMotState
 1A36 402F              mov R20,R16
 1A38 0130              cpi R16,1
 1A3A 11F0              breq L392
 1A3C           X254:
 1A3C 0027              clr R16
 1A3E D8C0              xjmp L383
 1A40           L392:
 1A40 2224              clr R2
 1A42 20920400          sts _waitMotor1,R2
 1A46           L390:
 1A46           ; 	if(waitMotor2){	if(GetMotState(MOT_CARD_LOAD)!=STA_SLAVE_FREE)	return 0;	waitMotor2 = 0;	}
 1A46 20900500          lds R2,_waitMotor2
 1A4A 2220              tst R2
 1A4C 59F0              breq L394
 1A4E           X255:
 1A4E 04E0              ldi R16,4
 1A50 0E940000          xcall _GetMotState
 1A54 402F              mov R20,R16
 1A56 0130              cpi R16,1
 1A58 11F0              breq L396
 1A5A           X256:
 1A5A 0027              clr R16
 1A5C C9C0              xjmp L383
 1A5E           L396:
 1A5E 2224              clr R2
 1A60 20920500          sts _waitMotor2,R2
 1A64           L394:
 1A64           ; 
 1A64           ; 	switch(mainStep){
 1A64 40910000          lds R20,_mainStep
 1A68 5527              clr R21
 1A6A 4030              cpi R20,0
 1A6C 4507              cpc R20,R21
 1A6E 09F4              brne X267
 1A70 2EC0              xjmp L401
 1A72           X267:
 1A72           X257:
 1A72 4130              cpi R20,1
 1A74 E0E0              ldi R30,0
 1A76 5E07              cpc R21,R30
 1A78 09F4              brne X268
 1A7A 3AC0              xjmp L402
 1A7C           X268:
 1A7C           X258:
 1A7C 4230              cpi R20,2
 1A7E E0E0              ldi R30,0
 1A80 5E07              cpc R21,R30
 1A82 09F4              brne X269
 1A84 52C0              xjmp L403
 1A86           X269:
 1A86           X259:
 1A86 4330              cpi R20,3
 1A88 E0E0              ldi R30,0
 1A8A 5E07              cpc R21,R30
 1A8C 09F4              brne X270
 1A8E 56C0              xjmp L404
 1A90           X270:
 1A90           X260:
 1A90 4430              cpi R20,4
 1A92 E0E0              ldi R30,0
 1A94 5E07              cpc R21,R30
 1A96 09F4              brne X271
 1A98 5DC0              xjmp L405
 1A9A           X271:
 1A9A           X261:
 1A9A 4530              cpi R20,5
 1A9C E0E0              ldi R30,0
 1A9E 5E07              cpc R21,R30
 1AA0 09F4              brne X272
 1AA2 61C0              xjmp L406
 1AA4           X272:
 1AA4           X262:
 1AA4 4630              cpi R20,6
 1AA6 E0E0              ldi R30,0
 1AA8 5E07              cpc R21,R30
 1AAA 09F4              brne X273
 1AAC 6AC0              xjmp L407
 1AAE           X273:
 1AAE           X263:
 1AAE 4730              cpi R20,7
 1AB0 E0E0              ldi R30,0
 1AB2 5E07              cpc R21,R30
 1AB4 09F4              brne X274
 1AB6 6EC0              xjmp L408
 1AB8           X274:
 1AB8           X264:
 1AB8 4830              cpi R20,8
 1ABA E0E0              ldi R30,0
 1ABC 5E07              cpc R21,R30
 1ABE 09F4              brne X275
 1AC0 75C0              xjmp L409
 1AC2           X275:
 1AC2           X265:
 1AC2 4930              cpi R20,9
 1AC4 E0E0              ldi R30,0
 1AC6 5E07              cpc R21,R30
 1AC8 09F4              brne X276
 1ACA 7CC0              xjmp L410
 1ACC           X276:
 1ACC           X266:
 1ACC 90C0              xjmp L399
 1ACE           L401:
 1ACE           ; 		case 0:
 1ACE           ; 			SetMotRunPam(MOT_SAMP_NEEDLE,240,10,CURRENT_SAMP_NEEDLE);
 1ACE 83E0              ldi R24,3
 1AD0 8A83              std y+2,R24
 1AD2 8AE0              ldi R24,10
 1AD4 8883              std y+0,R24
 1AD6 20EF              ldi R18,240
 1AD8 03E0              ldi R16,3
 1ADA 0E940000          xcall _SetMotRunPam
 1ADE           ;                       MotInitCheck(MOT_SAMP_NEEDLE);
 1ADE 03E0              ldi R16,3
 1AE0 0E940000          xcall _MotInitCheck
 1AE4           ;                       waitMotor1 = 1;
 1AE4 81E0              ldi R24,1
 1AE6 80930400          sts _waitMotor1,R24
 1AEA           ;                       mainStep = 1;
 1AEA 80930000          sts _mainStep,R24
 1AEE           ;                       break;
 1AEE 7FC0              xjmp L399
 1AF0           L402:
 1AF0           ; 		case 1:
 1AF0           ; 			SetMotRunPam(MOT_SAMP_TRUN,120,40,CURRENT_SAMP_TRUN);
 1AF0 84E0              ldi R24,4
 1AF2 8A83              std y+2,R24
 1AF4 88E2              ldi R24,40
 1AF6 8883              std y+0,R24
 1AF8 28E7              ldi R18,120
 1AFA 02E0              ldi R16,2
 1AFC 0E940000          xcall _SetMotRunPam
 1B00           ;                       MotInitCheck(MOT_SAMP_TRUN);
 1B00 02E0              ldi R16,2
 1B02 0E940000          xcall _MotInitCheck
 1B06           ;                       SetMotRunPam(MOT_CARD_LOAD,140,10,CURRENT_CARD_LOAD);
 1B06 84E0              ldi R24,4
 1B08 8A83              std y+2,R24
 1B0A 8AE0              ldi R24,10
 1B0C 8883              std y+0,R24
 1B0E 2CE8              ldi R18,140
 1B10 04E0              ldi R16,4
 1B12 0E940000          xcall _SetMotRunPam
 1B16           ;                       MotInitCheck(MOT_CARD_LOAD);
 1B16 04E0              ldi R16,4
 1B18 0E940000          xcall _MotInitCheck
 1B1C           ;                       waitMotor0 = 1;
 1B1C 81E0              ldi R24,1
 1B1E 80930300          sts _waitMotor0,R24
 1B22           ;                       mainStep = 2;
 1B22 82E0              ldi R24,2
 1B24 80930000          sts _mainStep,R24
 1B28           ;                       break;
 1B28 62C0              xjmp L399
 1B2A           L403:
 1B2A           ; 		case 2:
 1B2A           ; 			SetDelayTime(1, 5);
 1B2A 25E0              ldi R18,5
 1B2C 30E0              ldi R19,0
 1B2E 01E0              ldi R16,1
 1B30 0E940000          xcall _SetDelayTime
 1B34           ;                       mainStep = 3;
 1B34 83E0              ldi R24,3
 1B36 80930000          sts _mainStep,R24
 1B3A           ;                       break;
 1B3A 59C0              xjmp L399
 1B3C           L404:
 1B3C           ; 		case 3:
 1B3C           ; 			MotRunTo(MOT_CARD_LOAD, _POS_CARDLOAD_DROP);
 1B3C 2AE4              ldi R18,74
 1B3E 30E0              ldi R19,0
 1B40 04E0              ldi R16,4
 1B42 0E940000          xcall _MotRunTo
 1B46           ;                       waitMotor2 = 1;
 1B46 81E0              ldi R24,1
 1B48 80930500          sts _waitMotor2,R24
 1B4C           ;                       mainStep = 4;
 1B4C 84E0              ldi R24,4
 1B4E 80930000          sts _mainStep,R24
 1B52           ;                       break;
 1B52 4DC0              xjmp L399
 1B54           L405:
 1B54           ; 		case 4:
 1B54           ; 			SetDelayTime(1, 5);
 1B54 25E0              ldi R18,5
 1B56 30E0              ldi R19,0
 1B58 01E0              ldi R16,1
 1B5A 0E940000          xcall _SetDelayTime
 1B5E           ;                       mainStep = 5;
 1B5E 85E0              ldi R24,5
 1B60 80930000          sts _mainStep,R24
 1B64           ;                       break;
 1B64 44C0              xjmp L399
 1B66           L406:
 1B66           ; 		case 5:
 1B66           ; 			MotRunTo(MOT_SAMP_NEEDLE, GetDropHeight());
 1B66 0E945001          xcall _GetDropHeight
 1B6A 5801              movw R10,R16
 1B6C 9501              movw R18,R10
 1B6E 03E0              ldi R16,3
 1B70 0E940000          xcall _MotRunTo
 1B74           ;                       waitMotor1 = 1;
 1B74 81E0              ldi R24,1
 1B76 80930400          sts _waitMotor1,R24
 1B7A           ;                       mainStep = 6;
 1B7A 86E0              ldi R24,6
 1B7C 80930000          sts _mainStep,R24
 1B80           ;                       break;
 1B80 36C0              xjmp L399
 1B82           L407:
 1B82           ; 		case 6:
 1B82           ; 			SetDelayTime(1, 30);
 1B82 2EE1              ldi R18,30
 1B84 30E0              ldi R19,0
 1B86 01E0              ldi R16,1
 1B88 0E940000          xcall _SetDelayTime
 1B8C           ;                       mainStep = 7;
 1B8C 87E0              ldi R24,7
 1B8E 80930000          sts _mainStep,R24
 1B92           ;                       break;
 1B92 2DC0              xjmp L399
 1B94           L408:
 1B94           ; 		case 7:
 1B94           ; 			MotRunTo(MOT_SAMP_NEEDLE, 0);
 1B94 2227              clr R18
 1B96 3327              clr R19
 1B98 03E0              ldi R16,3
 1B9A 0E940000          xcall _MotRunTo
 1B9E           ;                       waitMotor1 = 1;
 1B9E 81E0              ldi R24,1
 1BA0 80930400          sts _waitMotor1,R24
 1BA4           ;                       mainStep = 8;
 1BA4 88E0              ldi R24,8
 1BA6 80930000          sts _mainStep,R24
 1BAA           ;                       break;
 1BAA 21C0              xjmp L399
 1BAC           L409:
 1BAC           ; 		case 8:
 1BAC           ; 			MotRunTo(MOT_CARD_LOAD, 0);
 1BAC 2227              clr R18
 1BAE 3327              clr R19
 1BB0 04E0              ldi R16,4
 1BB2 0E940000          xcall _MotRunTo
 1BB6           ;                       waitMotor2 = 1;
 1BB6 81E0              ldi R24,1
 1BB8 80930500          sts _waitMotor2,R24
 1BBC           ;                       mainStep = 9;
 1BBC 89E0              ldi R24,9
 1BBE 80930000          sts _mainStep,R24
 1BC2           ;                       break;
 1BC2 15C0              xjmp L399
 1BC4           L410:
 1BC4           ; 		case 9:
 1BC4           ; 			Uart0ReUnable;
 1BC4 8091C100          lds R24,193
 1BC8 8F7E              andi R24,239
 1BCA 8093C100          sts 193,R24
 1BCE           ;                       uart_Printf("%s\r\n",strM4138);
 1BCE 20E0              ldi R18,<_strM4138
 1BD0 30E0              ldi R19,>_strM4138
 1BD2 00E0              ldi R16,<L47
 1BD4 10E0              ldi R17,>L47
 1BD6 0E940000          xcall _uart_Printf
 1BDA           ;                       Uart0ReEnable;
 1BDA 8091C100          lds R24,193
 1BDE 8061              ori R24,16
 1BE0 8093C100          sts 193,R24
 1BE4           ;                       mainStep = 0;
 1BE4 2224              clr R2
 1BE6 20920000          sts _mainStep,R2
 1BEA           ;                       return 1;
 1BEA 01E0              ldi R16,1
 1BEC 01C0              xjmp L383
 1BEE           L399:
 1BEE           ; 			break;
 1BEE           ; 		default:
 1BEE           ; 			break;
 1BEE           ; 		}
 1BEE           ; 	return 0;
 1BEE 0027              clr R16
 1BF0           L383:
 1BF0                   .dbline 0 ; func end
 1BF0 2396              adiw R28,3
 1BF2 0C940000          xjmp pop_xgset300C
                        .even
 1BF6           _MixHeightCheck::
 1BF6 0E940000          xcall push_xgset300C
 1BFA 2397              sbiw R28,3
 1BFC           ; 
 1BFC           ; }
 1BFC           ; 
 1BFC           ; 
 1BFC           ; unsigned char MixHeightCheck(void)
 1BFC           ; {
 1BFC           ;       if(WaitDelayTime(1))            return 0;
 1BFC 01E0              ldi R16,1
 1BFE 0E940000          xcall _WaitDelayTime
 1C02 0023              tst R16
 1C04 11F0              breq L412
 1C06           X277:
 1C06 0027              clr R16
 1C08 F2C0              xjmp L411
 1C0A           L412:
 1C0A           ; 	if(waitMotor0){	if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1C0A 20900300          lds R2,_waitMotor0
 1C0E 2220              tst R2
 1C10 51F0              breq L414
 1C12           X278:
 1C12 02E0              ldi R16,2
 1C14 0E940000          xcall _GetMotState
 1C18 0130              cpi R16,1
 1C1A 11F0              breq L416
 1C1C           X279:
 1C1C 0027              clr R16
 1C1E E7C0              xjmp L411
 1C20           L416:
 1C20 2224              clr R2
 1C22 20920300          sts _waitMotor0,R2
 1C26           L414:
 1C26           ; 	if(waitMotor1){	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotor1 = 0;	}
 1C26 20900400          lds R2,_waitMotor1
 1C2A 2220              tst R2
 1C2C 59F0              breq L418
 1C2E           X280:
 1C2E 03E0              ldi R16,3
 1C30 0E940000          xcall _GetMotState
 1C34 402F              mov R20,R16
 1C36 0130              cpi R16,1
 1C38 11F0              breq L420
 1C3A           X281:
 1C3A 0027              clr R16
 1C3C D8C0              xjmp L411
 1C3E           L420:
 1C3E 2224              clr R2
 1C40 20920400          sts _waitMotor1,R2
 1C44           L418:
 1C44           ; 	if(waitMotor2){	if(GetMotState(MOT_CARD_LOAD)!=STA_SLAVE_FREE)	return 0;	waitMotor2 = 0;	}
 1C44 20900500          lds R2,_waitMotor2
 1C48 2220              tst R2
 1C4A 59F0              breq L422
 1C4C           X282:
 1C4C 04E0              ldi R16,4
 1C4E 0E940000          xcall _GetMotState
 1C52 402F              mov R20,R16
 1C54 0130              cpi R16,1
 1C56 11F0              breq L424
 1C58           X283:
 1C58 0027              clr R16
 1C5A C9C0              xjmp L411
 1C5C           L424:
 1C5C 2224              clr R2
 1C5E 20920500          sts _waitMotor2,R2
 1C62           L422:
 1C62           ; 
 1C62           ; 	switch(mainStep){
 1C62 40910000          lds R20,_mainStep
 1C66 5527              clr R21
 1C68 4030              cpi R20,0
 1C6A 4507              cpc R20,R21
 1C6C 09F4              brne X294
 1C6E 2EC0              xjmp L429
 1C70           X294:
 1C70           X284:
 1C70 4130              cpi R20,1
 1C72 E0E0              ldi R30,0
 1C74 5E07              cpc R21,R30
 1C76 09F4              brne X295
 1C78 3AC0              xjmp L430
 1C7A           X295:
 1C7A           X285:
 1C7A 4230              cpi R20,2
 1C7C E0E0              ldi R30,0
 1C7E 5E07              cpc R21,R30
 1C80 09F4              brne X296
 1C82 52C0              xjmp L431
 1C84           X296:
 1C84           X286:
 1C84 4330              cpi R20,3
 1C86 E0E0              ldi R30,0
 1C88 5E07              cpc R21,R30
 1C8A 09F4              brne X297
 1C8C 56C0              xjmp L432
 1C8E           X297:
 1C8E           X287:
 1C8E 4430              cpi R20,4
 1C90 E0E0              ldi R30,0
 1C92 5E07              cpc R21,R30
 1C94 09F4              brne X298
 1C96 5DC0              xjmp L433
 1C98           X298:
 1C98           X288:
 1C98 4530              cpi R20,5
 1C9A E0E0              ldi R30,0
 1C9C 5E07              cpc R21,R30
 1C9E 09F4              brne X299
 1CA0 61C0              xjmp L434
 1CA2           X299:
 1CA2           X289:
 1CA2 4630              cpi R20,6
 1CA4 E0E0              ldi R30,0
 1CA6 5E07              cpc R21,R30
 1CA8 09F4              brne X300
 1CAA 6AC0              xjmp L435
 1CAC           X300:
 1CAC           X290:
 1CAC 4730              cpi R20,7
 1CAE E0E0              ldi R30,0
 1CB0 5E07              cpc R21,R30
 1CB2 09F4              brne X301
 1CB4 6EC0              xjmp L436
 1CB6           X301:
 1CB6           X291:
 1CB6 4830              cpi R20,8
 1CB8 E0E0              ldi R30,0
 1CBA 5E07              cpc R21,R30
 1CBC 09F4              brne X302
 1CBE 75C0              xjmp L437
 1CC0           X302:
 1CC0           X292:
 1CC0 4930              cpi R20,9
 1CC2 E0E0              ldi R30,0
 1CC4 5E07              cpc R21,R30
 1CC6 09F4              brne X303
 1CC8 7CC0              xjmp L438
 1CCA           X303:
 1CCA           X293:
 1CCA 90C0              xjmp L427
 1CCC           L429:
 1CCC           ; 		case 0:
 1CCC           ; 			SetMotRunPam(MOT_SAMP_NEEDLE,240,10,CURRENT_SAMP_NEEDLE);
 1CCC 83E0              ldi R24,3
 1CCE 8A83              std y+2,R24
 1CD0 8AE0              ldi R24,10
 1CD2 8883              std y+0,R24
 1CD4 20EF              ldi R18,240
 1CD6 03E0              ldi R16,3
 1CD8 0E940000          xcall _SetMotRunPam
 1CDC           ;                       MotInitCheck(MOT_SAMP_NEEDLE);
 1CDC 03E0              ldi R16,3
 1CDE 0E940000          xcall _MotInitCheck
 1CE2           ;                       waitMotor1 = 1;
 1CE2 81E0              ldi R24,1
 1CE4 80930400          sts _waitMotor1,R24
 1CE8           ;                       mainStep = 1;
 1CE8 80930000          sts _mainStep,R24
 1CEC           ;                       break;
 1CEC 7FC0              xjmp L427
 1CEE           L430:
 1CEE           ; 		case 1:
 1CEE           ; 			SetMotRunPam(MOT_SAMP_TRUN,120,40,CURRENT_SAMP_TRUN);
 1CEE 84E0              ldi R24,4
 1CF0 8A83              std y+2,R24
 1CF2 88E2              ldi R24,40
 1CF4 8883              std y+0,R24
 1CF6 28E7              ldi R18,120
 1CF8 02E0              ldi R16,2
 1CFA 0E940000          xcall _SetMotRunPam
 1CFE           ;                       MotInitCheck(MOT_SAMP_TRUN);
 1CFE 02E0              ldi R16,2
 1D00 0E940000          xcall _MotInitCheck
 1D04           ;                       SetMotRunPam(MOT_CARD_LOAD,140,10,CURRENT_CARD_LOAD);
 1D04 84E0              ldi R24,4
 1D06 8A83              std y+2,R24
 1D08 8AE0              ldi R24,10
 1D0A 8883              std y+0,R24
 1D0C 2CE8              ldi R18,140
 1D0E 04E0              ldi R16,4
 1D10 0E940000          xcall _SetMotRunPam
 1D14           ;                       MotInitCheck(MOT_CARD_LOAD);
 1D14 04E0              ldi R16,4
 1D16 0E940000          xcall _MotInitCheck
 1D1A           ;                       waitMotor0 = 1;
 1D1A 81E0              ldi R24,1
 1D1C 80930300          sts _waitMotor0,R24
 1D20           ;                       mainStep = 2;
 1D20 82E0              ldi R24,2
 1D22 80930000          sts _mainStep,R24
 1D26           ;                       break;
 1D26 62C0              xjmp L427
 1D28           L431:
 1D28           ; 		case 2:
 1D28           ; 			SetDelayTime(1, 5);
 1D28 25E0              ldi R18,5
 1D2A 30E0              ldi R19,0
 1D2C 01E0              ldi R16,1
 1D2E 0E940000          xcall _SetDelayTime
 1D32           ;                       mainStep = 3;
 1D32 83E0              ldi R24,3
 1D34 80930000          sts _mainStep,R24
 1D38           ;                       break;
 1D38 59C0              xjmp L427
 1D3A           L432:
 1D3A           ; 		case 3:
 1D3A           ; 			MotRunTo(MOT_CARD_LOAD, _POS_CARDLOAD_MIX);
 1D3A 2DE8              ldi R18,141
 1D3C 30E0              ldi R19,0
 1D3E 04E0              ldi R16,4
 1D40 0E940000          xcall _MotRunTo
 1D44           ;                       waitMotor2 = 1;
 1D44 81E0              ldi R24,1
 1D46 80930500          sts _waitMotor2,R24
 1D4A           ;                       mainStep = 4;
 1D4A 84E0              ldi R24,4
 1D4C 80930000          sts _mainStep,R24
 1D50           ;                       break;
 1D50 4DC0              xjmp L427
 1D52           L433:
 1D52           ; 		case 4:
 1D52           ; 			SetDelayTime(1, 5);
 1D52 25E0              ldi R18,5
 1D54 30E0              ldi R19,0
 1D56 01E0              ldi R16,1
 1D58 0E940000          xcall _SetDelayTime
 1D5C           ;                       mainStep = 5;
 1D5C 85E0              ldi R24,5
 1D5E 80930000          sts _mainStep,R24
 1D62           ;                       break;
 1D62 44C0              xjmp L427
 1D64           L434:
 1D64           ; 		case 5:
 1D64           ; 			MotRunTo(MOT_SAMP_NEEDLE, GetMixHeight());
 1D64 0E94CF01          xcall _GetMixHeight
 1D68 5801              movw R10,R16
 1D6A 9501              movw R18,R10
 1D6C 03E0              ldi R16,3
 1D6E 0E940000          xcall _MotRunTo
 1D72           ;                       waitMotor1 = 1;
 1D72 81E0              ldi R24,1
 1D74 80930400          sts _waitMotor1,R24
 1D78           ;                       mainStep = 6;
 1D78 86E0              ldi R24,6
 1D7A 80930000          sts _mainStep,R24
 1D7E           ;                       break;
 1D7E 36C0              xjmp L427
 1D80           L435:
 1D80           ; 		case 6:
 1D80           ; 			SetDelayTime(1, 30);
 1D80 2EE1              ldi R18,30
 1D82 30E0              ldi R19,0
 1D84 01E0              ldi R16,1
 1D86 0E940000          xcall _SetDelayTime
 1D8A           ;                       mainStep = 7;
 1D8A 87E0              ldi R24,7
 1D8C 80930000          sts _mainStep,R24
 1D90           ;                       break;
 1D90 2DC0              xjmp L427
 1D92           L436:
 1D92           ; 		case 7:
 1D92           ; 			MotRunTo(MOT_SAMP_NEEDLE, 0);
 1D92 2227              clr R18
 1D94 3327              clr R19
 1D96 03E0              ldi R16,3
 1D98 0E940000          xcall _MotRunTo
 1D9C           ;                       waitMotor1 = 1;
 1D9C 81E0              ldi R24,1
 1D9E 80930400          sts _waitMotor1,R24
 1DA2           ;                       mainStep = 8;
 1DA2 88E0              ldi R24,8
 1DA4 80930000          sts _mainStep,R24
 1DA8           ;                       break;
 1DA8 21C0              xjmp L427
 1DAA           L437:
 1DAA           ; 		case 8:
 1DAA           ; 			MotRunTo(MOT_CARD_LOAD, 0);
 1DAA 2227              clr R18
 1DAC 3327              clr R19
 1DAE 04E0              ldi R16,4
 1DB0 0E940000          xcall _MotRunTo
 1DB4           ;                       waitMotor2 = 1;
 1DB4 81E0              ldi R24,1
 1DB6 80930500          sts _waitMotor2,R24
 1DBA           ;                       mainStep = 9;
 1DBA 89E0              ldi R24,9
 1DBC 80930000          sts _mainStep,R24
 1DC0           ;                       break;
 1DC0 15C0              xjmp L427
 1DC2           L438:
 1DC2           ; 		case 9:
 1DC2           ; 			Uart0ReUnable;
 1DC2 8091C100          lds R24,193
 1DC6 8F7E              andi R24,239
 1DC8 8093C100          sts 193,R24
 1DCC           ;                       uart_Printf("%s\r\n",strM4119);
 1DCC 20E0              ldi R18,<_strM4119
 1DCE 30E0              ldi R19,>_strM4119
 1DD0 00E0              ldi R16,<L47
 1DD2 10E0              ldi R17,>L47
 1DD4 0E940000          xcall _uart_Printf
 1DD8           ;                       Uart0ReEnable;
 1DD8 8091C100          lds R24,193
 1DDC 8061              ori R24,16
 1DDE 8093C100          sts 193,R24
 1DE2           ;                       mainStep = 0;
 1DE2 2224              clr R2
 1DE4 20920000          sts _mainStep,R2
 1DE8           ;                       return 1;
 1DE8 01E0              ldi R16,1
 1DEA 01C0              xjmp L411
 1DEC           L427:
 1DEC           ; 			break;
 1DEC           ; 		default:
 1DEC           ; 			break;
 1DEC           ; 		}
 1DEC           ; 	return 0;
 1DEC 0027              clr R16
 1DEE           L411:
 1DEE                   .dbline 0 ; func end
 1DEE 2396              adiw R28,3
 1DF0 0C940000          xjmp pop_xgset300C
                        .area data(ram, con, rel)
 0009           _DiluentQuantifyVolume:
 0009                   .blkb 2
                        .area idata
 0009 E803              .word 1000
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                ;              n -> R20
                        .even
 1DF4           _SetDiluentQuantifyVolume::
 1DF4 4A93              st -y,R20
 1DF6 402F              mov R20,R16
 1DF8           ; 
 1DF8           ; }
 1DF8           ; 
 1DF8           ; 
 1DF8           ; static unsigned int DiluentQuantifyVolume = 10*100;
 1DF8           ; void SetDiluentQuantifyVolume(unsigned char n){
 1DF8           ;       if(n > 50)
 1DF8 82E3              ldi R24,50
 1DFA 8417              cp R24,R20
 1DFC 08F4              brsh L440
 1DFE           X304:
 1DFE           ; 		n = 50;
 1DFE 42E3              ldi R20,50
 1E00           L440:
 1E00           ; 	if(n == 0)
 1E00 4423              tst R20
 1E02 09F4              brne L442
 1E04           X305:
 1E04           ; 		n = 1;
 1E04 41E0              ldi R20,1
 1E06           L442:
 1E06           ; 	DiluentQuantifyVolume = n * 100;
 1E06 04E6              ldi R16,100
 1E08 142F              mov R17,R20
 1E0A 0103              mulsu R16,R17
 1E0C 10920A00          sts _DiluentQuantifyVolume+1,R1
 1E10 00920900          sts _DiluentQuantifyVolume,R0
 1E14           L439:
 1E14                   .dbline 0 ; func end
 1E14 4991              ld R20,y+
 1E16 0895              ret
                        .area data(ram, con, rel)
 000B           _QuantifyTestCnt::
 000B                   .blkb 2
                        .area idata
 000B 0000              .word 0
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                        .even
 1E18           _DiluentQuantifyTest::
 1E18 0E940000          xcall push_xgset300C
 1E1C 2297              sbiw R28,2
 1E1E           ; }
 1E1E           ; 
 1E1E           ; unsigned int QuantifyTestCnt = 0;
 1E1E           ; 
 1E1E           ; unsigned char DiluentQuantifyTest(void){
 1E1E           ;       // 稀释液泵定量测试
 1E1E           ;       
 1E1E           ;       if(WaitDelayTime(1))            return 0;
 1E1E 01E0              ldi R16,1
 1E20 0E940000          xcall _WaitDelayTime
 1E24 0023              tst R16
 1E26 11F0              breq L445
 1E28           X306:
 1E28 0027              clr R16
 1E2A E0C0              xjmp L444
 1E2C           L445:
 1E2C           ; 	if(waitMotor0){	if(GetMotState(MOT_DILUENT)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 1E2C 20900300          lds R2,_waitMotor0
 1E30 2220              tst R2
 1E32 51F0              breq L447
 1E34           X307:
 1E34 09E0              ldi R16,9
 1E36 0E940000          xcall _GetMotState
 1E3A 0130              cpi R16,1
 1E3C 11F0              breq L449
 1E3E           X308:
 1E3E 0027              clr R16
 1E40 D5C0              xjmp L444
 1E42           L449:
 1E42 2224              clr R2
 1E44 20920300          sts _waitMotor0,R2
 1E48           L447:
 1E48           ; 	if(waitMotor1){	if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitMotor1 = 0;	}
 1E48 20900400          lds R2,_waitMotor1
 1E4C 2220              tst R2
 1E4E 59F0              breq L451
 1E50           X309:
 1E50 0BE0              ldi R16,11
 1E52 0E940000          xcall _GetMotState
 1E56 402F              mov R20,R16
 1E58 0130              cpi R16,1
 1E5A 11F0              breq L453
 1E5C           X310:
 1E5C 0027              clr R16
 1E5E C6C0              xjmp L444
 1E60           L453:
 1E60 2224              clr R2
 1E62 20920400          sts _waitMotor1,R2
 1E66           L451:
 1E66           ; 
 1E66           ; 	if(waitStartKey){
 1E66 20900800          lds R2,_waitStartKey
 1E6A 2220              tst R2
 1E6C 39F1              breq L455
 1E6E           X311:
 1E6E           ; 		if(quitFlag == 1){
 1E6E 80910700          lds R24,_quitFlag
 1E72 8130              cpi R24,1
 1E74 C9F4              brne L457
 1E76           X312:
 1E76           ; 			mainStep = 0;
 1E76 2224              clr R2
 1E78 20920000          sts _mainStep,R2
 1E7C           ;                       waitStartKey = 0;
 1E7C 20920800          sts _waitStartKey,R2
 1E80           ;                       quitFlag = 0;
 1E80 20920700          sts _quitFlag,R2
 1E84           ;                       Uart0ReUnable;
 1E84 8091C100          lds R24,193
 1E88 8F7E              andi R24,239
 1E8A 8093C100          sts 193,R24
 1E8E           ;                       uart_Printf("%s\r\n",strM4151);
 1E8E 20E0              ldi R18,<_strM4151
 1E90 30E0              ldi R19,>_strM4151
 1E92 00E0              ldi R16,<L47
 1E94 10E0              ldi R17,>L47
 1E96 0E940000          xcall _uart_Printf
 1E9A           ;                       Uart0ReEnable;
 1E9A 8091C100          lds R24,193
 1E9E 8061              ori R24,16
 1EA0 8093C100          sts 193,R24
 1EA4           ;                       return 1;               // 结束退出
 1EA4 01E0              ldi R16,1
 1EA6 A2C0              xjmp L444
 1EA8           L457:
 1EA8           ; 			}
 1EA8           ; 		if(WaitStartKey()==0)
 1EA8 0E940000          xcall _WaitStartKey
 1EAC A02E              mov R10,R16
 1EAE 0023              tst R16
 1EB0 11F4              brne L459
 1EB2           X313:
 1EB2           ; 			return 0;
 1EB2 0027              clr R16
 1EB4 9BC0              xjmp L444
 1EB6           L459:
 1EB6           ; 		waitStartKey = 0;	
 1EB6 2224              clr R2
 1EB8 20920800          sts _waitStartKey,R2
 1EBC           ;               }
 1EBC           L455:
 1EBC           ; 	
 1EBC           ; 	switch(mainStep){
 1EBC 40910000          lds R20,_mainStep
 1EC0 5527              clr R21
 1EC2 4030              cpi R20,0
 1EC4 4507              cpc R20,R21
 1EC6 A1F0              breq L464
 1EC8           X314:
 1EC8 4130              cpi R20,1
 1ECA E0E0              ldi R30,0
 1ECC 5E07              cpc R21,R30
 1ECE 61F1              breq L465
 1ED0           X315:
 1ED0 4230              cpi R20,2
 1ED2 E0E0              ldi R30,0
 1ED4 5E07              cpc R21,R30
 1ED6 09F4              brne X319
 1ED8 47C0              xjmp L466
 1EDA           X319:
 1EDA           X316:
 1EDA 4330              cpi R20,3
 1EDC E0E0              ldi R30,0
 1EDE 5E07              cpc R21,R30
 1EE0 09F4              brne X320
 1EE2 49C0              xjmp L467
 1EE4           X320:
 1EE4           X317:
 1EE4 4430              cpi R20,4
 1EE6 E0E0              ldi R30,0
 1EE8 5E07              cpc R21,R30
 1EEA 09F4              brne X321
 1EEC 5BC0              xjmp L468
 1EEE           X321:
 1EEE           X318:
 1EEE 7DC0              xjmp L462
 1EF0           L464:
 1EF0           ; 		case 0:
 1EF0           ; 			quitFlag = 0;
 1EF0 2224              clr R2
 1EF2 20920700          sts _quitFlag,R2
 1EF6           ;                       SetEValve(EV_ALL, EV_CLOSE);
 1EF6 2227              clr R18
 1EF8 0027              clr R16
 1EFA 0E940000          xcall _SetEValve
 1EFE           ;                       _EffluentMotRun(150,200);
 1EFE 28EC              ldi R18,200
 1F00 30E0              ldi R19,0
 1F02 06E9              ldi R16,150
 1F04 10E0              ldi R17,0
 1F06 0E940000          xcall __EffluentMotRun
 1F0A           ; #if   (DILUTE_TUBE == 14)
 1F0A           ;                                                       _DiluentMotRun(40+5, 64);               // 注入40个单位溶液
 1F0A           ; #elif (DILUTE_TUBE == 16)
 1F0A           ;                                                       _DiluentMotRun(12+2, 64);               // 注入12+2个单位溶液
 1F0A 20E4              ldi R18,64
 1F0C 30E0              ldi R19,0
 1F0E 0EE0              ldi R16,14
 1F10 10E0              ldi R17,0
 1F12 0E940000          xcall __DiluentMotRun
 1F16           ; #endif
 1F16           ;                       SetDelayTime(1, 30);
 1F16 2EE1              ldi R18,30
 1F18 30E0              ldi R19,0
 1F1A 01E0              ldi R16,1
 1F1C 0E940000          xcall _SetDelayTime
 1F20           ;                       mainStep = 1;
 1F20 81E0              ldi R24,1
 1F22 80930000          sts _mainStep,R24
 1F26           ;                       break;
 1F26 61C0              xjmp L462
 1F28           L465:
 1F28           ; 		case 1:
 1F28           ; 			MotStop(MOT_DILUENT);
 1F28 09E0              ldi R16,9
 1F2A 0E940000          xcall _MotStop
 1F2E           ;                       MotStop(MOT_EFFLUENT);
 1F2E 0BE0              ldi R16,11
 1F30 0E940000          xcall _MotStop
 1F34           ;                       QuantifyTestCnt = 0;
 1F34 2224              clr R2
 1F36 3324              clr R3
 1F38 30920C00          sts _QuantifyTestCnt+1,R3
 1F3C 20920B00          sts _QuantifyTestCnt,R2
 1F40           ;                       mainStep = 2;
 1F40 82E0              ldi R24,2
 1F42 80930000          sts _mainStep,R24
 1F46           ;                       Uart0ReUnable;
 1F46 8091C100          lds R24,193
 1F4A 8F7E              andi R24,239
 1F4C 8093C100          sts 193,R24
 1F50           ;                       uart_Printf("%s\r\n",strM4150);
 1F50 20E0              ldi R18,<_strM4150
 1F52 30E0              ldi R19,>_strM4150
 1F54 00E0              ldi R16,<L47
 1F56 10E0              ldi R17,>L47
 1F58 0E940000          xcall _uart_Printf
 1F5C           ;                       Uart0ReEnable;
 1F5C 8091C100          lds R24,193
 1F60 8061              ori R24,16
 1F62 8093C100          sts 193,R24
 1F66           ;                       break;
 1F66 41C0              xjmp L462
 1F68           L466:
 1F68           ; 		case 2:
 1F68           ; 			waitStartKey = 1;
 1F68 81E0              ldi R24,1
 1F6A 80930800          sts _waitStartKey,R24
 1F6E           ;                       mainStep = 3;
 1F6E 83E0              ldi R24,3
 1F70 80930000          sts _mainStep,R24
 1F74           ;                       break;
 1F74 3AC0              xjmp L462
 1F76           L467:
 1F76           ; 		case 3:
 1F76           ; 			QuantifyTestCnt ++;
 1F76 80910B00          lds R24,_QuantifyTestCnt
 1F7A 90910C00          lds R25,_QuantifyTestCnt+1
 1F7E 0196              adiw R24,1
 1F80 90930C00          sts _QuantifyTestCnt+1,R25
 1F84 80930B00          sts _QuantifyTestCnt,R24
 1F88           ;                       MotRun(MOT_DILUENT, DiluentQuantifyVolume);
 1F88 20910900          lds R18,_DiluentQuantifyVolume
 1F8C 30910A00          lds R19,_DiluentQuantifyVolume+1
 1F90 09E0              ldi R16,9
 1F92 0E940000          xcall _MotRun
 1F96           ;                       waitMotor0 = 1;
 1F96 81E0              ldi R24,1
 1F98 80930300          sts _waitMotor0,R24
 1F9C           ;                       mainStep = 4;
 1F9C 84E0              ldi R24,4
 1F9E 80930000          sts _mainStep,R24
 1FA2           ;                       break;
 1FA2 23C0              xjmp L462
 1FA4           L468:
 1FA4           ; 		case 4:
 1FA4           ; 			Uart0ReUnable;
 1FA4 8091C100          lds R24,193
 1FA8 8F7E              andi R24,239
 1FAA 8093C100          sts 193,R24
 1FAE           ;                       uart_Printf("%s $%4d\r\n",strM4154, QuantifyTestCnt);
 1FAE 20900B00          lds R2,_QuantifyTestCnt
 1FB2 30900C00          lds R3,_QuantifyTestCnt+1
 1FB6 3982              std y+1,R3
 1FB8 2882              std y+0,R2
 1FBA 20E0              ldi R18,<_strM4154
 1FBC 30E0              ldi R19,>_strM4154
 1FBE 00E0              ldi R16,<L5
 1FC0 10E0              ldi R17,>L5
 1FC2 0E940000          xcall _uart_Printf
 1FC6           ;                       Uart0ReEnable;
 1FC6 8091C100          lds R24,193
 1FCA 8061              ori R24,16
 1FCC 8093C100          sts 193,R24
 1FD0           ;                       MotRun(MOT_EFFLUENT, DiluentQuantifyVolume);
 1FD0 20910900          lds R18,_DiluentQuantifyVolume
 1FD4 30910A00          lds R19,_DiluentQuantifyVolume+1
 1FD8 0BE0              ldi R16,11
 1FDA 0E940000          xcall _MotRun
 1FDE           ;                       waitMotor1 = 1;
 1FDE 81E0              ldi R24,1
 1FE0 80930400          sts _waitMotor1,R24
 1FE4           ;                       mainStep = 2;
 1FE4 82E0              ldi R24,2
 1FE6 80930000          sts _mainStep,R24
 1FEA           ;                       break;
 1FEA           ;               default:
 1FEA           ;                       break;
 1FEA           L462:
 1FEA           ; 		}
 1FEA           ; 	return 0;
 1FEA 0027              clr R16
 1FEC           L444:
 1FEC                   .dbline 0 ; func end
 1FEC 2296              adiw R28,2
 1FEE 0C940000          xjmp pop_xgset300C
                        .area data(ram, con, rel)
 000D           _LeanerQuantifyVolume:
 000D                   .blkb 2
                        .area idata
 000D E803              .word 1000
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                ;              n -> R20
                        .even
 1FF2           _SetLeanerQuantifyVolume::
 1FF2 4A93              st -y,R20
 1FF4 402F              mov R20,R16
 1FF6           ; }
 1FF6           ; 
 1FF6           ; static unsigned int LeanerQuantifyVolume = 10*100;
 1FF6           ; 
 1FF6           ; void SetLeanerQuantifyVolume(unsigned char n){
 1FF6           ;       if(n > 15)
 1FF6 8FE0              ldi R24,15
 1FF8 8417              cp R24,R20
 1FFA 08F4              brsh L470
 1FFC           X322:
 1FFC           ; 		n = 15;
 1FFC 4FE0              ldi R20,15
 1FFE           L470:
 1FFE           ; 	if(n == 0)
 1FFE 4423              tst R20
 2000 09F4              brne L472
 2002           X323:
 2002           ; 		n = 1;
 2002 41E0              ldi R20,1
 2004           L472:
 2004           ; 	LeanerQuantifyVolume = n * 100;
 2004 04E6              ldi R16,100
 2006 142F              mov R17,R20
 2008 0103              mulsu R16,R17
 200A 10920E00          sts _LeanerQuantifyVolume+1,R1
 200E 00920D00          sts _LeanerQuantifyVolume,R0
 2012           L469:
 2012                   .dbline 0 ; func end
 2012 4991              ld R20,y+
 2014 0895              ret
                        .even
 2016           _LeanerQuantifyTest::
 2016 0E940000          xcall push_xgset300C
 201A 2397              sbiw R28,3
 201C           ; }
 201C           ; 
 201C           ; unsigned char LeanerQuantifyTest(void){
 201C           ;       // 稀释液泵定量测试
 201C           ;       
 201C           ;       if(WaitDelayTime(1))            return 0;
 201C 01E0              ldi R16,1
 201E 0E940000          xcall _WaitDelayTime
 2022 0023              tst R16
 2024 11F0              breq L475
 2026           X324:
 2026 0027              clr R16
 2028 EFC0              xjmp L474
 202A           L475:
 202A           ; 	if(waitMotor0){	if(GetMotState(MOT_FLUID)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 202A 20900300          lds R2,_waitMotor0
 202E 2220              tst R2
 2030 51F0              breq L477
 2032           X325:
 2032 0AE0              ldi R16,10
 2034 0E940000          xcall _GetMotState
 2038 0130              cpi R16,1
 203A 11F0              breq L479
 203C           X326:
 203C 0027              clr R16
 203E E4C0              xjmp L474
 2040           L479:
 2040 2224              clr R2
 2042 20920300          sts _waitMotor0,R2
 2046           L477:
 2046           ; 	if(waitMotor1){	if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitMotor1 = 0;	}
 2046 20900400          lds R2,_waitMotor1
 204A 2220              tst R2
 204C 59F0              breq L481
 204E           X327:
 204E 0BE0              ldi R16,11
 2050 0E940000          xcall _GetMotState
 2054 402F              mov R20,R16
 2056 0130              cpi R16,1
 2058 11F0              breq L483
 205A           X328:
 205A 0027              clr R16
 205C D5C0              xjmp L474
 205E           L483:
 205E 2224              clr R2
 2060 20920400          sts _waitMotor1,R2
 2064           L481:
 2064           ; 
 2064           ; 	if(waitStartKey){
 2064 20900800          lds R2,_waitStartKey
 2068 2220              tst R2
 206A 39F1              breq L485
 206C           X329:
 206C           ; 		if(quitFlag == 1){
 206C 80910700          lds R24,_quitFlag
 2070 8130              cpi R24,1
 2072 C9F4              brne L487
 2074           X330:
 2074           ; 			mainStep = 0;
 2074 2224              clr R2
 2076 20920000          sts _mainStep,R2
 207A           ;                       waitStartKey = 0;
 207A 20920800          sts _waitStartKey,R2
 207E           ;                       quitFlag = 0;
 207E 20920700          sts _quitFlag,R2
 2082           ;                       Uart0ReUnable;
 2082 8091C100          lds R24,193
 2086 8F7E              andi R24,239
 2088 8093C100          sts 193,R24
 208C           ;                       uart_Printf("%s\r\n",strM4153);
 208C 20E0              ldi R18,<_strM4153
 208E 30E0              ldi R19,>_strM4153
 2090 00E0              ldi R16,<L47
 2092 10E0              ldi R17,>L47
 2094 0E940000          xcall _uart_Printf
 2098           ;                       Uart0ReEnable;
 2098 8091C100          lds R24,193
 209C 8061              ori R24,16
 209E 8093C100          sts 193,R24
 20A2           ;                       return 1;               // 结束退出
 20A2 01E0              ldi R16,1
 20A4 B1C0              xjmp L474
 20A6           L487:
 20A6           ; 			}
 20A6           ; 		if(WaitStartKey()==0)
 20A6 0E940000          xcall _WaitStartKey
 20AA A02E              mov R10,R16
 20AC 0023              tst R16
 20AE 11F4              brne L489
 20B0           X331:
 20B0           ; 			return 0;
 20B0 0027              clr R16
 20B2 AAC0              xjmp L474
 20B4           L489:
 20B4           ; 		waitStartKey = 0;	
 20B4 2224              clr R2
 20B6 20920800          sts _waitStartKey,R2
 20BA           ;               }
 20BA           L485:
 20BA           ; 	
 20BA           ; 	switch(mainStep){
 20BA 40910000          lds R20,_mainStep
 20BE 5527              clr R21
 20C0 4030              cpi R20,0
 20C2 4507              cpc R20,R21
 20C4 A9F0              breq L494
 20C6           X332:
 20C6 4130              cpi R20,1
 20C8 E0E0              ldi R30,0
 20CA 5E07              cpc R21,R30
 20CC 09F4              brne X337
 20CE 3AC0              xjmp L495
 20D0           X337:
 20D0           X333:
 20D0 4230              cpi R20,2
 20D2 E0E0              ldi R30,0
 20D4 5E07              cpc R21,R30
 20D6 09F4              brne X338
 20D8 55C0              xjmp L496
 20DA           X338:
 20DA           X334:
 20DA 4330              cpi R20,3
 20DC E0E0              ldi R30,0
 20DE 5E07              cpc R21,R30
 20E0 09F4              brne X339
 20E2 57C0              xjmp L497
 20E4           X339:
 20E4           X335:
 20E4 4430              cpi R20,4
 20E6 E0E0              ldi R30,0
 20E8 5E07              cpc R21,R30
 20EA 09F4              brne X340
 20EC 69C0              xjmp L498
 20EE           X340:
 20EE           X336:
 20EE 8BC0              xjmp L492
 20F0           L494:
 20F0           ; 		case 0:
 20F0           ; 			quitFlag = 0;
 20F0 2224              clr R2
 20F2 20920700          sts _quitFlag,R2
 20F6           ;                       SetEValve(EV_ALL, EV_CLOSE);
 20F6 2227              clr R18
 20F8 0027              clr R16
 20FA 0E940000          xcall _SetEValve
 20FE           ;                       SetMotRunPam(MOT_EFFLUENT, 240, 2, CURRENT_EFFLUENT);
 20FE 84E0              ldi R24,4
 2100 8A83              std y+2,R24
 2102 82E0              ldi R24,2
 2104 8883              std y+0,R24
 2106 20EF              ldi R18,240
 2108 0BE0              ldi R16,11
 210A 0E940000          xcall _SetMotRunPam
 210E           ;                       MotRun(MOT_EFFLUENT, 150*100);
 210E 28E9              ldi R18,15000
 2110 3AE3              ldi R19,58
 2112 0BE0              ldi R16,11
 2114 0E940000          xcall _MotRun
 2118           ;                       SetMotRunPam(MOT_FLUID, 60, 2, CURRENT_FLUID);
 2118 84E0              ldi R24,4
 211A 8A83              std y+2,R24
 211C 82E0              ldi R24,2
 211E 8883              std y+0,R24
 2120 2CE3              ldi R18,60
 2122 0AE0              ldi R16,10
 2124 0E940000          xcall _SetMotRunPam
 2128           ;                       MotRun(MOT_FLUID, 70*100);                      // 开启稀释液泵
 2128 28E5              ldi R18,7000
 212A 3BE1              ldi R19,27
 212C 0AE0              ldi R16,10
 212E 0E940000          xcall _MotRun
 2132           ;                       SetDelayTime(1, 30);
 2132 2EE1              ldi R18,30
 2134 30E0              ldi R19,0
 2136 01E0              ldi R16,1
 2138 0E940000          xcall _SetDelayTime
 213C           ;                       mainStep = 1;
 213C 81E0              ldi R24,1
 213E 80930000          sts _mainStep,R24
 2142           ;                       break;
 2142 61C0              xjmp L492
 2144           L495:
 2144           ; 		case 1:
 2144           ; 			MotStop(MOT_FLUID);
 2144 0AE0              ldi R16,10
 2146 0E940000          xcall _MotStop
 214A           ;                       MotStop(MOT_EFFLUENT);
 214A 0BE0              ldi R16,11
 214C 0E940000          xcall _MotStop
 2150           ;                       QuantifyTestCnt = 0; 
 2150 2224              clr R2
 2152 3324              clr R3
 2154 30920C00          sts _QuantifyTestCnt+1,R3
 2158 20920B00          sts _QuantifyTestCnt,R2
 215C           ;                       mainStep = 2;
 215C 82E0              ldi R24,2
 215E 80930000          sts _mainStep,R24
 2162           ;                       Uart0ReUnable;
 2162 8091C100          lds R24,193
 2166 8F7E              andi R24,239
 2168 8093C100          sts 193,R24
 216C           ;                       uart_Printf("%s\r\n",strM4152);
 216C 20E0              ldi R18,<_strM4152
 216E 30E0              ldi R19,>_strM4152
 2170 00E0              ldi R16,<L47
 2172 10E0              ldi R17,>L47
 2174 0E940000          xcall _uart_Printf
 2178           ;                       Uart0ReEnable;
 2178 8091C100          lds R24,193
 217C 8061              ori R24,16
 217E 8093C100          sts 193,R24
 2182           ;                       break;
 2182 41C0              xjmp L492
 2184           L496:
 2184           ; 		case 2:
 2184           ; 			waitStartKey = 1;
 2184 81E0              ldi R24,1
 2186 80930800          sts _waitStartKey,R24
 218A           ;                       mainStep = 3;
 218A 83E0              ldi R24,3
 218C 80930000          sts _mainStep,R24
 2190           ;                       break;
 2190 3AC0              xjmp L492
 2192           L497:
 2192           ; 		case 3:
 2192           ; 			QuantifyTestCnt ++;
 2192 80910B00          lds R24,_QuantifyTestCnt
 2196 90910C00          lds R25,_QuantifyTestCnt+1
 219A 0196              adiw R24,1
 219C 90930C00          sts _QuantifyTestCnt+1,R25
 21A0 80930B00          sts _QuantifyTestCnt,R24
 21A4           ;                       MotRun(MOT_FLUID, LeanerQuantifyVolume);
 21A4 20910D00          lds R18,_LeanerQuantifyVolume
 21A8 30910E00          lds R19,_LeanerQuantifyVolume+1
 21AC 0AE0              ldi R16,10
 21AE 0E940000          xcall _MotRun
 21B2           ;                       waitMotor0 = 1;
 21B2 81E0              ldi R24,1
 21B4 80930300          sts _waitMotor0,R24
 21B8           ;                       mainStep = 4;
 21B8 84E0              ldi R24,4
 21BA 80930000          sts _mainStep,R24
 21BE           ;                       break;
 21BE 23C0              xjmp L492
 21C0           L498:
 21C0           ; 		case 4:
 21C0           ; 			Uart0ReUnable;
 21C0 8091C100          lds R24,193
 21C4 8F7E              andi R24,239
 21C6 8093C100          sts 193,R24
 21CA           ;                       uart_Printf("%s $%4d\r\n",strM4154, QuantifyTestCnt);
 21CA 20900B00          lds R2,_QuantifyTestCnt
 21CE 30900C00          lds R3,_QuantifyTestCnt+1
 21D2 3982              std y+1,R3
 21D4 2882              std y+0,R2
 21D6 20E0              ldi R18,<_strM4154
 21D8 30E0              ldi R19,>_strM4154
 21DA 00E0              ldi R16,<L5
 21DC 10E0              ldi R17,>L5
 21DE 0E940000          xcall _uart_Printf
 21E2           ;                       Uart0ReEnable;
 21E2 8091C100          lds R24,193
 21E6 8061              ori R24,16
 21E8 8093C100          sts 193,R24
 21EC           ;                       MotRun(MOT_EFFLUENT, LeanerQuantifyVolume);
 21EC 20910D00          lds R18,_LeanerQuantifyVolume
 21F0 30910E00          lds R19,_LeanerQuantifyVolume+1
 21F4 0BE0              ldi R16,11
 21F6 0E940000          xcall _MotRun
 21FA           ;                       waitMotor1 = 1;
 21FA 81E0              ldi R24,1
 21FC 80930400          sts _waitMotor1,R24
 2200           ;                       mainStep = 2;
 2200 82E0              ldi R24,2
 2202 80930000          sts _mainStep,R24
 2206           ;                       break;
 2206           ;               default:
 2206           ;                       break;
 2206           L492:
 2206           ; 		}
 2206           ; 	return 0;
 2206 0027              clr R16
 2208           L474:
 2208                   .dbline 0 ; func end
 2208 2396              adiw R28,3
 220A 0C940000          xjmp pop_xgset300C
                        .area data(ram, con, rel)
 000F           _SampQuantifyVolume:
 000F                   .blkb 2
                        .area idata
 000F 2800              .word 40
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                ;              n -> R16
                        .even
 220E           _SetSampQuantifyVolume::
 220E           ; }
 220E           ; 
 220E           ; static unsigned int SampQuantifyVolume = 40;
 220E           ; void SetSampQuantifyVolume(unsigned char n){
 220E           ; 	if(n > 120)
 220E 88E7              ldi R24,120
 2210 8017              cp R24,R16
 2212 08F4              brsh L500
 2214           X341:
 2214           ; 		n = 120;
 2214 08E7              ldi R16,120
 2216           L500:
 2216           ; 	if(n <5)
 2216 0530              cpi R16,5
 2218 08F4              brsh L502
 221A           X342:
 221A           ; 		n = 5;
 221A 05E0              ldi R16,5
 221C           L502:
 221C           ; 	SampQuantifyVolume = n * 4;
 221C 202E              mov R2,R16
 221E 3324              clr R3
 2220 220C              lsl R2
 2222 331C              rol R3
 2224 220C              lsl R2
 2226 331C              rol R3
 2228 30921000          sts _SampQuantifyVolume+1,R3
 222C 20920F00          sts _SampQuantifyVolume,R2
 2230           L499:
 2230                   .dbline 0 ; func end
 2230 0895              ret
                        .area bss(ram, con, rel)
 0000           L505:
 0000                   .blkb 2
                        .area text(rom, con, rel)
                ;              i -> R10,R11
                        .even
 2232           _SampQuantifyTest::
 2232 0E940000          xcall push_xgset303C
 2236 2397              sbiw R28,3
 2238           ; }
 2238           ; 
 2238           ; unsigned char SampQuantifyTest(void){
 2238           ;       static unsigned int liqDetBaseAdc;
 2238           ;       unsigned int i;
 2238           ;       // 取样泵定量测试
 2238           ;       if(WaitDelayTime(1))            return 0;
 2238 01E0              ldi R16,1
 223A 0E940000          xcall _WaitDelayTime
 223E 0023              tst R16
 2240 11F0              breq L506
 2242           X343:
 2242 0027              clr R16
 2244 AEC3              xjmp L504
 2246           L506:
 2246           ; 	if(waitMotor0){	if(GetMotState(MOT_SAMP_PUMP)!=STA_SLAVE_FREE)		return 0;	waitMotor0 = 0;	}
 2246 20900300          lds R2,_waitMotor0
 224A 2220              tst R2
 224C 51F0              breq L508
 224E           X344:
 224E 0CE0              ldi R16,12
 2250 0E940000          xcall _GetMotState
 2254 0130              cpi R16,1
 2256 11F0              breq L510
 2258           X345:
 2258 0027              clr R16
 225A A3C3              xjmp L504
 225C           L510:
 225C 2224              clr R2
 225E 20920300          sts _waitMotor0,R2
 2262           L508:
 2262           ; 	if(waitMotor1){	if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)		return 0;	waitMotor1 = 0;	}
 2262 20900400          lds R2,_waitMotor1
 2266 2220              tst R2
 2268 59F0              breq L512
 226A           X346:
 226A 02E0              ldi R16,2
 226C 0E940000          xcall _GetMotState
 2270 402F              mov R20,R16
 2272 0130              cpi R16,1
 2274 11F0              breq L514
 2276           X347:
 2276 0027              clr R16
 2278 94C3              xjmp L504
 227A           L514:
 227A 2224              clr R2
 227C 20920400          sts _waitMotor1,R2
 2280           L512:
 2280           ; 	if(waitMotor2){	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotor2 = 0;	}
 2280 20900500          lds R2,_waitMotor2
 2284 2220              tst R2
 2286 59F0              breq L516
 2288           X348:
 2288 03E0              ldi R16,3
 228A 0E940000          xcall _GetMotState
 228E 402F              mov R20,R16
 2290 0130              cpi R16,1
 2292 11F0              breq L518
 2294           X349:
 2294 0027              clr R16
 2296 85C3              xjmp L504
 2298           L518:
 2298 2224              clr R2
 229A 20920500          sts _waitMotor2,R2
 229E           L516:
 229E           ; 	if(waitMotor3){	if(GetMotState(MOT_FLUID)!=STA_SLAVE_FREE)			return 0;	waitMotor3 = 0;	}
 229E 20900600          lds R2,_waitMotor3
 22A2 2220              tst R2
 22A4 59F0              breq L520
 22A6           X350:
 22A6 0AE0              ldi R16,10
 22A8 0E940000          xcall _GetMotState
 22AC 402F              mov R20,R16
 22AE 0130              cpi R16,1
 22B0 11F0              breq L522
 22B2           X351:
 22B2 0027              clr R16
 22B4 76C3              xjmp L504
 22B6           L522:
 22B6 2224              clr R2
 22B8 20920600          sts _waitMotor3,R2
 22BC           L520:
 22BC           ; 	if(waitMotor4){	if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitMotor4 = 0;	}
 22BC 20900700          lds R2,_waitMotor4
 22C0 2220              tst R2
 22C2 59F0              breq L524
 22C4           X352:
 22C4 0BE0              ldi R16,11
 22C6 0E940000          xcall _GetMotState
 22CA 402F              mov R20,R16
 22CC 0130              cpi R16,1
 22CE 11F0              breq L526
 22D0           X353:
 22D0 0027              clr R16
 22D2 67C3              xjmp L504
 22D4           L526:
 22D4 2224              clr R2
 22D6 20920700          sts _waitMotor4,R2
 22DA           L524:
 22DA           ; 
 22DA           ; 	if(waitStartKey){
 22DA 20900800          lds R2,_waitStartKey
 22DE 2220              tst R2
 22E0 B1F0              breq L528
 22E2           X354:
 22E2           ; 		if(quitFlag == 1){
 22E2 80910700          lds R24,_quitFlag
 22E6 8130              cpi R24,1
 22E8 41F4              brne L530
 22EA           X355:
 22EA           ; 			mainStep = 3;
 22EA 83E0              ldi R24,3
 22EC 80930000          sts _mainStep,R24
 22F0           ;                       workStep = 0;
 22F0 2224              clr R2
 22F2 20920100          sts _workStep,R2
 22F6           ;                       waitStartKey = 0;
 22F6 20920800          sts _waitStartKey,R2
 22FA           ;       //              quitFlag = 0;
 22FA           ;       //              uart_Printf("*4151 DiluentQuantifyTestQuit\r\n");
 22FA           ;       //              return 1;               // 结束退出
 22FA           ;                       }
 22FA           L530:
 22FA           ; 		if(WaitStartKey()==0)
 22FA 0E940000          xcall _WaitStartKey
 22FE A02E              mov R10,R16
 2300 0023              tst R16
 2302 11F4              brne L532
 2304           X356:
 2304           ; 			return 0;
 2304 0027              clr R16
 2306 4DC3              xjmp L504
 2308           L532:
 2308           ; 		waitStartKey = 0;	
 2308 2224              clr R2
 230A 20920800          sts _waitStartKey,R2
 230E           ;               }
 230E           L528:
 230E           ; 	
 230E           ; 	switch(mainStep){
 230E 40910000          lds R20,_mainStep
 2312 5527              clr R21
 2314 4030              cpi R20,0
 2316 4507              cpc R20,R21
 2318 81F0              breq L537
 231A           X357:
 231A 4130              cpi R20,1
 231C E0E0              ldi R30,0
 231E 5E07              cpc R21,R30
 2320 09F4              brne X396
 2322 53C1              xjmp L560
 2324           X396:
 2324           X358:
 2324 4230              cpi R20,2
 2326 E0E0              ldi R30,0
 2328 5E07              cpc R21,R30
 232A 09F4              brne X397
 232C BCC1              xjmp L570
 232E           X397:
 232E           X359:
 232E 4330              cpi R20,3
 2330 E0E0              ldi R30,0
 2332 5E07              cpc R21,R30
 2334 09F4              brne X398
 2336 D6C2              xjmp L591
 2338           X398:
 2338           X360:
 2338 33C3              xjmp L535
 233A           L537:
 233A           ; 		case 0:		// 准备工作
 233A           ; 			switch(workStep){
 233A 40910100          lds R20,_workStep
 233E 5527              clr R21
 2340 4030              cpi R20,0
 2342 4507              cpc R20,R21
 2344 21F1              breq L541
 2346           X361:
 2346 4130              cpi R20,1
 2348 E0E0              ldi R30,0
 234A 5E07              cpc R21,R30
 234C 09F4              brne X399
 234E 37C0              xjmp L542
 2350           X399:
 2350           X362:
 2350 4230              cpi R20,2
 2352 E0E0              ldi R30,0
 2354 5E07              cpc R21,R30
 2356 09F4              brne X400
 2358 44C0              xjmp L543
 235A           X400:
 235A           X363:
 235A 4330              cpi R20,3
 235C E0E0              ldi R30,0
 235E 5E07              cpc R21,R30
 2360 09F4              brne X401
 2362 4BC0              xjmp L544
 2364           X401:
 2364           X364:
 2364 4430              cpi R20,4
 2366 E0E0              ldi R30,0
 2368 5E07              cpc R21,R30
 236A 09F4              brne X402
 236C 55C0              xjmp L545
 236E           X402:
 236E           X365:
 236E 4530              cpi R20,5
 2370 E0E0              ldi R30,0
 2372 5E07              cpc R21,R30
 2374 09F4              brne X403
 2376 77C0              xjmp L546
 2378           X403:
 2378           X366:
 2378 4630              cpi R20,6
 237A E0E0              ldi R30,0
 237C 5E07              cpc R21,R30
 237E 09F4              brne X404
 2380 7AC0              xjmp L547
 2382           X404:
 2382           X367:
 2382 4730              cpi R20,7
 2384 E0E0              ldi R30,0
 2386 5E07              cpc R21,R30
 2388 09F4              brne X405
 238A C4C0              xjmp L551
 238C           X405:
 238C           X368:
 238C 09C3              xjmp L535
 238E           L541:
 238E           ; 				case 0:
 238E           ; 					quitFlag = 0;
 238E 2224              clr R2
 2390 20920700          sts _quitFlag,R2
 2394           ;                                       SetEValve(EV_ALL, EV_CLOSE);
 2394 2227              clr R18
 2396 0027              clr R16
 2398 0E940000          xcall _SetEValve
 239C           ;                                       SetMotRunPam(MOT_SAMP_NEEDLE, 240, 20, CURRENT_SAMP_NEEDLE);
 239C 83E0              ldi R24,3
 239E 8A83              std y+2,R24
 23A0 84E1              ldi R24,20
 23A2 8883              std y+0,R24
 23A4 20EF              ldi R18,240
 23A6 03E0              ldi R16,3
 23A8 0E940000          xcall _SetMotRunPam
 23AC           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 23AC 03E0              ldi R16,3
 23AE 0E940000          xcall _MotInitCheck
 23B2           ;                                       waitMotor2 = 1;
 23B2 81E0              ldi R24,1
 23B4 80930500          sts _waitMotor2,R24
 23B8           ;                                       workStep = 1;
 23B8 80930100          sts _workStep,R24
 23BC           ;                                       break;
 23BC F1C2              xjmp L535
 23BE           L542:
 23BE           ; 				case 1:
 23BE           ; 					SetMotRunPam(MOT_SAMP_TRUN, 32, 20, CURRENT_SAMP_TRUN);
 23BE 84E0              ldi R24,4
 23C0 8A83              std y+2,R24
 23C2 84E1              ldi R24,20
 23C4 8883              std y+0,R24
 23C6 20E2              ldi R18,32
 23C8 02E0              ldi R16,2
 23CA 0E940000          xcall _SetMotRunPam
 23CE           ;                                       MotInitCheck(MOT_SAMP_TRUN);
 23CE 02E0              ldi R16,2
 23D0 0E940000          xcall _MotInitCheck
 23D4           ;                                       waitMotor1 = 1;
 23D4 81E0              ldi R24,1
 23D6 80930400          sts _waitMotor1,R24
 23DA           ;                                       workStep = 2;
 23DA 82E0              ldi R24,2
 23DC 80930100          sts _workStep,R24
 23E0           ;                                       break;
 23E0 DFC2              xjmp L535
 23E2           L543:
 23E2           ; 				case 2:
 23E2           ; 					MotRunTo(MOT_SAMP_TRUN,_POS_NEEDLE_ON_MIXCENTRE);
 23E2 23E4              ldi R18,323
 23E4 31E0              ldi R19,1
 23E6 02E0              ldi R16,2
 23E8 0E940000          xcall _MotRunTo
 23EC           ;                                       waitMotor1 = 1;
 23EC 81E0              ldi R24,1
 23EE 80930400          sts _waitMotor1,R24
 23F2           ;                                       workStep = 3;
 23F2 83E0              ldi R24,3
 23F4 80930100          sts _workStep,R24
 23F8           ;                                       break;
 23F8 D3C2              xjmp L535
 23FA           L544:
 23FA           ; 				case 3:	// 
 23FA           ; 					MotRunTo(MOT_SAMP_NEEDLE, 1000);
 23FA 28EE              ldi R18,1000
 23FC 33E0              ldi R19,3
 23FE 03E0              ldi R16,3
 2400 0E940000          xcall _MotRunTo
 2404           ;                                       waitMotor2 = 1;
 2404 81E0              ldi R24,1
 2406 80930500          sts _waitMotor2,R24
 240A           ;                                       workStep = 4;
 240A 84E0              ldi R24,4
 240C 80930100          sts _workStep,R24
 2410           ;                                       timeOut = 0;
 2410 2224              clr R2
 2412 20920600          sts _timeOut,R2
 2416           ;                                       break;
 2416 C4C2              xjmp L535
 2418           L545:
 2418           ; 				case 4:	// 灌注取样针管路
 2418           ; 					SetEValve(EV4, EV_OPEN);
 2418 21E0              ldi R18,1
 241A 04E0              ldi R16,4
 241C 0E940000          xcall _SetEValve
 2420           ;                                       SetMotRunPam(MOT_FLUID, 40, 2, CURRENT_FLUID);
 2420 84E0              ldi R24,4
 2422 8A83              std y+2,R24
 2424 82E0              ldi R24,2
 2426 8883              std y+0,R24
 2428 28E2              ldi R18,40
 242A 0AE0              ldi R16,10
 242C 0E940000          xcall _SetMotRunPam
 2430           ;                                       MotRun(MOT_FLUID, 5000);
 2430 28E8              ldi R18,5000
 2432 33E1              ldi R19,19
 2434 0AE0              ldi R16,10
 2436 0E940000          xcall _MotRun
 243A           ;                                       SetMotRunPam(MOT_EFFLUENT, 60, 2, CURRENT_EFFLUENT);
 243A 84E0              ldi R24,4
 243C 8A83              std y+2,R24
 243E 82E0              ldi R24,2
 2440 8883              std y+0,R24
 2442 2CE3              ldi R18,60
 2444 0BE0              ldi R16,11
 2446 0E940000          xcall _SetMotRunPam
 244A           ;                                       MotRun(MOT_EFFLUENT, 9000);
 244A 28E2              ldi R18,9000
 244C 33E2              ldi R19,35
 244E 0BE0              ldi R16,11
 2450 0E940000          xcall _MotRun
 2454           ;                                       waitMotor3 = 1;
 2454 81E0              ldi R24,1
 2456 80930600          sts _waitMotor3,R24
 245A           ;                                       waitMotor4 = 1;
 245A 80930700          sts _waitMotor4,R24
 245E           ;                                       workStep = 5;
 245E 85E0              ldi R24,5
 2460 80930100          sts _workStep,R24
 2464           ;                                       break;
 2464 9DC2              xjmp L535
 2466           L546:
 2466           ; 				case 5:
 2466           ; 				//	MotStop(MOT_EFFLUENT);
 2466           ; 					SetEValve(EV_ALL, EV_CLOSE);
 2466 2227              clr R18
 2468 0027              clr R16
 246A 0E940000          xcall _SetEValve
 246E           ;                                       workStep = 6;
 246E 86E0              ldi R24,6
 2470 80930100          sts _workStep,R24
 2474           ;                                       break;
 2474 95C2              xjmp L535
 2476           L547:
 2476           ; 				case 6:	// 向混匀池注入稀释液，直到取样针高度位置
 2476           ; 					liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 2476 0027              clr R16
 2478 0E940000          xcall _getLiqDetADC
 247C 5801              movw R10,R16
 247E B0920100          sts L505+1,R11
 2482 A0920000          sts L505,R10
 2486           ;                                       if(liqDetBaseAdc > 500)
 2486 84EF              ldi R24,500
 2488 91E0              ldi R25,1
 248A 1501              movw R2,R10
 248C 8017              cp R24,R16
 248E 9107              cpc R25,R17
 2490 98F4              brsh L548
 2492           X369:
 2492           ; 					{
 2492           ; 						Uart0ReUnable;
 2492 8091C100          lds R24,193
 2496 8F7E              andi R24,239
 2498 8093C100          sts 193,R24
 249C           ;                                               uart_Printf("%s $%d\r\n",strM2150, liqDetBaseAdc);
 249C 3982              std y+1,R3
 249E 2882              std y+0,R2
 24A0 20E0              ldi R18,<_strM2150
 24A2 30E0              ldi R19,>_strM2150
 24A4 00E0              ldi R16,<L550
 24A6 10E0              ldi R17,>L550
 24A8 0E940000          xcall _uart_Printf
 24AC           ;                                               Uart0ReEnable;
 24AC 8091C100          lds R24,193
 24B0 8061              ori R24,16
 24B2 8093C100          sts 193,R24
 24B6           ;                                       }
 24B6 1DC0              xjmp L549
 24B8           L548:
 24B8           ; 					else
 24B8           ; 					{
 24B8           ; 						Uart0ReUnable;
 24B8 8091C100          lds R24,193
 24BC 8F7E              andi R24,239
 24BE 8093C100          sts 193,R24
 24C2           ;                                               uart_Printf("%s $%d\r\n",strE2950, liqDetBaseAdc);
 24C2 20900000          lds R2,L505
 24C6 30900100          lds R3,L505+1
 24CA 3982              std y+1,R3
 24CC 2882              std y+0,R2
 24CE 20E0              ldi R18,<_strE2950
 24D0 30E0              ldi R19,>_strE2950
 24D2 00E0              ldi R16,<L550
 24D4 10E0              ldi R17,>L550
 24D6 0E940000          xcall _uart_Printf
 24DA           ;                                               Uart0ReEnable;
 24DA 8091C100          lds R24,193
 24DE 8061              ori R24,16
 24E0 8093C100          sts 193,R24
 24E4           ;                                               // 退出处理
 24E4           ;                                               mainStep = 3;
 24E4 83E0              ldi R24,3
 24E6 80930000          sts _mainStep,R24
 24EA           ;                                               workStep = 0;
 24EA 2224              clr R2
 24EC 20920100          sts _workStep,R2
 24F0           ;                                               break;
 24F0 57C2              xjmp L535
 24F2           L549:
 24F2           ; 					}
 24F2           ; 					SetMotRunPam(MOT_DILUENT, 64, 2, CURRENT_DILUENT);
 24F2 84E0              ldi R24,4
 24F4 8A83              std y+2,R24
 24F6 82E0              ldi R24,2
 24F8 8883              std y+0,R24
 24FA 20E4              ldi R18,64
 24FC 09E0              ldi R16,9
 24FE 0E940000          xcall _SetMotRunPam
 2502           ;                                       MotRun(MOT_DILUENT, 80*100);                    // 开启稀释液泵
 2502 20E4              ldi R18,8000
 2504 3FE1              ldi R19,31
 2506 09E0              ldi R16,9
 2508 0E940000          xcall _MotRun
 250C           ;                                       workStep = 7;
 250C 87E0              ldi R24,7
 250E 80930100          sts _workStep,R24
 2512           ;                                       break;
 2512 46C2              xjmp L535
 2514           L551:
 2514           ; 				case 7:
 2514           ; 					if(GetMotState(MOT_DILUENT)==STA_SLAVE_FREE){
 2514 09E0              ldi R16,9
 2516 0E940000          xcall _GetMotState
 251A 402F              mov R20,R16
 251C 0130              cpi R16,1
 251E 11F5              brne L552
 2520           X370:
 2520           ; 						timeOut ++;
 2520 80910600          lds R24,_timeOut
 2524 8F5F              subi R24,255    ; addi 1
 2526 80930600          sts _timeOut,R24
 252A           ;                                               if(timeOut<3){
 252A 8330              cpi R24,3
 252C 20F4              brsh L554
 252E           X371:
 252E           ; 							workStep = 6;
 252E 86E0              ldi R24,6
 2530 80930100          sts _workStep,R24
 2534           ;                                                       }
 2534 17C0              xjmp L555
 2536           L554:
 2536           ; 						else{
 2536           ; 							// 退出处理
 2536           ; 							mainStep = 3;
 2536 83E0              ldi R24,3
 2538 80930000          sts _mainStep,R24
 253C           ;                                                       workStep = 0;
 253C 2224              clr R2
 253E 20920100          sts _workStep,R2
 2542           ;                                                       Uart0ReUnable;
 2542 8091C100          lds R24,193
 2546 8F7E              andi R24,239
 2548 8093C100          sts 193,R24
 254C           ; //                                                    uart_Printf("%s\r\n",strE2910);
 254C           ;                                                       uart_Printf("%s\r\n",strE3904);
 254C 20E0              ldi R18,<_strE3904
 254E 30E0              ldi R19,>_strE3904
 2550 00E0              ldi R16,<L47
 2552 10E0              ldi R17,>L47
 2554 0E940000          xcall _uart_Printf
 2558           ;                                                       Uart0ReEnable;
 2558 8091C100          lds R24,193
 255C 8061              ori R24,16
 255E 8093C100          sts 193,R24
 2562           ;                                                       break;
 2562 1EC2              xjmp L535
 2564           L555:
 2564           ; 							}
 2564           ; 						}
 2564           L552:
 2564           ; 					i = getLiqDetADC(NeedleChannel);
 2564 0027              clr R16
 2566 0E940000          xcall _getLiqDetADC
 256A 5801              movw R10,R16
 256C           ;                                       if(i<liqDetBaseAdc){
 256C 20900000          lds R2,L505
 2570 30900100          lds R3,L505+1
 2574 0215              cp R16,R2
 2576 1305              cpc R17,R3
 2578 08F0              brlo X406
 257A 12C2              xjmp L535
 257C           X406:
 257C           X372:
 257C           ; 						i = liqDetBaseAdc - i;
 257C 201A              sub R2,R16
 257E 310A              sbc R3,R17
 2580 5101              movw R10,R2
 2582           ;                                               if(i>200){
 2582 88EC              ldi R24,200
 2584 90E0              ldi R25,0
 2586 8215              cp R24,R2
 2588 9305              cpc R25,R3
 258A 08F0              brlo X407
 258C 09C2              xjmp L535
 258E           X407:
 258E           X373:
 258E           ; 							MotStop(MOT_DILUENT);
 258E 09E0              ldi R16,9
 2590 0E940000          xcall _MotStop
 2594           ;                                                       MotRun(MOT_SAMP_NEEDLE, 40);
 2594 28E2              ldi R18,40
 2596 30E0              ldi R19,0
 2598 03E0              ldi R16,3
 259A 0E940000          xcall _MotRun
 259E           ;                                                       SetMotRunPam(MOT_SAMP_PUMP, 32, 2, CURRENT_SAMP_PUMP);
 259E 86E0              ldi R24,6
 25A0 8A83              std y+2,R24
 25A2 82E0              ldi R24,2
 25A4 8883              std y+0,R24
 25A6 20E2              ldi R18,32
 25A8 0CE0              ldi R16,12
 25AA 0E940000          xcall _SetMotRunPam
 25AE           ;                                                       MotInitCheck(MOT_SAMP_PUMP);
 25AE 0CE0              ldi R16,12
 25B0 0E940000          xcall _MotInitCheck
 25B4           ;                                                       waitMotor0 = 1;
 25B4 81E0              ldi R24,1
 25B6 80930300          sts _waitMotor0,R24
 25BA           ;                                                       waitMotor2 = 1;
 25BA 80930500          sts _waitMotor2,R24
 25BE           ;                                                       workStep = 0;
 25BE 2224              clr R2
 25C0 20920100          sts _workStep,R2
 25C4           ;                                                       mainStep = 1;
 25C4 80930000          sts _mainStep,R24
 25C8           ;                                                       }
 25C8           ;                                               }
 25C8           ;                                       break;
 25C8           ;                               default:
 25C8           ;                                       break;
 25C8           ;                               }
 25C8           ;                       break;
 25C8 EBC1              xjmp L535
 25CA           L560:
 25CA           ; 		case 1:		// 吸取液体
 25CA           ; 			switch(workStep){
 25CA 40910100          lds R20,_workStep
 25CE 5527              clr R21
 25D0 4030              cpi R20,0
 25D2 4507              cpc R20,R21
 25D4 B9F0              breq L564
 25D6           X374:
 25D6 4130              cpi R20,1
 25D8 E0E0              ldi R30,0
 25DA 5E07              cpc R21,R30
 25DC C9F0              breq L565
 25DE           X375:
 25DE 4230              cpi R20,2
 25E0 E0E0              ldi R30,0
 25E2 5E07              cpc R21,R30
 25E4 29F1              breq L566
 25E6           X376:
 25E6 4330              cpi R20,3
 25E8 E0E0              ldi R30,0
 25EA 5E07              cpc R21,R30
 25EC 69F1              breq L567
 25EE           X377:
 25EE 4430              cpi R20,4
 25F0 E0E0              ldi R30,0
 25F2 5E07              cpc R21,R30
 25F4 09F4              brne X408
 25F6 3CC0              xjmp L568
 25F8           X408:
 25F8           X378:
 25F8 4530              cpi R20,5
 25FA E0E0              ldi R30,0
 25FC 5E07              cpc R21,R30
 25FE 09F4              brne X409
 2600 43C0              xjmp L569
 2602           X409:
 2602           X379:
 2602 CEC1              xjmp L535
 2604           L564:
 2604           ; 				case 0:
 2604           ; 					waitStartKey = 1;
 2604 81E0              ldi R24,1
 2606 80930800          sts _waitStartKey,R24
 260A           ;                                       workStep = 1;
 260A 80930100          sts _workStep,R24
 260E           ;                                       break;
 260E C8C1              xjmp L535
 2610           L565:
 2610           ; 				case 1:
 2610           ; 					MotRun(MOT_SAMP_PUMP,SampQuantifyVolume + 15);
 2610 20910F00          lds R18,_SampQuantifyVolume
 2614 30911000          lds R19,_SampQuantifyVolume+1
 2618 215F              subi R18,241  ; offset = 15
 261A 3F4F              sbci R19,255
 261C 0CE0              ldi R16,12
 261E 0E940000          xcall _MotRun
 2622           ;                                       waitMotor0 = 1;
 2622 81E0              ldi R24,1
 2624 80930300          sts _waitMotor0,R24
 2628           ;                                       workStep = 2;
 2628 82E0              ldi R24,2
 262A 80930100          sts _workStep,R24
 262E           ;                                       break;
 262E B8C1              xjmp L535
 2630           L566:
 2630           ; 				case 2:
 2630           ; 					MotRun(MOT_SAMP_PUMP,-5);
 2630 2BEF              ldi R18,-5
 2632 3FEF              ldi R19,-1
 2634 0CE0              ldi R16,12
 2636 0E940000          xcall _MotRun
 263A           ;                                       waitMotor0 = 1;
 263A 81E0              ldi R24,1
 263C 80930300          sts _waitMotor0,R24
 2640           ;                                       workStep = 3;
 2640 83E0              ldi R24,3
 2642 80930100          sts _workStep,R24
 2646           ;                                       break;
 2646 ACC1              xjmp L535
 2648           L567:
 2648           ; 				case 3:
 2648           ; 					SetMotRunPam(MOT_SAMP_NEEDLE, 240, 20, CURRENT_SAMP_NEEDLE);
 2648 83E0              ldi R24,3
 264A 8A83              std y+2,R24
 264C 84E1              ldi R24,20
 264E 8883              std y+0,R24
 2650 20EF              ldi R18,240
 2652 03E0              ldi R16,3
 2654 0E940000          xcall _SetMotRunPam
 2658           ;                                       MotRunTo(MOT_SAMP_NEEDLE, 0);
 2658 2227              clr R18
 265A 3327              clr R19
 265C 03E0              ldi R16,3
 265E 0E940000          xcall _MotRunTo
 2662           ;                                       waitMotor2 = 1;
 2662 81E0              ldi R24,1
 2664 80930500          sts _waitMotor2,R24
 2668           ;                                       workStep = 4;
 2668 84E0              ldi R24,4
 266A 80930100          sts _workStep,R24
 266E           ;                                       break;
 266E 98C1              xjmp L535
 2670           L568:
 2670           ; 				case 4:
 2670           ; 					MotRunTo(MOT_SAMP_TRUN, _POS_SAMPTURN_SAMP);
 2670 24ED              ldi R18,980
 2672 33E0              ldi R19,3
 2674 02E0              ldi R16,2
 2676 0E940000          xcall _MotRunTo
 267A           ;                                       waitMotor1 = 1;
 267A 81E0              ldi R24,1
 267C 80930400          sts _waitMotor1,R24
 2680           ;                                       workStep = 5;
 2680 85E0              ldi R24,5
 2682 80930100          sts _workStep,R24
 2686           ;                                       break;
 2686 8CC1              xjmp L535
 2688           L569:
 2688           ; 				case 5:
 2688           ; 					MotRunTo(MOT_SAMP_NEEDLE, 3600);
 2688 20E1              ldi R18,3600
 268A 3EE0              ldi R19,14
 268C 03E0              ldi R16,3
 268E 0E940000          xcall _MotRunTo
 2692           ;                                       waitMotor2 = 1;
 2692 81E0              ldi R24,1
 2694 80930500          sts _waitMotor2,R24
 2698           ;                                       workStep = 0;
 2698 2224              clr R2
 269A 20920100          sts _workStep,R2
 269E           ;                                       mainStep = 2;
 269E 82E0              ldi R24,2
 26A0 80930000          sts _mainStep,R24
 26A4           ;                                       break;
 26A4           ;                               }
 26A4           ;                       break;
 26A4 7DC1              xjmp L535
 26A6           L570:
 26A6           ; 		case 2:
 26A6           ; 			switch(workStep){
 26A6 40910100          lds R20,_workStep
 26AA 5527              clr R21
 26AC 4030              cpi R20,0
 26AE 4507              cpc R20,R21
 26B0 41F1              breq L574
 26B2           X380:
 26B2 4130              cpi R20,1
 26B4 E0E0              ldi R30,0
 26B6 5E07              cpc R21,R30
 26B8 51F1              breq L575
 26BA           X381:
 26BA 4230              cpi R20,2
 26BC E0E0              ldi R30,0
 26BE 5E07              cpc R21,R30
 26C0 09F4              brne X410
 26C2 37C0              xjmp L576
 26C4           X410:
 26C4           X382:
 26C4 4330              cpi R20,3
 26C6 E0E0              ldi R30,0
 26C8 5E07              cpc R21,R30
 26CA 09F4              brne X411
 26CC 3BC0              xjmp L577
 26CE           X411:
 26CE           X383:
 26CE 4430              cpi R20,4
 26D0 E0E0              ldi R30,0
 26D2 5E07              cpc R21,R30
 26D4 09F4              brne X412
 26D6 42C0              xjmp L578
 26D8           X412:
 26D8           X384:
 26D8 4530              cpi R20,5
 26DA E0E0              ldi R30,0
 26DC 5E07              cpc R21,R30
 26DE 09F4              brne X413
 26E0 49C0              xjmp L579
 26E2           X413:
 26E2           X385:
 26E2 4630              cpi R20,6
 26E4 E0E0              ldi R30,0
 26E6 5E07              cpc R21,R30
 26E8 09F4              brne X414
 26EA 50C0              xjmp L580
 26EC           X414:
 26EC           X386:
 26EC 4730              cpi R20,7
 26EE E0E0              ldi R30,0
 26F0 5E07              cpc R21,R30
 26F2 09F4              brne X415
 26F4 57C0              xjmp L581
 26F6           X415:
 26F6           X387:
 26F6 4830              cpi R20,8
 26F8 E0E0              ldi R30,0
 26FA 5E07              cpc R21,R30
 26FC 09F4              brne X416
 26FE A1C0              xjmp L584
 2700           X416:
 2700           X388:
 2700 4FC1              xjmp L535
 2702           L574:
 2702           ; 				case 0:
 2702           ; 					waitStartKey = 1;
 2702 81E0              ldi R24,1
 2704 80930800          sts _waitStartKey,R24
 2708           ;                                       workStep = 1;
 2708 80930100          sts _workStep,R24
 270C           ;                                       break;
 270C 49C1              xjmp L535
 270E           L575:
 270E           ; 				case 1:
 270E           ; 					MotRun(MOT_SAMP_PUMP,-SampQuantifyVolume);
 270E 20910F00          lds R18,_SampQuantifyVolume
 2712 30911000          lds R19,_SampQuantifyVolume+1
 2716 2095              com R18
 2718 3095              com R19
 271A 2F5F              subi R18,255  ; offset = 1
 271C 3F4F              sbci R19,255
 271E 0CE0              ldi R16,12
 2720 0E940000          xcall _MotRun
 2724           ;                                       waitMotor0 = 1;
 2724 81E0              ldi R24,1
 2726 80930300          sts _waitMotor0,R24
 272A           ;                                       workStep = 2;
 272A 82E0              ldi R24,2
 272C 80930100          sts _workStep,R24
 2730           ;                                       break;
 2730 37C1              xjmp L535
 2732           L576:
 2732           ; 				case 2:
 2732           ; 					SetDelayTime(1, 5);
 2732 25E0              ldi R18,5
 2734 30E0              ldi R19,0
 2736 01E0              ldi R16,1
 2738 0E940000          xcall _SetDelayTime
 273C           ;                                       workStep = 3;
 273C 83E0              ldi R24,3
 273E 80930100          sts _workStep,R24
 2742           ;                                       break;
 2742 2EC1              xjmp L535
 2744           L577:
 2744           ; 				case 3:
 2744           ; 					MotRunTo(MOT_SAMP_NEEDLE, 0);
 2744 2227              clr R18
 2746 3327              clr R19
 2748 03E0              ldi R16,3
 274A 0E940000          xcall _MotRunTo
 274E           ;                                       waitMotor2 = 1;
 274E 81E0              ldi R24,1
 2750 80930500          sts _waitMotor2,R24
 2754           ;                                       workStep = 4;
 2754 84E0              ldi R24,4
 2756 80930100          sts _workStep,R24
 275A           ;                                       break;
 275A 22C1              xjmp L535
 275C           L578:
 275C           ; 				case 4:
 275C           ; 					MotRunTo(MOT_SAMP_TRUN, 0);
 275C 2227              clr R18
 275E 3327              clr R19
 2760 02E0              ldi R16,2
 2762 0E940000          xcall _MotRunTo
 2766           ;                                       waitMotor1 = 1;
 2766 81E0              ldi R24,1
 2768 80930400          sts _waitMotor1,R24
 276C           ;                                       workStep = 5;
 276C 85E0              ldi R24,5
 276E 80930100          sts _workStep,R24
 2772           ;                                       break;
 2772 16C1              xjmp L535
 2774           L579:
 2774           ; 				case 5:
 2774           ; 					MotRunTo(MOT_SAMP_TRUN, _POS_NEEDLE_ON_MIXCENTRE);
 2774 23E4              ldi R18,323
 2776 31E0              ldi R19,1
 2778 02E0              ldi R16,2
 277A 0E940000          xcall _MotRunTo
 277E           ;                                       waitMotor1 = 1;
 277E 81E0              ldi R24,1
 2780 80930400          sts _waitMotor1,R24
 2784           ;                                       workStep = 6;
 2784 86E0              ldi R24,6
 2786 80930100          sts _workStep,R24
 278A           ;                                       break;
 278A 0AC1              xjmp L535
 278C           L580:
 278C           ; 				case 6:
 278C           ; 					MotRunTo(MOT_SAMP_NEEDLE, 800);
 278C 20E2              ldi R18,800
 278E 33E0              ldi R19,3
 2790 03E0              ldi R16,3
 2792 0E940000          xcall _MotRunTo
 2796           ;                                       waitMotor2 = 1;
 2796 81E0              ldi R24,1
 2798 80930500          sts _waitMotor2,R24
 279C           ;                                       workStep = 7;
 279C 87E0              ldi R24,7
 279E 80930100          sts _workStep,R24
 27A2           ;                                       break;
 27A2 FEC0              xjmp L535
 27A4           L581:
 27A4           ; 				case 7:
 27A4           ; 					liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 27A4 0027              clr R16
 27A6 0E940000          xcall _getLiqDetADC
 27AA 6801              movw R12,R16
 27AC D0920100          sts L505+1,R13
 27B0 C0920000          sts L505,R12
 27B4           ;                                       if(liqDetBaseAdc > 500){
 27B4 84EF              ldi R24,500
 27B6 91E0              ldi R25,1
 27B8 1601              movw R2,R12
 27BA 8017              cp R24,R16
 27BC 9107              cpc R25,R17
 27BE 98F4              brsh L582
 27C0           X389:
 27C0           ; 						Uart0ReUnable;
 27C0 8091C100          lds R24,193
 27C4 8F7E              andi R24,239
 27C6 8093C100          sts 193,R24
 27CA           ;                                               uart_Printf("%s $%d\r\n",strM2150, liqDetBaseAdc);
 27CA 3982              std y+1,R3
 27CC 2882              std y+0,R2
 27CE 20E0              ldi R18,<_strM2150
 27D0 30E0              ldi R19,>_strM2150
 27D2 00E0              ldi R16,<L550
 27D4 10E0              ldi R17,>L550
 27D6 0E940000          xcall _uart_Printf
 27DA           ;                                               Uart0ReEnable;
 27DA 8091C100          lds R24,193
 27DE 8061              ori R24,16
 27E0 8093C100          sts 193,R24
 27E4           ;                                               }
 27E4 1DC0              xjmp L583
 27E6           L582:
 27E6           ; 					else{
 27E6           ; 						Uart0ReUnable;
 27E6 8091C100          lds R24,193
 27EA 8F7E              andi R24,239
 27EC 8093C100          sts 193,R24
 27F0           ;                                               uart_Printf("%s $%d\r\n",strE2950, liqDetBaseAdc);
 27F0 20900000          lds R2,L505
 27F4 30900100          lds R3,L505+1
 27F8 3982              std y+1,R3
 27FA 2882              std y+0,R2
 27FC 20E0              ldi R18,<_strE2950
 27FE 30E0              ldi R19,>_strE2950
 2800 00E0              ldi R16,<L550
 2802 10E0              ldi R17,>L550
 2804 0E940000          xcall _uart_Printf
 2808           ;                                               Uart0ReEnable;
 2808 8091C100          lds R24,193
 280C 8061              ori R24,16
 280E 8093C100          sts 193,R24
 2812           ;                                               // 退出处理
 2812           ;                                               mainStep = 3;
 2812 83E0              ldi R24,3
 2814 80930000          sts _mainStep,R24
 2818           ;                                               workStep = 0;
 2818 2224              clr R2
 281A 20920100          sts _workStep,R2
 281E           ;                                               break;
 281E C0C0              xjmp L535
 2820           L583:
 2820           ; 						}
 2820           ; 					SetMotRunPam(MOT_SAMP_NEEDLE, 64, 2, CURRENT_SAMP_NEEDLE);
 2820 83E0              ldi R24,3
 2822 8A83              std y+2,R24
 2824 82E0              ldi R24,2
 2826 8883              std y+0,R24
 2828 20E4              ldi R18,64
 282A 03E0              ldi R16,3
 282C 0E940000          xcall _SetMotRunPam
 2830           ;                                       MotRun(MOT_SAMP_NEEDLE, 800);                   // 开启稀释液泵
 2830 20E2              ldi R18,800
 2832 33E0              ldi R19,3
 2834 03E0              ldi R16,3
 2836 0E940000          xcall _MotRun
 283A           ;                                       workStep = 8;
 283A 88E0              ldi R24,8
 283C 80930100          sts _workStep,R24
 2840           ;                                       break;
 2840 AFC0              xjmp L535
 2842           L584:
 2842           ; 				case 8:
 2842           ; 					if(GetMotState(MOT_SAMP_NEEDLE)==STA_SLAVE_FREE){
 2842 03E0              ldi R16,3
 2844 0E940000          xcall _GetMotState
 2848 402F              mov R20,R16
 284A 0130              cpi R16,1
 284C B9F4              brne L585
 284E           X390:
 284E           ; 						Uart0ReUnable;
 284E 8091C100          lds R24,193
 2852 8F7E              andi R24,239
 2854 8093C100          sts 193,R24
 2858           ;                                       //      uart_Printf("%s\r\n",strE2910);
 2858           ;                                               uart_Printf("%s\r\n",strE3904);
 2858 20E0              ldi R18,<_strE3904
 285A 30E0              ldi R19,>_strE3904
 285C 00E0              ldi R16,<L47
 285E 10E0              ldi R17,>L47
 2860 0E940000          xcall _uart_Printf
 2864           ;                                               Uart0ReEnable;
 2864 8091C100          lds R24,193
 2868 8061              ori R24,16
 286A 8093C100          sts 193,R24
 286E           ;                                               // 退出处理
 286E           ;                                               mainStep = 3;
 286E 83E0              ldi R24,3
 2870 80930000          sts _mainStep,R24
 2874           ;                                               workStep = 0;
 2874 2224              clr R2
 2876 20920100          sts _workStep,R2
 287A           ;                                               break;
 287A 92C0              xjmp L535
 287C           L585:
 287C           ; 						}
 287C           ; 					i = getLiqDetADC(NeedleChannel);
 287C 0027              clr R16
 287E 0E940000          xcall _getLiqDetADC
 2882 6801              movw R12,R16
 2884 5601              movw R10,R12
 2886           ;                                       if(i<liqDetBaseAdc){
 2886 20900000          lds R2,L505
 288A 30900100          lds R3,L505+1
 288E 0215              cp R16,R2
 2890 1305              cpc R17,R3
 2892 08F0              brlo X417
 2894 85C0              xjmp L535
 2896           X417:
 2896           X391:
 2896           ; 						i = liqDetBaseAdc - i;
 2896 201A              sub R2,R16
 2898 310A              sbc R3,R17
 289A 5101              movw R10,R2
 289C           ;                                               if(i>200){
 289C 88EC              ldi R24,200
 289E 90E0              ldi R25,0
 28A0 8215              cp R24,R2
 28A2 9305              cpc R25,R3
 28A4 08F0              brlo X418
 28A6 7CC0              xjmp L535
 28A8           X418:
 28A8           X392:
 28A8           ; 							MotStop(MOT_SAMP_NEEDLE);
 28A8 03E0              ldi R16,3
 28AA 0E940000          xcall _MotStop
 28AE           ;                                                       MotRun(MOT_SAMP_NEEDLE, 40);
 28AE 28E2              ldi R18,40
 28B0 30E0              ldi R19,0
 28B2 03E0              ldi R16,3
 28B4 0E940000          xcall _MotRun
 28B8           ;                                                       SetMotRunPam(MOT_SAMP_PUMP, 32, 2, CURRENT_SAMP_PUMP);
 28B8 86E0              ldi R24,6
 28BA 8A83              std y+2,R24
 28BC 82E0              ldi R24,2
 28BE 8883              std y+0,R24
 28C0 20E2              ldi R18,32
 28C2 0CE0              ldi R16,12
 28C4 0E940000          xcall _SetMotRunPam
 28C8           ;                                                       MotInitCheck(MOT_SAMP_PUMP);
 28C8 0CE0              ldi R16,12
 28CA 0E940000          xcall _MotInitCheck
 28CE           ;                                                       waitMotor0 = 1;
 28CE 81E0              ldi R24,1
 28D0 80930300          sts _waitMotor0,R24
 28D4           ;                                                       waitMotor2 = 1;
 28D4 80930500          sts _waitMotor2,R24
 28D8           ;                                                       workStep = 0;
 28D8 2224              clr R2
 28DA 20920100          sts _workStep,R2
 28DE           ;                                                       mainStep = 1;
 28DE 80930000          sts _mainStep,R24
 28E2           ;                                                       }
 28E2           ;                                               }
 28E2           ;                                       break;
 28E2           ;                               }
 28E2           ;                       break;
 28E2 5EC0              xjmp L535
 28E4           L591:
 28E4           ; 		case 3:		// 退出
 28E4           ; 			switch(workStep){
 28E4 40910100          lds R20,_workStep
 28E8 5527              clr R21
 28EA 4030              cpi R20,0
 28EC 4507              cpc R20,R21
 28EE 49F0              breq L595
 28F0           X393:
 28F0 4130              cpi R20,1
 28F2 E0E0              ldi R30,0
 28F4 5E07              cpc R21,R30
 28F6 29F1              breq L596
 28F8           X394:
 28F8 4230              cpi R20,2
 28FA E0E0              ldi R30,0
 28FC 5E07              cpc R21,R30
 28FE A9F1              breq L597
 2900           X395:
 2900 4FC0              xjmp L535
 2902           L595:
 2902           ; 				case 0:
 2902           ; 					SetMotRunPam(MOT_SAMP_NEEDLE, 240, 20, CURRENT_SAMP_NEEDLE);
 2902 83E0              ldi R24,3
 2904 8A83              std y+2,R24
 2906 84E1              ldi R24,20
 2908 8883              std y+0,R24
 290A 20EF              ldi R18,240
 290C 03E0              ldi R16,3
 290E 0E940000          xcall _SetMotRunPam
 2912           ;                                       MotRunTo(MOT_SAMP_NEEDLE, 0);
 2912 2227              clr R18
 2914 3327              clr R19
 2916 03E0              ldi R16,3
 2918 0E940000          xcall _MotRunTo
 291C           ;                                       SetMotRunPam(MOT_EFFLUENT, 240, 2, CURRENT_EFFLUENT);
 291C 84E0              ldi R24,4
 291E 8A83              std y+2,R24
 2920 82E0              ldi R24,2
 2922 8883              std y+0,R24
 2924 20EF              ldi R18,240
 2926 0BE0              ldi R16,11
 2928 0E940000          xcall _SetMotRunPam
 292C           ;                                       MotRun(MOT_EFFLUENT, 1500);
 292C 2CED              ldi R18,1500
 292E 35E0              ldi R19,5
 2930 0BE0              ldi R16,11
 2932 0E940000          xcall _MotRun
 2936           ;                                       waitMotor2 = 1;
 2936 81E0              ldi R24,1
 2938 80930500          sts _waitMotor2,R24
 293C           ;                                       workStep = 1;
 293C 80930100          sts _workStep,R24
 2940           ;                                       break;
 2940 2FC0              xjmp L535
 2942           L596:
 2942           ; 				case 1:
 2942           ; 					SetMotRunPam(MOT_SAMP_TRUN, 32, 20, CURRENT_SAMP_TRUN);
 2942 84E0              ldi R24,4
 2944 8A83              std y+2,R24
 2946 84E1              ldi R24,20
 2948 8883              std y+0,R24
 294A 20E2              ldi R18,32
 294C 02E0              ldi R16,2
 294E 0E940000          xcall _SetMotRunPam
 2952           ;                                       MotRunTo(MOT_SAMP_TRUN,0);
 2952 2227              clr R18
 2954 3327              clr R19
 2956 02E0              ldi R16,2
 2958 0E940000          xcall _MotRunTo
 295C           ;                                       waitMotor1 = 1;
 295C 81E0              ldi R24,1
 295E 80930400          sts _waitMotor1,R24
 2962           ;                                       workStep = 2;
 2962 82E0              ldi R24,2
 2964 80930100          sts _workStep,R24
 2968           ;                                       break;
 2968 1BC0              xjmp L535
 296A           L597:
 296A           ; 				case 2:
 296A           ; 					mainStep = 0;
 296A 2224              clr R2
 296C 20920000          sts _mainStep,R2
 2970           ;                                       workStep = 0;
 2970 20920100          sts _workStep,R2
 2974           ;                                       waitStartKey = 0;
 2974 20920800          sts _waitStartKey,R2
 2978           ;                                       quitFlag = 0;
 2978 20920700          sts _quitFlag,R2
 297C           ;                                       Uart0ReUnable;
 297C 8091C100          lds R24,193
 2980 8F7E              andi R24,239
 2982 8093C100          sts 193,R24
 2986           ;                                       uart_Printf("%s\r\n",strM4151);
 2986 20E0              ldi R18,<_strM4151
 2988 30E0              ldi R19,>_strM4151
 298A 00E0              ldi R16,<L47
 298C 10E0              ldi R17,>L47
 298E 0E940000          xcall _uart_Printf
 2992           ;                                       Uart0ReEnable;
 2992 8091C100          lds R24,193
 2996 8061              ori R24,16
 2998 8093C100          sts 193,R24
 299C           ;                                       return 1;
 299C 01E0              ldi R16,1
 299E 01C0              xjmp L504
 29A0           L535:
 29A0           ; 					break;
 29A0           ; 				}
 29A0           ; 			break;
 29A0           ; 		default:
 29A0           ; 			break;
 29A0           ; 		}
 29A0           ; 	return 0;
 29A0 0027              clr R16
 29A2           L504:
 29A2                   .dbline 0 ; func end
 29A2 2396              adiw R28,3
 29A4 0C940000          xjmp pop_xgset303C
                        .area bss(ram, con, rel)
 0002           _CardStorePhoNum:
 0002                   .blkb 1
 0003           _LiquidPhoNum:
 0003                   .blkb 1
 0004           _DropHeightFactor:
 0004                   .blkb 2
 0006           _timeOut:
 0006                   .blkb 1
 0007           _quitFlag:
 0007                   .blkb 1
                        .area data(ram, con, rel)
 0011           L550:
 0011                   .blkb 9
                        .area idata
 0011 2573202425640D0A00        .byte 37,'s,32,36,37,'d,13,10,0
                        .area data(ram, con, rel)
 001A           L352:
 001A                   .blkb 29
                        .area idata
 001A 257320242534642024253464204C2024  .byte 37,'s,32,36,37,52,'d,32,36,37,52,'d,32,'L,32,36
 002A 253464204820242534640D0A00        .byte 37,52,'d,32,'H,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 0037           L109:
 0037                   .blkb 25
                        .area idata
 0037 25732024253464202425346420242534  .byte 37,'s,32,36,37,52,'d,32,36,37,52,'d,32,36,37,52
 0047 6420242534640D0A00        .byte 'd,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 0050           L90:
 0050                   .blkb 32
                        .area idata
 0050 25732024253464204E756D2024253464  .byte 37,'s,32,36,37,52,'d,32,'N,'u,'m,32,36,37,52,'d
 0060 2050574D202425346420566F6C0D0A00  .byte 32,'P,'W,'M,32,36,37,52,'d,32,'V,'o,'l,13,10,0
                        .area data(ram, con, rel)
 0070           L47:
 0070                   .blkb 5
                        .area idata
 0070 25730D0A00        .byte 37,'s,13,10,0
                        .area data(ram, con, rel)
 0075           L5:
 0075                   .blkb 10
                        .area idata
 0075 257320242534640D0A00      .byte 37,'s,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
                ; }
                ; 
                ; 
                        .area  func_lit
 0000 A30B      PL_CardStorePhotoCheck_Even:    .word `_CardStorePhotoCheck_Even
 0002 370B      PL_LiquidPhotoCheck_Even:       .word `_LiquidPhotoCheck_Even
 0004 A403      PL_CardStorePhotoAdj_Even:      .word `_CardStorePhotoAdj_Even
 0006 2303      PL_LiquidPhotoAdj_Even: .word `_LiquidPhotoAdj_Even
