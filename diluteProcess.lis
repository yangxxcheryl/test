                        .module diluteProcess.c
                        .area data(ram, con, rel)
 0000           _InsertRingFlag::
 0000                   .blkb 1
                        .area idata
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001           _WithoutPuncture::
 0001                   .blkb 1
                        .area idata
 0001 00                .byte 0
                        .area data(ram, con, rel)
 0002           _SecondCount::
 0002                   .blkb 4
                        .area idata
 0002 00000000          .word 0,0
                        .area data(ram, con, rel)
 0006           __DiluentQuitFlag:
 0006                   .blkb 1
                        .area idata
 0006 00                .byte 0
                        .area data(ram, con, rel)
 0007           __ReMixNum::
 0007                   .blkb 2
                        .area idata
 0007 0500              .word 5
                        .area data(ram, con, rel)
 0009           __AutoTestCycleNum::
 0009                   .blkb 2
                        .area idata
 0009 0000              .word 0
                        .area data(ram, con, rel)
 000B           _CleanMode:
 000B                   .blkb 1
                        .area idata
 000B 00                .byte 0
                        .area data(ram, con, rel)
 000C           _TestDebugMode:
 000C                   .blkb 1
                        .area idata
 000C 00                .byte 0
                        .area data(ram, con, rel)
 000D           __SampSW::
 000D                   .blkb 1
                        .area idata
 000D 01                .byte 1
                        .area data(ram, con, rel)
 000E           _JumpMode::
 000E                   .blkb 1
                        .area idata
 000E 00                .byte 0
                        .area data(ram, con, rel)
 000F           _stopTestFlag::
 000F                   .blkb 1
                        .area idata
 000F 00                .byte 0
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                ;              m -> R16
                        .even
 0000           _SetTestDebugMode::
 0000           ; 
 0000           ; 
 0000           ; #include <iom1280v.h>
 0000           ; #include "B1404_LIB.h"
 0000           ; #include "Common.h"
 0000           ; #include "eeprom.h"
 0000           ; 
 0000           ; /* 本模块包含以下功能:
 0000           ; 1.液路自检
 0000           ; 2.泵定标
 0000           ; 3.稀释标本
 0000           ; 4.从干片仓提取新干片
 0000           ; 5.将滴完样本的干片放入转盘
 0000           ; 6.调用其它模块将测试任务加入任务队列
 0000           ; */
 0000           ; 
 0000           ; 
 0000           ; /*		稀释比例
 0000           ; 比例	标本(uL)		稀释液(uL)		混匀液(uL)
 0000           ; 				[一次混匀]
 0000           ; 1		100
 0000           ; 2		90				90	(4)			180
 0000           ; 5		90				360	(12)		450
 0000           ; 10		60				540	(18)		600
 0000           ; 
 0000           ; 20		30				570	(19)		600
 0000           ; 50		9.8				480	(16)		489.8		(做为二次混匀的一次稀释)
 0000           ; 100		10				990	(33)		1000		
 0000           ; 200		4.97			990	(33)		994.7
 0000           ; 				[二次混匀]
 0000           ; 10		60				540	(18)		600			X 50 = 500
 0000           ; 20		30				570	(19)		600			X 50 = 1000
 0000           ; 40		20				780	(26)		800			X 50 = 2000
 0000           ; 50		18.98			930	(31)		948.99		X 100 = 5000
 0000           ; 100		10				990	(33)		1000		X 100 = 10000
 0000           ; 二次稀释以100倍的一次稀释液为标本再次稀释
 0000           ; 
 0000           ; 
 0000           ; 稀释泵流量单位是：30uL，即每转过一个泵小轮的管道流量1
 0000           ; 柱塞泵步进行程：16 * 2.032mm = 32.512mm / 400 = 0.08128mm
 0000           ; 柱塞泵每步注射量：0.08128mm * （1*1*3.1416）mm2 = 0.255349248mm3 = 0.25535mm3
 0000           ; */
 0000           ; 
 0000           ; 
 0000           ; void _FluidMotRun(signed int n,unsigned char vel);
 0000           ; void _EffluentMotRun(signed int n,unsigned char vel);
 0000           ; void _DiluentMotRun(signed int n,unsigned char vel);
 0000           ; void _NewDiluentMotRun(signed int n,unsigned char vel);
 0000           ; void _NeedleMotRun(signed int n,unsigned char vel);
 0000           ; void _NeedleMotRunTo(signed int n,unsigned char vel);
 0000           ; void _SampPumpMotRun(signed int n,unsigned char vel);
 0000           ; void _SampPumpMotRunTo(signed int n,unsigned char vel);
 0000           ; 
 0000           ; //********************************************
 0000           ; extern unsigned char CardNoneUseful;
 0000           ; unsigned char InsertRingFlag = 0;
 0000           ; extern unsigned char insertflag[30];
 0000           ; unsigned char JudgeFlag;					// 如果设置吸样量,可通过此变量调节稀释倍数
 0000           ; unsigned char WithoutPuncture = 0;			// 默认为0 穿刺   1  不穿刺
 0000           ; extern unsigned char preCardStoreNum;
 0000           ; extern unsigned char CardStoreTestFlag;	
 0000           ; extern unsigned char LastCardGetState;
 0000           ; extern unsigned char primeProcessSW;		
 0000           ; extern unsigned char WorkProcessStep;		// 工作进程号
 0000           ; //********************************************
 0000           ; 
 0000           ; SAMP_INFO NewTestInfo;		// 新测试信息
 0000           ; 
 0000           ; // 工作参数
 0000           ; unsigned char CurInsertRingNum;			// 新测试卡要插入转盘的位置，0xff表示无效
 0000           ; unsigned char GetNewTestCard;			// 取新的测试卡，0:无, 1:取插入卡, 2:取仓1卡, 3:取仓2卡, 4:取仓3卡, 5:取仓4卡, 6:取仓5卡，
 0000           ; 										// 254:取卡完成等待滴样, 255:卡片滴样完成等待放入转盘, 250:提取卡片出错
 0000           ; 										// 222:取片准备抽打混匀, 233:抽打混匀结束,准备进入254取片完成准备滴样
 0000           ; unsigned long SecondCount = 0;			// 秒时钟计数，在定时中断计数
 0000           ; extern unsigned char TurnPlateUsedLock;	// 转盘使用锁
 0000           ; 
 0000           ; 
 0000           ; static unsigned char _DiluentQuitFlag = 0;
 0000           ; static unsigned int liqDetBaseAdc;
 0000           ; static unsigned char runNum;
 0000           ; static unsigned char waitMotSampTurn,waitMotSampNeedle, waitMotSampPump,waitMotFluid,waitMotDiluent,waitEffluent;
 0000           ; signed int _DropVolume;					// 滴样量
 0000           ; static signed int _DropVolumeFactor;	// 滴样量调节因子
 0000           ; signed int _SamplingVolume;				// 吸样量
 0000           ; unsigned int _DropMode;					// 滴样模式 0 胶体金试剂片	1 荧光试剂片
 0000           ; unsigned char _MixtureMode;				// 1:1是否需要混匀 0 需要  1  不需要
 0000           ; unsigned int _ReMixNum = 5;				// 抽打次数
 0000           ; unsigned int _SleepTime;				// 休眠时间
 0000           ; unsigned char _SleepSwitch;				// 休眠开关
 0000           ; unsigned int _AutoTestCycleNum = 0;		// 自动测试次数
 0000           ; 
 0000           ; 
 0000           ; static signed int NeedleOnMixSidePos;	// 取样针到混匀池右边沿位置
 0000           ; static signed int NeedleOnMixCenterPos;	// 取样针到混匀池中间位置
 0000           ; static signed int DropHeight;			// 滴样高度
 0000           ; static signed int MixHeight;			// 抽打混匀高度
 0000           ; static unsigned char CleanMode = 0;		// 清洗模式  0:无清洗，1:普通清洗， 2:高浓度清洗
 0000           ; static unsigned char TestDebugMode = 0;	// 混匀测试模式 0:正常测试  1：混匀测试
 0000           ; unsigned char _SampSW = 1;		// 按键判断
 0000           ; static unsigned char _WaitStartKey;		// 等待按键
 0000           ; 
 0000           ; // 新设置参数
 0000           ; unsigned char _NewCardStoreNum;			// 片仓号
 0000           ; unsigned char _NewMultipNum;			// 稀释比例编号
 0000           ; static unsigned int _NewReadTime0;		// 第一读数时间
 0000           ; static unsigned int _NewReadTime1;		// 第二读数时间
 0000           ; static unsigned char _NewTestType;		// 测试类型
 0000           ; 
 0000           ; 
 0000           ; unsigned char JumpMode = 0;		// 直接测试模式  0 需要机械自检和液路自检   1 直接进入测试  2 休眠接入液路自检 3 休眠模式完成3322液路自检
 0000           ; unsigned char stopTestFlag = 0; // 停止测试,废片仓连续开启时间超过20分钟
 0000           ; 
 0000           ; static unsigned char DiluteProcess_workStep;	
 0000           ; static unsigned char DiluteProcess_mainStep;	
 0000           ; 
 0000           ; /**********************************  稀释处理程序  *****************************************/
 0000           ; 
 0000           ; unsigned int CalMixingHeight(unsigned char multipNum, unsigned char diluteTime);
 0000           ; void _SetCurWorkParamter(void);
 0000           ; void _SetNewCardGet(unsigned char num);
 0000           ; unsigned char _CheckFluidSupply(void);
 0000           ; unsigned char _CheckDiluentSupply(void);
 0000           ; 
 0000           ; 
 0000           ; void SetDropVolume(unsigned int vol);
 0000           ; signed int CalSampVolume(unsigned char multipNum, unsigned char diluteTime);
 0000           ; signed int CalDiluteVolume(unsigned char multipNum, unsigned char diluteTime);
 0000           ; signed int CalDilute2Volume(unsigned char multipNum, unsigned char dilutetype);
 0000           ; unsigned char CalSampSyringSpeed(unsigned char multipNum, unsigned char diluteTime);
 0000           ; unsigned char CalDiluentInjectSpeed(unsigned char multipNum, unsigned char diluteTime);	
 0000           ; 
 0000           ; 
 0000           ; 
 0000           ; void SetTestDebugMode(unsigned char m)
 0000           ; {
 0000           ; 	// 设置测试状态下的调试模式	0:正常，1:混匀液测量
 0000           ; 	if(m>1)
 0000 81E0              ldi R24,1
 0002 8017              cp R24,R16
 0004 08F4              brsh L2
 0006           X0:
 0006           ; 		m = 0;
 0006 0027              clr R16
 0008           L2:
 0008           ; 	TestDebugMode = m;
 0008 00930C00          sts _TestDebugMode,R16
 000C           L1:
 000C                   .dbline 0 ; func end
 000C 0895              ret
 000E           ;             sw -> R16
                        .even
 000E           _SamplingSwitch::
 000E           ; }
 000E           ; 
 000E           ; unsigned char SamplingSwitch(unsigned char  sw)
 000E           ; {
 000E           ; 	_SampSW = sw;
 000E 00930D00          sts __SampSW,R16
 0012           L4:
 0012                   .dbline 0 ; func end
 0012 0895              ret
                        .even
 0014           _printf_DiluteProcess_StepState::
 0014 2497              sbiw R28,4
 0016           ; }
 0016           ; 
 0016           ; extern unsigned char _DiluteMainStep, _DiluteWorkStep;
 0016           ; extern unsigned char CardSurplusState[];              // 卡片剩余状态
 0016           ; extern unsigned char CardStoretate[];
 0016           ; extern RING_QUEUE     RingQueue;
 0016           ; 
 0016           ; 
 0016           ; 
 0016           ; 
 0016           ; 
 0016           ; void printf_DiluteProcess_StepState(void)
 0016           ; {
 0016           ;       Uart0ReUnable;
 0016 8091C100          lds R24,193
 001A 8F7E              andi R24,239
 001C 8093C100          sts 193,R24
 0020           ;       uart_Printf("%s $%2d $%2d\r\n",strM3201,DiluteProcess_mainStep,DiluteProcess_workStep);
 0020 20902D00          lds R2,_DiluteProcess_workStep
 0024 3324              clr R3
 0026 3B82              std y+3,R3
 0028 2A82              std y+2,R2
 002A 20902C00          lds R2,_DiluteProcess_mainStep
 002E 3324              clr R3
 0030 3982              std y+1,R3
 0032 2882              std y+0,R2
 0034 20E0              ldi R18,<_strM3201
 0036 30E0              ldi R19,>_strM3201
 0038 00E0              ldi R16,<L6
 003A 10E0              ldi R17,>L6
 003C 0E940000          xcall _uart_Printf
 0040           ;       Uart0ReEnable;
 0040 8091C100          lds R24,193
 0044 8061              ori R24,16
 0046 8093C100          sts 193,R24
 004A           L5:
 004A                   .dbline 0 ; func end
 004A 2496              adiw R28,4
 004C 0895              ret
 004E           ;              m -> R20
                        .even
 004E           _SetPunctureState::
 004E 4A93              st -y,R20
 0050 402F              mov R20,R16
 0052 2297              sbiw R28,2
 0054           ; }
 0054           ; 
 0054           ; void SetPunctureState(unsigned char m)
 0054           ; {
 0054           ;       if(m > 2)
 0054 82E0              ldi R24,2
 0056 8417              cp R24,R20
 0058 08F4              brsh L8
 005A           X1:
 005A           ; 		m = 2;
 005A 42E0              ldi R20,2
 005C           L8:
 005C           ; 	WithoutPuncture = m;
 005C 40930100          sts _WithoutPuncture,R20
 0060           ;       Uart0ReUnable;
 0060 8091C100          lds R24,193
 0064 8F7E              andi R24,239
 0066 8093C100          sts 193,R24
 006A           ;       uart_Printf("%s $%4d\r\n",strM3119,WithoutPuncture);
 006A 242E              mov R2,R20
 006C 3324              clr R3
 006E 3982              std y+1,R3
 0070 2882              std y+0,R2
 0072 20E0              ldi R18,<_strM3119
 0074 30E0              ldi R19,>_strM3119
 0076 00E0              ldi R16,<L10
 0078 10E0              ldi R17,>L10
 007A 0E940000          xcall _uart_Printf
 007E           ;       Uart0ReEnable;
 007E 8091C100          lds R24,193
 0082 8061              ori R24,16
 0084 8093C100          sts 193,R24
 0088           L7:
 0088                   .dbline 0 ; func end
 0088 2296              adiw R28,2
 008A 4991              ld R20,y+
 008C 0895              ret
                        .area bss(ram, con, rel)
 0000           L12:
 0000                   .blkb 1
 0001           L13:
 0001                   .blkb 1
 0002           L14:
 0002                   .blkb 1
 0003           L15:
 0003                   .blkb 1
 0004           L16:
 0004                   .blkb 1
 0005           L17:
 0005                   .blkb 1
 0006           L18:
 0006                   .blkb 1
 0007           L19:
 0007                   .blkb 1
 0008           L20:
 0008                   .blkb 1
 0009           L21:
 0009                   .blkb 2
 000B           L22:
 000B                   .blkb 2
 000D           L23:
 000D                   .blkb 2
                        .area data(ram, con, rel)
 0010           L24:
 0010                   .blkb 4
                        .area idata
 0010 00000000          .word 0,0
                        .area data(ram, con, rel)
 0014           L25:
 0014                   .blkb 1
                        .area idata
 0014 00                .byte 0
                        .area data(ram, con, rel)
                        .area bss(ram, con, rel)
 000F           L26:
 000F                   .blkb 1
 0010           L27:
 0010                   .blkb 1
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 0000           L156:
 0000 F201              .word `L96
 0002 2802              .word `L101
 0004 3802              .word `L104
 0006 9902              .word `L107
 0008 C002              .word `L112
 000A E702              .word `L117
 000C F802              .word `L118
 000E 2903              .word `L120
 0010 3F03              .word `L121
 0012 5603              .word `L122
 0014 7403              .word `L123
 0016 8603              .word `L124
 0018 AE16              .word `L90
 001A AE16              .word `L90
 001C AE16              .word `L90
 001E 9403              .word `L127
 0020 B003              .word `L128
 0022 C103              .word `L129
 0024 E103              .word `L130
 0026 F403              .word `L131
 0028 0104              .word `L132
 002A 1C04              .word `L133
 002C 2A04              .word `L134
 002E 3704              .word `L135
 0030 AF04              .word `L146
 0032 B904              .word `L147
 0034 D504              .word `L150
 0036 DF04              .word `L151
 0038 0D05              .word `L154
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 003A           L281:
 003A DC07              .word `L226
 003C 2408              .word `L231
 003E 3808              .word `L232
 0040 5A08              .word `L233
 0042 6908              .word `L234
 0044 D408              .word `L247
 0046 F108              .word `L253
 0048 0109              .word `L254
 004A E609              .word `L278
 004C FA09              .word `L279
 004E 3C09              .word `L264
 0050 4909              .word `L265
 0052 AE16              .word `L90
 0054 AE16              .word `L90
 0056 5309              .word `L266
 0058 6509              .word `L267
 005A 7209              .word `L268
 005C 9009              .word `L271
 005E 9D09              .word `L272
 0060 B309              .word `L275
 0062 C309              .word `L276
 0064 D209              .word `L277
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 0066           L358:
 0066 B50B              .word `L312
 0068 E10B              .word `L325
 006A 290C              .word `L326
 006C 330C              .word `L327
 006E 3D0C              .word `L328
 0070 4C0C              .word `L329
 0072 630C              .word `L330
 0074 700C              .word `L331
 0076 830C              .word `L332
 0078 980C              .word `L333
 007A A60C              .word `L334
 007C DD0C              .word `L338
 007E 1B0D              .word `L343
 0080 2D0D              .word `L344
 0082 3E0D              .word `L345
 0084 4B0D              .word `L346
 0086 B90D              .word `L355
 0088 D10D              .word `L356
 008A DE0D              .word `L357
 008C AE16              .word `L90
 008E 5A0D              .word `L347
 0090 670D              .word `L348
 0092 790D              .word `L349
 0094 950D              .word `L352
 0096 A20D              .word `L353
 0098 AF0D              .word `L354
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 009A           L431:
 009A 3C0E              .word `L363
 009C 450F              .word `L387
 009E 530F              .word `L388
 00A0 850F              .word `L391
 00A2 CE0F              .word `L394
 00A4 E60F              .word `L395
 00A6 0F10              .word `L401
 00A8 2710              .word `L402
 00AA AE16              .word `L90
 00AC AE16              .word `L90
 00AE 3310              .word `L403
 00B0 4410              .word `L404
 00B2 5510              .word `L405
 00B4 6910              .word `L406
 00B6 7910              .word `L407
 00B8 5D11              .word `L425
 00BA 7D11              .word `L427
 00BC 9111              .word `L428
 00BE 9911              .word `L429
 00C0 7511              .word `L426
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 00C2           L535:
 00C2 0B15              .word `L509
 00C4 1C15              .word `L511
 00C6 2815              .word `L512
 00C8 3415              .word `L513
 00CA 4815              .word `L514
 00CC 5B15              .word `L515
 00CE A915              .word `L523
 00D0 6715              .word `L516
 00D2 7815              .word `L517
 00D4 8915              .word `L518
 00D6 0F16              .word `L529
 00D8 3416              .word `L530
 00DA 4D16              .word `L533
 00DC BD15              .word `L524
 00DE DC15              .word `L525
 00E0 EF15              .word `L526
                        .area text(rom, con, rel)
                ;         siTmp1 -> R12,R13
                ;          siTmp -> R10,R11
                ;     pInfoEvent -> <dead>
                        .even
 008E           _DiluteProcess::
 008E 1A93              st -y,r17
 0090 0A93              st -y,r16
 0092 0E940000          xcall push_xgsetF0FC
 0096 2497              sbiw R28,4
 0098           ; }
 0098           ; 
 0098           ; unsigned char DiluteProcess(INFO_EVENT * pInfoEvent)
 0098           ; {
 0098           ;       // 稀释运行处理程序
 0098           ;       static unsigned char mainStep;          
 0098           ;       static unsigned char workStep;
 0098           ;       static unsigned char startKey;
 0098           ;       static unsigned char  checkDiluent, checkFluid;
 0098           ;       static unsigned char pos;
 0098           ;       static unsigned char ucTmp;
 0098           ;       static unsigned char Num;
 0098           ;       signed int siTmp,siTmp1;
 0098           ;       static signed char sc;
 0098           ;       static unsigned int i;
 0098           ;       static unsigned int theDifferenceOfStep,theDownPointAdc;
 0098           ;       static long lastSampTime = 0;// 最后一次取样时间,用于待机判断
 0098           ;       static unsigned char FindNum = 0;// 查找转盘次数
 0098           ;       static unsigned char temp1,temp2;       
 0098           ; 
 0098           ; 
 0098           ; #ifdef Puncture
 0098           ;       static unsigned char detRetry ;                 // 穿刺使用
 0098           ;       static unsigned char ErrorNum = 0;              // 传递穿刺模式下的错误,根据不同的错误发送不同的信息
 0098           ; #endif
 0098           ;       
 0098           ;       DiluteProcess_mainStep = mainStep;
 0098 20900000          lds R2,L12
 009C 20922C00          sts _DiluteProcess_mainStep,R2
 00A0           ;       DiluteProcess_workStep = workStep;
 00A0 20900100          lds R2,L13
 00A4 20922D00          sts _DiluteProcess_workStep,R2
 00A8           ;       
 00A8           ;       if(1 == checkDiluent)                                   // 检查稀释液
 00A8 80910300          lds R24,L15
 00AC 8130              cpi R24,1
 00AE 61F4              brne L28
 00B0           X2:
 00B0           ; 	{	
 00B0           ; 		if(_CheckDiluentSupply() == 1)
 00B0 0E946E2A          xcall __CheckDiluentSupply
 00B4 0130              cpi R16,1
 00B6 41F4              brne L30
 00B8           X3:
 00B8           ; 		{	
 00B8           ; 			mainStep = 13;	
 00B8 8DE0              ldi R24,13
 00BA 80930000          sts L12,R24
 00BE           ;                       workStep = 0;   
 00BE 2224              clr R2
 00C0 20920100          sts L13,R2
 00C4           ;                       checkDiluent = 0;
 00C4 20920300          sts L15,R2
 00C8           ;               }       
 00C8           L30:
 00C8           ; 	}
 00C8           L28:
 00C8           ; 	if(1 == checkFluid)						// 检查清洗液
 00C8 80910400          lds R24,L16
 00CC 8130              cpi R24,1
 00CE 61F4              brne L32
 00D0           X4:
 00D0           ; 	{		
 00D0           ; 		if(_CheckFluidSupply()==1)
 00D0 0E944F2A          xcall __CheckFluidSupply
 00D4 0130              cpi R16,1
 00D6 41F4              brne L34
 00D8           X5:
 00D8           ; 		{	
 00D8           ; 			mainStep = 12;	
 00D8 8CE0              ldi R24,12
 00DA 80930000          sts L12,R24
 00DE           ;                       workStep = 0;   
 00DE 2224              clr R2
 00E0 20920100          sts L13,R2
 00E4           ;                       checkFluid = 0;
 00E4 20920400          sts L16,R2
 00E8           ;               }
 00E8           L34:
 00E8           ; 	}
 00E8           L32:
 00E8           ; 	
 00E8           ; 	if(JumpMode == 3)		// 休眠模式下手动3322液路自检完成之后,跳转到测试
 00E8 80910E00          lds R24,_JumpMode
 00EC 8330              cpi R24,3
 00EE 71F4              brne L36
 00F0           X6:
 00F0           ; 	{
 00F0           ; 		JumpMode = 0;
 00F0 2224              clr R2
 00F2 20920E00          sts _JumpMode,R2
 00F6           ;               mainStep = 1;
 00F6 81E0              ldi R24,1
 00F8 80930000          sts L12,R24
 00FC           ;               workStep = 1;
 00FC 80930100          sts L13,R24
 0100           ;               if(_SampSW == 0)        // 如果此时按键被屏蔽,解锁屏蔽
 0100 20900D00          lds R2,__SampSW
 0104 2220              tst R2
 0106 11F4              brne L38
 0108           X7:
 0108           ; 			_SampSW = 1;
 0108 80930D00          sts __SampSW,R24
 010C           L38:
 010C           ; 	}
 010C           L36:
 010C           ; 	
 010C           ; 	if(WaitDelayTime(MOT_SAMP_PUMP))		return 0;
 010C 0CE0              ldi R16,12
 010E 0E940000          xcall _WaitDelayTime
 0112 A02E              mov R10,R16
 0114 0023              tst R16
 0116 19F0              breq L40
 0118           X8:
 0118 0027              clr R16
 011A 0C94AF16          xjmp L11
 011E           L40:
 011E           ; 	if(WaitDelayTime(MOT_SAMP_TRUN))		return 0;
 011E 02E0              ldi R16,2
 0120 0E940000          xcall _WaitDelayTime
 0124 A02E              mov R10,R16
 0126 0023              tst R16
 0128 19F0              breq L42
 012A           X9:
 012A 0027              clr R16
 012C 0C94AF16          xjmp L11
 0130           L42:
 0130           ; 	if(WaitDelayTime(MOT_SAMP_NEEDLE))		return 0;
 0130 03E0              ldi R16,3
 0132 0E940000          xcall _WaitDelayTime
 0136 A02E              mov R10,R16
 0138 0023              tst R16
 013A 19F0              breq L44
 013C           X10:
 013C 0027              clr R16
 013E 0C94AF16          xjmp L11
 0142           L44:
 0142           ; 	if(WaitDelayTime(MOT_EFFLUENT))			return 0;
 0142 0BE0              ldi R16,11
 0144 0E940000          xcall _WaitDelayTime
 0148 A02E              mov R10,R16
 014A 0023              tst R16
 014C 19F0              breq L46
 014E           X11:
 014E 0027              clr R16
 0150 0C94AF16          xjmp L11
 0154           L46:
 0154           ; 	if(WaitDelayTime(MOT_FLUID))			return 0;
 0154 0AE0              ldi R16,10
 0156 0E940000          xcall _WaitDelayTime
 015A A02E              mov R10,R16
 015C 0023              tst R16
 015E 19F0              breq L48
 0160           X12:
 0160 0027              clr R16
 0162 0C94AF16          xjmp L11
 0166           L48:
 0166           ; 	if(WaitDelayTime(MOT_DILUENT))			return 0;
 0166 09E0              ldi R16,9
 0168 0E940000          xcall _WaitDelayTime
 016C A02E              mov R10,R16
 016E 0023              tst R16
 0170 19F0              breq L50
 0172           X13:
 0172 0027              clr R16
 0174 0C94AF16          xjmp L11
 0178           L50:
 0178           ; 	
 0178           ; 	if(waitMotSampTurn){	if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)		return 0;	waitMotSampTurn = 0;	}
 0178 20904F00          lds R2,_waitMotSampTurn
 017C 2220              tst R2
 017E 61F0              breq L52
 0180           X14:
 0180 02E0              ldi R16,2
 0182 0E940000          xcall _GetMotState
 0186 A02E              mov R10,R16
 0188 0130              cpi R16,1
 018A 19F0              breq L54
 018C           X15:
 018C 0027              clr R16
 018E 0C94AF16          xjmp L11
 0192           L54:
 0192 2224              clr R2
 0194 20924F00          sts _waitMotSampTurn,R2
 0198           L52:
 0198           ; 	if(waitMotSampNeedle){	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotSampNeedle = 0;	}
 0198 20904E00          lds R2,_waitMotSampNeedle
 019C 2220              tst R2
 019E 61F0              breq L56
 01A0           X16:
 01A0 03E0              ldi R16,3
 01A2 0E940000          xcall _GetMotState
 01A6 A02E              mov R10,R16
 01A8 0130              cpi R16,1
 01AA 19F0              breq L58
 01AC           X17:
 01AC 0027              clr R16
 01AE 0C94AF16          xjmp L11
 01B2           L58:
 01B2 2224              clr R2
 01B4 20924E00          sts _waitMotSampNeedle,R2
 01B8           L56:
 01B8           ; 	if(waitMotSampPump){	if(GetMotState(MOT_SAMP_PUMP)!=STA_SLAVE_FREE)		return 0;	waitMotSampPump = 0;	}
 01B8 20904D00          lds R2,_waitMotSampPump
 01BC 2220              tst R2
 01BE 61F0              breq L60
 01C0           X18:
 01C0 0CE0              ldi R16,12
 01C2 0E940000          xcall _GetMotState
 01C6 A02E              mov R10,R16
 01C8 0130              cpi R16,1
 01CA 19F0              breq L62
 01CC           X19:
 01CC 0027              clr R16
 01CE 0C94AF16          xjmp L11
 01D2           L62:
 01D2 2224              clr R2
 01D4 20924D00          sts _waitMotSampPump,R2
 01D8           L60:
 01D8           ; 	if(waitMotFluid){		if(GetMotState(MOT_FLUID)!=STA_SLAVE_FREE)			return 0;	waitMotFluid = 0;	}
 01D8 20904C00          lds R2,_waitMotFluid
 01DC 2220              tst R2
 01DE 61F0              breq L64
 01E0           X20:
 01E0 0AE0              ldi R16,10
 01E2 0E940000          xcall _GetMotState
 01E6 A02E              mov R10,R16
 01E8 0130              cpi R16,1
 01EA 19F0              breq L66
 01EC           X21:
 01EC 0027              clr R16
 01EE 0C94AF16          xjmp L11
 01F2           L66:
 01F2 2224              clr R2
 01F4 20924C00          sts _waitMotFluid,R2
 01F8           L64:
 01F8           ; 	if(waitMotDiluent){		if(GetMotState(MOT_DILUENT)!=STA_SLAVE_FREE)		return 0;	waitMotDiluent = 0;	}
 01F8 20904B00          lds R2,_waitMotDiluent
 01FC 2220              tst R2
 01FE 61F0              breq L68
 0200           X22:
 0200 09E0              ldi R16,9
 0202 0E940000          xcall _GetMotState
 0206 A02E              mov R10,R16
 0208 0130              cpi R16,1
 020A 19F0              breq L70
 020C           X23:
 020C 0027              clr R16
 020E 0C94AF16          xjmp L11
 0212           L70:
 0212 2224              clr R2
 0214 20924B00          sts _waitMotDiluent,R2
 0218           L68:
 0218           ; 	if(waitEffluent){		if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitEffluent = 0;	}
 0218 20904A00          lds R2,_waitEffluent
 021C 2220              tst R2
 021E 61F0              breq L72
 0220           X24:
 0220 0BE0              ldi R16,11
 0222 0E940000          xcall _GetMotState
 0226 A02E              mov R10,R16
 0228 0130              cpi R16,1
 022A 19F0              breq L74
 022C           X25:
 022C 0027              clr R16
 022E 0C94AF16          xjmp L11
 0232           L74:
 0232 2224              clr R2
 0234 20924A00          sts _waitEffluent,R2
 0238           L72:
 0238           ; 
 0238           ; 	if(_WaitStartKey)
 0238 20903500          lds R2,__WaitStartKey
 023C 2220              tst R2
 023E 09F4              brne X217
 0240 56C0              xjmp L76
 0242           X217:
 0242           X26:
 0242           ; 	{
 0242           ; 		if(_DiluentQuitFlag != 0)	// 稀释程序退出处理
 0242 20900600          lds R2,__DiluentQuitFlag
 0246 2220              tst R2
 0248 69F0              breq L78
 024A           X27:
 024A           ; 		{
 024A           ; 			_DiluentQuitFlag = 0;
 024A 2224              clr R2
 024C 20920600          sts __DiluentQuitFlag,R2
 0250           ;                       _WaitStartKey = 0;
 0250 20923500          sts __WaitStartKey,R2
 0254           ;                       mainStep = 10;          // 进入退出程序
 0254 8AE0              ldi R24,10
 0256 80930000          sts L12,R24
 025A           ;                       workStep = 0;
 025A 20920100          sts L13,R2
 025E           ;                       return 1;
 025E 01E0              ldi R16,1
 0260 0C94AF16          xjmp L11
 0264           L78:
 0264           ; 		}
 0264           ; 		if(WaitStartKey() == 0)
 0264 0E940000          xcall _WaitStartKey
 0268 A02E              mov R10,R16
 026A 0023              tst R16
 026C 29F5              brne L80
 026E           X28:
 026E           ; 		{		// 按键事件处理
 026E           ; 			if(mainStep == 1 && workStep == 1)
 026E 80910000          lds R24,L12
 0272 8130              cpi R24,1
 0274 F1F4              brne L82
 0276           X29:
 0276 80910100          lds R24,L13
 027A 8130              cpi R24,1
 027C D1F4              brne L82
 027E           X30:
 027E           ; 			{		// 测试空闲状态下，处理休眠事件
 027E           ; 				if(_SleepTime == 1)
 027E 80913F00          lds R24,__SleepTime
 0282 90914000          lds R25,__SleepTime+1
 0286 8130              cpi R24,1
 0288 E0E0              ldi R30,0
 028A 9E07              cpc R25,R30
 028C 91F4              brne L84
 028E           X31:
 028E           ; 				{		// 休眠时间有效时
 028E           ; 					// 待机任务
 028E           ; 					TestALampClose();	// 关闭光源
 028E 0E940000          xcall _TestALampClose
 0292           ;                                       _WaitStartKey = 0;
 0292 2224              clr R2
 0294 20923500          sts __WaitStartKey,R2
 0298           ;                                       _SleepTime = 0;
 0298 3324              clr R3
 029A 30924000          sts __SleepTime+1,R3
 029E 20923F00          sts __SleepTime,R2
 02A2           ;                                       mainStep = 20;          // 进入待机程序
 02A2 84E1              ldi R24,20
 02A4 80930000          sts L12,R24
 02A8           ;                                       workStep = 0;
 02A8 20920100          sts L13,R2
 02AC           ;                                       return 0;
 02AC 0027              clr R16
 02AE 0C94AF16          xjmp L11
 02B2           L84:
 02B2           ; 				}
 02B2           ; 			}
 02B2           L82:
 02B2           ; 			return 1;
 02B2 01E0              ldi R16,1
 02B4 0C94AF16          xjmp L11
 02B8           L80:
 02B8           ; 		}
 02B8           ; 
 02B8           ; 		if(_SampSW)
 02B8 20900D00          lds R2,__SampSW
 02BC 2220              tst R2
 02BE A1F0              breq L86
 02C0           X32:
 02C0           ; 		{
 02C0           ; 			Uart0ReUnable;
 02C0 8091C100          lds R24,193
 02C4 8F7E              andi R24,239
 02C6 8093C100          sts 193,R24
 02CA           ;                       uart_Printf("%s\r\n",strM3200); // 2016-10-10 发送按键信息
 02CA 20E0              ldi R18,<_strM3200
 02CC 30E0              ldi R19,>_strM3200
 02CE 00E0              ldi R16,<L88
 02D0 10E0              ldi R17,>L88
 02D2 0E940000          xcall _uart_Printf
 02D6           ;                       Uart0ReEnable;
 02D6 8091C100          lds R24,193
 02DA 8061              ori R24,16
 02DC 8093C100          sts 193,R24
 02E0           ;                       _WaitStartKey = 0;
 02E0 2224              clr R2
 02E2 20923500          sts __WaitStartKey,R2
 02E6           ;               }
 02E6 03C0              xjmp L87
 02E8           L86:
 02E8           ; 		else
 02E8           ; 			return 1;
 02E8 01E0              ldi R16,1
 02EA 0C94AF16          xjmp L11
 02EE           L87:
 02EE           ; 	}
 02EE           L76:
 02EE           ; 	
 02EE           ; 	switch(mainStep)
 02EE A0900000          lds R10,L12
 02F2 BB24              clr R11
 02F4 C501              movw R24,R10
 02F6 8436              cpi R24,100
 02F8 E0E0              ldi R30,0
 02FA 9E07              cpc R25,R30
 02FC 11F4              brne X218
 02FE 0C94ED14          xjmp L505
 0302           X218:
 0302           X33:
 0302 84E6              ldi R24,100
 0304 8A15              cp R24,R10
 0306 9B05              cpc R25,R11
 0308 0CF4              brge X219
 030A 42C0              xjmp L545
 030C           X219:
 030C           X34:
 030C           L544:
 030C AA20              tst R10
 030E 19F4              brne X35
 0310 BB20              tst R11
 0312 09F4              brne X220
 0314 46C0              xjmp L92
 0316           X220:
 0316           X35:
 0316 C501              movw R24,R10
 0318 8130              cpi R24,1
 031A E0E0              ldi R30,0
 031C 9E07              cpc R25,R30
 031E 09F4              brne X221
 0320 89C3              xjmp L157
 0322           X221:
 0322           X36:
 0322 8430              cpi R24,4
 0324 E0E0              ldi R30,0
 0326 9E07              cpc R25,R30
 0328 09F4              brne X222
 032A 26C6              xjmp L222
 032C           X222:
 032C           X37:
 032C 8530              cpi R24,5
 032E E0E0              ldi R30,0
 0330 9E07              cpc R25,R30
 0332 11F4              brne X223
 0334 0C940E0A          xjmp L282
 0338           X223:
 0338           X38:
 0338 8830              cpi R24,8
 033A E0E0              ldi R30,0
 033C 9E07              cpc R25,R30
 033E 11F4              brne X224
 0340 0C94970B          xjmp L308
 0344           X224:
 0344           X39:
 0344 8930              cpi R24,9
 0346 E0E0              ldi R30,0
 0348 9E07              cpc R25,R30
 034A 11F4              brne X225
 034C 0C94EE0D          xjmp L359
 0350           X225:
 0350           X40:
 0350 8A30              cpi R24,10
 0352 E0E0              ldi R30,0
 0354 9E07              cpc R25,R30
 0356 11F4              brne X226
 0358 0C94B011          xjmp L432
 035C           X226:
 035C           X41:
 035C 8B30              cpi R24,11
 035E E0E0              ldi R30,0
 0360 9E07              cpc R25,R30
 0362 11F4              brne X227
 0364 0C94F411          xjmp L439
 0368           X227:
 0368           X42:
 0368 8C30              cpi R24,12
 036A E0E0              ldi R30,0
 036C 9E07              cpc R25,R30
 036E 11F4              brne X228
 0370 0C947F12          xjmp L451
 0374           X228:
 0374           X43:
 0374 8D30              cpi R24,13
 0376 E0E0              ldi R30,0
 0378 9E07              cpc R25,R30
 037A 11F4              brne X229
 037C 0C94A113          xjmp L478
 0380           X229:
 0380           X44:
 0380 8431              cpi R24,20
 0382 E0E0              ldi R30,0
 0384 9E07              cpc R25,R30
 0386 11F4              brne X230
 0388 0C949814          xjmp L498
 038C           X230:
 038C           X45:
 038C 0C94AE16          xjmp L90
 0390           L545:
 0390 C501              movw R24,R10
 0392 8936              cpi R24,105
 0394 E0E0              ldi R30,0
 0396 9E07              cpc R25,R30
 0398 11F4              brne X231
 039A 0C945716          xjmp L536
 039E           X231:
 039E           X46:
 039E 0C94AE16          xjmp L90
 03A2           L92:
 03A2           ; 	{
 03A2           ; 		case 0:
 03A2           ; 		// 初始化准备
 03A2           ; 			switch(workStep)
 03A2 A0900100          lds R10,L13
 03A6 BB24              clr R11
 03A8 C501              movw R24,R10
 03AA 8030              cpi R24,0
 03AC E0E0              ldi R30,0
 03AE 9E07              cpc R25,R30
 03B0 14F4              brge X232
 03B2 0C94AE16          xjmp L90
 03B6           X232:
 03B6           X47:
 03B6 8CE1              ldi R24,28
 03B8 8A15              cp R24,R10
 03BA 9B05              cpc R25,R11
 03BC 5CF0              brlt L155
 03BE           X48:
 03BE 80E0              ldi R24,<L156
 03C0 90E0              ldi R25,>L156
 03C2 F501              movw R30,R10
 03C4 EE0F              lsl R30
 03C6 FF1F              rol R31
 03C8 E80F              add R30,R24
 03CA F91F              adc R31,R25
 03CC 2790              elpm R2,Z+
 03CE 3690              elpm R3,Z
 03D0 F101              movw R30,R2
 03D2 0994               ijmp
 03D4           L155:
 03D4 C501              movw R24,R10
 03D6 8436              cpi R24,100
 03D8 E0E0              ldi R30,0
 03DA 9E07              cpc R25,R30
 03DC 09F4              brne X233
 03DE 21C1              xjmp L119
 03E0           X233:
 03E0           X49:
 03E0 0C94AE16          xjmp L90
 03E4           L96:
 03E4           ; 			{
 03E4           ; 				case 0:		// 等待用户按下吸样键后取样针运行到吸样位置
 03E4           ; 					if(JumpMode == 1)	
 03E4 80910E00          lds R24,_JumpMode
 03E8 8130              cpi R24,1
 03EA 81F4              brne L97
 03EC           X50:
 03EC           ; 					{
 03EC           ; 						_NeedleMotRunTo(0, 180);
 03EC 24EB              ldi R18,180
 03EE 0027              clr R16
 03F0 1127              clr R17
 03F2 0E94E529          xcall __NeedleMotRunTo
 03F6           ;                                               waitMotSampNeedle = 1;
 03F6 81E0              ldi R24,1
 03F8 80934E00          sts _waitMotSampNeedle,R24
 03FC           ;                                               workStep = 24;
 03FC 88E1              ldi R24,24
 03FE 80930100          sts L13,R24
 0402           ;                                               JumpMode = 0;
 0402 2224              clr R2
 0404 20920E00          sts _JumpMode,R2
 0408           ;                                               break;
 0408 0C94AE16          xjmp L90
 040C           L97:
 040C           ; 					}
 040C           ; 					if(MachinePositionInit())
 040C 0E940000          xcall _MachinePositionInit
 0410 A02E              mov R10,R16
 0412 0023              tst R16
 0414 11F4              brne X234
 0416 0C94AE16          xjmp L90
 041A           X234:
 041A           X51:
 041A           ; 					{
 041A           ; 						_DiluentQuitFlag = 0;
 041A 2224              clr R2
 041C 20920600          sts __DiluentQuitFlag,R2
 0420           ;                                               Uart0ReUnable;
 0420 8091C100          lds R24,193
 0424 8F7E              andi R24,239
 0426 8093C100          sts 193,R24
 042A           ; //                                            uart_Printf("%s\r\n",strM3191);         // 取样休眠状态
 042A           ;                                               uart_Printf("%s\r\n",strM3101);         // 请按吸样键开始
 042A 20E0              ldi R18,<_strM3101
 042C 30E0              ldi R19,>_strM3101
 042E 00E0              ldi R16,<L88
 0430 10E0              ldi R17,>L88
 0432 0E940000          xcall _uart_Printf
 0436           ;                                               Uart0ReEnable;
 0436 8091C100          lds R24,193
 043A 8061              ori R24,16
 043C 8093C100          sts 193,R24
 0440           ;                                               workStep = 1;
 0440 81E0              ldi R24,1
 0442 80930100          sts L13,R24
 0446           ;                                               TestDebugMode = 0;
 0446 2224              clr R2
 0448 20920C00          sts _TestDebugMode,R2
 044C           ;                                       }
 044C           ;                                       break;
 044C 0C94AE16          xjmp L90
 0450           L101:
 0450           ; 				case 1:	// 等待用户按吸样键
 0450           ; 					_WaitStartKey = 1;	
 0450 81E0              ldi R24,1
 0452 80933500          sts __WaitStartKey,R24
 0456           ;                                       workStep = 2;
 0456 82E0              ldi R24,2
 0458 80930100          sts L13,R24
 045C           ;                                       if(CardNoneUseful == 0)
 045C 20900000          lds R2,_CardNoneUseful
 0460 2220              tst R2
 0462 11F0              breq X235
 0464 0C94AE16          xjmp L90
 0468           X235:
 0468           X52:
 0468           ; 						TestALampOpen();		
 0468 0E940000          xcall _TestALampOpen
 046C           ;                                       break;
 046C 0C94AE16          xjmp L90
 0470           L104:
 0470           ; 				case 2:
 0470           ; 					if(JumpMode == 2)			// 正在休眠,此时按下吸样键,进行液路自检
 0470 80910E00          lds R24,_JumpMode
 0474 8230              cpi R24,2
 0476 69F4              brne L105
 0478           X53:
 0478           ; 					{
 0478           ; 						primeProcessSW = 3;
 0478 83E0              ldi R24,3
 047A 80930000          sts _primeProcessSW,R24
 047E           ;                                               mainStep = 1;
 047E 81E0              ldi R24,1
 0480 80930000          sts L12,R24
 0484           ;                                               workStep = 0;
 0484 2224              clr R2
 0486 20920100          sts L13,R2
 048A           ;                                               JumpMode = 0;
 048A 20920E00          sts _JumpMode,R2
 048E           ;                                               break;
 048E 0C94AE16          xjmp L90
 0492           L105:
 0492           ; 					}
 0492           ; 					SetEValve(EV_ALL, EV_CLOSE);
 0492 2227              clr R18
 0494 0027              clr R16
 0496 0E940000          xcall _SetEValve
 049A           ;                                       Uart0ReUnable;
 049A 8091C100          lds R24,193
 049E 8F7E              andi R24,239
 04A0 8093C100          sts 193,R24
 04A4           ;                                       uart_Printf("%s\r\n",strM3100);         // 启动
 04A4 20E0              ldi R18,<_strM3100
 04A6 30E0              ldi R19,>_strM3100
 04A8 00E0              ldi R16,<L88
 04AA 10E0              ldi R17,>L88
 04AC 0E940000          xcall _uart_Printf
 04B0           ;                                       Uart0ReEnable;
 04B0 8091C100          lds R24,193
 04B4 8061              ori R24,16
 04B6 8093C100          sts 193,R24
 04BA           ;                                       lastSampTime = SecondCount;             // 计算待机时间用
 04BA 40900400          lds R4,_SecondCount+2
 04BE 50900500          lds R5,_SecondCount+2+1
 04C2 20900200          lds R2,_SecondCount
 04C6 30900300          lds R3,_SecondCount+1
 04CA 30921100          sts L24+1,R3
 04CE 20921000          sts L24,R2
 04D2 50921300          sts L24+2+1,R5
 04D6 40921200          sts L24+2,R4
 04DA           ;                                       // 读取取样针位置信息
 04DA           ;                                       NeedleOnMixCenterPos = GetNeedleOnMixCenterPos();
 04DA 0E940000          xcall _GetNeedleOnMixCenterPos
 04DE 5801              movw R10,R16
 04E0 B0923B00          sts _NeedleOnMixCenterPos+1,R11
 04E4 A0923A00          sts _NeedleOnMixCenterPos,R10
 04E8           ;                                       NeedleOnMixSidePos = GetNeedleOnMixSidePos();
 04E8 0E940000          xcall _GetNeedleOnMixSidePos
 04EC 5801              movw R10,R16
 04EE B0923D00          sts _NeedleOnMixSidePos+1,R11
 04F2 A0923C00          sts _NeedleOnMixSidePos,R10
 04F6           ;                                       DropHeight = GetDropHeight();
 04F6 0E940000          xcall _GetDropHeight
 04FA 5801              movw R10,R16
 04FC B0923900          sts _DropHeight+1,R11
 0500 A0923800          sts _DropHeight,R10
 0504           ;                                       SetMotRunPam(MOT_SAMP_TRUN,240,10,CURRENT_SAMP_TRUN);
 0504 84E0              ldi R24,4
 0506 8A83              std y+2,R24
 0508 8AE0              ldi R24,10
 050A 8883              std y+0,R24
 050C 20EF              ldi R18,240
 050E 02E0              ldi R16,2
 0510 0E940000          xcall _SetMotRunPam
 0514           ;                                       MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 0514 20913A00          lds R18,_NeedleOnMixCenterPos
 0518 30913B00          lds R19,_NeedleOnMixCenterPos+1
 051C 02E0              ldi R16,2
 051E 0E940000          xcall _MotRunTo
 0522           ;                                       waitMotSampTurn = 1;
 0522 81E0              ldi R24,1
 0524 80934F00          sts _waitMotSampTurn,R24
 0528           ;                                       workStep = 3;
 0528 83E0              ldi R24,3
 052A 80930100          sts L13,R24
 052E           ;                                       break;
 052E 0C94AE16          xjmp L90
 0532           L107:
 0532           ; 				case 3:		// 灌注清洗液
 0532           ; 					ucTmp = _PrimingFluid();
 0532 0E94BC2C          xcall __PrimingFluid
 0536 5801              movw R10,R16
 0538 A0920600          sts L18,R10
 053C           ;                                       if(ucTmp == 1)  workStep = 4;           // 进入稀释液灌注
 053C 0130              cpi R16,1
 053E 29F4              brne L108
 0540           X54:
 0540 84E0              ldi R24,4
 0542 80930100          sts L13,R24
 0546 0C94AE16          xjmp L90
 054A           L108:
 054A           ; 					else if(ucTmp == 0xff)	
 054A 80910600          lds R24,L18
 054E 8F3F              cpi R24,255
 0550 11F0              breq X236
 0552 0C94AE16          xjmp L90
 0556           X236:
 0556           X55:
 0556           ; 					{	// 重新灌注
 0556           ; 						workStep = 1;	
 0556 81E0              ldi R24,1
 0558 80930100          sts L13,R24
 055C           ;                                               Uart0ReUnable;
 055C 8091C100          lds R24,193
 0560 8F7E              andi R24,239
 0562 8093C100          sts 193,R24
 0566           ;                                               uart_Printf("%s\r\n",strE3902); 
 0566 20E0              ldi R18,<_strE3902
 0568 30E0              ldi R19,>_strE3902
 056A 00E0              ldi R16,<L88
 056C 10E0              ldi R17,>L88
 056E 0E940000          xcall _uart_Printf
 0572           ;                                               Uart0ReEnable;
 0572 8091C100          lds R24,193
 0576 8061              ori R24,16
 0578 8093C100          sts 193,R24
 057C           ;                                       }
 057C           ;                                       break;
 057C 0C94AE16          xjmp L90
 0580           L112:
 0580           ; 				case 4:		// 灌注稀释液
 0580           ; 					ucTmp = _PrimingDiluent();
 0580 0E94892A          xcall __PrimingDiluent
 0584 5801              movw R10,R16
 0586 A0920600          sts L18,R10
 058A           ;                                       if(ucTmp == 1)  workStep = 5;           // 全部灌注完毕
 058A 0130              cpi R16,1
 058C 29F4              brne L113
 058E           X56:
 058E 85E0              ldi R24,5
 0590 80930100          sts L13,R24
 0594 0C94AE16          xjmp L90
 0598           L113:
 0598           ; 					else if(ucTmp == 0xff)	
 0598 80910600          lds R24,L18
 059C 8F3F              cpi R24,255
 059E 11F0              breq X237
 05A0 0C94AE16          xjmp L90
 05A4           X237:
 05A4           X57:
 05A4           ; 					{	// 重新灌注
 05A4           ; 						Uart0ReUnable;
 05A4 8091C100          lds R24,193
 05A8 8F7E              andi R24,239
 05AA 8093C100          sts 193,R24
 05AE           ;                                               uart_Printf("%s\r\n", strE3904);
 05AE 20E0              ldi R18,<_strE3904
 05B0 30E0              ldi R19,>_strE3904
 05B2 00E0              ldi R16,<L88
 05B4 10E0              ldi R17,>L88
 05B6 0E940000          xcall _uart_Printf
 05BA           ;                                               Uart0ReEnable;
 05BA 8091C100          lds R24,193
 05BE 8061              ori R24,16
 05C0 8093C100          sts 193,R24
 05C4           ;                                               workStep = 1;   
 05C4 81E0              ldi R24,1
 05C6 80930100          sts L13,R24
 05CA           ;                                       }
 05CA           ;                                       break;
 05CA 0C94AE16          xjmp L90
 05CE           L117:
 05CE           ; 				case 5:	// 清洗清洗头和取样针通道
 05CE           ; 					// 建立负压
 05CE           ; 					SetEValve(EV3, EV_OPEN);
 05CE 21E0              ldi R18,1
 05D0 03E0              ldi R16,3
 05D2 0E940000          xcall _SetEValve
 05D6           ;                                       _EffluentMotRun(100, 200);
 05D6 28EC              ldi R18,200
 05D8 04E6              ldi R16,100
 05DA 10E0              ldi R17,0
 05DC 0E947329          xcall __EffluentMotRun
 05E0           ;                                       SetDelayTime(MOT_EFFLUENT, 5);
 05E0 25E0              ldi R18,5
 05E2 30E0              ldi R19,0
 05E4 0BE0              ldi R16,11
 05E6 0E940000          xcall _SetDelayTime
 05EA           ;                                       workStep = 6;
 05EA 86E0              ldi R24,6
 05EC 80930100          sts L13,R24
 05F0           L118:
 05F0           ; 				case 6:	// 清洗
 05F0           ; 					SetEValve(EV1, EV_OPEN);
 05F0 21E0              ldi R18,1
 05F2 01E0              ldi R16,1
 05F4 0E940000          xcall _SetEValve
 05F8           ;                                       _FluidMotRun(30, 30);
 05F8 2EE1              ldi R18,30
 05FA 0EE1              ldi R16,30
 05FC 10E0              ldi R17,0
 05FE 0E944E29          xcall __FluidMotRun
 0602           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 0602 03E0              ldi R16,3
 0604 0E940000          xcall _MotInitCheck
 0608           ;                                       SetDelayTime(MOT_EFFLUENT, 10);
 0608 2AE0              ldi R18,10
 060A 30E0              ldi R19,0
 060C 0BE0              ldi R16,11
 060E 0E940000          xcall _SetDelayTime
 0612           ;                                       waitMotSampNeedle = 1;
 0612 81E0              ldi R24,1
 0614 80934E00          sts _waitMotSampNeedle,R24
 0618           ;                                       workStep = 100;
 0618 84E6              ldi R24,100
 061A 80930100          sts L13,R24
 061E           ;                                       break;
 061E 0C94AE16          xjmp L90
 0622           L119:
 0622           ; 				case 100:
 0622           ; 					MotStop(MOT_FLUID);
 0622 0AE0              ldi R16,10
 0624 0E940000          xcall _MotStop
 0628           ;                                       waitMotFluid = 1;
 0628 81E0              ldi R24,1
 062A 80934C00          sts _waitMotFluid,R24
 062E           ;                                       SetDelayTime(MOT_EFFLUENT, 10);
 062E 2AE0              ldi R18,10
 0630 30E0              ldi R19,0
 0632 0BE0              ldi R16,11
 0634 0E940000          xcall _SetDelayTime
 0638           ;                                       MotRunTo(MOT_SAMP_TRUN, 0);
 0638 2227              clr R18
 063A 3327              clr R19
 063C 02E0              ldi R16,2
 063E 0E940000          xcall _MotRunTo
 0642           ;                                       waitMotSampNeedle = 1;
 0642 81E0              ldi R24,1
 0644 80934E00          sts _waitMotSampNeedle,R24
 0648           ;                                       workStep = 7;
 0648 87E0              ldi R24,7
 064A 80930100          sts L13,R24
 064E           ;                                       break;
 064E 0C94AE16          xjmp L90
 0652           L120:
 0652           ; 				case 7:	// 先关闭清洗液
 0652           ; 					_FluidMotRun(-2, 80);
 0652 20E5              ldi R18,80
 0654 0EEF              ldi R16,-2
 0656 1FEF              ldi R17,-1
 0658 0E944E29          xcall __FluidMotRun
 065C           ;                                       MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 065C 20913A00          lds R18,_NeedleOnMixCenterPos
 0660 30913B00          lds R19,_NeedleOnMixCenterPos+1
 0664 02E0              ldi R16,2
 0666 0E940000          xcall _MotRunTo
 066A           ;                                       waitMotFluid = 1;
 066A 81E0              ldi R24,1
 066C 80934C00          sts _waitMotFluid,R24
 0670           ;                                       waitMotSampNeedle = 1;
 0670 80934E00          sts _waitMotSampNeedle,R24
 0674           ;                                       workStep = 8;
 0674 88E0              ldi R24,8
 0676 80930100          sts L13,R24
 067A           ;                                       break;
 067A 0C94AE16          xjmp L90
 067E           L121:
 067E           ; 				case 8:	// 关闭负压
 067E           ; 					SetEValve(EV_ALL, EV_CLOSE);
 067E 2227              clr R18
 0680 0027              clr R16
 0682 0E940000          xcall _SetEValve
 0686           ;                                       MotStop(MOT_EFFLUENT);
 0686 0BE0              ldi R16,11
 0688 0E940000          xcall _MotStop
 068C           ;                                       _NeedleMotRunTo(_POS_MIX_BUTTOM, 180);//240
 068C 24EB              ldi R18,180
 068E 04E8              ldi R16,900
 0690 13E0              ldi R17,3
 0692 0E94E529          xcall __NeedleMotRunTo
 0696           ;                                       waitMotSampNeedle = 1;
 0696 81E0              ldi R24,1
 0698 80934E00          sts _waitMotSampNeedle,R24
 069C           ;                                       sc = 3;         // 设置清洗次数
 069C 83E0              ldi R24,3
 069E 80930800          sts L20,R24
 06A2           ;                                       workStep = 9;
 06A2 89E0              ldi R24,9
 06A4 80930100          sts L13,R24
 06A8           ;                                       break;
 06A8 0C94AE16          xjmp L90
 06AC           L122:
 06AC           ; 				case 9:	// 清洗和灌注取样针通道
 06AC           ; 					sc --;
 06AC 80910800          lds R24,L20
 06B0 8150              subi R24,1
 06B2 80930800          sts L20,R24
 06B6           ;                                       SetEValve(EV2, EV_OPEN);
 06B6 21E0              ldi R18,1
 06B8 02E0              ldi R16,2
 06BA 0E940000          xcall _SetEValve
 06BE           ;                                       MotInitCheck(MOT_SAMP_PUMP);
 06BE 0CE0              ldi R16,12
 06C0 0E940000          xcall _MotInitCheck
 06C4           ;                                       _FluidMotRun(12, 64);           // 注入1mL清洗液
 06C4 20E4              ldi R18,64
 06C6 0CE0              ldi R16,12
 06C8 10E0              ldi R17,0
 06CA 0E944E29          xcall __FluidMotRun
 06CE           ;                                       waitMotFluid = 1;
 06CE 81E0              ldi R24,1
 06D0 80934C00          sts _waitMotFluid,R24
 06D4           ;                                       SetDelayTime(MOT_FLUID, 40);
 06D4 28E2              ldi R18,40
 06D6 30E0              ldi R19,0
 06D8 0AE0              ldi R16,10
 06DA 0E940000          xcall _SetDelayTime
 06DE           ;                                       workStep = 10;
 06DE 8AE0              ldi R24,10
 06E0 80930100          sts L13,R24
 06E4           ;                                       break;
 06E4 0C94AE16          xjmp L90
 06E8           L123:
 06E8           ; 				case 10:
 06E8           ; 					_EffluentMotRun(20, 200);
 06E8 28EC              ldi R18,200
 06EA 04E1              ldi R16,20
 06EC 10E0              ldi R17,0
 06EE 0E947329          xcall __EffluentMotRun
 06F2           ;                                       SetDelayTime(MOT_FLUID, 20);
 06F2 24E1              ldi R18,20
 06F4 30E0              ldi R19,0
 06F6 0AE0              ldi R16,10
 06F8 0E940000          xcall _SetDelayTime
 06FC           ;                                       waitEffluent = 1;
 06FC 81E0              ldi R24,1
 06FE 80934A00          sts _waitEffluent,R24
 0702           ;                                       workStep = 11;
 0702 8BE0              ldi R24,11
 0704 80930100          sts L13,R24
 0708           ;                                       break;
 0708 0C94AE16          xjmp L90
 070C           L124:
 070C           ; 				case 11:
 070C           ; 					if(sc != 0){
 070C 20900800          lds R2,L20
 0710 2220              tst R2
 0712 29F0              breq L125
 0714           X58:
 0714           ; 						workStep = 9;
 0714 89E0              ldi R24,9
 0716 80930100          sts L13,R24
 071A           ;                                               }
 071A 0C94AE16          xjmp L90
 071E           L125:
 071E           ; 					else{
 071E           ; 						workStep = 15;
 071E 8FE0              ldi R24,15
 0720 80930100          sts L13,R24
 0724           ;                                               }
 0724           ;                                       break;
 0724 0C94AE16          xjmp L90
 0728           L127:
 0728           ; 				case 15:	// 清洗完毕，抽清洗头残留水
 0728           ; 					SetEValve(EV_ALL, EV_CLOSE);
 0728 2227              clr R18
 072A 0027              clr R16
 072C 0E940000          xcall _SetEValve
 0730           ;                                       SetEValve(EV3, EV_OPEN);
 0730 21E0              ldi R18,1
 0732 03E0              ldi R16,3
 0734 0E940000          xcall _SetEValve
 0738           ;                                       _NeedleMotRunTo(0, 180);//240
 0738 24EB              ldi R18,180
 073A 0027              clr R16
 073C 1127              clr R17
 073E 0E94E529          xcall __NeedleMotRunTo
 0742           ;                                       _EffluentMotRun(30, 200);
 0742 28EC              ldi R18,200
 0744 0EE1              ldi R16,30
 0746 10E0              ldi R17,0
 0748 0E947329          xcall __EffluentMotRun
 074C           ;                                       waitMotSampNeedle = 1;
 074C 81E0              ldi R24,1
 074E 80934E00          sts _waitMotSampNeedle,R24
 0752           ;                                       waitEffluent = 1;
 0752 80934A00          sts _waitEffluent,R24
 0756           ;                                       workStep = 16;
 0756 80E1              ldi R24,16
 0758 80930100          sts L13,R24
 075C           ;                                       break;
 075C 0C94AE16          xjmp L90
 0760           L128:
 0760           ; 				case 16:	// 排干混匀池水
 0760           ; 					SetEValve(EV_ALL, EV_CLOSE);
 0760 2227              clr R18
 0762 0027              clr R16
 0764 0E940000          xcall _SetEValve
 0768           ;                                       _EffluentMotRun(20, 220);
 0768 2CED              ldi R18,220
 076A 04E1              ldi R16,20
 076C 10E0              ldi R17,0
 076E 0E947329          xcall __EffluentMotRun
 0772           ;                                       waitEffluent = 1;
 0772 81E0              ldi R24,1
 0774 80934A00          sts _waitEffluent,R24
 0778           ;                                       workStep = 17;
 0778 81E1              ldi R24,17
 077A 80930100          sts L13,R24
 077E           ;                                       break;
 077E 0C94AE16          xjmp L90
 0782           L129:
 0782           ; 				case 17:			// 取样臂不在吸样位置，需先运行到吸样位
 0782           ; 					SetMotRunPam(MOT_SAMP_NEEDLE, 200, 5, CURRENT_SAMP_NEEDLE);
 0782 83E0              ldi R24,3
 0784 8A83              std y+2,R24
 0786 85E0              ldi R24,5
 0788 8883              std y+0,R24
 078A 28EC              ldi R18,200
 078C 03E0              ldi R16,3
 078E 0E940000          xcall _SetMotRunPam
 0792           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 0792 03E0              ldi R16,3
 0794 0E940000          xcall _MotInitCheck
 0798           ;                                       SetMotRunPam(MOT_SAMP_PUMP,120,5,CURRENT_SAMP_PUMP);
 0798 86E0              ldi R24,6
 079A 8A83              std y+2,R24
 079C 85E0              ldi R24,5
 079E 8883              std y+0,R24
 07A0 28E7              ldi R18,120
 07A2 0CE0              ldi R16,12
 07A4 0E940000          xcall _SetMotRunPam
 07A8           ;                                       MotInitCheck(MOT_SAMP_PUMP);
 07A8 0CE0              ldi R16,12
 07AA 0E940000          xcall _MotInitCheck
 07AE           ;                                       waitMotSampNeedle = 1;
 07AE 81E0              ldi R24,1
 07B0 80934E00          sts _waitMotSampNeedle,R24
 07B4           ;                                       workStep = 18;
 07B4 82E1              ldi R24,18
 07B6 80930100          sts L13,R24
 07BA           ;                                       SetBeepAck();
 07BA 0E940000          xcall _SetBeepAck
 07BE           ;                                       break;
 07BE 0C94AE16          xjmp L90
 07C2           L130:
 07C2           ; 				case 18:
 07C2           ; 					SetMotRunPam(MOT_SAMP_TRUN,255,10,CURRENT_SAMP_TRUN);
 07C2 84E0              ldi R24,4
 07C4 8A83              std y+2,R24
 07C6 8AE0              ldi R24,10
 07C8 8883              std y+0,R24
 07CA 2FEF              ldi R18,255
 07CC 02E0              ldi R16,2
 07CE 0E940000          xcall _SetMotRunPam
 07D2           ;                                       MotInitCheck(MOT_SAMP_TRUN);
 07D2 02E0              ldi R16,2
 07D4 0E940000          xcall _MotInitCheck
 07D8           ;                                       waitMotSampTurn = 1;
 07D8 81E0              ldi R24,1
 07DA 80934F00          sts _waitMotSampTurn,R24
 07DE           ;                                       workStep = 19;
 07DE 83E1              ldi R24,19
 07E0 80930100          sts L13,R24
 07E4           ;                                       break;
 07E4 0C94AE16          xjmp L90
 07E8           L131:
 07E8           ; 				case 19:
 07E8           ; 					MotRunTo(MOT_SAMP_TRUN,_POS_SAMPTURN_SAMP);
 07E8 24ED              ldi R18,980
 07EA 33E0              ldi R19,3
 07EC 02E0              ldi R16,2
 07EE 0E940000          xcall _MotRunTo
 07F2           ;                                       waitMotSampTurn = 1;
 07F2 81E0              ldi R24,1
 07F4 80934F00          sts _waitMotSampTurn,R24
 07F8           ;                                       workStep = 20;
 07F8 84E1              ldi R24,20
 07FA 80930100          sts L13,R24
 07FE           ;                                       break;
 07FE 0C94AE16          xjmp L90
 0802           L132:
 0802           ; 				case 20:
 0802           ; #ifndef Puncture				
 0802           ; 					_NeedleMotRunTo(_POS_SAMP_DOWN, 240);	//穿刺屏蔽
 0802 20EF              ldi R18,240
 0804 08EA              ldi R16,1960
 0806 17E0              ldi R17,7
 0808 0E94E529          xcall __NeedleMotRunTo
 080C           ;                                       waitMotSampNeedle = 1;
 080C 81E0              ldi R24,1
 080E 80934E00          sts _waitMotSampNeedle,R24
 0812           ; #endif                                        
 0812           ;                                       _EffluentMotRun(100, 200);
 0812 28EC              ldi R18,200
 0814 04E6              ldi R16,100
 0816 10E0              ldi R17,0
 0818 0E947329          xcall __EffluentMotRun
 081C           ;                                       SetEValve(EV3, EV_OPEN);
 081C 21E0              ldi R18,1
 081E 03E0              ldi R16,3
 0820 0E940000          xcall _SetEValve
 0824           ;                                       SetDelayTime(MOT_SAMP_TRUN, 30);
 0824 2EE1              ldi R18,30
 0826 30E0              ldi R19,0
 0828 02E0              ldi R16,2
 082A 0E940000          xcall _SetDelayTime
 082E           ;                                       workStep = 21;
 082E 85E1              ldi R24,21
 0830 80930100          sts L13,R24
 0834           ;                                       break;
 0834 0C94AE16          xjmp L90
 0838           L133:
 0838           ; 				case 21:		// 取样针在吸样位置，跳到吸样程序
 0838           ; 					SetBeepPrompt();
 0838 0E940000          xcall _SetBeepPrompt
 083C           ;                                       MotStop(MOT_EFFLUENT);
 083C 0BE0              ldi R16,11
 083E 0E940000          xcall _MotStop
 0842           ;                                       SetEValve(EV_ALL,EV_CLOSE);
 0842 2227              clr R18
 0844 0027              clr R16
 0846 0E940000          xcall _SetEValve
 084A           ;                                       workStep = 22;  
 084A 86E1              ldi R24,22
 084C 80930100          sts L13,R24
 0850           ;                                       break;
 0850 0C94AE16          xjmp L90
 0854           L134:
 0854           ; 				case 22:
 0854           ; 					MotRun(MOT_SAMP_PUMP, _SAMP_PUMP_INTERVAL+_SAMP_PUMP_AIR_ISOLATE);
 0854 28E6              ldi R18,360
 0856 31E0              ldi R19,1
 0858 0CE0              ldi R16,12
 085A 0E940000          xcall _MotRun
 085E           ;                                       waitMotSampPump = 1;
 085E 81E0              ldi R24,1
 0860 80934D00          sts _waitMotSampPump,R24
 0864           ;                                       workStep = 23;
 0864 87E1              ldi R24,23
 0866 80930100          sts L13,R24
 086A           ;                                       break;
 086A 0C94AE16          xjmp L90
 086E           L135:
 086E           ; 				case 23:
 086E           ; 					SetStateLedFree();
 086E 0E940000          xcall _SetStateLedFree
 0872           ;                                       mainStep = 1;
 0872 81E0              ldi R24,1
 0874 80930000          sts L12,R24
 0878           ;                                       workStep = 0;
 0878 2224              clr R2
 087A 20920100          sts L13,R2
 087E           ;                                       if(CleanMode != 0)
 087E 20900B00          lds R2,_CleanMode
 0882 2220              tst R2
 0884 09F4              brne X238
 0886 57C0              xjmp L136
 0888           X238:
 0888           X59:
 0888           ; 					{
 0888           ; 						if(1 == CleanMode)
 0888 822D              mov R24,R2
 088A 8130              cpi R24,1
 088C 89F4              brne L138
 088E           X60:
 088E           ; 						{
 088E           ; 							Uart0ReUnable;
 088E 8091C100          lds R24,193
 0892 8F7E              andi R24,239
 0894 8093C100          sts 193,R24
 0898           ;                                                       uart_Printf("%s\r\n", strM3167);
 0898 20E0              ldi R18,<_strM3167
 089A 30E0              ldi R19,>_strM3167
 089C 00E0              ldi R16,<L88
 089E 10E0              ldi R17,>L88
 08A0 0E940000          xcall _uart_Printf
 08A4           ;                                                       Uart0ReEnable;
 08A4 8091C100          lds R24,193
 08A8 8061              ori R24,16
 08AA 8093C100          sts 193,R24
 08AE           ;                                               }
 08AE 3EC0              xjmp L139
 08B0           L138:
 08B0           ; 						else if(2 == CleanMode)
 08B0 80910B00          lds R24,_CleanMode
 08B4 8230              cpi R24,2
 08B6 89F4              brne L140
 08B8           X61:
 08B8           ; 						{
 08B8           ; 							Uart0ReUnable;
 08B8 8091C100          lds R24,193
 08BC 8F7E              andi R24,239
 08BE 8093C100          sts 193,R24
 08C2           ;                                                       uart_Printf("%s\r\n", strM3168);
 08C2 20E0              ldi R18,<_strM3168
 08C4 30E0              ldi R19,>_strM3168
 08C6 00E0              ldi R16,<L88
 08C8 10E0              ldi R17,>L88
 08CA 0E940000          xcall _uart_Printf
 08CE           ;                                                       Uart0ReEnable;
 08CE 8091C100          lds R24,193
 08D2 8061              ori R24,16
 08D4 8093C100          sts 193,R24
 08D8           ;                                               }
 08D8 29C0              xjmp L141
 08DA           L140:
 08DA           ; 						else if(250 == CleanMode)
 08DA 80910B00          lds R24,_CleanMode
 08DE 8A3F              cpi R24,250
 08E0 89F4              brne L142
 08E2           X62:
 08E2           ; 						{
 08E2           ; 							Uart0ReUnable;
 08E2 8091C100          lds R24,193
 08E6 8F7E              andi R24,239
 08E8 8093C100          sts 193,R24
 08EC           ;                                                       uart_Printf("%s\r\n", strM3169);
 08EC 20E0              ldi R18,<_strM3169
 08EE 30E0              ldi R19,>_strM3169
 08F0 00E0              ldi R16,<L88
 08F2 10E0              ldi R17,>L88
 08F4 0E940000          xcall _uart_Printf
 08F8           ;                                                       Uart0ReEnable;
 08F8 8091C100          lds R24,193
 08FC 8061              ori R24,16
 08FE 8093C100          sts 193,R24
 0902           ;                                               }
 0902 14C0              xjmp L143
 0904           L142:
 0904           ; 						else if(255 == CleanMode)
 0904 80910B00          lds R24,_CleanMode
 0908 8F3F              cpi R24,255
 090A 81F4              brne L144
 090C           X63:
 090C           ; 						{
 090C           ; 							Uart0ReUnable;
 090C 8091C100          lds R24,193
 0910 8F7E              andi R24,239
 0912 8093C100          sts 193,R24
 0916           ;                                                       uart_Printf("%s\r\n", strM3170);
 0916 20E0              ldi R18,<_strM3170
 0918 30E0              ldi R19,>_strM3170
 091A 00E0              ldi R16,<L88
 091C 10E0              ldi R17,>L88
 091E 0E940000          xcall _uart_Printf
 0922           ;                                                       Uart0ReEnable;
 0922 8091C100          lds R24,193
 0926 8061              ori R24,16
 0928 8093C100          sts 193,R24
 092C           ;                                               }
 092C           L144:
 092C           L143:
 092C           L141:
 092C           L139:
 092C           ; 						CleanMode = 0;
 092C 2224              clr R2
 092E 20920B00          sts _CleanMode,R2
 0932           ;                                               checkFluid = 0;
 0932 20920400          sts L16,R2
 0936           ;                                       }
 0936           L136:
 0936           ; 					Uart0ReUnable;
 0936 8091C100          lds R24,193
 093A 8F7E              andi R24,239
 093C 8093C100          sts 193,R24
 0940           ;                                       uart_Printf("%s\r\n",strM3102);
 0940 20E0              ldi R18,<_strM3102
 0942 30E0              ldi R19,>_strM3102
 0944 00E0              ldi R16,<L88
 0946 10E0              ldi R17,>L88
 0948 0E940000          xcall _uart_Printf
 094C           ;                                       Uart0ReEnable;
 094C 8091C100          lds R24,193
 0950 8061              ori R24,16
 0952 8093C100          sts 193,R24
 0956           ;                                       SetStateLedFree();
 0956 0E940000          xcall _SetStateLedFree
 095A           ;                                       break;
 095A 0C94AE16          xjmp L90
 095E           L146:
 095E           ; 				case 24:
 095E           ; 					SetDelayTime(MOT_SAMP_NEEDLE,10);
 095E 2AE0              ldi R18,10
 0960 30E0              ldi R19,0
 0962 03E0              ldi R16,3
 0964 0E940000          xcall _SetDelayTime
 0968           ;                                       workStep = 25;
 0968 89E1              ldi R24,25
 096A 80930100          sts L13,R24
 096E           ;                                       break;
 096E 0C94AE16          xjmp L90
 0972           L147:
 0972           ; 				case 25:
 0972           ; 					if(GetMotorMonitorState(MOT_SAMP_NEEDLE,ZeroMonitor) == 1)		// 判断吸样针是否回到零位
 0972 2227              clr R18
 0974 03E0              ldi R16,3
 0976 0E940000          xcall _GetMotorMonitorState
 097A A02E              mov R10,R16
 097C 0130              cpi R16,1
 097E 69F4              brne L148
 0980           X64:
 0980           ; 					{
 0980           ; 						MotRunTo(MOT_SAMP_TRUN, 0);
 0980 2227              clr R18
 0982 3327              clr R19
 0984 02E0              ldi R16,2
 0986 0E940000          xcall _MotRunTo
 098A           ;                                               waitMotSampTurn = 1;
 098A 81E0              ldi R24,1
 098C 80934F00          sts _waitMotSampTurn,R24
 0990           ;                                               workStep = 26;
 0990 8AE1              ldi R24,26
 0992 80930100          sts L13,R24
 0996           ;                                       }
 0996 0C94AE16          xjmp L90
 099A           L148:
 099A           ; 					else
 099A           ; 					{
 099A           ; 						workStep = 0;
 099A 2224              clr R2
 099C 20920100          sts L13,R2
 09A0           ;                                               JumpMode = 1;
 09A0 81E0              ldi R24,1
 09A2 80930E00          sts _JumpMode,R24
 09A6           ;                                       }
 09A6           ;                                       break;
 09A6 0C94AE16          xjmp L90
 09AA           L150:
 09AA           ; 				case 26:
 09AA           ; 					SetDelayTime(MOT_SAMP_TRUN,10);
 09AA 2AE0              ldi R18,10
 09AC 30E0              ldi R19,0
 09AE 02E0              ldi R16,2
 09B0 0E940000          xcall _SetDelayTime
 09B4           ;                                       workStep = 27;
 09B4 8BE1              ldi R24,27
 09B6 80930100          sts L13,R24
 09BA           ;                                       break;
 09BA 0C94AE16          xjmp L90
 09BE           L151:
 09BE           ; 				case 27:
 09BE           ; 					if(GetMotorMonitorState(MOT_SAMP_TRUN,ZeroMonitor) == 1)		// 判断旋转臂是否回到零位
 09BE 2227              clr R18
 09C0 02E0              ldi R16,2
 09C2 0E940000          xcall _GetMotorMonitorState
 09C6 A02E              mov R10,R16
 09C8 0130              cpi R16,1
 09CA 11F5              brne L152
 09CC           X65:
 09CC           ; 					{
 09CC           ; 						MotRunTo(MOT_SAMP_TRUN, _POS_SAMPTURN_SAMP);
 09CC 24ED              ldi R18,980
 09CE 33E0              ldi R19,3
 09D0 02E0              ldi R16,2
 09D2 0E940000          xcall _MotRunTo
 09D6           ;                                               waitMotSampTurn = 1;
 09D6 81E0              ldi R24,1
 09D8 80934F00          sts _waitMotSampTurn,R24
 09DC           ;                                               // 读取取样针位置信息 到混匀池中心  边缘  滴样高度
 09DC           ;                                               NeedleOnMixCenterPos = GetNeedleOnMixCenterPos();
 09DC 0E940000          xcall _GetNeedleOnMixCenterPos
 09E0 5801              movw R10,R16
 09E2 B0923B00          sts _NeedleOnMixCenterPos+1,R11
 09E6 A0923A00          sts _NeedleOnMixCenterPos,R10
 09EA           ;                                               NeedleOnMixSidePos = GetNeedleOnMixSidePos();
 09EA 0E940000          xcall _GetNeedleOnMixSidePos
 09EE 5801              movw R10,R16
 09F0 B0923D00          sts _NeedleOnMixSidePos+1,R11
 09F4 A0923C00          sts _NeedleOnMixSidePos,R10
 09F8           ;                                               DropHeight = GetDropHeight();
 09F8 0E940000          xcall _GetDropHeight
 09FC 5801              movw R10,R16
 09FE B0923900          sts _DropHeight+1,R11
 0A02 A0923800          sts _DropHeight,R10
 0A06           ; #ifndef Puncture
 0A06           ;                                               workStep = 28;
 0A06 8CE1              ldi R24,28
 0A08 80930100          sts L13,R24
 0A0C           ; #else
 0A0C           ;                                               workStep = 21;
 0A0C           ; #endif
 0A0C           ;                                       }
 0A0C 0C94AE16          xjmp L90
 0A10           L152:
 0A10           ; 					else
 0A10           ; 					{
 0A10           ; 						workStep = 25;
 0A10 89E1              ldi R24,25
 0A12 80930100          sts L13,R24
 0A16           ;                                       }
 0A16           ;                                       break;
 0A16 0C94AE16          xjmp L90
 0A1A           L154:
 0A1A           ; 				case 28:
 0A1A           ; 					_NeedleMotRunTo(_POS_SAMP_DOWN, 180);
 0A1A 24EB              ldi R18,180
 0A1C 08EA              ldi R16,1960
 0A1E 17E0              ldi R17,7
 0A20 0E94E529          xcall __NeedleMotRunTo
 0A24           ;                                       waitMotSampNeedle = 1;
 0A24 81E0              ldi R24,1
 0A26 80934E00          sts _waitMotSampNeedle,R24
 0A2A           ;                                       workStep = 21;
 0A2A 85E1              ldi R24,21
 0A2C 80930100          sts L13,R24
 0A30           ;                                       break;
 0A30           ;                       }
 0A30           ;                       break;
 0A30 0C94AE16          xjmp L90
 0A34           L157:
 0A34           ; 		case 1:	
 0A34           ; // 吸取样本，清洗吸样针
 0A34           ; 			switch(workStep)
 0A34 A0900100          lds R10,L13
 0A38 BB24              clr R11
 0A3A AA20              tst R10
 0A3C 19F4              brne X66
 0A3E BB20              tst R11
 0A40 09F4              brne X239
 0A42 3CC0              xjmp L161
 0A44           X239:
 0A44           X66:
 0A44 C501              movw R24,R10
 0A46 8130              cpi R24,1
 0A48 E0E0              ldi R30,0
 0A4A 9E07              cpc R25,R30
 0A4C 09F4              brne X240
 0A4E 77C0              xjmp L165
 0A50           X240:
 0A50           X67:
 0A50 8230              cpi R24,2
 0A52 E0E0              ldi R30,0
 0A54 9E07              cpc R25,R30
 0A56 09F4              brne X241
 0A58 6EC1              xjmp L193
 0A5A           X241:
 0A5A           X68:
 0A5A 8330              cpi R24,3
 0A5C E0E0              ldi R30,0
 0A5E 9E07              cpc R25,R30
 0A60 09F4              brne X242
 0A62 ADC1              xjmp L203
 0A64           X242:
 0A64           X69:
 0A64 8430              cpi R24,4
 0A66 E0E0              ldi R30,0
 0A68 9E07              cpc R25,R30
 0A6A 09F4              brne X243
 0A6C B2C1              xjmp L204
 0A6E           X243:
 0A6E           X70:
 0A6E 8530              cpi R24,5
 0A70 E0E0              ldi R30,0
 0A72 9E07              cpc R25,R30
 0A74 09F4              brne X244
 0A76 EDC1              xjmp L207
 0A78           X244:
 0A78           X71:
 0A78 8730              cpi R24,7
 0A7A E0E0              ldi R30,0
 0A7C 9E07              cpc R25,R30
 0A7E 09F4              brne X245
 0A80 FAC1              xjmp L208
 0A82           X245:
 0A82           X72:
 0A82 8830              cpi R24,8
 0A84 E0E0              ldi R30,0
 0A86 9E07              cpc R25,R30
 0A88 09F4              brne X246
 0A8A 30C2              xjmp L212
 0A8C           X246:
 0A8C           X73:
 0A8C 8930              cpi R24,9
 0A8E E0E0              ldi R30,0
 0A90 9E07              cpc R25,R30
 0A92 09F4              brne X247
 0A94 37C2              xjmp L213
 0A96           X247:
 0A96           X74:
 0A96 8030              cpi R24,0
 0A98 E0E0              ldi R30,0
 0A9A 9E07              cpc R25,R30
 0A9C 14F4              brge X248
 0A9E 0C94AE16          xjmp L90
 0AA2           X248:
 0AA2           X75:
 0AA2           L221:
 0AA2 C501              movw R24,R10
 0AA4 8536              cpi R24,101
 0AA6 E0E0              ldi R30,0
 0AA8 9E07              cpc R25,R30
 0AAA 09F4              brne X249
 0AAC A7C1              xjmp L205
 0AAE           X249:
 0AAE           X76:
 0AAE 8636              cpi R24,102
 0AB0 E0E0              ldi R30,0
 0AB2 9E07              cpc R25,R30
 0AB4 09F4              brne X250
 0AB6 B6C1              xjmp L206
 0AB8           X250:
 0AB8           X77:
 0AB8 0C94AE16          xjmp L90
 0ABC           L161:
 0ABC           ; 			{
 0ABC           ; 				case 0:	// 等待用户按吸样键
 0ABC           ; 					if(_AutoTestCycleNum == 0)
 0ABC 20900900          lds R2,__AutoTestCycleNum
 0AC0 30900A00          lds R3,__AutoTestCycleNum+1
 0AC4 2220              tst R2
 0AC6 31F4              brne L162
 0AC8 3320              tst R3
 0ACA 21F4              brne L162
 0ACC           X78:
 0ACC           ; 						_WaitStartKey = 1;
 0ACC 81E0              ldi R24,1
 0ACE 80933500          sts __WaitStartKey,R24
 0AD2 1BC0              xjmp L163
 0AD4           L162:
 0AD4           ; 					else
 0AD4           ; 					{
 0AD4           ; 						_AutoTestCycleNum --;
 0AD4 80910900          lds R24,__AutoTestCycleNum
 0AD8 90910A00          lds R25,__AutoTestCycleNum+1
 0ADC 0197              sbiw R24,1
 0ADE 90930A00          sts __AutoTestCycleNum+1,R25
 0AE2 80930900          sts __AutoTestCycleNum,R24
 0AE6           ;                                               Uart0ReUnable;
 0AE6 8091C100          lds R24,193
 0AEA 8F7E              andi R24,239
 0AEC 8093C100          sts 193,R24
 0AF0           ;                                               uart_Printf("// AutoTestCyc: %d\r\n", _AutoTestCycleNum);
 0AF0 20910900          lds R18,__AutoTestCycleNum
 0AF4 30910A00          lds R19,__AutoTestCycleNum+1
 0AF8 00E0              ldi R16,<L164
 0AFA 10E0              ldi R17,>L164
 0AFC 0E940000          xcall _uart_Printf
 0B00           ;                                               Uart0ReEnable;
 0B00 8091C100          lds R24,193
 0B04 8061              ori R24,16
 0B06 8093C100          sts 193,R24
 0B0A           ;                                       }
 0B0A           L163:
 0B0A           ; 					lastSampTime = SecondCount;		// 更新最后的取样时间
 0B0A 40900400          lds R4,_SecondCount+2
 0B0E 50900500          lds R5,_SecondCount+2+1
 0B12 20900200          lds R2,_SecondCount
 0B16 30900300          lds R3,_SecondCount+1
 0B1A 30921100          sts L24+1,R3
 0B1E 20921000          sts L24,R2
 0B22 50921300          sts L24+2+1,R5
 0B26 40921200          sts L24+2,R4
 0B2A           ;                                       GetStoreState(0);                               // 查看片仓信息
 0B2A 0027              clr R16
 0B2C 0E940000          xcall _GetStoreState
 0B30           ;                                       waitMotSampPump = 1;
 0B30 81E0              ldi R24,1
 0B32 80934D00          sts _waitMotSampPump,R24
 0B36           ;                                       workStep = 1;   
 0B36 80930100          sts L13,R24
 0B3A           ;                                       break;
 0B3A 0C94AE16          xjmp L90
 0B3E           L165:
 0B3E           ; 				case 1:		
 0B3E           ; 					// 如果停止测试
 0B3E           ; 					if(1 == stopTestFlag)
 0B3E 80910F00          lds R24,_stopTestFlag
 0B42 8130              cpi R24,1
 0B44 C1F4              brne L166
 0B46           X79:
 0B46           ; 					{
 0B46           ; 						// 上报错误信息,提示必须关闭废片仓
 0B46           ; 						Uart0ReUnable;
 0B46 8091C100          lds R24,193
 0B4A 8F7E              andi R24,239
 0B4C 8093C100          sts 193,R24
 0B50           ;                                               uart_Printf("%s\r\n", strE3906);
 0B50 20E0              ldi R18,<_strE3906
 0B52 30E0              ldi R19,>_strE3906
 0B54 00E0              ldi R16,<L88
 0B56 10E0              ldi R17,>L88
 0B58 0E940000          xcall _uart_Printf
 0B5C           ;                                               Uart0ReEnable;
 0B5C 8091C100          lds R24,193
 0B60 8061              ori R24,16
 0B62 8093C100          sts 193,R24
 0B66           ;                                               SetBeepWarning();
 0B66 0E940000          xcall _SetBeepWarning
 0B6A           ;                                               workStep = 0;
 0B6A 2224              clr R2
 0B6C 20920100          sts L13,R2
 0B70           ;                                               return 1;
 0B70 01E0              ldi R16,1
 0B72 0C94AF16          xjmp L11
 0B76           L166:
 0B76           ; 					}
 0B76           ; 					
 0B76           ; 					if(CleanMode == 1)
 0B76 80910B00          lds R24,_CleanMode
 0B7A 8130              cpi R24,1
 0B7C D1F4              brne L168
 0B7E           X80:
 0B7E           ; 					{	// 普通清洗模式
 0B7E           ; 						Uart0ReUnable;
 0B7E 8091C100          lds R24,193
 0B82 8F7E              andi R24,239
 0B84 8093C100          sts 193,R24
 0B88           ;                                               uart_Printf("%s\r\n", strM3157);
 0B88 20E0              ldi R18,<_strM3157
 0B8A 30E0              ldi R19,>_strM3157
 0B8C 00E0              ldi R16,<L88
 0B8E 10E0              ldi R17,>L88
 0B90 0E940000          xcall _uart_Printf
 0B94           ;                                               Uart0ReEnable;
 0B94 8091C100          lds R24,193
 0B98 8061              ori R24,16
 0B9A 8093C100          sts 193,R24
 0B9E           ;                                               mainStep = 105;
 0B9E 89E6              ldi R24,105
 0BA0 80930000          sts L12,R24
 0BA4           ;                                               workStep = 0;
 0BA4 2224              clr R2
 0BA6 20920100          sts L13,R2
 0BAA           ;                                               SetStateLedBusy();
 0BAA 0E940000          xcall _SetStateLedBusy
 0BAE           ;                                               break;
 0BAE 0C94AE16          xjmp L90
 0BB2           L168:
 0BB2           ; 					}
 0BB2           ; 					else if(2 == CleanMode)
 0BB2 80910B00          lds R24,_CleanMode
 0BB6 8230              cpi R24,2
 0BB8 D1F4              brne L170
 0BBA           X81:
 0BBA           ; 					{	// 强力清洗模式
 0BBA           ; 						Uart0ReUnable;
 0BBA 8091C100          lds R24,193
 0BBE 8F7E              andi R24,239
 0BC0 8093C100          sts 193,R24
 0BC4           ;                                               uart_Printf("%s\r\n", strM3158);
 0BC4 20E0              ldi R18,<_strM3158
 0BC6 30E0              ldi R19,>_strM3158
 0BC8 00E0              ldi R16,<L88
 0BCA 10E0              ldi R17,>L88
 0BCC 0E940000          xcall _uart_Printf
 0BD0           ;                                               Uart0ReEnable;
 0BD0 8091C100          lds R24,193
 0BD4 8061              ori R24,16
 0BD6 8093C100          sts 193,R24
 0BDA           ;                                               mainStep = 100;
 0BDA 84E6              ldi R24,100
 0BDC 80930000          sts L12,R24
 0BE0           ;                                               workStep = 0;
 0BE0 2224              clr R2
 0BE2 20920100          sts L13,R2
 0BE6           ;                                               SetStateLedBusy();
 0BE6 0E940000          xcall _SetStateLedBusy
 0BEA           ;                                               break;
 0BEA 0C94AE16          xjmp L90
 0BEE           L170:
 0BEE           ; 					}
 0BEE           ; 					// 如果是取片测试
 0BEE           ; 					if(0 != CardStoreTestFlag)
 0BEE 20900000          lds R2,_CardStoreTestFlag
 0BF2 2220              tst R2
 0BF4 81F0              breq L172
 0BF6           X82:
 0BF6           ; 					{	
 0BF6           ; 						if(0 == LastCardGetState)					// 取片测试模式下,前一个没有完成,无法执行下一次取片动作
 0BF6 20900000          lds R2,_LastCardGetState
 0BFA 2220              tst R2
 0BFC 19F4              brne L174
 0BFE           X83:
 0BFE           ; 							return;
 0BFE 0027              clr R16
 0C00 0C94AF16          xjmp L11
 0C04           L174:
 0C04           ; 						//LastCardGetState = 0;
 0C04           ; 						if(_NewCardStoreNum != preCardStoreNum)
 0C04 20900000          lds R2,_preCardStoreNum
 0C08 30903400          lds R3,__NewCardStoreNum
 0C0C 3214              cp R3,R2
 0C0E 19F0              breq L176
 0C10           X84:
 0C10           ; 						{
 0C10           ; 							SetWorkStoreNum(preCardStoreNum);
 0C10 022D              mov R16,R2
 0C12 0E944719          xcall _SetWorkStoreNum
 0C16           ;                                               }
 0C16           L176:
 0C16           ; 					}
 0C16           L172:
 0C16           ; 					// 先检查片仓是否被开启
 0C16           ; 					if(CardStoretate[_NewCardStoreNum - 1] == INFO_STORE_OPEN)
 0C16 80E0              ldi R24,<_CardStoretate-1
 0C18 90E0              ldi R25,>_CardStoretate-1
 0C1A E0913400          lds R30,__NewCardStoreNum
 0C1E FF27              clr R31
 0C20 E80F              add R30,R24
 0C22 F91F              adc R31,R25
 0C24 8081              ldd R24,z+0
 0C26 8431              cpi R24,20
 0C28 E9F4              brne L178
 0C2A           X85:
 0C2A           ; 					{
 0C2A           ; 						Uart0ReUnable;
 0C2A 8091C100          lds R24,193
 0C2E 8F7E              andi R24,239
 0C30 8093C100          sts 193,R24
 0C34           ;                                               uart_Printf("!3521 $%4d\r\n", _NewCardStoreNum);
 0C34 20913400          lds R18,__NewCardStoreNum
 0C38 3327              clr R19
 0C3A 00E0              ldi R16,<L181
 0C3C 10E0              ldi R17,>L181
 0C3E 0E940000          xcall _uart_Printf
 0C42           ;                                               Uart0ReEnable;
 0C42 8091C100          lds R24,193
 0C46 8061              ori R24,16
 0C48 8093C100          sts 193,R24
 0C4C           ;                                               _WaitStartKey = 1;
 0C4C 81E0              ldi R24,1
 0C4E 80933500          sts __WaitStartKey,R24
 0C52           ;                                               SetDelayTime(MOT_SAMP_NEEDLE, 10);
 0C52 2AE0              ldi R18,10
 0C54 30E0              ldi R19,0
 0C56 03E0              ldi R16,3
 0C58 0E940000          xcall _SetDelayTime
 0C5C           ;                                               SetBeepWarning();
 0C5C 0E940000          xcall _SetBeepWarning
 0C60           ;                                               break;
 0C60 0C94AE16          xjmp L90
 0C64           L178:
 0C64           ; 					}
 0C64           ; 					// 检查片仓是否有干片
 0C64           ; 					if(CardNoneUseful == 0)
 0C64 20900000          lds R2,_CardNoneUseful
 0C68 2220              tst R2
 0C6A 09F0              breq X251
 0C6C 4EC0              xjmp L182
 0C6E           X251:
 0C6E           X86:
 0C6E           ; 					{
 0C6E           ; 						
 0C6E           ; 						if(CardSurplusState[_NewCardStoreNum - 1] == INFO_STORE_EMPTY)
 0C6E 80E0              ldi R24,<_CardSurplusState-1
 0C70 90E0              ldi R25,>_CardSurplusState-1
 0C72 E0913400          lds R30,__NewCardStoreNum
 0C76 FF27              clr R31
 0C78 E80F              add R30,R24
 0C7A F91F              adc R31,R25
 0C7C 8081              ldd R24,z+0
 0C7E 8831              cpi R24,24
 0C80 E9F4              brne L184
 0C82           X87:
 0C82           ; 						{
 0C82           ; 							Uart0ReUnable;
 0C82 8091C100          lds R24,193
 0C86 8F7E              andi R24,239
 0C88 8093C100          sts 193,R24
 0C8C           ;                                                       uart_Printf("!3520 $%4d\r\n", _NewCardStoreNum);
 0C8C 20913400          lds R18,__NewCardStoreNum
 0C90 3327              clr R19
 0C92 00E0              ldi R16,<L187
 0C94 10E0              ldi R17,>L187
 0C96 0E940000          xcall _uart_Printf
 0C9A           ;                                                       Uart0ReEnable;
 0C9A 8091C100          lds R24,193
 0C9E 8061              ori R24,16
 0CA0 8093C100          sts 193,R24
 0CA4           ;                                                       _WaitStartKey = 1;
 0CA4 81E0              ldi R24,1
 0CA6 80933500          sts __WaitStartKey,R24
 0CAA           ;                                                       SetDelayTime(MOT_SAMP_NEEDLE, 10);
 0CAA 2AE0              ldi R18,10
 0CAC 30E0              ldi R19,0
 0CAE 03E0              ldi R16,3
 0CB0 0E940000          xcall _SetDelayTime
 0CB4           ;                                                       SetBeepWarning();
 0CB4 0E940000          xcall _SetBeepWarning
 0CB8           ;                                                       break;
 0CB8 0C94AE16          xjmp L90
 0CBC           L184:
 0CBC           ; 						}
 0CBC           ; 						if(CardSurplusState[_NewCardStoreNum - 1] == INFO_STORE_ERROR)
 0CBC 80E0              ldi R24,<_CardSurplusState-1
 0CBE 90E0              ldi R25,>_CardSurplusState-1
 0CC0 E0913400          lds R30,__NewCardStoreNum
 0CC4 FF27              clr R31
 0CC6 E80F              add R30,R24
 0CC8 F91F              adc R31,R25
 0CCA 8081              ldd R24,z+0
 0CCC 8931              cpi R24,25
 0CCE E9F4              brne L188
 0CD0           X88:
 0CD0           ; 						{
 0CD0           ; 							Uart0ReUnable;
 0CD0 8091C100          lds R24,193
 0CD4 8F7E              andi R24,239
 0CD6 8093C100          sts 193,R24
 0CDA           ;                                                       uart_Printf("!3522 $%4d\r\n", _NewCardStoreNum);
 0CDA 20913400          lds R18,__NewCardStoreNum
 0CDE 3327              clr R19
 0CE0 00E0              ldi R16,<L191
 0CE2 10E0              ldi R17,>L191
 0CE4 0E940000          xcall _uart_Printf
 0CE8           ;                                                       Uart0ReEnable;
 0CE8 8091C100          lds R24,193
 0CEC 8061              ori R24,16
 0CEE 8093C100          sts 193,R24
 0CF2           ;                                                       _WaitStartKey = 1;
 0CF2 81E0              ldi R24,1
 0CF4 80933500          sts __WaitStartKey,R24
 0CF8           ;                                                       SetDelayTime(MOT_SAMP_NEEDLE, 10);
 0CF8 2AE0              ldi R18,10
 0CFA 30E0              ldi R19,0
 0CFC 03E0              ldi R16,3
 0CFE 0E940000          xcall _SetDelayTime
 0D02           ;                                                       SetBeepWarning();
 0D02 0E940000          xcall _SetBeepWarning
 0D06           ;                                                       break;
 0D06 0C94AE16          xjmp L90
 0D0A           L188:
 0D0A           ; 						}
 0D0A           ; 					}
 0D0A           L182:
 0D0A           ; #ifndef Puncture
 0D0A           ; 					// 开始测试，保存本次测试的测试卡类型和稀释比例	
 0D0A           ; 					_SetCurWorkParamter();
 0D0A 0E944C1B          xcall __SetCurWorkParamter
 0D0E           ;                                       _SetNewCardGet(NewTestInfo.cardStoreNum);
 0D0E 00915B00          lds R16,_NewTestInfo+6
 0D12 0E94B61B          xcall __SetNewCardGet
 0D16           ; #endif
 0D16           ;                                       SetBeepAck();
 0D16 0E940000          xcall _SetBeepAck
 0D1A           ;                                       SetEValve(EV_ALL,EV_CLOSE);
 0D1A 2227              clr R18
 0D1C 0027              clr R16
 0D1E 0E940000          xcall _SetEValve
 0D22           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 2);  // 2017-05-22 5 -> 2 
 0D22 22E0              ldi R18,2
 0D24 30E0              ldi R19,0
 0D26 03E0              ldi R16,3
 0D28 0E940000          xcall _SetDelayTime
 0D2C           ;                                       workStep = 2;
 0D2C 82E0              ldi R24,2
 0D2E 80930100          sts L13,R24
 0D32           ;                                       break;
 0D32 0C94AE16          xjmp L90
 0D36           L193:
 0D36           ; 				case 2:
 0D36           ; #ifdef Puncture		
 0D36           ; 					if(0 == WithoutPuncture)
 0D36           ; 					{		
 0D36           ; 						MotRunTo(MOT_SAMP_TRUN,_POS_SAMPTURN_SAMP);
 0D36           ; 						waitMotSampTurn = 1;
 0D36           ; 						workStep = 30;
 0D36           ; 					}
 0D36           ; 					else
 0D36           ; 					{
 0D36           ; 						if(1 == WithoutPuncture)
 0D36           ; 						{
 0D36           ; 							_WaitStartKey = 1;
 0D36           ; 							_NeedleMotRunTo(2380, 240);	//_POS_SAMP_DOWN - 1420
 0D36           ; 							waitMotSampNeedle = 1;
 0D36           ; 							workStep = 41;
 0D36           ; 						}
 0D36           ; 						else if(2 == WithoutPuncture)
 0D36           ; 						{
 0D36           ; 							_NeedleMotRunTo(_POS_SAMP_DOWN, 240);	
 0D36           ; 							waitMotSampNeedle = 1;
 0D36           ; 							workStep = 40;
 0D36           ; 						}
 0D36           ; 					}
 0D36           ; 					break;
 0D36           ; 				case 30:				// 开始穿刺
 0D36           ; #ifndef HalfCircle
 0D36           ; 					_NeedleMotRunTo(300 * 2, 180);	
 0D36           ; #else
 0D36           ; 					_NeedleMotRunTo(300, 180);			
 0D36           ; #endif
 0D36           ; 					waitMotSampNeedle = 1;
 0D36           ; 					//workStep = 31;
 0D36           ; 					detRetry = 0;
 0D36           ; 					workStep = 35;
 0D36           ; 					break;
 0D36           ; 				case 35:
 0D36           ; 					liqDetBaseAdc = getLiqDetADC(NeedleChannel);      //采样电压的base值
 0D36           ; 					//if(liqDetBaseAdc < 400)
 0D36           ; 					if(liqDetBaseAdc < 430)
 0D36           ; 					{
 0D36           ; 						workStep = 60;
 0D36           ; 						//SetEValve(EV_ALL,EV_CLOSE);
 0D36           ; 						//SetEValve(EV1,EV_OPEN);    //清洗液供给3号管
 0D36           ; 						SetEValve(EV3,EV_OPEN);    //废液连接清洗池
 0D36           ; 						_EffluentMotRun(12, 240);
 0D36           ; 						//废液排空清洗头的水
 0D36           ; 						waitEffluent = 1;
 0D36           ; 						SetDelayTime(MOT_SAMP_NEEDLE, 5); 
 0D36           ; 						if(detRetry >= 3)
 0D36           ; 						{
 0D36           ; 							detRetry = 0;
 0D36           ; 							workStep = 50;
 0D36           ; 							ErrorNum = 4;	// 3928
 0D36           ; 						}
 0D36           ; 						else
 0D36           ; 							detRetry++;
 0D36           ; 						break;
 0D36           ; 					}
 0D36           ; 					detRetry = 0;
 0D36           ; 					SetEValve(EV_ALL,EV_CLOSE);
 0D36           ; 					Uart0ReUnable;
 0D36           ; 					uart_Printf("// LiqDetBaseAdc:%d\r\n", liqDetBaseAdc);
 0D36           ; 					Uart0ReEnable;
 0D36           ; 					//workStep = 31;
 0D36           ; 					workStep = 36;
 0D36           ; 					break;
 0D36           ; 				case 36:
 0D36           ; #ifndef HalfCircle
 0D36           ; 					_NeedleMotRunTo(560 * 2, 180);	
 0D36           ; #else
 0D36           ; 					_NeedleMotRunTo(560, 180);
 0D36           ; #endif
 0D36           ; 					waitMotSampNeedle = 1;
 0D36           ; 					workStep = 31;
 0D36           ; 					break;
 0D36           ; 				case 60:
 0D36           ; 					//_FluidMotRun(20, 40);           //清洗泵改成倒吸
 0D36           ; 					SetEValve(EV1,EV_OPEN);
 0D36           ; 					_FluidMotRun(-2, 40);
 0D36           ; 					//waitMotSampNeedle = 1;
 0D36           ; 					//waitEffluent = 1;
 0D36           ; 					waitMotFluid = 1;
 0D36           ; 					workStep = 35;
 0D36           ; 					break;
 0D36           ; 					
 0D36           ; 					
 0D36           ; 				case 31:				// 穿刺到达穿刺光藕位置
 0D36           ; 					SetMotRunPam(MOT_SAMP_NEEDLE, 120, 10, 10); 	// 60
 0D36           ; #ifndef HalfCircle
 0D36           ; 					MotRun(MOT_SAMP_NEEDLE, 320 * 2);
 0D36           ; #else
 0D36           ; 					MotRun(MOT_SAMP_NEEDLE, 320);
 0D36           ; #endif
 0D36           ; 					waitMotSampNeedle = 1;
 0D36           ; 					workStep = 32;
 0D36           ; 					break;
 0D36           ; 				case 32:				// 判断穿刺结果 (PINA & 0x40):穿刺感应传感器
 0D36           ; 					//ucTmp = PINA;
 0D36           ; 					//if((ucTmp & 0x40) == 0)	// 穿刺压力(试管)感应
 0D36           ; 					{
 0D36           ; 						Uart0ReUnable;
 0D36           ; 						uart_Printf("%s\r\n",strM3225);
 0D36           ; 						Uart0ReEnable;
 0D36           ; 						workStep = 33;
 0D36           ; 						break;
 0D36           ; 					}
 0D36           ; 					/*
 0D36           ; 					else	// 未探测到试管,取消测试
 0D36           ; 					{
 0D36           ; 						// 撤销吸样
 0D36           ; 						ErrorNum = 1;	// 3925
 0D36           ; 						workStep = 50;
 0D36           ; 						break;
 0D36           ; 					}
 0D36           ; 					*/
 0D36           ; 					break;
 0D36           ; 				case 33:	//  (PINA & 0x80):穿刺到位传感器
 0D36           ; 					//ucTmp = PINA;
 0D36           ; 					//if((ucTmp & 0x80) != 0)	// 穿刺到位感应
 0D36           ; 					{
 0D36           ; 						Uart0ReUnable;
 0D36           ; 						uart_Printf("%s\r\n",strM3226);
 0D36           ; 						Uart0ReEnable;
 0D36           ; 						workStep = 34;
 0D36           ; 					}
 0D36           ; 					/*
 0D36           ; 					else	// 未穿刺到位
 0D36           ; 					{
 0D36           ; 						ErrorNum = 1;	// 3926
 0D36           ; 						// 撤销吸样
 0D36           ; 						workStep = 50;
 0D36           ; 						break;
 0D36           ; 					}
 0D36           ; 					*/
 0D36           ; 					break;
 0D36           ; 				case 34:				// 液面探测初始化并启动取样针下降
 0D36           ; 					SetMotRunPam(MOT_SAMP_NEEDLE, 180, 5, 10);	// 110
 0D36           ; 					MotRunTo(MOT_SAMP_NEEDLE, _POS_SAMP_DOWN);
 0D36           ; 					detRetry = 0;
 0D36           ; 					workStep = 37;
 0D36           ; 					break;
 0D36           ; 				case 37:		// 液面探测
 0D36           ; 					i = getLiqDetADC(NeedleChannel);// 0-200
 0D36           ; 					if(GetMotState(MOT_SAMP_NEEDLE) == STA_SLAVE_FREE)
 0D36           ; 					{
 0D36           ; 						// 电机运行到最大行程处,未探测到液面
 0D36           ; 						MotStop(MOT_SAMP_NEEDLE);
 0D36           ; 						SetBeepWarning();
 0D36           ; 						// 退出处理
 0D36           ; 						ErrorNum = 3;	// 3927
 0D36           ; 						Uart0ReUnable;
 0D36           ; 						uart_Printf("// LiqNotPassAdc:%d\r\n", i);
 0D36           ; 						Uart0ReEnable;
 0D36           ; 						workStep = 50;
 0D36           ; 						break;
 0D36           ; 					}
 0D36           ; 					if(i < liqDetBaseAdc)// 350
 0D36           ; 					{
 0D36           ; 						i = liqDetBaseAdc - i;//100+
 0D36           ; 						Num = liqDetBaseAdc / 5;
 0D36           ; 						//Num = liqDetBaseAdc / 8;//>25
 0D36           ; 						//if(Num > 25)
 0D36           ; 						//	Num = 25;
 0D36           ; 						if(i > Num)		// 设置液面感应灵敏度  16  25
 0D36           ; 						{
 0D36           ; 							if(detRetry < 3)  // 1
 0D36           ; 							{
 0D36           ; 								detRetry ++;	
 0D36           ; 								break;	
 0D36           ; 							}
 0D36           ; 							
 0D36           ; 							MotStop(MOT_SAMP_NEEDLE);   //先将小针停止	
 0D36           ; 							Uart0ReUnable;
 0D36           ; 					        uart_Printf("// theNeedleMotIsStop\r\n");	
 0D36           ; 					        Uart0ReEnable;
 0D36           ; 							SetDelayTime(MOT_SAMP_NEEDLE, 4);  // 探测到液面停止延时
 0D36           ; 							SetBeepAck();
 0D36           ; 							workStep = 38;
 0D36           ; 						}
 0D36           ; 						else
 0D36           ; 							detRetry = 0;
 0D36           ; 					}
 0D36           ; 					break;
 0D36           ; 				case 38:	
 0D36           ; 				//	MotStop(MOT_SAMP_NEEDLE);
 0D36           ; 					theDifferenceOfStep = (unsigned int)GetMotPositionOfStep(MOT_SAMP_NEEDLE);
 0D36           ; 					Uart0ReUnable;
 0D36           ; 					//uart_Printf("%s $%4d\r\n", strM3227,i);	
 0D36           ; 					uart_Printf("// theWaterLevelStep:%d\r\n", theDifferenceOfStep);	
 0D36           ; 					Uart0ReEnable;
 0D36           ; 					waitMotSampNeedle = 1;
 0D36           ; 					SetEValve(EV2,EV_CLOSE);  // 吸样前关闭EV2
 0D36           ; 				//	SetDelayTime(MOT_SAMP_NEEDLE, 5);
 0D36           ; 					workStep = 39;
 0D36           ; 					break;
 0D36           ; 				case 39:		// 探测到液面并停止电机运行
 0D36           ; 				
 0D36           ; 					theDownPointAdc=getLiqDetADC(NeedleChannel);
 0D36           ; 					
 0D36           ; 				    Uart0ReUnable;
 0D36           ; 					uart_Printf("// theDownPointAdc:%d\r\n", theDownPointAdc);	
 0D36           ; 					Uart0ReEnable;
 0D36           ; 					
 0D36           ; 					Uart0ReUnable;
 0D36           ; 					uart_Printf("// LiqChangeAdc:%d\r\n", i);	// 差值
 0D36           ; 					Uart0ReEnable;
 0D36           ; 					//i = (unsigned int)GetMotPositionOfStep(MOT_SAMP_NEEDLE);         //pan20170503
 0D36           ; 					theDifferenceOfStep=_POS_SAMP_DOWN - theDifferenceOfStep;
 0D36           ; 					Uart0ReUnable;
 0D36           ; 					uart_Printf("// theDifferenceOfStep :%d\r\n", theDifferenceOfStep);	// 报告液面探测结果
 0D36           ; 					Uart0ReEnable;
 0D36           ; 					SetDelayTime(MOT_SAMP_NEEDLE, 5);
 0D36           ; 					
 0D36           ; 					if (theDifferenceOfStep >= 60)                     //留1.5mm的余量
 0D36           ; 					{
 0D36           ; 						workStep = 41;
 0D36           ; 					}
 0D36           ; 					else
 0D36           ; 					{
 0D36           ; 						ErrorNum = 3;	// 3927
 0D36           ; 						Uart0ReUnable;
 0D36           ; 						uart_Printf("// theDifferenceOfStepisTooSmall:%d\r\n", theDifferenceOfStep);
 0D36           ; 						Uart0ReEnable;
 0D36           ; 						workStep = 50;
 0D36           ; 					}
 0D36           ; 					break;
 0D36           ; 				case 41:
 0D36           ; 					_NeedleMotRunTo(_POS_SAMP_DOWN, 180);	
 0D36           ; 					waitMotSampNeedle = 1;
 0D36           ; 					workStep = 40;
 0D36           ; 					break;
 0D36           ; 				case 40:
 0D36           ; 					_SetCurWorkParamter();
 0D36           ; 					_SetNewCardGet(NewTestInfo.cardStoreNum);
 0D36           ; #endif				
 0D36           ; 					siTmp = CalSampVolume(NewTestInfo.sampDiluteMult, 0);
 0D36 2227              clr R18
 0D38 00915C00          lds R16,_NewTestInfo+7
 0D3C 0E94B416          xcall _CalSampVolume
 0D40 5801              movw R10,R16
 0D42           ;                                       siTmp += 45;
 0D42 C501              movw R24,R10
 0D44 8D96              adiw R24,45
 0D46 5C01              movw R10,R24
 0D48           ;                                       Uart0ReUnable;
 0D48 8091C100          lds R24,193
 0D4C 8F7E              andi R24,239
 0D4E 8093C100          sts 193,R24
 0D52           ;                                       uart_Printf("%s $%4d $%4d\r\n", strM3121, siTmp,NewTestInfo.sampDiluteMult);    // 显示当前吸样量
 0D52 20905C00          lds R2,_NewTestInfo+7
 0D56 3324              clr R3
 0D58 3B82              std y+3,R3
 0D5A 2A82              std y+2,R2
 0D5C B982              std y+1,R11
 0D5E A882              std y+0,R10
 0D60 20E0              ldi R18,<_strM3121
 0D62 30E0              ldi R19,>_strM3121
 0D64 00E0              ldi R16,<L195
 0D66 10E0              ldi R17,>L195
 0D68 0E940000          xcall _uart_Printf
 0D6C           ;                                       Uart0ReEnable;
 0D6C 8091C100          lds R24,193
 0D70 8061              ori R24,16
 0D72 8093C100          sts 193,R24
 0D76           ; #ifdef Puncture
 0D76           ;                                       if(NewTestInfo.sampDiluteMult == 9)
 0D76           ;                                       {
 0D76           ;                                               if(WithoutPuncture == 0)        // 如果需要经过穿刺
 0D76           ;                                                       siTmp += 1955;
 0D76           ;                                               else
 0D76           ;                                                       siTmp += 400 ;    
 0D76           ;                                       }
 0D76           ; #else
 0D76           ;                                       if(NewTestInfo.sampDiluteMult == 9)
 0D76 80915C00          lds R24,_NewTestInfo+7
 0D7A 8930              cpi R24,9
 0D7C 21F4              brne L197
 0D7E           X89:
 0D7E           ; 						siTmp += 400 ;    
 0D7E C501              movw R24,R10
 0D80 8057              subi R24,112  ; offset = 400
 0D82 9E4F              sbci R25,254
 0D84 5C01              movw R10,R24
 0D86           L197:
 0D86           ; #endif
 0D86           ; 					_SampPumpMotRun(siTmp, 180);	// 2017-05-22  60 -> 180	
 0D86 24EB              ldi R18,180
 0D88 8501              movw R16,R10
 0D8A 0E94052A          xcall __SampPumpMotRun
 0D8E           ;                                       
 0D8E           ;                                       if(NewTestInfo.sampDiluteMult !=13)             //              如果是1：4      就不吐清洗液 
 0D8E 80915C00          lds R24,_NewTestInfo+7
 0D92 8D30              cpi R24,13
 0D94 29F0              breq L200
 0D96           X90:
 0D96           ; 					 _FluidMotRun(4, 64);
 0D96 20E4              ldi R18,64
 0D98 04E0              ldi R16,4
 0D9A 10E0              ldi R17,0
 0D9C 0E944E29          xcall __FluidMotRun
 0DA0           L200:
 0DA0           ; 					 
 0DA0           ; 					 
 0DA0           ; #if (DILUTE_TUBE == 14)
 0DA0           ; 					_DiluentMotRun(20, 180);		// 清洗稀释液管路和混匀池底部   
 0DA0           ; #elif (DILUTE_TUBE == 16)
 0DA0           ; 					_DiluentMotRun(6, 200);			// 清洗稀释液管路和混匀池底部	// 2017-05-22 160 -> 200
 0DA0 28EC              ldi R18,200
 0DA2 06E0              ldi R16,6
 0DA4 10E0              ldi R17,0
 0DA6 0E948C29          xcall __DiluentMotRun
 0DAA           ; #endif
 0DAA           ;                                       //SetStateLedBusy();     //pan20170614
 0DAA           ;                                       waitMotSampPump = 1;
 0DAA 81E0              ldi R24,1
 0DAC 80934D00          sts _waitMotSampPump,R24
 0DB0           ;                                       waitEffluent = 1;       // 如果上次排液未完毕，等待
 0DB0 80934A00          sts _waitEffluent,R24
 0DB4           ;                                       workStep = 3;
 0DB4 83E0              ldi R24,3
 0DB6 80930100          sts L13,R24
 0DBA           ;                                       break;
 0DBA 0C94AE16          xjmp L90
 0DBE           L203:
 0DBE           ; 				case 3:
 0DBE           ; 					waitMotFluid = 1;
 0DBE 81E0              ldi R24,1
 0DC0 80934C00          sts _waitMotFluid,R24
 0DC4           ;                                       waitMotDiluent = 1;
 0DC4 80934B00          sts _waitMotDiluent,R24
 0DC8           ;                                       workStep = 4;
 0DC8 84E0              ldi R24,4
 0DCA 80930100          sts L13,R24
 0DCE           ;                                       break;
 0DCE 0C94AE16          xjmp L90
 0DD2           L204:
 0DD2           ; 				case 4:		
 0DD2           ; 				
 0DD2           ; 				    SetBeepPrompt();  //吸样完成 蜂鸣器开始响声
 0DD2 0E940000          xcall _SetBeepPrompt
 0DD6           ;                                       SetStateLedBusy();  //pan20170614  吸样完成之后，灯才变成红色
 0DD6 0E940000          xcall _SetStateLedBusy
 0DDA           ;                                   SetEValve(EV_ALL,EV_CLOSE);   //20170614 pan
 0DDA 2227              clr R18
 0DDC 0027              clr R16
 0DDE 0E940000          xcall _SetEValve
 0DE2           ;                                   // _DiluentMotRun(100, 60);         
 0DE2           ;                               _EffluentMotRun(20, 160);
 0DE2 20EA              ldi R18,160
 0DE4 04E1              ldi R16,20
 0DE6 10E0              ldi R17,0
 0DE8 0E947329          xcall __EffluentMotRun
 0DEC           ;                               waitEffluent = 1;       
 0DEC 81E0              ldi R24,1
 0DEE 80934A00          sts _waitEffluent,R24
 0DF2           ;                                       workStep = 101;
 0DF2 85E6              ldi R24,101
 0DF4 80930100          sts L13,R24
 0DF8           ;                               break;
 0DF8 0C94AE16          xjmp L90
 0DFC           L205:
 0DFC           ; 				case 101:	
 0DFC           ; 				    _DiluentMotRun(25, 160);		
 0DFC 20EA              ldi R18,160
 0DFE 09E1              ldi R16,25
 0E00 10E0              ldi R17,0
 0E02 0E948C29          xcall __DiluentMotRun
 0E06           ;                               _EffluentMotRun(30, 200);
 0E06 28EC              ldi R18,200
 0E08 0EE1              ldi R16,30
 0E0A 10E0              ldi R17,0
 0E0C 0E947329          xcall __EffluentMotRun
 0E10           ;                               waitEffluent = 1;       
 0E10 81E0              ldi R24,1
 0E12 80934A00          sts _waitEffluent,R24
 0E16           ;                                       waitMotDiluent = 1;
 0E16 80934B00          sts _waitMotDiluent,R24
 0E1A           ;                                       workStep = 102;
 0E1A 86E6              ldi R24,102
 0E1C 80930100          sts L13,R24
 0E20           ;                               break;
 0E20 0C94AE16          xjmp L90
 0E24           L206:
 0E24           ; 				
 0E24           ; 				
 0E24           ; 				
 0E24           ; 				case 102:                      //20170614 pan
 0E24           ; 					SetEValve(EV3, EV_OPEN);
 0E24 21E0              ldi R18,1
 0E26 03E0              ldi R16,3
 0E28 0E940000          xcall _SetEValve
 0E2C           ;                                       SetEValve(EV1, EV_OPEN);
 0E2C 21E0              ldi R18,1
 0E2E 01E0              ldi R16,1
 0E30 0E940000          xcall _SetEValve
 0E34           ;                                       //SetBeepPrompt();
 0E34           ; #ifndef HalfCircle
 0E34           ;                                       _EffluentMotRun(112, 240);              // 2017-05-22 140 -> 112  
 0E34           ; #else
 0E34           ;                                       _EffluentMotRun(56, 240);               // 2017-05-22 70 -> 56
 0E34 20EF              ldi R18,240
 0E36 08E3              ldi R16,56
 0E38 10E0              ldi R17,0
 0E3A 0E947329          xcall __EffluentMotRun
 0E3E           ; #endif
 0E3E           ;                                       SetDelayTime(MOT_EFFLUENT, 2);  // 延迟一段时间，先建立负压
 0E3E 22E0              ldi R18,2
 0E40 30E0              ldi R19,0
 0E42 0BE0              ldi R16,11
 0E44 0E940000          xcall _SetDelayTime
 0E48           ;                                       workStep = 5;
 0E48 85E0              ldi R24,5
 0E4A 80930100          sts L13,R24
 0E4E           ;                                       break;
 0E4E 0C94AE16          xjmp L90
 0E52           L207:
 0E52           ; 				case 5:				// 开启洗液泵，清洗针外壁
 0E52           ; 					_FluidMotRun(20, 40);
 0E52 28E2              ldi R18,40
 0E54 04E1              ldi R16,20
 0E56 10E0              ldi R17,0
 0E58 0E944E29          xcall __FluidMotRun
 0E5C           ;                                       waitMotSampNeedle = 1;
 0E5C 81E0              ldi R24,1
 0E5E 80934E00          sts _waitMotSampNeedle,R24
 0E62           ;                                       _NeedleMotRunTo(0, 200);        // 取样针上升
 0E62 28EC              ldi R18,200
 0E64 0027              clr R16
 0E66 1127              clr R17
 0E68 0E94E529          xcall __NeedleMotRunTo
 0E6C           ;                                       workStep = 7;   
 0E6C 87E0              ldi R24,7
 0E6E 80930100          sts L13,R24
 0E72           ;                                       break;
 0E72 0C94AE16          xjmp L90
 0E76           L208:
 0E76           ; 				case 7:				// 取样针已经上升到最高点，外壁清洗结束,取样针回到起始位
 0E76           ; #ifndef UartSendLong
 0E76           ; 					Uart0ReUnable;
 0E76           ; 					uart_Printf("%s $%8d\r\n",strM3104 ,NewTestInfo.testSerial);
 0E76           ; 					Uart0ReEnable;
 0E76           ; #else
 0E76           ; 					Uart0ReUnable;
 0E76 8091C100          lds R24,193
 0E7A 8F7E              andi R24,239
 0E7C 8093C100          sts 193,R24
 0E80           ;                                       uart_Printf("%s $ ",strM3104);
 0E80 20E0              ldi R18,<_strM3104
 0E82 30E0              ldi R19,>_strM3104
 0E84 00E0              ldi R16,<L209
 0E86 10E0              ldi R17,>L209
 0E88 0E940000          xcall _uart_Printf
 0E8C           ;                                       uart0SendInt(NewTestInfo.testSerial);
 0E8C 20915800          lds R18,_NewTestInfo+1+2
 0E90 30915900          lds R19,_NewTestInfo+1+2+1
 0E94 00915600          lds R16,_NewTestInfo+1
 0E98 10915700          lds R17,_NewTestInfo+1+1
 0E9C 0E940000          xcall _uart0SendInt
 0EA0           ;                                       uart_Printf("\r\n");
 0EA0 00E0              ldi R16,<L211
 0EA2 10E0              ldi R17,>L211
 0EA4 0E940000          xcall _uart_Printf
 0EA8           ;                                       Uart0ReEnable;
 0EA8 8091C100          lds R24,193
 0EAC 8061              ori R24,16
 0EAE 8093C100          sts 193,R24
 0EB2           ; #endif
 0EB2           ;                                       MotStop(MOT_FLUID);
 0EB2 0AE0              ldi R16,10
 0EB4 0E940000          xcall _MotStop
 0EB8           ;                                       SetMotRunPam(MOT_SAMP_TRUN,255,10,CURRENT_SAMP_TRUN);
 0EB8 84E0              ldi R24,4
 0EBA 8A83              std y+2,R24
 0EBC 8AE0              ldi R24,10
 0EBE 8883              std y+0,R24
 0EC0 2FEF              ldi R18,255
 0EC2 02E0              ldi R16,2
 0EC4 0E940000          xcall _SetMotRunPam
 0EC8           ;                                       MotRunTo(MOT_SAMP_TRUN,0);
 0EC8 2227              clr R18
 0ECA 3327              clr R19
 0ECC 02E0              ldi R16,2
 0ECE 0E940000          xcall _MotRunTo
 0ED2           ;                                       checkFluid = 0;
 0ED2 2224              clr R2
 0ED4 20920400          sts L16,R2
 0ED8           ;                                       SetDelayTime(MOT_SAMP_TRUN, 5);  // 2017-05-22  10->5
 0ED8 25E0              ldi R18,5
 0EDA 30E0              ldi R19,0
 0EDC 02E0              ldi R16,2
 0EDE 0E940000          xcall _SetDelayTime
 0EE2           ;                                       workStep = 8;
 0EE2 88E0              ldi R24,8
 0EE4 80930100          sts L13,R24
 0EE8           ;                                       break;
 0EE8 0C94AE16          xjmp L90
 0EEC           L212:
 0EEC           ; 				case 8:		// 延迟1秒后停止清洗头吸空, 转换到混匀池排空
 0EEC           ; 					SetEValve(EV_ALL,EV_CLOSE);
 0EEC 2227              clr R18
 0EEE 0027              clr R16
 0EF0 0E940000          xcall _SetEValve
 0EF4           ;                                       waitMotSampTurn = 1;
 0EF4 81E0              ldi R24,1
 0EF6 80934F00          sts _waitMotSampTurn,R24
 0EFA           ;                                       workStep = 9;
 0EFA 89E0              ldi R24,9
 0EFC 80930100          sts L13,R24
 0F00           ;                                       break;
 0F00 0C94AE16          xjmp L90
 0F04           L213:
 0F04           ; 				case 9:				// 标本吸取完毕
 0F04           ; 					if(NewTestInfo.sampDiluteMult != 1)
 0F04 80915C00          lds R24,_NewTestInfo+7
 0F08 8130              cpi R24,1
 0F0A 89F0              breq L214
 0F0C           X91:
 0F0C           ; 					{
 0F0C           ; 						MotRunTo(MOT_SAMP_TRUN, NeedleOnMixSidePos);		// 取样臂运行到混匀池壁上方
 0F0C 20913C00          lds R18,_NeedleOnMixSidePos
 0F10 30913D00          lds R19,_NeedleOnMixSidePos+1
 0F14 02E0              ldi R16,2
 0F16 0E940000          xcall _MotRunTo
 0F1A           ;                                               waitMotSampTurn = 1;
 0F1A 81E0              ldi R24,1
 0F1C 80934F00          sts _waitMotSampTurn,R24
 0F20           ;                                               mainStep = 4;           
 0F20 84E0              ldi R24,4
 0F22 80930000          sts L12,R24
 0F26           ;                                               workStep = 0;   // 进入一次稀释程序
 0F26 2224              clr R2
 0F28 20920100          sts L13,R2
 0F2C           ;                                       }
 0F2C 20C0              xjmp L215
 0F2E           L214:
 0F2E           ; 					else
 0F2E           ; 					{
 0F2E           ; 						if(_DropMode == 0)
 0F2E 20904200          lds R2,__DropMode
 0F32 30904300          lds R3,__DropMode+1
 0F36 2220              tst R2
 0F38 49F4              brne L217
 0F3A 3320              tst R3
 0F3C 39F4              brne L217
 0F3E           X92:
 0F3E           ; 						{
 0F3E           ; 							mainStep = 9;		
 0F3E 89E0              ldi R24,9
 0F40 80930000          sts L12,R24
 0F44           ;                                                       workStep = 0;           // 直接跳到滴样程序
 0F44 2224              clr R2
 0F46 20920100          sts L13,R2
 0F4A           ;                                               }
 0F4A 11C0              xjmp L218
 0F4C           L217:
 0F4C           ; 						else 
 0F4C           ; 						{	// 1:1需要抽打混匀,直接跳到抽打混匀
 0F4C           ; 							if(0 == _MixtureMode)
 0F4C 20904100          lds R2,__MixtureMode
 0F50 2220              tst R2
 0F52 39F4              brne L219
 0F54           X93:
 0F54           ; 							{
 0F54           ; 								mainStep = 8;
 0F54 88E0              ldi R24,8
 0F56 80930000          sts L12,R24
 0F5A           ;                                                               workStep = 11;
 0F5A 8BE0              ldi R24,11
 0F5C 80930100          sts L13,R24
 0F60           ;                                                       }
 0F60 06C0              xjmp L220
 0F62           L219:
 0F62           ; 							// 1:1不需要抽打混匀,直接滴样至有小杯子的试剂片
 0F62           ; 							else
 0F62           ; 							{
 0F62           ; 								mainStep = 8;
 0F62 88E0              ldi R24,8
 0F64 80930000          sts L12,R24
 0F68           ;                                                               workStep = 18;
 0F68 82E1              ldi R24,18
 0F6A 80930100          sts L13,R24
 0F6E           ;                                                       }
 0F6E           L220:
 0F6E           ; 						}
 0F6E           L218:
 0F6E           ; 					}
 0F6E           L215:
 0F6E           ; 					waitEffluent = 1;
 0F6E 81E0              ldi R24,1
 0F70 80934A00          sts _waitEffluent,R24
 0F74           ;                                       break;
 0F74           ; #ifdef Puncture                       
 0F74           ;                               case 50:        // 穿刺失败退出处理
 0F74           ;                                       SetMotRunPam(MOT_SAMP_NEEDLE, 100, 5, 10);              // 100
 0F74           ;                                       MotRunTo(MOT_SAMP_NEEDLE, 0);
 0F74           ;                                       workStep = 51;
 0F74           ;                                       break;
 0F74           ;                               case 51:
 0F74           ;                                       SetEValve(EV3, EV_OPEN);
 0F74           ;                                       SetEValve(EV1, EV_OPEN);
 0F74           ; #ifndef HalfCircle
 0F74           ;                                       _EffluentMotRun(140, 240);  
 0F74           ; #else
 0F74           ;                                       _EffluentMotRun(70, 240);
 0F74           ; #endif
 0F74           ;                                       SetDelayTime(MOT_EFFLUENT, 2);  // 延迟一段时间，先建立负压
 0F74           ;                                       workStep = 52;
 0F74           ;                                       break;
 0F74           ;                               case 52:
 0F74           ;                                       _FluidMotRun(20, 40);
 0F74           ;                                       waitMotSampNeedle = 1;
 0F74           ;                                       workStep = 53;
 0F74           ;                                       break;
 0F74           ;                               case 53:
 0F74           ;                                       MotStop(MOT_FLUID);
 0F74           ;                                       _FluidMotRun(-1, 40);
 0F74           ;                                       SetDelayTime(MOT_EFFLUENT, 10);
 0F74           ;                                       waitMotFluid = 1;
 0F74           ;                                       if(ErrorNum == 1)
 0F74           ;                                       {
 0F74           ;                                               ErrorNum = 0;
 0F74           ;                                               Uart0ReUnable;
 0F74           ;                                               uart_Printf("%s\r\n",strE3925);
 0F74           ;                                       //      uart_Printf("%s $%8d\r\n",strE3925,NewTestInfo.testSerial);
 0F74           ;                                               Uart0ReEnable;
 0F74           ;                                       }
 0F74           ;                                       else if(ErrorNum == 2)
 0F74           ;                                       {
 0F74           ;                                               ErrorNum = 0;
 0F74           ;                                               Uart0ReUnable;
 0F74           ;                                               uart_Printf("%s\r\n",strE3926);
 0F74           ;                                       //      uart_Printf("%s $%8d\r\n",strE3926,NewTestInfo.testSerial);
 0F74           ;                                               Uart0ReEnable;
 0F74           ;                                       }
 0F74           ;                                       else if(ErrorNum == 3)
 0F74           ;                                       {
 0F74           ;                                               ErrorNum = 0;
 0F74           ;                                               Uart0ReUnable;
 0F74           ;                                               uart_Printf("%s\r\n",strE3927);
 0F74           ;                                       //      uart_Printf("%s $%8d\r\n",strE3927,NewTestInfo.testSerial);
 0F74           ;                                               Uart0ReEnable;
 0F74           ;                                       }
 0F74           ;                                       else if(ErrorNum == 4)
 0F74           ;                                       {
 0F74           ;                                               ErrorNum = 0;
 0F74           ;                                               Uart0ReUnable;
 0F74           ;                                               uart_Printf("%s  $ %4d\r\n",strE3928,liqDetBaseAdc);
 0F74           ;                                       //      uart_Printf("%s $%8d\r\n",strE3928,NewTestInfo.testSerial);
 0F74           ;                                               Uart0ReEnable;
 0F74           ;                                       }
 0F74           ;                                       workStep = 54;
 0F74           ;                                       break;
 0F74           ;                               case 54:
 0F74           ;                                       SetEValve(EV_ALL,EV_CLOSE);
 0F74           ;                                       MotStop(MOT_EFFLUENT);
 0F74           ;                                       workStep = 0;
 0F74           ;                                       break;
 0F74           ; #endif
 0F74           ;                               }
 0F74           ;                       break;
 0F74 0C94AE16          xjmp L90
 0F78           L222:
 0F78           ; 		case 4:				// 一次混匀
 0F78           ; 			switch(workStep)
 0F78 C0900100          lds R12,L13
 0F7C DD24              clr R13
 0F7E C601              movw R24,R12
 0F80 8030              cpi R24,0
 0F82 E0E0              ldi R30,0
 0F84 9E07              cpc R25,R30
 0F86 14F4              brge X252
 0F88 0C94AE16          xjmp L90
 0F8C           X252:
 0F8C           X94:
 0F8C 85E1              ldi R24,21
 0F8E 8C15              cp R24,R12
 0F90 9D05              cpc R25,R13
 0F92 5CF0              brlt L280
 0F94           X95:
 0F94 80E0              ldi R24,<L281
 0F96 90E0              ldi R25,>L281
 0F98 F601              movw R30,R12
 0F9A EE0F              lsl R30
 0F9C FF1F              rol R31
 0F9E E80F              add R30,R24
 0FA0 F91F              adc R31,R25
 0FA2 2790              elpm R2,Z+
 0FA4 3690              elpm R3,Z
 0FA6 F101              movw R30,R2
 0FA8 0994               ijmp
 0FAA           L280:
 0FAA C601              movw R24,R12
 0FAC 8E36              cpi R24,110
 0FAE E0E0              ldi R30,0
 0FB0 9E07              cpc R25,R30
 0FB2 49F1              breq L230
 0FB4           X96:
 0FB4 0C94AE16          xjmp L90
 0FB8           L226:
 0FB8           ; 			{
 0FB8           ; 				case 0:		// 取样针下降到混匀高度
 0FB8           ; 					_FluidMotRun(-1, 80);
 0FB8 20E5              ldi R18,80
 0FBA 0FEF              ldi R16,-1
 0FBC 1FEF              ldi R17,-1
 0FBE 0E944E29          xcall __FluidMotRun
 0FC2           ;                                       _EffluentMotRun(8, 240);
 0FC2 20EF              ldi R18,240
 0FC4 08E0              ldi R16,8
 0FC6 10E0              ldi R17,0
 0FC8 0E947329          xcall __EffluentMotRun
 0FCC           ;                                       _NeedleMotRunTo(_POS_MIX_NEEDLE, 180);
 0FCC 24EB              ldi R18,180
 0FCE 00E7              ldi R16,880
 0FD0 13E0              ldi R17,3
 0FD2 0E94E529          xcall __NeedleMotRunTo
 0FD6           ;                                       waitMotSampNeedle = 1;
 0FD6 81E0              ldi R24,1
 0FD8 80934E00          sts _waitMotSampNeedle,R24
 0FDC           ;                                       waitEffluent = 1;
 0FDC 80934A00          sts _waitEffluent,R24
 0FE0           ;                                       waitMotDiluent = 1;
 0FE0 80934B00          sts _waitMotDiluent,R24
 0FE4           ;                                       if(NewTestInfo.sampDiluteMult == 9)             // 1:500
 0FE4 80915C00          lds R24,_NewTestInfo+7
 0FE8 8930              cpi R24,9
 0FEA 21F4              brne L227
 0FEC           X97:
 0FEC           ; 						workStep = 110;						// 需要打出多余的量
 0FEC 8EE6              ldi R24,110
 0FEE 80930100          sts L13,R24
 0FF2 03C0              xjmp L228
 0FF4           L227:
 0FF4           ; 					else
 0FF4           ; 						workStep = 1;						// 直接预混匀					
 0FF4 81E0              ldi R24,1
 0FF6 80930100          sts L13,R24
 0FFA           L228:
 0FFA           ; 					SetEValve(EV_ALL,EV_CLOSE);
 0FFA 2227              clr R18
 0FFC 0027              clr R16
 0FFE 0E940000          xcall _SetEValve
 1002           ;                                       break;
 1002 0C94AE16          xjmp L90
 1006           L230:
 1006           ; 				case 110:		// 1:500模式下才有效
 1006           ; #ifdef Puncture					
 1006           ; 					if(WithoutPuncture == 0)			// 先排1000
 1006           ; 						_SampPumpMotRun(-1000, 180);	// 注入标本
 1006           ; 					else
 1006           ; 						_SampPumpMotRun(-200, 180);		// 先吐出来大概5uL
 1006           ; #else
 1006           ; 					_SampPumpMotRun(-200, 180);			// 先吐出来大概5uL
 1006 24EB              ldi R18,180
 1008 08E3              ldi R16,-200
 100A 1FEF              ldi R17,-1
 100C 0E94052A          xcall __SampPumpMotRun
 1010           ; #endif
 1010           ;                                       _FluidMotRun(6, 80);
 1010 20E5              ldi R18,80
 1012 06E0              ldi R16,6
 1014 10E0              ldi R17,0
 1016 0E944E29          xcall __FluidMotRun
 101A           ;                                       _DiluentMotRun(4, 140); 
 101A 2CE8              ldi R18,140
 101C 04E0              ldi R16,4
 101E 10E0              ldi R17,0
 1020 0E948C29          xcall __DiluentMotRun
 1024           ;                                       _EffluentMotRun(18, 240);                       // 2017-05-23 200->240
 1024 20EF              ldi R18,240
 1026 02E1              ldi R16,18
 1028 10E0              ldi R17,0
 102A 0E947329          xcall __EffluentMotRun
 102E           ;                                       waitMotFluid = 1;
 102E 81E0              ldi R24,1
 1030 80934C00          sts _waitMotFluid,R24
 1034           ;                                       waitMotDiluent = 1;
 1034 80934B00          sts _waitMotDiluent,R24
 1038           ;                                       waitMotSampPump = 1;
 1038 80934D00          sts _waitMotSampPump,R24
 103C           ;                                       waitEffluent = 1;
 103C 80934A00          sts _waitEffluent,R24
 1040           ;                                       workStep = 1;
 1040 80930100          sts L13,R24
 1044           ;                                       break;
 1044 0C94AE16          xjmp L90
 1048           L231:
 1048           ; 				case 1:		// 预混匀
 1048           ; 					_SampPumpMotRun(-63 - _SAMP_PUMP_INTERVAL, 120);	// 注入标本  3ul预混匀	 2017-05-22 80 -> 120
 1048 28E7              ldi R18,120
 104A 05E8              ldi R16,-123
 104C 1FEF              ldi R17,-1
 104E 0E94052A          xcall __SampPumpMotRun
 1052           ; #if   (DILUTE_TUBE == 14)
 1052           ;                                       _DiluentMotRun(10, 200);
 1052           ; #elif (DILUTE_TUBE == 16)
 1052           ;                                       _DiluentMotRun(4, 200);         // 2017-05-22 140->200
 1052 28EC              ldi R18,200
 1054 04E0              ldi R16,4
 1056 10E0              ldi R17,0
 1058 0E948C29          xcall __DiluentMotRun
 105C           ; #endif
 105C           ;                                       waitMotDiluent = 1;
 105C 81E0              ldi R24,1
 105E 80934B00          sts _waitMotDiluent,R24
 1062           ;                                       waitMotSampPump = 1;
 1062 80934D00          sts _waitMotSampPump,R24
 1066           ;                                       workStep = 2;
 1066 82E0              ldi R24,2
 1068 80930100          sts L13,R24
 106C           ;                                       break;
 106C 0C94AE16          xjmp L90
 1070           L232:
 1070           ; 				case 2:		// 排空混匀池
 1070           ; 					SetEValve(EV_ALL, EV_CLOSE);
 1070 2227              clr R18
 1072 0027              clr R16
 1074 0E940000          xcall _SetEValve
 1078           ;                                       _EffluentMotRun(10, 220);
 1078 2CED              ldi R18,220
 107A 0AE0              ldi R16,10
 107C 10E0              ldi R17,0
 107E 0E947329          xcall __EffluentMotRun
 1082           ;                                       SetMotRunPam(MOT_SAMP_TRUN,64,5,CURRENT_SAMP_TRUN);
 1082 84E0              ldi R24,4
 1084 8A83              std y+2,R24
 1086 85E0              ldi R24,5
 1088 8883              std y+0,R24
 108A 20E4              ldi R18,64
 108C 02E0              ldi R16,2
 108E 0E940000          xcall _SetMotRunPam
 1092           ;                                       MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 1092 20913A00          lds R18,_NeedleOnMixCenterPos
 1096 30913B00          lds R19,_NeedleOnMixCenterPos+1
 109A 02E0              ldi R16,2
 109C 0E940000          xcall _MotRunTo
 10A0           ;                                       waitEffluent = 1;
 10A0 81E0              ldi R24,1
 10A2 80934A00          sts _waitEffluent,R24
 10A6           ;                                       waitMotSampTurn = 1;
 10A6 80934F00          sts _waitMotSampTurn,R24
 10AA           ;                                       workStep = 3;
 10AA 83E0              ldi R24,3
 10AC 80930100          sts L13,R24
 10B0           ;                                       break;
 10B0 0C94AE16          xjmp L90
 10B4           L233:
 10B4           ; 				case 3:		// 取样针运行到混匀池壁位置准备稀释
 10B4           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixSidePos);
 10B4 20913C00          lds R18,_NeedleOnMixSidePos
 10B8 30913D00          lds R19,_NeedleOnMixSidePos+1
 10BC 02E0              ldi R16,2
 10BE 0E940000          xcall _MotRunTo
 10C2           ;                                       waitMotSampTurn = 1;
 10C2 81E0              ldi R24,1
 10C4 80934F00          sts _waitMotSampTurn,R24
 10C8           ;                                       workStep = 4;
 10C8 84E0              ldi R24,4
 10CA 80930100          sts L13,R24
 10CE           ;                                       break;
 10CE 0C94AE16          xjmp L90
 10D2           L234:
 10D2           ; 				case 4:		// 开启样本柱塞泵和稀释液泵，开始混匀
 10D2           ; 					siTmp = CalSampVolume(NewTestInfo.sampDiluteMult, 0);
 10D2 2227              clr R18
 10D4 00915C00          lds R16,_NewTestInfo+7
 10D8 0E94B416          xcall _CalSampVolume
 10DC 6801              movw R12,R16
 10DE 5601              movw R10,R12
 10E0           ;                                       ucTmp = CalSampSyringSpeed(NewTestInfo.sampDiluteMult, 0);
 10E0 2227              clr R18
 10E2 00915C00          lds R16,_NewTestInfo+7
 10E6 0E94D318          xcall _CalSampSyringSpeed
 10EA C02E              mov R12,R16
 10EC C0920600          sts L18,R12
 10F0           ;                                       if(siTmp)
 10F0 AA20              tst R10
 10F2 11F4              brne X98
 10F4 BB20              tst R11
 10F6 C1F0              breq L237
 10F8           X98:
 10F8           ; 					{
 10F8           ; 						if(NewTestInfo.sampDiluteMult == 9)			// 1:500直接排指定量
 10F8 80915C00          lds R24,_NewTestInfo+7
 10FC 8930              cpi R24,9
 10FE 49F4              brne L239
 1100           X99:
 1100           ; 							_SampPumpMotRun(-siTmp, ucTmp);
 1100 2C2D              mov R18,R12
 1102 8501              movw R16,R10
 1104 0095              com R16
 1106 1095              com R17
 1108 0F5F              subi R16,0xFF
 110A 1F4F              sbci R17,0xFF
 110C 0E94052A          xcall __SampPumpMotRun
 1110 0BC0              xjmp L240
 1112           L239:
 1112           ; 						else										// 非1:500需要
 1112           ; 							_SampPumpMotRun(-siTmp - 200, ucTmp);	// 多排200步空气
 1112 20910600          lds R18,L18
 1116 8501              movw R16,R10
 1118 0095              com R16
 111A 1095              com R17
 111C 0F5F              subi R16,0xFF
 111E 1F4F              sbci R17,0xFF
 1120 085C              subi R16,200
 1122 1040              sbci R17,0
 1124 0E94052A          xcall __SampPumpMotRun
 1128           L240:
 1128           ; 					}
 1128           L237:
 1128           ; 					siTmp1 = CalDiluteVolume(NewTestInfo.sampDiluteMult, 0);
 1128 2227              clr R18
 112A 00915C00          lds R16,_NewTestInfo+7
 112E 0E942118          xcall _CalDiluteVolume
 1132 6801              movw R12,R16
 1134           ;                                       ucTmp = CalDiluentInjectSpeed(NewTestInfo.sampDiluteMult, 0);
 1134 2227              clr R18
 1136 00915C00          lds R16,_NewTestInfo+7
 113A 0E940E19          xcall _CalDiluentInjectSpeed
 113E E02E              mov R14,R16
 1140 E0920600          sts L18,R14
 1144           ;                                       if(siTmp1)
 1144 CC20              tst R12
 1146 11F4              brne X100
 1148 DD20              tst R13
 114A 21F0              breq L244
 114C           X100:
 114C           ; 						_DiluentMotRun(siTmp1, ucTmp);		// 根据注液量来设置稀释液注入速度
 114C 2E2D              mov R18,R14
 114E 8601              movw R16,R12
 1150 0E948C29          xcall __DiluentMotRun
 1154           L244:
 1154           ; #ifndef UartSendLong
 1154           ; 					Uart0ReUnable;
 1154           ; 					uart_Printf("%s $%8d\r\n",strM3107 ,NewTestInfo.testSerial);
 1154           ; 					Uart0ReEnable;
 1154           ; #else
 1154           ; 					Uart0ReUnable;
 1154 8091C100          lds R24,193
 1158 8F7E              andi R24,239
 115A 8093C100          sts 193,R24
 115E           ;                                       uart_Printf("%s $ ",strM3107);
 115E 20E0              ldi R18,<_strM3107
 1160 30E0              ldi R19,>_strM3107
 1162 00E0              ldi R16,<L209
 1164 10E0              ldi R17,>L209
 1166 0E940000          xcall _uart_Printf
 116A           ;                                       uart0SendInt(NewTestInfo.testSerial);
 116A 20915800          lds R18,_NewTestInfo+1+2
 116E 30915900          lds R19,_NewTestInfo+1+2+1
 1172 00915600          lds R16,_NewTestInfo+1
 1176 10915700          lds R17,_NewTestInfo+1+1
 117A 0E940000          xcall _uart0SendInt
 117E           ;                                       uart_Printf("\r\n");
 117E 00E0              ldi R16,<L211
 1180 10E0              ldi R17,>L211
 1182 0E940000          xcall _uart_Printf
 1186           ;                                       Uart0ReEnable;
 1186 8091C100          lds R24,193
 118A 8061              ori R24,16
 118C 8093C100          sts 193,R24
 1190           ; #endif
 1190           ;                                       checkDiluent = 1;
 1190 81E0              ldi R24,1
 1192 80930300          sts L15,R24
 1196           ;                                       waitMotDiluent = 1;
 1196 80934B00          sts _waitMotDiluent,R24
 119A           ;                                       waitMotSampPump = 1;
 119A 80934D00          sts _waitMotSampPump,R24
 119E           ;                                       workStep = 5;
 119E 85E0              ldi R24,5
 11A0 80930100          sts L13,R24
 11A4           ;                                       break;
 11A4 0C94AE16          xjmp L90
 11A8           L247:
 11A8           ; 				case 5:		// 根据混匀次数执行不同程序
 11A8           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 11A8 20913A00          lds R18,_NeedleOnMixCenterPos
 11AC 30913B00          lds R19,_NeedleOnMixCenterPos+1
 11B0 02E0              ldi R16,2
 11B2 0E940000          xcall _MotRunTo
 11B6           ;                                       waitMotSampTurn = 1;
 11B6 81E0              ldi R24,1
 11B8 80934F00          sts _waitMotSampTurn,R24
 11BC           ;                                       //2016-05-24 添加 > 11,稀释比列1:3,1:4,...,1:40不需要进行2次稀释
 11BC           ;                                       if(NewTestInfo.sampDiluteMult < 9 || NewTestInfo.sampDiluteMult > 11) 
 11BC 80915C00          lds R24,_NewTestInfo+7
 11C0 8930              cpi R24,9
 11C2 28F0              brlo L252
 11C4           X101:
 11C4 8BE0              ldi R24,11
 11C6 20905C00          lds R2,_NewTestInfo+7
 11CA 8215              cp R24,R2
 11CC 28F4              brsh L248
 11CE           X102:
 11CE           L252:
 11CE           ; 						workStep = 7;
 11CE 87E0              ldi R24,7
 11D0 80930100          sts L13,R24
 11D4 0C94AE16          xjmp L90
 11D8           L248:
 11D8           ; 					else
 11D8           ; 						workStep = 6;
 11D8 86E0              ldi R24,6
 11DA 80930100          sts L13,R24
 11DE           ;                                       break;
 11DE 0C94AE16          xjmp L90
 11E2           L253:
 11E2           ; 				case 6:		// 跳往二次稀释
 11E2           ; 					MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_TOP);
 11E2 28E6              ldi R18,360
 11E4 31E0              ldi R19,1
 11E6 03E0              ldi R16,3
 11E8 0E940000          xcall _MotRunTo
 11EC           ;                                       waitMotSampNeedle = 1;
 11EC 81E0              ldi R24,1
 11EE 80934E00          sts _waitMotSampNeedle,R24
 11F2           ;                                       workStep = 0;
 11F2 2224              clr R2
 11F4 20920100          sts L13,R2
 11F8           ;                                       mainStep = 5;
 11F8 85E0              ldi R24,5
 11FA 80930000          sts L12,R24
 11FE           ;                                       break;
 11FE 0C94AE16          xjmp L90
 1202           L254:
 1202           ; 				case 7:
 1202           ; 					MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_NEEDLE + 30);	// 多下降
 1202 2EE8              ldi R18,910
 1204 33E0              ldi R19,3
 1206 03E0              ldi R16,3
 1208 0E940000          xcall _MotRunTo
 120C           ;                                       waitMotSampNeedle = 1;
 120C 81E0              ldi R24,1
 120E 80934E00          sts _waitMotSampNeedle,R24
 1212           ;                                       switch(NewTestInfo.sampDiluteMult)
 1212 C0905C00          lds R12,_NewTestInfo+7
 1216 DD24              clr R13
 1218 C601              movw R24,R12
 121A 8230              cpi R24,2
 121C E0E0              ldi R30,0
 121E 9E07              cpc R25,R30
 1220 91F0              breq L259
 1222           X103:
 1222 8230              cpi R24,2
 1224 E0E0              ldi R30,0
 1226 9E07              cpc R25,R30
 1228 14F1              brlt L255
 122A           X104:
 122A           L263:
 122A C601              movw R24,R12
 122C 8C30              cpi R24,12
 122E E0E0              ldi R30,0
 1230 9E07              cpc R25,R30
 1232 71F0              breq L260
 1234           X105:
 1234 8D30              cpi R24,13
 1236 E0E0              ldi R30,0
 1238 9E07              cpc R25,R30
 123A 79F0              breq L261
 123C           X106:
 123C 8E30              cpi R24,14
 123E E0E0              ldi R30,0
 1240 9E07              cpc R25,R30
 1242 81F0              breq L262
 1244           X107:
 1244 14C0              xjmp L255
 1246           L259:
 1246           ; 					{
 1246           ; 						case 2:		workStep = 10;break;		// 1:2
 1246 8AE0              ldi R24,10
 1248 80930100          sts L13,R24
 124C 0C94AE16          xjmp L90
 1250           L260:
 1250           ; 						case 12:	workStep = 14;break;		// 1:3
 1250 8EE0              ldi R24,14
 1252 80930100          sts L13,R24
 1256 0C94AE16          xjmp L90
 125A           L261:
 125A           ; 						case 13:	workStep = 14;break;		// 1:4
 125A 8EE0              ldi R24,14
 125C 80930100          sts L13,R24
 1260 0C94AE16          xjmp L90
 1264           L262:
 1264           ; 						case 14:	workStep = 18;break;		// 1:40
 1264 82E1              ldi R24,18
 1266 80930100          sts L13,R24
 126A 0C94AE16          xjmp L90
 126E           L255:
 126E           ; 						default:	workStep = 18;break;
 126E 82E1              ldi R24,18
 1270 80930100          sts L13,R24
 1274           ;                                                       
 1274           ;                                       }
 1274           ;                                       break;
 1274 0C94AE16          xjmp L90
 1278           L264:
 1278           ; 				case 10:		// 2016-10-31 增加吸样针抽打混匀
 1278           ; 					MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_BUTTOM + 25);
 1278 2DE9              ldi R18,925
 127A 33E0              ldi R19,3
 127C 03E0              ldi R16,3
 127E 0E940000          xcall _MotRunTo
 1282           ;                                       waitMotSampNeedle = 1;
 1282 81E0              ldi R24,1
 1284 80934E00          sts _waitMotSampNeedle,R24
 1288           ;                                       workStep = 11;
 1288 8BE0              ldi R24,11
 128A 80930100          sts L13,R24
 128E           ;                                       break;
 128E 0C94AE16          xjmp L90
 1292           L265:
 1292           ; 				case 11:
 1292           ; 					workStep = 16;
 1292 80E1              ldi R24,16
 1294 80930100          sts L13,R24
 1298           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 2);       // 延迟一段时间
 1298 22E0              ldi R18,2
 129A 30E0              ldi R19,0
 129C 03E0              ldi R16,3
 129E 0E940000          xcall _SetDelayTime
 12A2           ;                                       break;
 12A2 0C94AE16          xjmp L90
 12A6           L266:
 12A6           ; 				case 14:
 12A6           ; 					_SampPumpMotRun(4244, 220);   // 100 / 0.023563 = 4244
 12A6 2CED              ldi R18,220
 12A8 04E9              ldi R16,4244
 12AA 10E1              ldi R17,16
 12AC 0E94052A          xcall __SampPumpMotRun
 12B0           ;                                       waitMotSampPump = 1;
 12B0 81E0              ldi R24,1
 12B2 80934D00          sts _waitMotSampPump,R24
 12B6           ;                                       workStep = 15;
 12B6 8FE0              ldi R24,15
 12B8 80930100          sts L13,R24
 12BC           ;                                       Num++;
 12BC 80910700          lds R24,L19
 12C0 8F5F              subi R24,255    ; addi 1
 12C2 80930700          sts L19,R24
 12C6           ;                                       break;
 12C6 0C94AE16          xjmp L90
 12CA           L267:
 12CA           ; 				case 15:
 12CA           ; 					_SampPumpMotRun(-4032, 240); // 95 / 0.023563 = 4032
 12CA 20EF              ldi R18,240
 12CC 00E4              ldi R16,-4032
 12CE 10EF              ldi R17,-16
 12D0 0E94052A          xcall __SampPumpMotRun
 12D4           ;                                       waitMotSampPump = 1;
 12D4 81E0              ldi R24,1
 12D6 80934D00          sts _waitMotSampPump,R24
 12DA           ;                                       workStep = 16;
 12DA 80E1              ldi R24,16
 12DC 80930100          sts L13,R24
 12E0           ;                                       break;
 12E0 0C94AE16          xjmp L90
 12E4           L268:
 12E4           ; 				case 16:
 12E4           ; 					Num++;
 12E4 80910700          lds R24,L19
 12E8 8F5F              subi R24,255    ; addi 1
 12EA 80930700          sts L19,R24
 12EE           ;                                       if(Num > 5)
 12EE 85E0              ldi R24,5
 12F0 20900700          lds R2,L19
 12F4 8215              cp R24,R2
 12F6 38F4              brsh L269
 12F8           X108:
 12F8           ; 					{
 12F8           ; 						Num = 0;
 12F8 2224              clr R2
 12FA 20920700          sts L19,R2
 12FE           ;                                       //      _SampPumpMotRun(3395, 240); // 80 / 0.02353 = 3395
 12FE           ;                                               workStep = 18;
 12FE 82E1              ldi R24,18
 1300 80930100          sts L13,R24
 1304           ;                                       }
 1304 08C0              xjmp L270
 1306           L269:
 1306           ; 					else
 1306           ; 					{
 1306           ; 						_SampPumpMotRun(3820, 240); // 90 / 0.02353 = 3820
 1306 20EF              ldi R18,240
 1308 0CEE              ldi R16,3820
 130A 1EE0              ldi R17,14
 130C 0E94052A          xcall __SampPumpMotRun
 1310           ;                                               workStep = 17;
 1310 81E1              ldi R24,17
 1312 80930100          sts L13,R24
 1316           ;                                       }
 1316           L270:
 1316           ; 					waitMotSampPump = 1;
 1316 81E0              ldi R24,1
 1318 80934D00          sts _waitMotSampPump,R24
 131C           ;                                       break;
 131C 0C94AE16          xjmp L90
 1320           L271:
 1320           ; 				case 17:
 1320           ; 					_SampPumpMotRun(-3820, 240);	// 90 / 0.02353 = 3820
 1320 20EF              ldi R18,240
 1322 04E1              ldi R16,-3820
 1324 11EF              ldi R17,-15
 1326 0E94052A          xcall __SampPumpMotRun
 132A           ;                                       waitMotSampPump = 1;
 132A 81E0              ldi R24,1
 132C 80934D00          sts _waitMotSampPump,R24
 1330           ;                                       workStep = 16;
 1330 80E1              ldi R24,16
 1332 80930100          sts L13,R24
 1336           ;                                       break;
 1336 0C94AE16          xjmp L90
 133A           L272:
 133A           ; 				case 18:
 133A           ; 					MotRunTo(MOT_SAMP_NEEDLE, 0);
 133A 2227              clr R18
 133C 3327              clr R19
 133E 03E0              ldi R16,3
 1340 0E940000          xcall _MotRunTo
 1344           ;                                       waitMotSampNeedle = 1;
 1344 81E0              ldi R24,1
 1346 80934E00          sts _waitMotSampNeedle,R24
 134A           ;                                       if(TestDebugMode == 1)
 134A 80910C00          lds R24,_TestDebugMode
 134E 8130              cpi R24,1
 1350 29F4              brne L273
 1352           X109:
 1352           ; 					{
 1352           ; 						workStep = 19;
 1352 83E1              ldi R24,19
 1354 80930100          sts L13,R24
 1358           ;                                               break;
 1358 0C94AE16          xjmp L90
 135C           L273:
 135C           ; 					}
 135C           ; 					  workStep = 9;  //changed by pan 20161110	吸取一段空气柱		
 135C 89E0              ldi R24,9
 135E 80930100          sts L13,R24
 1362           ;                                         break;
 1362 0C94AE16          xjmp L90
 1366           L275:
 1366           ; 				case 19:
 1366           ; 					MotRunTo(MOT_SAMP_TRUN, 0);
 1366 2227              clr R18
 1368 3327              clr R19
 136A 02E0              ldi R16,2
 136C 0E940000          xcall _MotRunTo
 1370           ;                                       waitMotSampTurn = 1;
 1370 81E0              ldi R24,1
 1372 80934F00          sts _waitMotSampTurn,R24
 1376           ;                                       workStep = 20;
 1376 84E1              ldi R24,20
 1378 80930100          sts L13,R24
 137C           ;                                       _WaitStartKey = 1;
 137C 81E0              ldi R24,1
 137E 80933500          sts __WaitStartKey,R24
 1382           ;                                       break;
 1382 0C94AE16          xjmp L90
 1386           L276:
 1386           ; 				case 20:
 1386           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 1386 20913A00          lds R18,_NeedleOnMixCenterPos
 138A 30913B00          lds R19,_NeedleOnMixCenterPos+1
 138E 02E0              ldi R16,2
 1390 0E940000          xcall _MotRunTo
 1394           ;                                       waitMotSampTurn = 1;
 1394 81E0              ldi R24,1
 1396 80934F00          sts _waitMotSampTurn,R24
 139A           ;                                       workStep = 21;
 139A 85E1              ldi R24,21
 139C 80930100          sts L13,R24
 13A0           ;                                       break;          
 13A0 0C94AE16          xjmp L90
 13A4           L277:
 13A4           ; 				case 21:
 13A4           ; 					SetEValve(EV3, EV_CLOSE);
 13A4 2227              clr R18
 13A6 03E0              ldi R16,3
 13A8 0E940000          xcall _SetEValve
 13AC           ;                                       MotRun(MOT_SAMP_PUMP, 82);              // 吸入空气段
 13AC 22E5              ldi R18,82
 13AE 30E0              ldi R19,0
 13B0 0CE0              ldi R16,12
 13B2 0E940000          xcall _MotRun
 13B6           ;                                       waitMotSampPump = 1;
 13B6 81E0              ldi R24,1
 13B8 80934D00          sts _waitMotSampPump,R24
 13BC           ;                                       workStep = 0;
 13BC 2224              clr R2
 13BE 20920100          sts L13,R2
 13C2           ;                                       mainStep = 8;
 13C2 88E0              ldi R24,8
 13C4 80930000          sts L12,R24
 13C8           ;                                       break;                  
 13C8 0C94AE16          xjmp L90
 13CC           L278:
 13CC           ; 				case 8:		// 在清洗头中清洗取样针内壁
 13CC           ; 					_EffluentMotRun(10, 180);
 13CC 24EB              ldi R18,180
 13CE 0AE0              ldi R16,10
 13D0 10E0              ldi R17,0
 13D2 0E947329          xcall __EffluentMotRun
 13D6           ;                                       _FluidMotRun(2, 32);            // 清洗针内壁
 13D6 20E2              ldi R18,32
 13D8 02E0              ldi R16,2
 13DA 10E0              ldi R17,0
 13DC 0E944E29          xcall __FluidMotRun
 13E0           ;                                       waitMotFluid = 1;
 13E0 81E0              ldi R24,1
 13E2 80934C00          sts _waitMotFluid,R24
 13E6           ;                                       waitEffluent = 1;
 13E6 80934A00          sts _waitEffluent,R24
 13EA           ;                                       workStep = 9;
 13EA 89E0              ldi R24,9
 13EC 80930100          sts L13,R24
 13F0           ;                                       break;                          
 13F0 0C94AE16          xjmp L90
 13F4           L279:
 13F4           ; 				case 9:		// 样针吸取一段隔离空气
 13F4           ; 					SetEValve(EV_ALL,EV_CLOSE);
 13F4 2227              clr R18
 13F6 0027              clr R16
 13F8 0E940000          xcall _SetEValve
 13FC           ;                                       MotRun(MOT_SAMP_PUMP, _SAMP_PUMP_AIR_ISOLATE);
 13FC 2CE2              ldi R18,300
 13FE 31E0              ldi R19,1
 1400 0CE0              ldi R16,12
 1402 0E940000          xcall _MotRun
 1406           ;                                       waitMotSampPump = 1;
 1406 81E0              ldi R24,1
 1408 80934D00          sts _waitMotSampPump,R24
 140C           ;                                       workStep = 0;
 140C 2224              clr R2
 140E 20920100          sts L13,R2
 1412           ;                                       mainStep = 8;
 1412 88E0              ldi R24,8
 1414 80930000          sts L12,R24
 1418           ;                                       break;
 1418           ;                               }
 1418           ;                       break;
 1418 0C94AE16          xjmp L90
 141C           L282:
 141C           ; 		case 5:				// 二次混匀
 141C           ; 			switch(workStep){
 141C C0900100          lds R12,L13
 1420 DD24              clr R13
 1422 C601              movw R24,R12
 1424 8035              cpi R24,80
 1426 E0E0              ldi R30,0
 1428 9E07              cpc R25,R30
 142A 09F4              brne X253
 142C 05C1              xjmp L296
 142E           X253:
 142E           X110:
 142E 8135              cpi R24,81
 1430 E0E0              ldi R30,0
 1432 9E07              cpc R25,R30
 1434 09F4              brne X254
 1436 0DC1              xjmp L297
 1438           X254:
 1438           X111:
 1438 8235              cpi R24,82
 143A E0E0              ldi R30,0
 143C 9E07              cpc R25,R30
 143E 09F4              brne X255
 1440 12C1              xjmp L298
 1442           X255:
 1442           X112:
 1442 8335              cpi R24,83
 1444 E0E0              ldi R30,0
 1446 9E07              cpc R25,R30
 1448 09F4              brne X256
 144A 1AC1              xjmp L299
 144C           X256:
 144C           X113:
 144C 83E5              ldi R24,83
 144E 8C15              cp R24,R12
 1450 9D05              cpc R25,R13
 1452 0CF4              brge X257
 1454 3AC0              xjmp L307
 1456           X257:
 1456           X114:
 1456           L306:
 1456 CC20              tst R12
 1458 19F4              brne X115
 145A DD20              tst R13
 145C 09F4              brne X258
 145E 3CC0              xjmp L286
 1460           X258:
 1460           X115:
 1460 C601              movw R24,R12
 1462 8130              cpi R24,1
 1464 E0E0              ldi R30,0
 1466 9E07              cpc R25,R30
 1468 09F4              brne X259
 146A 59C0              xjmp L289
 146C           X259:
 146C           X116:
 146C 8230              cpi R24,2
 146E E0E0              ldi R30,0
 1470 9E07              cpc R25,R30
 1472 09F4              brne X260
 1474 70C0              xjmp L290
 1476           X260:
 1476           X117:
 1476 8330              cpi R24,3
 1478 E0E0              ldi R30,0
 147A 9E07              cpc R25,R30
 147C 09F4              brne X261
 147E 7FC0              xjmp L291
 1480           X261:
 1480           X118:
 1480 8430              cpi R24,4
 1482 E0E0              ldi R30,0
 1484 9E07              cpc R25,R30
 1486 09F4              brne X262
 1488 86C0              xjmp L292
 148A           X262:
 148A           X119:
 148A 8530              cpi R24,5
 148C E0E0              ldi R30,0
 148E 9E07              cpc R25,R30
 1490 09F4              brne X263
 1492 95C0              xjmp L293
 1494           X263:
 1494           X120:
 1494 8630              cpi R24,6
 1496 E0E0              ldi R30,0
 1498 9E07              cpc R25,R30
 149A 09F4              brne X264
 149C ABC0              xjmp L294
 149E           X264:
 149E           X121:
 149E 8730              cpi R24,7
 14A0 E0E0              ldi R30,0
 14A2 9E07              cpc R25,R30
 14A4 09F4              brne X265
 14A6 BAC0              xjmp L295
 14A8           X265:
 14A8           X122:
 14A8 8830              cpi R24,8
 14AA E0E0              ldi R30,0
 14AC 9E07              cpc R25,R30
 14AE 09F4              brne X266
 14B0 FDC0              xjmp L300
 14B2           X266:
 14B2           X123:
 14B2 8930              cpi R24,9
 14B4 E0E0              ldi R30,0
 14B6 9E07              cpc R25,R30
 14B8 09F4              brne X267
 14BA 0CC1              xjmp L302
 14BC           X267:
 14BC           X124:
 14BC 8A30              cpi R24,10
 14BE E0E0              ldi R30,0
 14C0 9E07              cpc R25,R30
 14C2 09F4              brne X268
 14C4 20C1              xjmp L305
 14C6           X268:
 14C6           X125:
 14C6 0C94AE16          xjmp L90
 14CA           L307:
 14CA C601              movw R24,R12
 14CC 883C              cpi R24,200
 14CE E0E0              ldi R30,0
 14D0 9E07              cpc R25,R30
 14D2 61F0              breq L287
 14D4           X126:
 14D4 0C94AE16          xjmp L90
 14D8           L286:
 14D8           ; 				case 0:
 14D8           ; 					SetDelayTime(MOT_SAMP_NEEDLE,5);	// 2017-05-22  20->5
 14D8 25E0              ldi R18,5
 14DA 30E0              ldi R19,0
 14DC 03E0              ldi R16,3
 14DE 0E940000          xcall _SetDelayTime
 14E2           ;                                       workStep = 200;
 14E2 88EC              ldi R24,200
 14E4 80930100          sts L13,R24
 14E8           ;                                       break;
 14E8 0C94AE16          xjmp L90
 14EC           L287:
 14EC           ; 				case 200:// 由稀释液泵吸取二次混匀原液
 14EC           ; 					siTmp = CalDilute2Volume(NewTestInfo.sampDiluteMult, 0);
 14EC 2227              clr R18
 14EE 00915C00          lds R16,_NewTestInfo+7
 14F2 0E946E18          xcall _CalDilute2Volume
 14F6 6801              movw R12,R16
 14F8 5601              movw R10,R12
 14FA           ;                                       siTmp = siTmp + 3;                              
 14FA C501              movw R24,R10
 14FC 0396              adiw R24,3
 14FE 5C01              movw R10,R24
 1500           ; #if   (DILUTE_TUBE == 14)
 1500           ;                                       _DiluentMotRun(-siTmp, 160);
 1500           ; #elif  (DILUTE_TUBE == 16)
 1500           ;                                       _DiluentMotRun(-siTmp, 200);                    // 2017-05-22 120->200
 1500 28EC              ldi R18,200
 1502 8C01              movw R16,R24
 1504 0095              com R16
 1506 1095              com R17
 1508 0F5F              subi R16,0xFF
 150A 1F4F              sbci R17,0xFF
 150C 0E948C29          xcall __DiluentMotRun
 1510           ; #endif
 1510           ;                                       waitMotDiluent = 1;
 1510 81E0              ldi R24,1
 1512 80934B00          sts _waitMotDiluent,R24
 1516           ;                                       workStep = 1;
 1516 80930100          sts L13,R24
 151A           ;                                       break;
 151A 0C94AE16          xjmp L90
 151E           L289:
 151E           ; 				case 1:
 151E           ; 				  _EffluentMotRun(15, 240);					// 2017-05-22 200->240
 151E 20EF              ldi R18,240
 1520 0FE0              ldi R16,15
 1522 10E0              ldi R17,0
 1524 0E947329          xcall __EffluentMotRun
 1528           ; #ifndef Puncture
 1528           ;                                       MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_TOP + 200);
 1528 20E3              ldi R18,560
 152A 32E0              ldi R19,2
 152C 03E0              ldi R16,3
 152E 0E940000          xcall _MotRunTo
 1532           ; #else
 1532           ;                                       MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_TOP + 400);
 1532           ; #endif
 1532           ;                                       waitEffluent = 1;
 1532 81E0              ldi R24,1
 1534 80934A00          sts _waitEffluent,R24
 1538           ;                                       waitMotSampNeedle = 1;
 1538 80934E00          sts _waitMotSampNeedle,R24
 153C           ;                                       SetEValve(EV2, EV_CLOSE);       // 取样针通道关闭
 153C 2227              clr R18
 153E 02E0              ldi R16,2
 1540 0E940000          xcall _SetEValve
 1544           ;                                       SetEValve(EV1, EV_OPEN);        // 开启清洗头洗液供应
 1544 21E0              ldi R18,1
 1546 01E0              ldi R16,1
 1548 0E940000          xcall _SetEValve
 154C           ;                                       workStep = 2;
 154C 82E0              ldi R24,2
 154E 80930100          sts L13,R24
 1552           ;                                       break;
 1552 0C94AE16          xjmp L90
 1556           L290:
 1556           ; 				case 2:	// 清洗取样针外臂，即时排液
 1556           ; 					_FluidMotRun(8, 80);		// 开启清洗液洗混匀池,注入1.0mL清洗液(12, 180) //180
 1556 20E5              ldi R18,80
 1558 08E0              ldi R16,8
 155A 10E0              ldi R17,0
 155C 0E944E29          xcall __FluidMotRun
 1560           ;                                       _EffluentMotRun(10, 100);       
 1560 24E6              ldi R18,100
 1562 0AE0              ldi R16,10
 1564 10E0              ldi R17,0
 1566 0E947329          xcall __EffluentMotRun
 156A           ;                                       waitMotFluid = 1;
 156A 81E0              ldi R24,1
 156C 80934C00          sts _waitMotFluid,R24
 1570           ;                                       waitEffluent = 1;
 1570 80934A00          sts _waitEffluent,R24
 1574           ;                                       workStep = 3;
 1574 83E0              ldi R24,3
 1576 80930100          sts L13,R24
 157A           ;                                       break;
 157A 0C94AE16          xjmp L90
 157E           L291:
 157E           ; 				case 3:
 157E           ; 					SetEValve(EV2, EV_OPEN);	// 开启取样针洗液供应
 157E 21E0              ldi R18,1
 1580 02E0              ldi R16,2
 1582 0E940000          xcall _SetEValve
 1586           ;                                       workStep = 4;
 1586 84E0              ldi R24,4
 1588 80930100          sts L13,R24
 158C           ;                                       ucTmp = 0;
 158C 2224              clr R2
 158E 20920600          sts L18,R2
 1592           ;                                       break;
 1592 0C94AE16          xjmp L90
 1596           L292:
 1596           ; 				case 4:		// 清洗取样针内壁，即时排空
 1596           ; #ifndef Puncture
 1596           ; 					_FluidMotRun(16, 80);		// 清洗针内壁(12, 80)
 1596 20E5              ldi R18,80
 1598 00E1              ldi R16,16
 159A 10E0              ldi R17,0
 159C 0E944E29          xcall __FluidMotRun
 15A0           ; #else
 15A0           ;                                       _FluidMotRun(16, 40);           // 清洗针内壁(12, 40)
 15A0           ; #endif
 15A0           ;                                       _EffluentMotRun(20, 240);       // 2017-05-23 100->240
 15A0 20EF              ldi R18,240
 15A2 04E1              ldi R16,20
 15A4 10E0              ldi R17,0
 15A6 0E947329          xcall __EffluentMotRun
 15AA           ;                                       waitMotFluid = 1;
 15AA 81E0              ldi R24,1
 15AC 80934C00          sts _waitMotFluid,R24
 15B0           ;                                       waitEffluent = 1;
 15B0 80934A00          sts _waitEffluent,R24
 15B4           ;                               //      ucTmp ++;
 15B4           ;                               //      if(ucTmp < 1)           // 设置清洗次数 2016-08-22 再增加一次
 15B4           ;                                                                               // 2017-05-23 ucTmp < 2 -> ucTmp < 1
 15B4           ;                               //              workStep = 4;
 15B4           ;                               //      else
 15B4           ;                                               workStep = 5;
 15B4 85E0              ldi R24,5
 15B6 80930100          sts L13,R24
 15BA           ;                                       break;
 15BA 0C94AE16          xjmp L90
 15BE           L293:
 15BE           ; 				case 5:		// 清洗取样针外壁
 15BE           ; 					SetEValve(EV2, EV_CLOSE);	// 取样针通道关闭
 15BE 2227              clr R18
 15C0 02E0              ldi R16,2
 15C2 0E940000          xcall _SetEValve
 15C6           ;                                       SetEValve(EV1, EV_OPEN);        // 开启清洗头洗液供应
 15C6 21E0              ldi R18,1
 15C8 01E0              ldi R16,1
 15CA 0E940000          xcall _SetEValve
 15CE           ;                                       _FluidMotRun(8, 80);            // _FluidMotRun(12, 180);               // 开启清洗液洗混匀池,注入1.0mL清洗液(12, 180)//(12,120)
 15CE 20E5              ldi R18,80
 15D0 08E0              ldi R16,8
 15D2 10E0              ldi R17,0
 15D4 0E944E29          xcall __FluidMotRun
 15D8           ;                                       waitMotFluid = 1;
 15D8 81E0              ldi R24,1
 15DA 80934C00          sts _waitMotFluid,R24
 15DE           ;                                       waitEffluent = 1;
 15DE 80934A00          sts _waitEffluent,R24
 15E2           ;                                       SetEValve(EV3, EV_OPEN);        // 清洗头排液打开
 15E2 21E0              ldi R18,1
 15E4 03E0              ldi R16,3
 15E6 0E940000          xcall _SetEValve
 15EA           ;                                       workStep = 6;
 15EA 86E0              ldi R24,6
 15EC 80930100          sts L13,R24
 15F0           ;                                       break;
 15F0 0C94AE16          xjmp L90
 15F4           L294:
 15F4           ; 				case 6:		// 抽干清洗头
 15F4           ; 					_FluidMotRun(-1, 160);
 15F4 20EA              ldi R18,160
 15F6 0FEF              ldi R16,-1
 15F8 1FEF              ldi R17,-1
 15FA 0E944E29          xcall __FluidMotRun
 15FE           ;                                       _EffluentMotRun(24, 240);
 15FE 20EF              ldi R18,240
 1600 08E1              ldi R16,24
 1602 10E0              ldi R17,0
 1604 0E947329          xcall __EffluentMotRun
 1608           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 5);
 1608 25E0              ldi R18,5
 160A 30E0              ldi R19,0
 160C 03E0              ldi R16,3
 160E 0E940000          xcall _SetDelayTime
 1612           ;                                       workStep = 7;
 1612 87E0              ldi R24,7
 1614 80930100          sts L13,R24
 1618           ;                                       break;
 1618 0C94AE16          xjmp L90
 161C           L295:
 161C           ; 				case 7:		// 排空混匀池
 161C           ; 					SetEValve(EV_ALL,EV_CLOSE);
 161C 2227              clr R18
 161E 0027              clr R16
 1620 0E940000          xcall _SetEValve
 1624           ;                                       waitEffluent = 1;
 1624 81E0              ldi R24,1
 1626 80934A00          sts _waitEffluent,R24
 162A           ;                                       waitMotFluid = 1;
 162A 80934C00          sts _waitMotFluid,R24
 162E           ;                                       workStep = 80;
 162E 80E5              ldi R24,80
 1630 80930100          sts L13,R24
 1634           ;                                       break;
 1634 0C94AE16          xjmp L90
 1638           L296:
 1638           ; 				case 80:
 1638           ; 					_DiluentMotRun(3, 120); 	
 1638 28E7              ldi R18,120
 163A 03E0              ldi R16,3
 163C 10E0              ldi R17,0
 163E 0E948C29          xcall __DiluentMotRun
 1642           ;                                       waitMotDiluent = 1;
 1642 81E0              ldi R24,1
 1644 80934B00          sts _waitMotDiluent,R24
 1648           ;                                       workStep = 81;
 1648 81E5              ldi R24,81
 164A 80930100          sts L13,R24
 164E           ;                                       break;
 164E 0C94AE16          xjmp L90
 1652           L297:
 1652           ; 				case 81:
 1652           ; 					SetDelayTime(MOT_SAMP_NEEDLE, 2);	// 2017-05-22 10->2
 1652 22E0              ldi R18,2
 1654 30E0              ldi R19,0
 1656 03E0              ldi R16,3
 1658 0E940000          xcall _SetDelayTime
 165C           ;                                       workStep = 82;
 165C 82E5              ldi R24,82
 165E 80930100          sts L13,R24
 1662           ;                                       break;
 1662 0C94AE16          xjmp L90
 1666           L298:
 1666           ; 				case 82:
 1666           ; 					_EffluentMotRun(10, 180);	// 2017-05-22 100->180
 1666 24EB              ldi R18,180
 1668 0AE0              ldi R16,10
 166A 10E0              ldi R17,0
 166C 0E947329          xcall __EffluentMotRun
 1670           ;                                       waitEffluent = 1;
 1670 81E0              ldi R24,1
 1672 80934A00          sts _waitEffluent,R24
 1676           ;                                       workStep = 83;
 1676 83E5              ldi R24,83
 1678 80930100          sts L13,R24
 167C           ;                                       break;
 167C 0C94AE16          xjmp L90
 1680           L299:
 1680           ; 				case 83:
 1680           ; 					SetEValve(EV3, EV_OPEN);	// 清洗头排液打开
 1680 21E0              ldi R18,1
 1682 03E0              ldi R16,3
 1684 0E940000          xcall _SetEValve
 1688           ;                                       _EffluentMotRun(15, 240);       // 抽干清洗头
 1688 20EF              ldi R18,240
 168A 0FE0              ldi R16,15
 168C 10E0              ldi R17,0
 168E 0E947329          xcall __EffluentMotRun
 1692           ;                                       MotRunTo(MOT_SAMP_NEEDLE, 0);
 1692 2227              clr R18
 1694 3327              clr R19
 1696 03E0              ldi R16,3
 1698 0E940000          xcall _MotRunTo
 169C           ;                                       waitMotSampNeedle = 1;
 169C 81E0              ldi R24,1
 169E 80934E00          sts _waitMotSampNeedle,R24
 16A2           ;                                       workStep = 8;
 16A2 88E0              ldi R24,8
 16A4 80930100          sts L13,R24
 16A8           ;                                       break;
 16A8 0C94AE16          xjmp L90
 16AC           L300:
 16AC           ; 				case 8:		//  开始二次混匀
 16AC           ; 					siTmp = CalDilute2Volume(NewTestInfo.sampDiluteMult, 1);
 16AC 21E0              ldi R18,1
 16AE 00915C00          lds R16,_NewTestInfo+7
 16B2 0E946E18          xcall _CalDilute2Volume
 16B6 6801              movw R12,R16
 16B8 5601              movw R10,R12
 16BA           ; #if   (DILUTE_TUBE == 14)
 16BA           ;                                       _DiluentMotRun(siTmp, 160);     // 将稀释管道里的混匀液和稀释液注入混匀池中混匀
 16BA           ; #elif         (DILUTE_TUBE == 16)
 16BA           ;                                       _DiluentMotRun(siTmp, 240); // 2017-05-22 200->240
 16BA 20EF              ldi R18,240
 16BC 0E948C29          xcall __DiluentMotRun
 16C0           ; #endif
 16C0           ;                                       waitMotDiluent = 1;
 16C0 81E0              ldi R24,1
 16C2 80934B00          sts _waitMotDiluent,R24
 16C6           ;                                       waitEffluent = 1;
 16C6 80934A00          sts _waitEffluent,R24
 16CA           ;                                       workStep = 9;
 16CA 89E0              ldi R24,9
 16CC 80930100          sts L13,R24
 16D0           ;                                       break;
 16D0 0C94AE16          xjmp L90
 16D4           L302:
 16D4           ; 				case 9:
 16D4           ; 					if(TestDebugMode == 1)
 16D4 80910C00          lds R24,_TestDebugMode
 16D8 8130              cpi R24,1
 16DA 81F4              brne L303
 16DC           X127:
 16DC           ; 					{
 16DC           ; 						MotRunTo(MOT_SAMP_NEEDLE, 0);
 16DC 2227              clr R18
 16DE 3327              clr R19
 16E0 03E0              ldi R16,3
 16E2 0E940000          xcall _MotRunTo
 16E6           ;                                               waitMotSampNeedle = 1;
 16E6 81E0              ldi R24,1
 16E8 80934E00          sts _waitMotSampNeedle,R24
 16EC           ;                                               workStep = 19;
 16EC 83E1              ldi R24,19
 16EE 80930100          sts L13,R24
 16F2           ;                                               mainStep = 4;
 16F2 84E0              ldi R24,4
 16F4 80930000          sts L12,R24
 16F8           ;                                               break;
 16F8 0C94AE16          xjmp L90
 16FC           L303:
 16FC           ; 					}
 16FC           ; 					else
 16FC           ; 						workStep = 10;
 16FC 8AE0              ldi R24,10
 16FE 80930100          sts L13,R24
 1702           ;                                       break;
 1702 0C94AE16          xjmp L90
 1706           L305:
 1706           ; 				case 10:
 1706           ; 					SetEValve(EV3, EV_CLOSE);
 1706 2227              clr R18
 1708 03E0              ldi R16,3
 170A 0E940000          xcall _SetEValve
 170E           ;                                       MotRun(MOT_SAMP_PUMP, 200);             // 吸入空气段
 170E 28EC              ldi R18,200
 1710 30E0              ldi R19,0
 1712 0CE0              ldi R16,12
 1714 0E940000          xcall _MotRun
 1718           ;                                       waitMotSampPump = 1;
 1718 81E0              ldi R24,1
 171A 80934D00          sts _waitMotSampPump,R24
 171E           ;                                       workStep = 0;
 171E 2224              clr R2
 1720 20920100          sts L13,R2
 1724           ;                                       mainStep = 8;
 1724 88E0              ldi R24,8
 1726 80930000          sts L12,R24
 172A           ;                                       break;
 172A           ;                               }
 172A           ;                       break;
 172A 0C94AE16          xjmp L90
 172E           L308:
 172E           ; 		case 8:	
 172E           ; 		// 稀释结束，吸取检测用混匀液100uL，取样针上升到最高点，取样臂运行到起始位，准备滴样,同时清洗混匀池
 172E           ; 			checkDiluent = 0;// 2016-10-22 稀释完成,关闭稀释液检测
 172E 2224              clr R2
 1730 20920300          sts L15,R2
 1734           ;                       switch(workStep){
 1734 C0900100          lds R12,L13
 1738 DD24              clr R13
 173A C601              movw R24,R12
 173C 8030              cpi R24,0
 173E E0E0              ldi R30,0
 1740 9E07              cpc R25,R30
 1742 14F4              brge X269
 1744 0C94AE16          xjmp L90
 1748           X269:
 1748           X128:
 1748 89E1              ldi R24,25
 174A 8C15              cp R24,R12
 174C 9D05              cpc R25,R13
 174E 14F4              brge X270
 1750 0C94AE16          xjmp L90
 1754           X270:
 1754           X129:
 1754 80E0              ldi R24,<L358
 1756 90E0              ldi R25,>L358
 1758 F601              movw R30,R12
 175A EE0F              lsl R30
 175C FF1F              rol R31
 175E E80F              add R30,R24
 1760 F91F              adc R31,R25
 1762 2790              elpm R2,Z+
 1764 3690              elpm R3,Z
 1766 F101              movw R30,R2
 1768 0994               ijmp
 176A           L312:
 176A           ; 				case 0:	// 取样针运行到混匀高度
 176A           ; 					temp1 = getLiqDetADC(NeedleChannel);
 176A 0027              clr R16
 176C 0E940000          xcall _getLiqDetADC
 1770 6801              movw R12,R16
 1772 C0920F00          sts L26,R12
 1776           ;                                       if(NewTestInfo.sampDiluteMult == 2 || NewTestInfo.sampDiluteMult == 12 
 1776 80915C00          lds R24,_NewTestInfo+7
 177A 8230              cpi R24,2
 177C 21F0              breq L319
 177E           X130:
 177E 8C30              cpi R24,12
 1780 11F0              breq L319
 1782           X131:
 1782 8D30              cpi R24,13
 1784 31F4              brne L313
 1786           X132:
 1786           L319:
 1786           ; 					|| NewTestInfo.sampDiluteMult == 13)
 1786           ; 						MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_BUTTOM + 25);
 1786 2DE9              ldi R18,925
 1788 33E0              ldi R19,3
 178A 03E0              ldi R16,3
 178C 0E940000          xcall _MotRunTo
 1790 11C0              xjmp L314
 1792           L313:
 1792           ; 					else if(NewTestInfo.sampDiluteMult < 7 || NewTestInfo.sampDiluteMult == 14)
 1792 80915C00          lds R24,_NewTestInfo+7
 1796 8730              cpi R24,7
 1798 10F0              brlo L324
 179A           X133:
 179A 8E30              cpi R24,14
 179C 31F4              brne L320
 179E           X134:
 179E           L324:
 179E           ; 						MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_BUTTOM);
 179E 24E8              ldi R18,900
 17A0 33E0              ldi R19,3
 17A2 03E0              ldi R16,3
 17A4 0E940000          xcall _MotRunTo
 17A8 05C0              xjmp L321
 17AA           L320:
 17AA           ; 					else
 17AA           ; 						MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_BUTTOM - 150);
 17AA 2EEE              ldi R18,750
 17AC 32E0              ldi R19,2
 17AE 03E0              ldi R16,3
 17B0 0E940000          xcall _MotRunTo
 17B4           L321:
 17B4           L314:
 17B4           ; 					waitMotSampNeedle = 1;
 17B4 81E0              ldi R24,1
 17B6 80934E00          sts _waitMotSampNeedle,R24
 17BA           ;                                       workStep = 1;
 17BA 80930100          sts L13,R24
 17BE           ;                                       break;
 17BE 0C94AE16          xjmp L90
 17C2           L325:
 17C2           ; 				case 1:		// 吸取检测用混匀液,
 17C2           ; 					temp2 = getLiqDetADC(NeedleChannel);
 17C2 0027              clr R16
 17C4 0E940000          xcall _getLiqDetADC
 17C8 6801              movw R12,R16
 17CA C0921000          sts L27,R12
 17CE           ;                                       Uart0ReUnable;
 17CE 8091C100          lds R24,193
 17D2 8F7E              andi R24,239
 17D4 8093C100          sts 193,R24
 17D8           ;                                       uart_Printf("%s $%4d $%4d\r\n",strM3188, temp1,temp2);
 17D8 2C2C              mov R2,R12
 17DA 3324              clr R3
 17DC 3B82              std y+3,R3
 17DE 2A82              std y+2,R2
 17E0 20900F00          lds R2,L26
 17E4 3324              clr R3
 17E6 3982              std y+1,R3
 17E8 2882              std y+0,R2
 17EA 20E0              ldi R18,<_strM3188
 17EC 30E0              ldi R19,>_strM3188
 17EE 00E0              ldi R16,<L195
 17F0 10E0              ldi R17,>L195
 17F2 0E940000          xcall _uart_Printf
 17F6           ;                                       Uart0ReEnable;
 17F6 8091C100          lds R24,193
 17FA 8061              ori R24,16
 17FC 8093C100          sts 193,R24
 1800           ;                                       siTmp = _DropVolume + GetDropVolumeFactor();
 1800 0E943C1C          xcall _GetDropVolumeFactor
 1804 6801              movw R12,R16
 1806 A0904800          lds R10,__DropVolume
 180A B0904900          lds R11,__DropVolume+1
 180E A00E              add R10,R16
 1810 B11E              adc R11,R17
 1812           ;                                       _SampPumpMotRun(siTmp + _SAMP_PUMP_INTERVAL + 400 , 220);       
 1812 2CED              ldi R18,220
 1814 8501              movw R16,R10
 1816 0453              subi R16,52  ; offset = 460
 1818 1E4F              sbci R17,254
 181A 0E94052A          xcall __SampPumpMotRun
 181E           ;                                       Uart0ReUnable;
 181E 8091C100          lds R24,193
 1822 8F7E              andi R24,239
 1824 8093C100          sts 193,R24
 1828           ;                                       uart_Printf("%s $%4d\r\n",strM3174,siTmp);
 1828 B982              std y+1,R11
 182A A882              std y+0,R10
 182C 20E0              ldi R18,<_strM3174
 182E 30E0              ldi R19,>_strM3174
 1830 00E0              ldi R16,<L10
 1832 10E0              ldi R17,>L10
 1834 0E940000          xcall _uart_Printf
 1838           ;                                       Uart0ReEnable;
 1838 8091C100          lds R24,193
 183C 8061              ori R24,16
 183E 8093C100          sts 193,R24
 1842           ;                                       waitMotSampPump = 1;
 1842 81E0              ldi R24,1
 1844 80934D00          sts _waitMotSampPump,R24
 1848           ;                                       workStep = 2;
 1848 82E0              ldi R24,2
 184A 80930100          sts L13,R24
 184E           ;                                       break;
 184E 0C94AE16          xjmp L90
 1852           L326:
 1852           ; 				case 2:
 1852           ; 					SetDelayTime(MOT_SAMP_PUMP, 1);
 1852 21E0              ldi R18,1
 1854 30E0              ldi R19,0
 1856 0CE0              ldi R16,12
 1858 0E940000          xcall _SetDelayTime
 185C           ;                                       workStep = 3;
 185C 83E0              ldi R24,3
 185E 80930100          sts L13,R24
 1862           ;                                       break;
 1862 0C94AE16          xjmp L90
 1866           L327:
 1866           ; 				case 3:		// 消返程间隙
 1866           ; 					MotRun(MOT_SAMP_PUMP, -_SAMP_PUMP_INTERVAL);
 1866 24EC              ldi R18,-60
 1868 3FEF              ldi R19,-1
 186A 0CE0              ldi R16,12
 186C 0E940000          xcall _MotRun
 1870           ;                                       workStep = 4;   
 1870 84E0              ldi R24,4
 1872 80930100          sts L13,R24
 1876           ;                                       break;
 1876 0C94AE16          xjmp L90
 187A           L328:
 187A           ; 				case 4:		// 取样针离开液面 
 187A           ; 					_NeedleMotRun(-160,180);//240	
 187A 24EB              ldi R18,180
 187C 00E6              ldi R16,-160
 187E 1FEF              ldi R17,-1
 1880 0E94C529          xcall __NeedleMotRun
 1884           ;                                       waitMotSampNeedle = 1;
 1884 81E0              ldi R24,1
 1886 80934E00          sts _waitMotSampNeedle,R24
 188A           ;                                       waitMotSampPump = 1;
 188A 80934D00          sts _waitMotSampPump,R24
 188E           ;                                       workStep = 5;
 188E 85E0              ldi R24,5
 1890 80930100          sts L13,R24
 1894           ;                                       break;
 1894 0C94AE16          xjmp L90
 1898           L329:
 1898           ; 				case 5:		// 取样针运行到最高点, 同时清洗针外壁
 1898           ; 					MotInitCheck(MOT_SAMP_NEEDLE);
 1898 03E0              ldi R16,3
 189A 0E940000          xcall _MotInitCheck
 189E           ;                                       SetEValve(EV1, EV_OPEN);        
 189E 21E0              ldi R18,1
 18A0 01E0              ldi R16,1
 18A2 0E940000          xcall _SetEValve
 18A6           ;                                       checkFluid = 1;                         
 18A6 81E0              ldi R24,1
 18A8 80930400          sts L16,R24
 18AC           ;                                       _EffluentMotRun(90, 220);       
 18AC 2CED              ldi R18,220
 18AE 0AE5              ldi R16,90
 18B0 10E0              ldi R17,0
 18B2 0E947329          xcall __EffluentMotRun
 18B6           ;                               //      _FluidMotRun(4, 80);            // 取消吸混匀液后的洗针步骤
 18B6           ;                                       waitMotSampNeedle = 1;
 18B6 81E0              ldi R24,1
 18B8 80934E00          sts _waitMotSampNeedle,R24
 18BC           ;                                       workStep = 6;
 18BC 86E0              ldi R24,6
 18BE 80930100          sts L13,R24
 18C2           ;                                       break;
 18C2 0C94AE16          xjmp L90
 18C6           L330:
 18C6           ; 				case 6:		// 取样针已经运行到最高点, 清洗结束
 18C6           ; 				//	MotStop(MOT_FLUID);
 18C6           ; 					SetDelayTime(MOT_FLUID, 1);
 18C6 21E0              ldi R18,1
 18C8 30E0              ldi R19,0
 18CA 0AE0              ldi R16,10
 18CC 0E940000          xcall _SetDelayTime
 18D0           ;                                       checkFluid = 0;
 18D0 2224              clr R2
 18D2 20920400          sts L16,R2
 18D6           ;                                       workStep = 7;
 18D6 87E0              ldi R24,7
 18D8 80930100          sts L13,R24
 18DC           ;                                       break;
 18DC 0C94AE16          xjmp L90
 18E0           L331:
 18E0           ; 				case 7:		// 启动负压，吸干针外壁
 18E0           ; 					_FluidMotRun(-1, 80);
 18E0 20E5              ldi R18,80
 18E2 0FEF              ldi R16,-1
 18E4 1FEF              ldi R17,-1
 18E6 0E944E29          xcall __FluidMotRun
 18EA           ;                                       SetEValve(EV3, EV_OPEN);
 18EA 21E0              ldi R18,1
 18EC 03E0              ldi R16,3
 18EE 0E940000          xcall _SetEValve
 18F2           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 2);       // 2016-09-18   // 2017-05-22  5->2
 18F2 22E0              ldi R18,2
 18F4 30E0              ldi R19,0
 18F6 03E0              ldi R16,3
 18F8 0E940000          xcall _SetDelayTime
 18FC           ;                                       workStep = 8;
 18FC 88E0              ldi R24,8
 18FE 80930100          sts L13,R24
 1902           ;                                       break;
 1902 0C94AE16          xjmp L90
 1906           L332:
 1906           ; 				case 8:		// 取样针运行到滴样上方
 1906           ; 					SetMotRunPam(MOT_SAMP_TRUN,255,10,CURRENT_SAMP_TRUN);
 1906 84E0              ldi R24,4
 1908 8A83              std y+2,R24
 190A 8AE0              ldi R24,10
 190C 8883              std y+0,R24
 190E 2FEF              ldi R18,255
 1910 02E0              ldi R16,2
 1912 0E940000          xcall _SetMotRunPam
 1916           ;                                       MotRunTo(MOT_SAMP_TRUN, 0);
 1916 2227              clr R18
 1918 3327              clr R19
 191A 02E0              ldi R16,2
 191C 0E940000          xcall _MotRunTo
 1920           ;                                       waitMotSampTurn = 1;
 1920 81E0              ldi R24,1
 1922 80934F00          sts _waitMotSampTurn,R24
 1926           ;                                       workStep = 9;
 1926 89E0              ldi R24,9
 1928 80930100          sts L13,R24
 192C           ;                                       break;
 192C 0C94AE16          xjmp L90
 1930           L333:
 1930           ; 				case 9:		// 清洗头吸干停止, 转换到混匀池排空
 1930           ; 					SetEValve(EV_ALL, EV_CLOSE);
 1930 2227              clr R18
 1932 0027              clr R16
 1934 0E940000          xcall _SetEValve
 1938           ;                                       SetDelayTime(MOT_EFFLUENT, 2);
 1938 22E0              ldi R18,2
 193A 30E0              ldi R19,0
 193C 0BE0              ldi R16,11
 193E 0E940000          xcall _SetDelayTime
 1942           ;                                       workStep = 10;
 1942 8AE0              ldi R24,10
 1944 80930100          sts L13,R24
 1948           ;                                       break;
 1948 0C94AE16          xjmp L90
 194C           L334:
 194C           ; 				case 10:		// 取样针在测试卡上方(起始位)，等待将液体滴入测试卡
 194C           ; 					SetEValve(EV3, EV_CLOSE);		// 废液切换到混匀池，继续抽废液
 194C 2227              clr R18
 194E 03E0              ldi R16,3
 1950 0E940000          xcall _SetEValve
 1954           ; #ifndef UartSendLong
 1954           ;                                       Uart0ReUnable;
 1954           ;                                       uart_Printf("%s $%8d\r\n",strM3110 ,NewTestInfo.testSerial);
 1954           ;                                       Uart0ReEnable;
 1954           ; #else
 1954           ;                                       Uart0ReUnable;
 1954 8091C100          lds R24,193
 1958 8F7E              andi R24,239
 195A 8093C100          sts 193,R24
 195E           ;                                       uart_Printf("%s $ ",strM3110);
 195E 20E0              ldi R18,<_strM3110
 1960 30E0              ldi R19,>_strM3110
 1962 00E0              ldi R16,<L209
 1964 10E0              ldi R17,>L209
 1966 0E940000          xcall _uart_Printf
 196A           ;                                       uart0SendInt(NewTestInfo.testSerial);
 196A 20915800          lds R18,_NewTestInfo+1+2
 196E 30915900          lds R19,_NewTestInfo+1+2+1
 1972 00915600          lds R16,_NewTestInfo+1
 1976 10915700          lds R17,_NewTestInfo+1+1
 197A 0E940000          xcall _uart0SendInt
 197E           ;                                       uart_Printf("\r\n");
 197E 00E0              ldi R16,<L211
 1980 10E0              ldi R17,>L211
 1982 0E940000          xcall _uart_Printf
 1986           ;                                       Uart0ReEnable;
 1986 8091C100          lds R24,193
 198A 8061              ori R24,16
 198C 8093C100          sts 193,R24
 1990           ; #endif
 1990           ;                                       if(_DropMode == 0)
 1990 20904200          lds R2,__DropMode
 1994 30904300          lds R3,__DropMode+1
 1998 2220              tst R2
 199A 51F4              brne L336
 199C 3320              tst R3
 199E 41F4              brne L336
 19A0           X135:
 19A0           ; 					{
 19A0           ; 						mainStep = 9;
 19A0 89E0              ldi R24,9
 19A2 80930000          sts L12,R24
 19A6           ;                                               workStep = 0;
 19A6 2224              clr R2
 19A8 20920100          sts L13,R2
 19AC           ;                                       }
 19AC 0C94AE16          xjmp L90
 19B0           L336:
 19B0           ; 					else
 19B0           ; 						workStep = 11;
 19B0 8BE0              ldi R24,11
 19B2 80930100          sts L13,R24
 19B6           ;                                       break;
 19B6 0C94AE16          xjmp L90
 19BA           L338:
 19BA           ; 				case 11:
 19BA           ; 					if(GetNewTestCard == 222)				//抽打混匀准备
 19BA 80915300          lds R24,_GetNewTestCard
 19BE 8E3D              cpi R24,222
 19C0 11F5              brne L339
 19C2           X136:
 19C2           ; 					{
 19C2           ; 						Uart0ReUnable;
 19C2 8091C100          lds R24,193
 19C6 8F7E              andi R24,239
 19C8 8093C100          sts 193,R24
 19CC           ;                                               uart_Printf("%s\r\n",strM3145);
 19CC 20E0              ldi R18,<_strM3145
 19CE 30E0              ldi R19,>_strM3145
 19D0 00E0              ldi R16,<L88
 19D2 10E0              ldi R17,>L88
 19D4 0E940000          xcall _uart_Printf
 19D8           ;                                               Uart0ReEnable;
 19D8 8091C100          lds R24,193
 19DC 8061              ori R24,16
 19DE 8093C100          sts 193,R24
 19E2           ;                                               MixHeight = GetMixHeight();
 19E2 0E940000          xcall _GetMixHeight
 19E6 6801              movw R12,R16
 19E8 D0923700          sts _MixHeight+1,R13
 19EC C0923600          sts _MixHeight,R12
 19F0           ;                                               _NeedleMotRunTo(MixHeight,240);
 19F0 20EF              ldi R18,240
 19F2 0E94E529          xcall __NeedleMotRunTo
 19F6           ;                                               waitMotSampNeedle = 1;
 19F6 81E0              ldi R24,1
 19F8 80934E00          sts _waitMotSampNeedle,R24
 19FC           ;                                               workStep = 12;
 19FC 8CE0              ldi R24,12
 19FE 80930100          sts L13,R24
 1A02           ;                                               break;
 1A02 0C94AE16          xjmp L90
 1A06           L339:
 1A06           ; 					}
 1A06           ; 					else if(GetNewTestCard == 250)			// 取片失败 	
 1A06 80915300          lds R24,_GetNewTestCard
 1A0A 8A3F              cpi R24,250
 1A0C 11F0              breq X271
 1A0E 0C94AE16          xjmp L90
 1A12           X271:
 1A12           X137:
 1A12           ; 					{
 1A12           ; 						MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 1A12 20913A00          lds R18,_NeedleOnMixCenterPos
 1A16 30913B00          lds R19,_NeedleOnMixCenterPos+1
 1A1A 02E0              ldi R16,2
 1A1C 0E940000          xcall _MotRunTo
 1A20           ;                                               waitMotSampTurn = 1;
 1A20 81E0              ldi R24,1
 1A22 80934F00          sts _waitMotSampTurn,R24
 1A26           ;                                               mainStep = 9;
 1A26 89E0              ldi R24,9
 1A28 80930000          sts L12,R24
 1A2C           ;                                               workStep = 5;
 1A2C 85E0              ldi R24,5
 1A2E 80930100          sts L13,R24
 1A32           ;                                       }
 1A32           ;                                       break;
 1A32 0C94AE16          xjmp L90
 1A36           L343:
 1A36           ; 				case 12:
 1A36           ; 					_SampPumpMotRun(-4244, 240);	// 第一次吐100ul  100 / 0.023563 = 4244
 1A36 20EF              ldi R18,240
 1A38 0CE6              ldi R16,-4244
 1A3A 1FEE              ldi R17,-17
 1A3C 0E94052A          xcall __SampPumpMotRun
 1A40           ;                                       //_SampPumpMotRun(-4371, 240);  // 第一次吐103ul  103 / 0.023563 = 4371
 1A40           ;                                       Num++;
 1A40 80910700          lds R24,L19
 1A44 8F5F              subi R24,255    ; addi 1
 1A46 80930700          sts L19,R24
 1A4A           ;                                       waitMotSampPump = 1;
 1A4A 81E0              ldi R24,1
 1A4C 80934D00          sts _waitMotSampPump,R24
 1A50           ;                                       workStep = 13;
 1A50 8DE0              ldi R24,13
 1A52 80930100          sts L13,R24
 1A56           ;                                       break;
 1A56 0C94AE16          xjmp L90
 1A5A           L344:
 1A5A           ; 				case 13:	// 离开抽打混匀高度
 1A5A           ; 					_NeedleMotRunTo(MixHeight - 200,240);
 1A5A 20EF              ldi R18,240
 1A5C 00913600          lds R16,_MixHeight
 1A60 10913700          lds R17,_MixHeight+1
 1A64 085C              subi R16,200
 1A66 1040              sbci R17,0
 1A68 0E94E529          xcall __NeedleMotRunTo
 1A6C           ;                                       waitMotSampNeedle = 1;
 1A6C 81E0              ldi R24,1
 1A6E 80934E00          sts _waitMotSampNeedle,R24
 1A72           ;                                       workStep = 14;
 1A72 8EE0              ldi R24,14
 1A74 80930100          sts L13,R24
 1A78           ;                                       break;
 1A78 0C94AE16          xjmp L90
 1A7C           L345:
 1A7C           ; 				case 14:
 1A7C           ; 					_SampPumpMotRun(424, 120);		// 吸10ul空气   10 / 0.023563 = 424
 1A7C 28E7              ldi R18,120
 1A7E 08EA              ldi R16,424
 1A80 11E0              ldi R17,1
 1A82 0E94052A          xcall __SampPumpMotRun
 1A86           ;                                       waitMotSampPump = 1;
 1A86 81E0              ldi R24,1
 1A88 80934D00          sts _waitMotSampPump,R24
 1A8C           ;                                       workStep = 15;
 1A8C 8FE0              ldi R24,15
 1A8E 80930100          sts L13,R24
 1A92           ;                                       break;
 1A92 0C94AE16          xjmp L90
 1A96           L346:
 1A96           ; 				case 15:	// 降低至抽打混匀高度
 1A96           ; 					_NeedleMotRunTo(MixHeight,240);
 1A96 20EF              ldi R18,240
 1A98 00913600          lds R16,_MixHeight
 1A9C 10913700          lds R17,_MixHeight+1
 1AA0 0E94E529          xcall __NeedleMotRunTo
 1AA4           ;                                       waitMotSampNeedle = 1;
 1AA4 81E0              ldi R24,1
 1AA6 80934E00          sts _waitMotSampNeedle,R24
 1AAA           ;                                       workStep = 20;
 1AAA 84E1              ldi R24,20
 1AAC 80930100          sts L13,R24
 1AB0           ;                                       break;
 1AB0 0C94AE16          xjmp L90
 1AB4           L347:
 1AB4           ; //#ifndef _FluidPumMix 
 1AB4           ; 				// 微量注塞泵抽打混匀
 1AB4           ; 				case 20:
 1AB4           ; 					//_SampPumpMotRun(4032, 240);		// 吸95ul  95 / 0.023563 = 4032
 1AB4           ; 					_SampPumpMotRun(3820, 240);			// 吸90ul  90 / 0.023563 = 3820
 1AB4 20EF              ldi R18,240
 1AB6 0CEE              ldi R16,3820
 1AB8 1EE0              ldi R17,14
 1ABA 0E94052A          xcall __SampPumpMotRun
 1ABE           ;                                       waitMotSampPump = 1;
 1ABE 81E0              ldi R24,1
 1AC0 80934D00          sts _waitMotSampPump,R24
 1AC4           ;                                       workStep = 21;
 1AC4 85E1              ldi R24,21
 1AC6 80930100          sts L13,R24
 1ACA           ;                                       break;
 1ACA 0C94AE16          xjmp L90
 1ACE           L348:
 1ACE           ; 				case 21:		// 注入90液体
 1ACE           ; 					_SampPumpMotRun(-3820, 240);	// 吐90 90/0.023563 = 3820
 1ACE 20EF              ldi R18,240
 1AD0 04E1              ldi R16,-3820
 1AD2 11EF              ldi R17,-15
 1AD4 0E94052A          xcall __SampPumpMotRun
 1AD8           ;                                       Num++;
 1AD8 80910700          lds R24,L19
 1ADC 8F5F              subi R24,255    ; addi 1
 1ADE 80930700          sts L19,R24
 1AE2           ;                                       waitMotSampPump = 1;
 1AE2 81E0              ldi R24,1
 1AE4 80934D00          sts _waitMotSampPump,R24
 1AE8           ;                                       workStep = 22;
 1AE8 86E1              ldi R24,22
 1AEA 80930100          sts L13,R24
 1AEE           ;                                       break;
 1AEE 0C94AE16          xjmp L90
 1AF2           L349:
 1AF2           ; 				case 22:
 1AF2           ; 					_SampPumpMotRun(3820, 240);		// 吸90 90/0.023563 = 3820	
 1AF2 20EF              ldi R18,240
 1AF4 0CEE              ldi R16,3820
 1AF6 1EE0              ldi R17,14
 1AF8 0E94052A          xcall __SampPumpMotRun
 1AFC           ;                                       if(Num < _ReMixNum - 1)
 1AFC 80910700          lds R24,__ReMixNum
 1B00 90910800          lds R25,__ReMixNum+1
 1B04 0197              sbiw R24,1
 1B06 20900700          lds R2,L19
 1B0A 3324              clr R3
 1B0C 2816              cp R2,R24
 1B0E 3906              cpc R3,R25
 1B10 20F4              brsh L350
 1B12           X138:
 1B12           ; 						workStep = 21;
 1B12 85E1              ldi R24,21
 1B14 80930100          sts L13,R24
 1B18 03C0              xjmp L351
 1B1A           L350:
 1B1A           ; 					else
 1B1A           ; 						workStep = 23;
 1B1A 87E1              ldi R24,23
 1B1C 80930100          sts L13,R24
 1B20           L351:
 1B20           ; 					waitMotSampPump = 1;
 1B20 81E0              ldi R24,1
 1B22 80934D00          sts _waitMotSampPump,R24
 1B26           ;                                  break;
 1B26 0C94AE16          xjmp L90
 1B2A           L352:
 1B2A           ; 				case 23:
 1B2A           ; 					//_SampPumpMotRun(-4032,240);			// 吐95 95/0.023563 = 4032
 1B2A           ; 					_SampPumpMotRun(-3820,240);				// 吐90 90/0.023563 = 3820
 1B2A 20EF              ldi R18,240
 1B2C 04E1              ldi R16,-3820
 1B2E 11EF              ldi R17,-15
 1B30 0E94052A          xcall __SampPumpMotRun
 1B34           ;                                       waitMotSampPump = 1;
 1B34 81E0              ldi R24,1
 1B36 80934D00          sts _waitMotSampPump,R24
 1B3A           ;                                       workStep = 24;
 1B3A 88E1              ldi R24,24
 1B3C 80930100          sts L13,R24
 1B40           ;                                       break;
 1B40 0C94AE16          xjmp L90
 1B44           L353:
 1B44           ; 				case 24:
 1B44           ; 					_SampPumpMotRun(3395, 240);			// 吸80 80/0.023563 = 3395	
 1B44 20EF              ldi R18,240
 1B46 03E4              ldi R16,3395
 1B48 1DE0              ldi R17,13
 1B4A 0E94052A          xcall __SampPumpMotRun
 1B4E           ;                                       workStep = 25;
 1B4E 89E1              ldi R24,25
 1B50 80930100          sts L13,R24
 1B54           ;                                       waitMotSampPump = 1;
 1B54 81E0              ldi R24,1
 1B56 80934D00          sts _waitMotSampPump,R24
 1B5A           ;                                  break;
 1B5A 0C94AE16          xjmp L90
 1B5E           L354:
 1B5E           ; 				case 25:
 1B5E           ; 				   SetDelayTime(MOT_SAMP_NEEDLE,2);
 1B5E 22E0              ldi R18,2
 1B60 30E0              ldi R19,0
 1B62 03E0              ldi R16,3
 1B64 0E940000          xcall _SetDelayTime
 1B68           ;                                  workStep = 16;
 1B68 80E1              ldi R24,16
 1B6A 80930100          sts L13,R24
 1B6E           ;                                  break;
 1B6E 0C94AE16          xjmp L90
 1B72           L355:
 1B72           ; 				case 16:
 1B72           ; 				   Num = 0;
 1B72 2224              clr R2
 1B74 20920700          sts L19,R2
 1B78           ;                                  workStep = 17;
 1B78 81E1              ldi R24,17
 1B7A 80930100          sts L13,R24
 1B7E           ;                                  Uart0ReUnable;
 1B7E 8091C100          lds R24,193
 1B82 8F7E              andi R24,239
 1B84 8093C100          sts 193,R24
 1B88           ;                                  uart_Printf("%s\r\n",strM3199);
 1B88 20E0              ldi R18,<_strM3199
 1B8A 30E0              ldi R19,>_strM3199
 1B8C 00E0              ldi R16,<L88
 1B8E 10E0              ldi R17,>L88
 1B90 0E940000          xcall _uart_Printf
 1B94           ;                                  Uart0ReEnable;
 1B94 8091C100          lds R24,193
 1B98 8061              ori R24,16
 1B9A 8093C100          sts 193,R24
 1B9E           ;                                  break;
 1B9E 0C94AE16          xjmp L90
 1BA2           L356:
 1BA2           ; 				case 17:
 1BA2           ; 				   _NeedleMotRunTo(0,240);	//吸样针回到零位
 1BA2 20EF              ldi R18,240
 1BA4 0027              clr R16
 1BA6 1127              clr R17
 1BA8 0E94E529          xcall __NeedleMotRunTo
 1BAC           ;                                  waitMotSampNeedle = 1;
 1BAC 81E0              ldi R24,1
 1BAE 80934E00          sts _waitMotSampNeedle,R24
 1BB2           ;                                  workStep = 18;
 1BB2 82E1              ldi R24,18
 1BB4 80930100          sts L13,R24
 1BB8           ;                                  break;
 1BB8 0C94AE16          xjmp L90
 1BBC           L357:
 1BBC           ; 				case 18:		//抽打混匀结束
 1BBC           ; 				   SetDelayTime(MOT_SAMP_NEEDLE,3);
 1BBC 23E0              ldi R18,3
 1BBE 30E0              ldi R19,0
 1BC0 03E0              ldi R16,3
 1BC2 0E940000          xcall _SetDelayTime
 1BC6           ;                                  GetNewTestCard = 233;                // 设置取出测试卡标识,抽打混匀结束,准备滴样
 1BC6 89EE              ldi R24,233
 1BC8 80935300          sts _GetNewTestCard,R24
 1BCC           ;                                  mainStep = 9;
 1BCC 89E0              ldi R24,9
 1BCE 80930000          sts L12,R24
 1BD2           ;                                  workStep = 0;
 1BD2 2224              clr R2
 1BD4 20920100          sts L13,R2
 1BD8           ;                                  break;
 1BD8           ;                               }
 1BD8           ;                       break;
 1BD8 0C94AE16          xjmp L90
 1BDC           L359:
 1BDC           ; 		case 9:				// 等待混匀滴入干片中,然后清洗
 1BDC           ; 			switch(workStep){
 1BDC C0900100          lds R12,L13
 1BE0 DD24              clr R13
 1BE2 C601              movw R24,R12
 1BE4 8030              cpi R24,0
 1BE6 E0E0              ldi R30,0
 1BE8 9E07              cpc R25,R30
 1BEA 14F4              brge X272
 1BEC 0C94AE16          xjmp L90
 1BF0           X272:
 1BF0           X139:
 1BF0 83E1              ldi R24,19
 1BF2 8C15              cp R24,R12
 1BF4 9D05              cpc R25,R13
 1BF6 5CF0              brlt L430
 1BF8           X140:
 1BF8 80E0              ldi R24,<L431
 1BFA 90E0              ldi R25,>L431
 1BFC F601              movw R30,R12
 1BFE EE0F              lsl R30
 1C00 FF1F              rol R31
 1C02 E80F              add R30,R24
 1C04 F91F              adc R31,R25
 1C06 2790              elpm R2,Z+
 1C08 3690              elpm R3,Z
 1C0A F101              movw R30,R2
 1C0C 0994               ijmp
 1C0E           L430:
 1C0E C601              movw R24,R12
 1C10 8436              cpi R24,100
 1C12 E0E0              ldi R30,0
 1C14 9E07              cpc R25,R30
 1C16 09F4              brne X273
 1C18 88C2              xjmp L411
 1C1A           X273:
 1C1A           X141:
 1C1A 8536              cpi R24,101
 1C1C E0E0              ldi R30,0
 1C1E 9E07              cpc R25,R30
 1C20 09F4              brne X274
 1C22 9DC2              xjmp L412
 1C24           X274:
 1C24           X142:
 1C24 8636              cpi R24,102
 1C26 E0E0              ldi R30,0
 1C28 9E07              cpc R25,R30
 1C2A 09F4              brne X275
 1C2C B1C2              xjmp L415
 1C2E           X275:
 1C2E           X143:
 1C2E 8736              cpi R24,103
 1C30 E0E0              ldi R30,0
 1C32 9E07              cpc R25,R30
 1C34 09F4              brne X276
 1C36 BDC2              xjmp L416
 1C38           X276:
 1C38           X144:
 1C38 8836              cpi R24,104
 1C3A E0E0              ldi R30,0
 1C3C 9E07              cpc R25,R30
 1C3E 09F4              brne X277
 1C40 C9C2              xjmp L417
 1C42           X277:
 1C42           X145:
 1C42 8936              cpi R24,105
 1C44 E0E0              ldi R30,0
 1C46 9E07              cpc R25,R30
 1C48 09F4              brne X278
 1C4A D8C2              xjmp L418
 1C4C           X278:
 1C4C           X146:
 1C4C 8A36              cpi R24,106
 1C4E E0E0              ldi R30,0
 1C50 9E07              cpc R25,R30
 1C52 09F4              brne X279
 1C54 02C3              xjmp L422
 1C56           X279:
 1C56           X147:
 1C56 8B36              cpi R24,107
 1C58 E0E0              ldi R30,0
 1C5A 9E07              cpc R25,R30
 1C5C 09F4              brne X280
 1C5E 12C3              xjmp L423
 1C60           X280:
 1C60           X148:
 1C60 8C36              cpi R24,108
 1C62 E0E0              ldi R30,0
 1C64 9E07              cpc R25,R30
 1C66 09F4              brne X281
 1C68 1EC3              xjmp L424
 1C6A           X281:
 1C6A           X149:
 1C6A 8D36              cpi R24,109
 1C6C E0E0              ldi R30,0
 1C6E 9E07              cpc R25,R30
 1C70 09F4              brne X282
 1C72 E2C2              xjmp L421
 1C74           X282:
 1C74           X150:
 1C74 0C94AE16          xjmp L90
 1C78           L363:
 1C78           ; 				case 0:		// 准备滴样，检查测试队列是否有空位加入，否则等待	// 检测队列任务由此加入开始
 1C78           ; 					if(GetNewTestCard == 254)	// 测试卡片已经准备完毕，下面开始将测试插入检测队列
 1C78 80915300          lds R24,_GetNewTestCard
 1C7C 8E3F              cpi R24,254
 1C7E 09F0              breq X283
 1C80 F1C0              xjmp L364
 1C82           X283:
 1C82           X151:
 1C82           ; 					{		
 1C82           ; 						CurInsertRingNum = RingQueueInsertCalculate();	// 查找转盘位置						
 1C82 0E940000          xcall _RingQueueInsertCalculate
 1C86 6801              movw R12,R16
 1C88 C0925400          sts _CurInsertRingNum,R12
 1C8C           ;                                               if(CurInsertRingNum != 0xff)    // 如果转盘位置查找成功，测试队列插入
 1C8C 8C2D              mov R24,R12
 1C8E 0F3F              cpi R16,255
 1C90 09F4              brne X284
 1C92 6DC0              xjmp L366
 1C94           X284:
 1C94           X152:
 1C94           ; 						{	
 1C94           ; 							FindNum = 0;
 1C94 2224              clr R2
 1C96 20921400          sts L25,R2
 1C9A           ;                                                       ucTmp = InsertNewTest(&NewTestInfo,CurInsertRingNum);   // 测试队列插入
 1C9A 282F              mov R18,R24
 1C9C 3327              clr R19
 1C9E 00E0              ldi R16,<_NewTestInfo
 1CA0 10E0              ldi R17,>_NewTestInfo
 1CA2 0E940000          xcall _InsertNewTest
 1CA6 6801              movw R12,R16
 1CA8 C0920600          sts L18,R12
 1CAC           ;                                                       if(ucTmp == 0)  // 新测试插入计算成功
 1CAC 0023              tst R16
 1CAE 11F0              breq X285
 1CB0 0C94AE16          xjmp L90
 1CB4           X285:
 1CB4           X153:
 1CB4           ; 							{
 1CB4           ; 								// 将新测试插入上面计算出来的转盘位置
 1CB4           ; 								RingQueueInsert(CurInsertRingNum,&NewTestInfo);		
 1CB4 20E0              ldi R18,<_NewTestInfo
 1CB6 30E0              ldi R19,>_NewTestInfo
 1CB8 00915400          lds R16,_CurInsertRingNum
 1CBC 1127              clr R17
 1CBE 0E940000          xcall _RingQueueInsert
 1CC2           ;                                                               insertflag[CurInsertRingNum] = 0;
 1CC2 80E0              ldi R24,<_insertflag
 1CC4 90E0              ldi R25,>_insertflag
 1CC6 E0915400          lds R30,_CurInsertRingNum
 1CCA FF27              clr R31
 1CCC E80F              add R30,R24
 1CCE F91F              adc R31,R25
 1CD0 2224              clr R2
 1CD2 2082              std z+0,R2
 1CD4           ;                                                               // 加入卸片队列
 1CD4           ;                                                               if(NewTestInfo.testTime1)
 1CD4 20906000          lds R2,_NewTestInfo+11
 1CD8 30906100          lds R3,_NewTestInfo+11+1
 1CDC 2220              tst R2
 1CDE 11F4              brne X154
 1CE0 3320              tst R3
 1CE2 F9F0              breq L370
 1CE4           X154:
 1CE4           ; 									UnloadQueueAdd(CurInsertRingNum, SecondCount+NewTestInfo.testTime1+TEST_CYCLE_TIME+25); 
 1CE4 4424              clr R4
 1CE6 5524              clr R5
 1CE8 80900400          lds R8,_SecondCount+2
 1CEC 90900500          lds R9,_SecondCount+2+1
 1CF0 60900200          lds R6,_SecondCount
 1CF4 70900300          lds R7,_SecondCount+1
 1CF8 620C              add R6,R2
 1CFA 731C              adc R7,R3
 1CFC 841C              adc R8,R4
 1CFE 951C              adc R9,R5
 1D00 48E2              ldi R20,40
 1D02 50E0              ldi R21,0
 1D04 60E0              ldi R22,0
 1D06 70E0              ldi R23,0
 1D08 640E              add R6,R20
 1D0A 751E              adc R7,R21
 1D0C 861E              adc R8,R22
 1D0E 971E              adc R9,R23
 1D10 8882              std y+0,R8
 1D12 9982              std y+1,R9
 1D14 9301              movw R18,R6
 1D16 00915400          lds R16,_CurInsertRingNum
 1D1A 1127              clr R17
 1D1C 0E940000          xcall _UnloadQueueAdd
 1D20 22C0              xjmp L371
 1D22           L370:
 1D22           ; 								else
 1D22           ; 									UnloadQueueAdd(CurInsertRingNum, SecondCount+NewTestInfo.testTime0+TEST_CYCLE_TIME+25);
 1D22 20905E00          lds R2,_NewTestInfo+9
 1D26 30905F00          lds R3,_NewTestInfo+9+1
 1D2A 4424              clr R4
 1D2C 5524              clr R5
 1D2E 80900400          lds R8,_SecondCount+2
 1D32 90900500          lds R9,_SecondCount+2+1
 1D36 60900200          lds R6,_SecondCount
 1D3A 70900300          lds R7,_SecondCount+1
 1D3E 620C              add R6,R2
 1D40 731C              adc R7,R3
 1D42 841C              adc R8,R4
 1D44 951C              adc R9,R5
 1D46 48E2              ldi R20,40
 1D48 50E0              ldi R21,0
 1D4A 60E0              ldi R22,0
 1D4C 70E0              ldi R23,0
 1D4E 640E              add R6,R20
 1D50 751E              adc R7,R21
 1D52 861E              adc R8,R22
 1D54 971E              adc R9,R23
 1D56 8882              std y+0,R8
 1D58 9982              std y+1,R9
 1D5A 9301              movw R18,R6
 1D5C 00915400          lds R16,_CurInsertRingNum
 1D60 1127              clr R17
 1D62 0E940000          xcall _UnloadQueueAdd
 1D66           L371:
 1D66           ; 								workStep = 1;
 1D66 81E0              ldi R24,1
 1D68 80930100          sts L13,R24
 1D6C           ;                                                       }
 1D6C           ;                                               }
 1D6C F7C7              xjmp L90
 1D6E           L366:
 1D6E           ; 						else
 1D6E           ; 						{
 1D6E           ; 							// 如果转盘位置查找失败，5s之后重新查找
 1D6E           ; 							SetDelayTime(MOT_SAMP_NEEDLE,50);	
 1D6E 22E3              ldi R18,50
 1D70 30E0              ldi R19,0
 1D72 03E0              ldi R16,3
 1D74 0E940000          xcall _SetDelayTime
 1D78           ;                                                       FindNum++;
 1D78 80911400          lds R24,L25
 1D7C 8F5F              subi R24,255    ; addi 1
 1D7E 80931400          sts L25,R24
 1D82           ;                                                       if(FindNum >= 3)        // 连续3次转盘位置查找失败,当前转盘位置为前一次+1
 1D82 8330              cpi R24,3
 1D84 08F4              brsh X286
 1D86 EAC7              xjmp L90
 1D88           X286:
 1D88           X155:
 1D88           ; 							{
 1D88           ; 								FindNum = 0;
 1D88 2224              clr R2
 1D8A 20921400          sts L25,R2
 1D8E           ;                                                               //RingQueue.prevNum += 1;
 1D8E           ;                                                               CurInsertRingNum = RingQueue.prevNum++;
 1D8E C090A401          lds R12,_RingQueue+420
 1D92 8C2D              mov R24,R12
 1D94 8F5F              subi R24,255    ; addi 1
 1D96 8093A401          sts _RingQueue+420,R24
 1D9A C0925400          sts _CurInsertRingNum,R12
 1D9E           ;                                                               if(CurInsertRingNum >= RING_QUEUE_NUM)
 1D9E 8C2D              mov R24,R12
 1DA0 8E31              cpi R24,30
 1DA2 18F0              brlo L378
 1DA4           X156:
 1DA4           ; 									CurInsertRingNum -= RING_QUEUE_NUM;
 1DA4 8E51              subi R24,30
 1DA6 80935400          sts _CurInsertRingNum,R24
 1DAA           L378:
 1DAA           ; 								RingQueueInsert(CurInsertRingNum,&NewTestInfo);		
 1DAA 20E0              ldi R18,<_NewTestInfo
 1DAC 30E0              ldi R19,>_NewTestInfo
 1DAE 00915400          lds R16,_CurInsertRingNum
 1DB2 1127              clr R17
 1DB4 0E940000          xcall _RingQueueInsert
 1DB8           ;                                                               insertflag[CurInsertRingNum] = 0;
 1DB8 80E0              ldi R24,<_insertflag
 1DBA 90E0              ldi R25,>_insertflag
 1DBC E0915400          lds R30,_CurInsertRingNum
 1DC0 FF27              clr R31
 1DC2 E80F              add R30,R24
 1DC4 F91F              adc R31,R25
 1DC6 2224              clr R2
 1DC8 2082              std z+0,R2
 1DCA           ;                                                               // 加入卸片队列
 1DCA           ;                                                               if(NewTestInfo.testTime1)
 1DCA 20906000          lds R2,_NewTestInfo+11
 1DCE 30906100          lds R3,_NewTestInfo+11+1
 1DD2 2220              tst R2
 1DD4 11F4              brne X157
 1DD6 3320              tst R3
 1DD8 F9F0              breq L380
 1DDA           X157:
 1DDA           ; 									UnloadQueueAdd(CurInsertRingNum, SecondCount+NewTestInfo.testTime1+TEST_CYCLE_TIME+25);
 1DDA 4424              clr R4
 1DDC 5524              clr R5
 1DDE 80900400          lds R8,_SecondCount+2
 1DE2 90900500          lds R9,_SecondCount+2+1
 1DE6 60900200          lds R6,_SecondCount
 1DEA 70900300          lds R7,_SecondCount+1
 1DEE 620C              add R6,R2
 1DF0 731C              adc R7,R3
 1DF2 841C              adc R8,R4
 1DF4 951C              adc R9,R5
 1DF6 48E2              ldi R20,40
 1DF8 50E0              ldi R21,0
 1DFA 60E0              ldi R22,0
 1DFC 70E0              ldi R23,0
 1DFE 640E              add R6,R20
 1E00 751E              adc R7,R21
 1E02 861E              adc R8,R22
 1E04 971E              adc R9,R23
 1E06 8882              std y+0,R8
 1E08 9982              std y+1,R9
 1E0A 9301              movw R18,R6
 1E0C 00915400          lds R16,_CurInsertRingNum
 1E10 1127              clr R17
 1E12 0E940000          xcall _UnloadQueueAdd
 1E16 22C0              xjmp L381
 1E18           L380:
 1E18           ; 								else
 1E18           ; 									UnloadQueueAdd(CurInsertRingNum, SecondCount+NewTestInfo.testTime0+TEST_CYCLE_TIME+25);
 1E18 20905E00          lds R2,_NewTestInfo+9
 1E1C 30905F00          lds R3,_NewTestInfo+9+1
 1E20 4424              clr R4
 1E22 5524              clr R5
 1E24 80900400          lds R8,_SecondCount+2
 1E28 90900500          lds R9,_SecondCount+2+1
 1E2C 60900200          lds R6,_SecondCount
 1E30 70900300          lds R7,_SecondCount+1
 1E34 620C              add R6,R2
 1E36 731C              adc R7,R3
 1E38 841C              adc R8,R4
 1E3A 951C              adc R9,R5
 1E3C 48E2              ldi R20,40
 1E3E 50E0              ldi R21,0
 1E40 60E0              ldi R22,0
 1E42 70E0              ldi R23,0
 1E44 640E              add R6,R20
 1E46 751E              adc R7,R21
 1E48 861E              adc R8,R22
 1E4A 971E              adc R9,R23
 1E4C 8882              std y+0,R8
 1E4E 9982              std y+1,R9
 1E50 9301              movw R18,R6
 1E52 00915400          lds R16,_CurInsertRingNum
 1E56 1127              clr R17
 1E58 0E940000          xcall _UnloadQueueAdd
 1E5C           L381:
 1E5C           ; 								workStep = 1;
 1E5C 81E0              ldi R24,1
 1E5E 80930100          sts L13,R24
 1E62           ;                                                       }
 1E62           ;                                               }
 1E62           ;                                       }
 1E62 7CC7              xjmp L90
 1E64           L364:
 1E64           ; 					else if(GetNewTestCard == 250)
 1E64 80915300          lds R24,_GetNewTestCard
 1E68 8A3F              cpi R24,250
 1E6A 09F0              breq X287
 1E6C 77C7              xjmp L90
 1E6E           X287:
 1E6E           X158:
 1E6E           ; 					{
 1E6E           ; 					//	GetNewTestCard = 0;
 1E6E           ; 						MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 1E6E 20913A00          lds R18,_NeedleOnMixCenterPos
 1E72 30913B00          lds R19,_NeedleOnMixCenterPos+1
 1E76 02E0              ldi R16,2
 1E78 0E940000          xcall _MotRunTo
 1E7C           ;                                               waitMotSampTurn = 1;
 1E7C 81E0              ldi R24,1
 1E7E 80934F00          sts _waitMotSampTurn,R24
 1E82           ;                                               workStep = 5;
 1E82 85E0              ldi R24,5
 1E84 80930100          sts L13,R24
 1E88           ;                                       }
 1E88           ;                                       break;
 1E88 69C7              xjmp L90
 1E8A           L387:
 1E8A           ; 				case 1:		// 取样针下降到测试卡上方
 1E8A           ; 					_NeedleMotRunTo(DropHeight,180);	// 触碰到试剂片
 1E8A 24EB              ldi R18,180
 1E8C 00913800          lds R16,_DropHeight
 1E90 10913900          lds R17,_DropHeight+1
 1E94 0E94E529          xcall __NeedleMotRunTo
 1E98           ;                                       waitMotSampNeedle = 1;
 1E98 81E0              ldi R24,1
 1E9A 80934E00          sts _waitMotSampNeedle,R24
 1E9E           ;                                       workStep = 2;
 1E9E 82E0              ldi R24,2
 1EA0 80930100          sts L13,R24
 1EA4           ;                                       break;
 1EA4 5BC7              xjmp L90
 1EA6           L388:
 1EA6           ; 				case 2:		// 注入液体
 1EA6           ; 					if(_DropVolume != 0)	// 2016-05-19 添加滴样量为0处理
 1EA6 20904800          lds R2,__DropVolume
 1EAA 30904900          lds R3,__DropVolume+1
 1EAE 2220              tst R2
 1EB0 11F4              brne X159
 1EB2 3320              tst R3
 1EB4 31F1              breq L389
 1EB6           X159:
 1EB6           ; 					{
 1EB6           ; 						siTmp = _DropVolume +  GetDropVolumeFactor();
 1EB6 0E943C1C          xcall _GetDropVolumeFactor
 1EBA 6801              movw R12,R16
 1EBC A0904800          lds R10,__DropVolume
 1EC0 B0904900          lds R11,__DropVolume+1
 1EC4 A00E              add R10,R16
 1EC6 B11E              adc R11,R17
 1EC8           ;                                               _SampPumpMotRun(-siTmp, 180);
 1EC8 24EB              ldi R18,180
 1ECA 8501              movw R16,R10
 1ECC 0095              com R16
 1ECE 1095              com R17
 1ED0 0F5F              subi R16,0xFF
 1ED2 1F4F              sbci R17,0xFF
 1ED4 0E94052A          xcall __SampPumpMotRun
 1ED8           ;                                               Uart0ReUnable;
 1ED8 8091C100          lds R24,193
 1EDC 8F7E              andi R24,239
 1EDE 8093C100          sts 193,R24
 1EE2           ;                                               uart_Printf("%s $%4d\r\n", strM3141, siTmp);
 1EE2 B982              std y+1,R11
 1EE4 A882              std y+0,R10
 1EE6 20E0              ldi R18,<_strM3141
 1EE8 30E0              ldi R19,>_strM3141
 1EEA 00E0              ldi R16,<L10
 1EEC 10E0              ldi R17,>L10
 1EEE 0E940000          xcall _uart_Printf
 1EF2           ;                                               Uart0ReEnable;
 1EF2 8091C100          lds R24,193
 1EF6 8061              ori R24,16
 1EF8 8093C100          sts 193,R24
 1EFC           ;                                               waitMotSampPump = 1;
 1EFC 81E0              ldi R24,1
 1EFE 80934D00          sts _waitMotSampPump,R24
 1F02           ;                                       }
 1F02           L389:
 1F02           ; 					workStep = 3;
 1F02 83E0              ldi R24,3
 1F04 80930100          sts L13,R24
 1F08           ;                                       break;
 1F08 29C7              xjmp L90
 1F0A           L391:
 1F0A           ; 				case 3:		// 取样针上升到最高点
 1F0A           ; 					SetBeepAck();
 1F0A 0E940000          xcall _SetBeepAck
 1F0E           ;                                       // 标本已加入，测试开始
 1F0E           ; #ifndef UartSendLong
 1F0E           ;                                       Uart0ReUnable;
 1F0E           ;                                       uart_Printf("%s $%8d",strM3111, NewTestInfo.testSerial);
 1F0E           ;                                       uart_Printf(" $%8d\r\n",(unsigned long)SecondCount);
 1F0E           ;                                       Uart0ReEnable;
 1F0E           ; #else         
 1F0E           ;                                       Uart0ReUnable;
 1F0E 8091C100          lds R24,193
 1F12 8F7E              andi R24,239
 1F14 8093C100          sts 193,R24
 1F18           ;                                       uart_Printf("%s $ ",strM3111);
 1F18 20E0              ldi R18,<_strM3111
 1F1A 30E0              ldi R19,>_strM3111
 1F1C 00E0              ldi R16,<L209
 1F1E 10E0              ldi R17,>L209
 1F20 0E940000          xcall _uart_Printf
 1F24           ;                                       uart0SendInt(NewTestInfo.testSerial);
 1F24 20915800          lds R18,_NewTestInfo+1+2
 1F28 30915900          lds R19,_NewTestInfo+1+2+1
 1F2C 00915600          lds R16,_NewTestInfo+1
 1F30 10915700          lds R17,_NewTestInfo+1+1
 1F34 0E940000          xcall _uart0SendInt
 1F38           ;                                       uart_Printf(" $ ");
 1F38 00E0              ldi R16,<L393
 1F3A 10E0              ldi R17,>L393
 1F3C 0E940000          xcall _uart_Printf
 1F40           ;                                       uart0SendInt(SecondCount);
 1F40 20910400          lds R18,_SecondCount+2
 1F44 30910500          lds R19,_SecondCount+2+1
 1F48 00910200          lds R16,_SecondCount
 1F4C 10910300          lds R17,_SecondCount+1
 1F50 0E940000          xcall _uart0SendInt
 1F54           ;                                       uart_Printf("\r\n");
 1F54 00E0              ldi R16,<L211
 1F56 10E0              ldi R17,>L211
 1F58 0E940000          xcall _uart_Printf
 1F5C           ;                                       Uart0ReEnable;
 1F5C 8091C100          lds R24,193
 1F60 8061              ori R24,16
 1F62 8093C100          sts 193,R24
 1F66           ; #endif
 1F66           ;                                       _NeedleMotRunTo(0,180);
 1F66 24EB              ldi R18,180
 1F68 0027              clr R16
 1F6A 1127              clr R17
 1F6C 0E94E529          xcall __NeedleMotRunTo
 1F70           ;                                       GetNewTestCard = 255;           // 从case 4移动上来，保证滴样的样品可以测试
 1F70 8FEF              ldi R24,255
 1F72 80935300          sts _GetNewTestCard,R24
 1F76           ;                                       _FluidMotRun(5, 64);            // 开启清洗液洗混匀池,注入1.4mL清洗液
 1F76 20E4              ldi R18,64
 1F78 05E0              ldi R16,5
 1F7A 10E0              ldi R17,0
 1F7C 0E944E29          xcall __FluidMotRun
 1F80           ; #if   (DILUTE_TUBE == 14)
 1F80           ;                                       _DiluentMotRun(8, 160);         // 注入稀释液清洗
 1F80           ; #elif         (DILUTE_TUBE == 16)
 1F80           ;                                       _DiluentMotRun(3, 200);         
 1F80 28EC              ldi R18,200
 1F82 03E0              ldi R16,3
 1F84 10E0              ldi R17,0
 1F86 0E948C29          xcall __DiluentMotRun
 1F8A           ; #endif
 1F8A           ;                                       checkFluid = 1;
 1F8A 81E0              ldi R24,1
 1F8C 80930400          sts L16,R24
 1F90           ;                                       waitMotSampNeedle = 1;
 1F90 80934E00          sts _waitMotSampNeedle,R24
 1F94           ;                                       workStep = 4;
 1F94 84E0              ldi R24,4
 1F96 80930100          sts L13,R24
 1F9A           ;                                       break;
 1F9A E0C6              xjmp L90
 1F9C           L394:
 1F9C           ; 				case 4:		// 取样臂运行到混匀池中部上方
 1F9C           ; 					_EffluentMotRun(5, 220);
 1F9C 2CED              ldi R18,220
 1F9E 05E0              ldi R16,5
 1FA0 10E0              ldi R17,0
 1FA2 0E947329          xcall __EffluentMotRun
 1FA6           ;                                       _FluidMotRun(-1, 100);          // 回抽
 1FA6 24E6              ldi R18,100
 1FA8 0FEF              ldi R16,-1
 1FAA 1FEF              ldi R17,-1
 1FAC 0E944E29          xcall __FluidMotRun
 1FB0           ;                                       MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 1FB0 20913A00          lds R18,_NeedleOnMixCenterPos
 1FB4 30913B00          lds R19,_NeedleOnMixCenterPos+1
 1FB8 02E0              ldi R16,2
 1FBA 0E940000          xcall _MotRunTo
 1FBE           ;                                       waitMotSampTurn = 1;
 1FBE 81E0              ldi R24,1
 1FC0 80934F00          sts _waitMotSampTurn,R24
 1FC4           ;                                       workStep = 5;
 1FC4 85E0              ldi R24,5
 1FC6 80930100          sts L13,R24
 1FCA           ;                                       break;
 1FCA C8C6              xjmp L90
 1FCC           L395:
 1FCC           ; 				case 5:		// 取样针下降到混匀池顶部
 1FCC           ; 					MotStop(MOT_EFFLUENT);		// 如果废液泵未停止，将其停止
 1FCC 0BE0              ldi R16,11
 1FCE 0E940000          xcall _MotStop
 1FD2           ;                                       MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_TOP);
 1FD2 28E6              ldi R18,360
 1FD4 31E0              ldi R19,1
 1FD6 03E0              ldi R16,3
 1FD8 0E940000          xcall _MotRunTo
 1FDC           ;                                       waitMotSampNeedle = 1;
 1FDC 81E0              ldi R24,1
 1FDE 80934E00          sts _waitMotSampNeedle,R24
 1FE2           ;                                       waitMotFluid = 1;       // 等待清洗液注入混匀池完毕
 1FE2 80934C00          sts _waitMotFluid,R24
 1FE6           ;                                       SetEValve(EV2,EV_OPEN);         // 开启取样针通道准备清洗取样针内壁
 1FE6 21E0              ldi R18,1
 1FE8 02E0              ldi R16,2
 1FEA 0E940000          xcall _SetEValve
 1FEE           ;                                       SetEValve(EV3,EV_CLOSE);
 1FEE 2227              clr R18
 1FF0 03E0              ldi R16,3
 1FF2 0E940000          xcall _SetEValve
 1FF6           ;                                       //workStep = 6; // 2016-09-18
 1FF6           ;                                       //if(NewTestInfo.sampDiluteMult == 1 || NewTestInfo.sampDiluteMult == 2 || NewTestInfo.sampDiluteMult == 6)
 1FF6           ;                                       //add by pan 20161110稀释倍数是50的时候
 1FF6           ;                                       if(NewTestInfo.sampDiluteMult < 7 || NewTestInfo.sampDiluteMult > 11)
 1FF6 80915C00          lds R24,_NewTestInfo+7
 1FFA 8730              cpi R24,7
 1FFC 28F0              brlo L400
 1FFE           X160:
 1FFE 8BE0              ldi R24,11
 2000 20905C00          lds R2,_NewTestInfo+7
 2004 8215              cp R24,R2
 2006 38F4              brsh L396
 2008           X161:
 2008           L400:
 2008           ; 					// 稀释比例小于100,按原倍清洗模式
 2008           ; 					{
 2008           ; 						sc = 0;		// 原倍清洗次数
 2008 2224              clr R2
 200A 20920800          sts L20,R2
 200E           ;                                               workStep = 6;
 200E 86E0              ldi R24,6
 2010 80930100          sts L13,R24
 2014           ;                                       }
 2014 A3C6              xjmp L90
 2016           L396:
 2016           ; 					else
 2016           ; 					{
 2016           ; 						workStep = 10;	
 2016 8AE0              ldi R24,10
 2018 80930100          sts L13,R24
 201C           ;                                       }
 201C           ;                                       break;
 201C 9FC6              xjmp L90
 201E           L401:
 201E           ; 				case 6:		// 原倍模式取样针内壁清洗
 201E           ; 					sc ++;
 201E 80910800          lds R24,L20
 2022 8F5F              subi R24,255    ; addi 1
 2024 80930800          sts L20,R24
 2028           ;                                       SetEValve(EV2,EV_OPEN); 
 2028 21E0              ldi R18,1
 202A 02E0              ldi R16,2
 202C 0E940000          xcall _SetEValve
 2030           ;                                       _FluidMotRun(10, 100);          // 注入清洗液
 2030 24E6              ldi R18,100
 2032 0AE0              ldi R16,10
 2034 10E0              ldi R17,0
 2036 0E944E29          xcall __FluidMotRun
 203A           ;                                       MotInitCheck(MOT_SAMP_PUMP);    // 样品注射器回零
 203A 0CE0              ldi R16,12
 203C 0E940000          xcall _MotInitCheck
 2040           ;                                       waitMotFluid = 1;
 2040 81E0              ldi R24,1
 2042 80934C00          sts _waitMotFluid,R24
 2046           ;                                       workStep = 7;
 2046 87E0              ldi R24,7
 2048 80930100          sts L13,R24
 204C           ;                                       break;
 204C 87C6              xjmp L90
 204E           L402:
 204E           ; 				case 7:
 204E           ; 					_EffluentMotRun(15, 240);		// 2017-05-22 220->240
 204E 20EF              ldi R18,240
 2050 0FE0              ldi R16,15
 2052 10E0              ldi R17,0
 2054 0E947329          xcall __EffluentMotRun
 2058           ;                                       waitEffluent = 1;
 2058 81E0              ldi R24,1
 205A 80934A00          sts _waitEffluent,R24
 205E           ;                               //      if(sc < 3)                                              // 2017-05-23 sc < 3 -> sc < 1
 205E           ;                               //              workStep = 6;
 205E           ;                               //      else
 205E           ;                                               workStep = 10;
 205E 8AE0              ldi R24,10
 2060 80930100          sts L13,R24
 2064           ;                                       break;
 2064 7BC6              xjmp L90
 2066           L403:
 2066           ; 				case 10:		// 稀释模式清洗取样针内壁
 2066           ; 					//if(NewTestInfo.sampDiluteMult == 1)	// 2016-09-18
 2066           ; 					//_SampPumpMotRunTo(0, 220);			// 2016-09-18
 2066           ; 					_FluidMotRun(8, 100);		// 注入清洗液
 2066 24E6              ldi R18,100
 2068 08E0              ldi R16,8
 206A 10E0              ldi R17,0
 206C 0E944E29          xcall __FluidMotRun
 2070           ;                                       MotInitCheck(MOT_SAMP_PUMP);    // 样品注射器回零
 2070 0CE0              ldi R16,12
 2072 0E940000          xcall _MotInitCheck
 2076           ;                                       waitMotSampPump = 1;
 2076 81E0              ldi R24,1
 2078 80934D00          sts _waitMotSampPump,R24
 207C           ;                                       waitMotFluid = 1;
 207C 80934C00          sts _waitMotFluid,R24
 2080           ;                                       workStep = 11;
 2080 8BE0              ldi R24,11
 2082 80930100          sts L13,R24
 2086           ;                                       break;
 2086 6AC6              xjmp L90
 2088           L404:
 2088           ; 				case 11:
 2088           ; 					SetEValve(EV2,EV_CLOSE);
 2088 2227              clr R18
 208A 02E0              ldi R16,2
 208C 0E940000          xcall _SetEValve
 2090           ;                                       SetEValve(EV1,EV_OPEN);
 2090 21E0              ldi R18,1
 2092 01E0              ldi R16,1
 2094 0E940000          xcall _SetEValve
 2098           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 2); 
 2098 22E0              ldi R18,2
 209A 30E0              ldi R19,0
 209C 03E0              ldi R16,3
 209E 0E940000          xcall _SetDelayTime
 20A2           ;                                       workStep = 12;
 20A2 8CE0              ldi R24,12
 20A4 80930100          sts L13,R24
 20A8           ;                                       break;
 20A8 59C6              xjmp L90
 20AA           L405:
 20AA           ; 				case 12:		// 正常稀释模式 清洗取样针外壁
 20AA           ; 					SetEValve(EV2,EV_CLOSE);
 20AA 2227              clr R18
 20AC 02E0              ldi R16,2
 20AE 0E940000          xcall _SetEValve
 20B2           ;                                       SetEValve(EV1,EV_OPEN);
 20B2 21E0              ldi R18,1
 20B4 01E0              ldi R16,1
 20B6 0E940000          xcall _SetEValve
 20BA           ;                                       _FluidMotRun(8,120);                                    
 20BA 28E7              ldi R18,120
 20BC 08E0              ldi R16,8
 20BE 10E0              ldi R17,0
 20C0 0E944E29          xcall __FluidMotRun
 20C4           ;                                       waitMotFluid = 1;
 20C4 81E0              ldi R24,1
 20C6 80934C00          sts _waitMotFluid,R24
 20CA           ;                                       workStep = 13;
 20CA 8DE0              ldi R24,13
 20CC 80930100          sts L13,R24
 20D0           ;                                       break;
 20D0 45C6              xjmp L90
 20D2           L406:
 20D2           ; 				case 13:		// 启动负压
 20D2           ; 					checkFluid = 0;
 20D2 2224              clr R2
 20D4 20920400          sts L16,R2
 20D8           ;                                       SetEValve(EV3, EV_OPEN);
 20D8 21E0              ldi R18,1
 20DA 03E0              ldi R16,3
 20DC 0E940000          xcall _SetEValve
 20E0           ;                                       _EffluentMotRun(55, 240);               
 20E0 20EF              ldi R18,240
 20E2 07E3              ldi R16,55
 20E4 10E0              ldi R17,0
 20E6 0E947329          xcall __EffluentMotRun
 20EA           ;                                       workStep = 14;
 20EA 8EE0              ldi R24,14
 20EC 80930100          sts L13,R24
 20F0           ;                                       break;
 20F0 35C6              xjmp L90
 20F2           L407:
 20F2           ; 				case 14:		// 取样针上升，吸干清洗池
 20F2           ; 					_FluidMotRun(-1, 160);
 20F2 20EA              ldi R18,160
 20F4 0FEF              ldi R16,-1
 20F6 1FEF              ldi R17,-1
 20F8 0E944E29          xcall __FluidMotRun
 20FC           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 20FC 03E0              ldi R16,3
 20FE 0E940000          xcall _MotInitCheck
 2102           ;                                       waitMotSampNeedle = 1;
 2102 81E0              ldi R24,1
 2104 80934E00          sts _waitMotSampNeedle,R24
 2108           ;                                       waitMotFluid = 1;
 2108 80934C00          sts _waitMotFluid,R24
 210C           ;                                       if(NewTestInfo.sampDiluteMult ==13)
 210C 80915C00          lds R24,_NewTestInfo+7
 2110 8D30              cpi R24,13
 2112 39F4              brne L408
 2114           X162:
 2114           ; 					{
 2114           ; 						sc=4;
 2114 84E0              ldi R24,4
 2116 80930800          sts L20,R24
 211A           ;                                               workStep = 100;
 211A 84E6              ldi R24,100
 211C 80930100          sts L13,R24
 2120           ;                                       }
 2120 1DC6              xjmp L90
 2122           L408:
 2122           ; 					else
 2122           ; 					workStep = 15;
 2122 8FE0              ldi R24,15
 2124 80930100          sts L13,R24
 2128           ;                                       break;
 2128 19C6              xjmp L90
 212A           L411:
 212A           ; 					
 212A           ; 				case 100:
 212A           ; 				    sc--;
 212A 80910800          lds R24,L20
 212E 8150              subi R24,1
 2130 80930800          sts L20,R24
 2134           ;                                   SetEValve(EV3, EV_CLOSE);   // 废液泵转到排混匀池
 2134 2227              clr R18
 2136 03E0              ldi R16,3
 2138 0E940000          xcall _SetEValve
 213C           ;                                   _DiluentMotRun(16, 140);    
 213C 2CE8              ldi R18,140
 213E 00E1              ldi R16,16
 2140 10E0              ldi R17,0
 2142 0E948C29          xcall __DiluentMotRun
 2146           ;                                       workStep = 101;
 2146 85E6              ldi R24,101
 2148 80930100          sts L13,R24
 214C           ;                                       waitMotDiluent = 1;
 214C 81E0              ldi R24,1
 214E 80934B00          sts _waitMotDiluent,R24
 2152           ;                                       SetDelayTime(MOT_FLUID, 2);
 2152 22E0              ldi R18,2
 2154 30E0              ldi R19,0
 2156 0AE0              ldi R16,10
 2158 0E940000          xcall _SetDelayTime
 215C           ;                                       break;
 215C FFC5              xjmp L90
 215E           L412:
 215E           ; 				case 101:
 215E           ; 				    _EffluentMotRun(20, 240);	
 215E 20EF              ldi R18,240
 2160 04E1              ldi R16,20
 2162 10E0              ldi R17,0
 2164 0E947329          xcall __EffluentMotRun
 2168           ;                                       SetDelayTime(MOT_FLUID, 2);
 2168 22E0              ldi R18,2
 216A 30E0              ldi R19,0
 216C 0AE0              ldi R16,10
 216E 0E940000          xcall _SetDelayTime
 2172           ;                                       waitEffluent = 1;
 2172 81E0              ldi R24,1
 2174 80934A00          sts _waitEffluent,R24
 2178           ;                                       if(sc==0)
 2178 20900800          lds R2,L20
 217C 2220              tst R2
 217E 21F4              brne L413
 2180           X163:
 2180           ; 					workStep = 102;
 2180 86E6              ldi R24,102
 2182 80930100          sts L13,R24
 2186 EAC5              xjmp L90
 2188           L413:
 2188           ; 					else
 2188           ; 					workStep = 100;
 2188 84E6              ldi R24,100
 218A 80930100          sts L13,R24
 218E           ;                                       break;
 218E E6C5              xjmp L90
 2190           L415:
 2190           ; 				case 102:
 2190           ; 				    _DiluentMotRun(16, 140);					
 2190 2CE8              ldi R18,140
 2192 00E1              ldi R16,16
 2194 10E0              ldi R17,0
 2196 0E948C29          xcall __DiluentMotRun
 219A           ;                                       waitMotDiluent = 1;
 219A 81E0              ldi R24,1
 219C 80934B00          sts _waitMotDiluent,R24
 21A0           ;                                       SetDelayTime(MOT_FLUID, 2);
 21A0 22E0              ldi R18,2
 21A2 30E0              ldi R19,0
 21A4 0AE0              ldi R16,10
 21A6 0E940000          xcall _SetDelayTime
 21AA           ;                                       workStep = 103;
 21AA 87E6              ldi R24,103
 21AC 80930100          sts L13,R24
 21B0           ;                                       break;  
 21B0 D5C5              xjmp L90
 21B2           L416:
 21B2           ; 				case 103:
 21B2           ; 				    MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_BUTTOM - 150);
 21B2 2EEE              ldi R18,750
 21B4 32E0              ldi R19,2
 21B6 03E0              ldi R16,3
 21B8 0E940000          xcall _MotRunTo
 21BC           ;                                       waitMotSampNeedle = 1;
 21BC 81E0              ldi R24,1
 21BE 80934E00          sts _waitMotSampNeedle,R24
 21C2           ;                                       SetDelayTime(MOT_FLUID, 2);
 21C2 22E0              ldi R18,2
 21C4 30E0              ldi R19,0
 21C6 0AE0              ldi R16,10
 21C8 0E940000          xcall _SetDelayTime
 21CC           ;                                       workStep = 104;
 21CC 88E6              ldi R24,104
 21CE 80930100          sts L13,R24
 21D2           ;                                       break;
 21D2 C4C5              xjmp L90
 21D4           L417:
 21D4           ; 				case 104:
 21D4           ; 				    SetEValve(EV1,EV_CLOSE);
 21D4 2227              clr R18
 21D6 01E0              ldi R16,1
 21D8 0E940000          xcall _SetEValve
 21DC           ;                                       SetEValve(EV2, EV_OPEN);        // 开启清洗液取样针通道，准备由清洗液泵吸入高浓度清洗液
 21DC 21E0              ldi R18,1
 21DE 02E0              ldi R16,2
 21E0 0E940000          xcall _SetEValve
 21E4           ;                                       SetDelayTime(MOT_FLUID, 2);
 21E4 22E0              ldi R18,2
 21E6 30E0              ldi R19,0
 21E8 0AE0              ldi R16,10
 21EA 0E940000          xcall _SetDelayTime
 21EE           ;                                       
 21EE           ;                                       sc=6;                           
 21EE 86E0              ldi R24,6
 21F0 80930800          sts L20,R24
 21F4           ;                                       workStep = 105;
 21F4 89E6              ldi R24,105
 21F6 80930100          sts L13,R24
 21FA           ;                                       break;
 21FA B0C5              xjmp L90
 21FC           L418:
 21FC           ; 				case 105:
 21FC           ; 				    sc--;
 21FC 80910800          lds R24,L20
 2200 8150              subi R24,1
 2202 80930800          sts L20,R24
 2206           ;                                       MotRun(MOT_FLUID, -150);//吸
 2206 2AE6              ldi R18,-150
 2208 3FEF              ldi R19,-1
 220A 0AE0              ldi R16,10
 220C 0E940000          xcall _MotRun
 2210           ;                                       waitMotFluid = 1;
 2210 81E0              ldi R24,1
 2212 80934C00          sts _waitMotFluid,R24
 2216           ;                                       SetDelayTime(MOT_FLUID, 2);
 2216 22E0              ldi R18,2
 2218 30E0              ldi R19,0
 221A 0AE0              ldi R16,10
 221C 0E940000          xcall _SetDelayTime
 2220           ;                                       if(sc==0)
 2220 20900800          lds R2,L20
 2224 2220              tst R2
 2226 21F4              brne L419
 2228           X164:
 2228           ; 					workStep = 106;
 2228 8AE6              ldi R24,106
 222A 80930100          sts L13,R24
 222E 96C5              xjmp L90
 2230           L419:
 2230           ; 					else
 2230           ; 					workStep = 109;
 2230 8DE6              ldi R24,109
 2232 80930100          sts L13,R24
 2236           ;                                       break;
 2236 92C5              xjmp L90
 2238           L421:
 2238           ; 				case 109:
 2238           ; 				    MotRun(MOT_FLUID, 140);//吐
 2238 2CE8              ldi R18,140
 223A 30E0              ldi R19,0
 223C 0AE0              ldi R16,10
 223E 0E940000          xcall _MotRun
 2242           ;                                       SetDelayTime(MOT_FLUID, 2);
 2242 22E0              ldi R18,2
 2244 30E0              ldi R19,0
 2246 0AE0              ldi R16,10
 2248 0E940000          xcall _SetDelayTime
 224C           ;                                       waitMotFluid = 1;
 224C 81E0              ldi R24,1
 224E 80934C00          sts _waitMotFluid,R24
 2252           ;                                       workStep = 105;
 2252 89E6              ldi R24,105
 2254 80930100          sts L13,R24
 2258           ;                                       break;          
 2258 81C5              xjmp L90
 225A           L422:
 225A           ; 				case 106:
 225A           ; 				    SetEValve(EV2, EV_CLOSE);
 225A 2227              clr R18
 225C 02E0              ldi R16,2
 225E 0E940000          xcall _SetEValve
 2262           ;                                       SetEValve(EV1, EV_CLOSE);
 2262 2227              clr R18
 2264 01E0              ldi R16,1
 2266 0E940000          xcall _SetEValve
 226A           ;                                       SetEValve(EV3, EV_CLOSE);
 226A 2227              clr R18
 226C 03E0              ldi R16,3
 226E 0E940000          xcall _SetEValve
 2272           ;                                       SetDelayTime(MOT_FLUID, 2);
 2272 22E0              ldi R18,2
 2274 30E0              ldi R19,0
 2276 0AE0              ldi R16,10
 2278 0E940000          xcall _SetDelayTime
 227C           ;                                       workStep = 107;
 227C 8BE6              ldi R24,107
 227E 80930100          sts L13,R24
 2282           ;                                       break;
 2282 6CC5              xjmp L90
 2284           L423:
 2284           ; 				case 107:
 2284           ; 				    _EffluentMotRun(20, 240);	
 2284 20EF              ldi R18,240
 2286 04E1              ldi R16,20
 2288 10E0              ldi R17,0
 228A 0E947329          xcall __EffluentMotRun
 228E           ;                                       waitEffluent = 1;
 228E 81E0              ldi R24,1
 2290 80934A00          sts _waitEffluent,R24
 2294           ;                                       SetDelayTime(MOT_FLUID, 2);
 2294 22E0              ldi R18,2
 2296 30E0              ldi R19,0
 2298 0AE0              ldi R16,10
 229A 0E940000          xcall _SetDelayTime
 229E           ;                                       workStep = 108;
 229E 8CE6              ldi R24,108
 22A0 80930100          sts L13,R24
 22A4           ;                                       break;
 22A4 5BC5              xjmp L90
 22A6           L424:
 22A6           ; 					
 22A6           ; 				case 108:
 22A6           ; 				    MotInitCheck(MOT_SAMP_NEEDLE);
 22A6 03E0              ldi R16,3
 22A8 0E940000          xcall _MotInitCheck
 22AC           ;                                       waitMotSampNeedle = 1;
 22AC 81E0              ldi R24,1
 22AE 80934E00          sts _waitMotSampNeedle,R24
 22B2           ;                                       workStep = 15;
 22B2 8FE0              ldi R24,15
 22B4 80930100          sts L13,R24
 22B8           ;                                       break;
 22B8 51C5              xjmp L90
 22BA           L425:
 22BA           ; 				
 22BA           ; 				
 22BA           ; 				case 15:	// 取样臂旋转到取样位
 22BA           ; 					SetEValve(EV1,EV_CLOSE);
 22BA 2227              clr R18
 22BC 01E0              ldi R16,1
 22BE 0E940000          xcall _SetEValve
 22C2           ;                                       SetMotRunPam(MOT_SAMP_TRUN,255,5,CURRENT_SAMP_TRUN);
 22C2 84E0              ldi R24,4
 22C4 8A83              std y+2,R24
 22C6 85E0              ldi R24,5
 22C8 8883              std y+0,R24
 22CA 2FEF              ldi R18,255
 22CC 02E0              ldi R16,2
 22CE 0E940000          xcall _SetMotRunPam
 22D2           ;                                       MotRunTo(MOT_SAMP_TRUN, _POS_SAMPTURN_SAMP);
 22D2 24ED              ldi R18,980
 22D4 33E0              ldi R19,3
 22D6 02E0              ldi R16,2
 22D8 0E940000          xcall _MotRunTo
 22DC           ;                                       waitMotSampTurn = 1;
 22DC 81E0              ldi R24,1
 22DE 80934F00          sts _waitMotSampTurn,R24
 22E2           ;                                       workStep = 19;
 22E2 83E1              ldi R24,19
 22E4 80930100          sts L13,R24
 22E8           ;                                       break;
 22E8 39C5              xjmp L90
 22EA           L426:
 22EA           ; 				case 19:
 22EA           ; 					SetEValve(EV3, EV_CLOSE);	// 废液泵转到排混匀池
 22EA 2227              clr R18
 22EC 03E0              ldi R16,3
 22EE 0E940000          xcall _SetEValve
 22F2           ;                                       workStep = 16;
 22F2 80E1              ldi R24,16
 22F4 80930100          sts L13,R24
 22F8           ;                                       break;
 22F8 31C5              xjmp L90
 22FA           L427:
 22FA           ; 				case 16:	// 取样针下降到取样位
 22FA           ; 				//	if(InsertRingFlag == 0)		break;		// 试剂片未推进装盘
 22FA           ; 					InsertRingFlag = 0;
 22FA 2224              clr R2
 22FC 20920000          sts _InsertRingFlag,R2
 2300           ; #ifndef Puncture                              
 2300           ;                                       _NeedleMotRunTo(_POS_SAMP_DOWN, 255);
 2300 2FEF              ldi R18,255
 2302 08EA              ldi R16,1960
 2304 17E0              ldi R17,7
 2306 0E94E529          xcall __NeedleMotRunTo
 230A           ; #endif                                        
 230A           ;                                       // 预吸空气段
 230A           ;                                       MotRun(MOT_SAMP_PUMP, _SAMP_PUMP_INTERVAL + _SAMP_PUMP_AIR_ISOLATE);
 230A 28E6              ldi R18,360
 230C 31E0              ldi R19,1
 230E 0CE0              ldi R16,12
 2310 0E940000          xcall _MotRun
 2314           ;                                       waitMotSampNeedle = 1;
 2314 81E0              ldi R24,1
 2316 80934E00          sts _waitMotSampNeedle,R24
 231A           ;                                       workStep = 17;
 231A 81E1              ldi R24,17
 231C 80930100          sts L13,R24
 2320           ;                                       break;
 2320 1DC5              xjmp L90
 2322           L428:
 2322           ; 				case 17:	// 
 2322           ; 					SetBeepPrompt();
 2322 0E940000          xcall _SetBeepPrompt
 2326           ;                                       SetStateLedFree();
 2326 0E940000          xcall _SetStateLedFree
 232A           ;                                       workStep = 18;
 232A 82E1              ldi R24,18
 232C 80930100          sts L13,R24
 2330           ;                                       break;
 2330 15C5              xjmp L90
 2332           L429:
 2332           ; 				case 18:	// 结束
 2332           ; 					Uart0ReUnable;
 2332 8091C100          lds R24,193
 2336 8F7E              andi R24,239
 2338 8093C100          sts 193,R24
 233C           ;                                       uart_Printf("%s\r\n",strM3102);
 233C 20E0              ldi R18,<_strM3102
 233E 30E0              ldi R19,>_strM3102
 2340 00E0              ldi R16,<L88
 2342 10E0              ldi R17,>L88
 2344 0E940000          xcall _uart_Printf
 2348           ;                                       Uart0ReEnable;
 2348 8091C100          lds R24,193
 234C 8061              ori R24,16
 234E 8093C100          sts 193,R24
 2352           ;                                       mainStep = 1;
 2352 81E0              ldi R24,1
 2354 80930000          sts L12,R24
 2358           ;                                       workStep = 0;
 2358 2224              clr R2
 235A 20920100          sts L13,R2
 235E           ;                                       break;
 235E           ;                               }
 235E           ;                       break;
 235E FEC4              xjmp L90
 2360           L432:
 2360           ; 		case 10:	// 结束退出
 2360           ; 			switch(workStep){
 2360 A0900100          lds R10,L13
 2364 BB24              clr R11
 2366 AA20              tst R10
 2368 11F4              brne X165
 236A BB20              tst R11
 236C 51F0              breq L436
 236E           X165:
 236E C501              movw R24,R10
 2370 8130              cpi R24,1
 2372 E0E0              ldi R30,0
 2374 9E07              cpc R25,R30
 2376 C9F0              breq L437
 2378           X166:
 2378 8230              cpi R24,2
 237A E0E0              ldi R30,0
 237C 9E07              cpc R25,R30
 237E 59F1              breq L438
 2380           X167:
 2380 31C0              xjmp L434
 2382           L436:
 2382           ; 				case 0:
 2382           ; 					_EffluentMotRun(30, 220);
 2382 2CED              ldi R18,220
 2384 0EE1              ldi R16,30
 2386 10E0              ldi R17,0
 2388 0E947329          xcall __EffluentMotRun
 238C           ;                                       _NeedleMotRunTo(0, 180);//240
 238C 24EB              ldi R18,180
 238E 0027              clr R16
 2390 1127              clr R17
 2392 0E94E529          xcall __NeedleMotRunTo
 2396           ;                                       waitMotSampNeedle = 1;
 2396 81E0              ldi R24,1
 2398 80934E00          sts _waitMotSampNeedle,R24
 239C           ;                                       workStep = 1;
 239C 80930100          sts L13,R24
 23A0           ;                                       TestALampClose();       // 关闭光源
 23A0 0E940000          xcall _TestALampClose
 23A4           ;                                       SetStateLedBusy();      // 状态指示灯为红
 23A4 0E940000          xcall _SetStateLedBusy
 23A8           ;                                       break;
 23A8 1DC0              xjmp L434
 23AA           L437:
 23AA           ; 				case 1:
 23AA           ; 					SetMotRunPam(MOT_SAMP_TRUN,255,10,CURRENT_SAMP_TRUN);
 23AA 84E0              ldi R24,4
 23AC 8A83              std y+2,R24
 23AE 8AE0              ldi R24,10
 23B0 8883              std y+0,R24
 23B2 2FEF              ldi R18,255
 23B4 02E0              ldi R16,2
 23B6 0E940000          xcall _SetMotRunPam
 23BA           ;                                       MotRunTo(MOT_SAMP_TRUN,0);
 23BA 2227              clr R18
 23BC 3327              clr R19
 23BE 02E0              ldi R16,2
 23C0 0E940000          xcall _MotRunTo
 23C4           ;                                       waitMotSampTurn = 1;
 23C4 81E0              ldi R24,1
 23C6 80934F00          sts _waitMotSampTurn,R24
 23CA           ;                                       waitEffluent = 1;
 23CA 80934A00          sts _waitEffluent,R24
 23CE           ;                                       workStep = 2;
 23CE 82E0              ldi R24,2
 23D0 80930100          sts L13,R24
 23D4           ;                                       break;
 23D4 07C0              xjmp L434
 23D6           L438:
 23D6           ; 				case 2:
 23D6           ; 					mainStep = 0;
 23D6 2224              clr R2
 23D8 20920000          sts L12,R2
 23DC           ;                                       workStep = 0;
 23DC 20920100          sts L13,R2
 23E0           ;                                       return 2;
 23E0 02E0              ldi R16,2
 23E2 BDC4              xjmp L11
 23E4           L434:
 23E4           ; 					break;
 23E4           ; 				default:
 23E4           ; 					break;
 23E4           ; 				}
 23E4           ; 			return 1;
 23E4 01E0              ldi R16,1
 23E6 BBC4              xjmp L11
 23E8           L439:
 23E8           ; 			break;
 23E8           ; 		case 11:	// 异常处理
 23E8           ; 			switch(workStep){
 23E8 A0900100          lds R10,L13
 23EC BB24              clr R11
 23EE AA20              tst R10
 23F0 11F4              brne X168
 23F2 BB20              tst R11
 23F4 11F1              breq L443
 23F6           X168:
 23F6 C501              movw R24,R10
 23F8 8130              cpi R24,1
 23FA E0E0              ldi R30,0
 23FC 9E07              cpc R25,R30
 23FE 31F1              breq L444
 2400           X169:
 2400 8230              cpi R24,2
 2402 E0E0              ldi R30,0
 2404 9E07              cpc R25,R30
 2406 49F1              breq L445
 2408           X170:
 2408 8330              cpi R24,3
 240A E0E0              ldi R30,0
 240C 9E07              cpc R25,R30
 240E 89F1              breq L446
 2410           X171:
 2410 8430              cpi R24,4
 2412 E0E0              ldi R30,0
 2414 9E07              cpc R25,R30
 2416 09F4              brne X288
 2418 3CC0              xjmp L447
 241A           X288:
 241A           X172:
 241A 8530              cpi R24,5
 241C E0E0              ldi R30,0
 241E 9E07              cpc R25,R30
 2420 09F4              brne X289
 2422 41C0              xjmp L448
 2424           X289:
 2424           X173:
 2424 8630              cpi R24,6
 2426 E0E0              ldi R30,0
 2428 9E07              cpc R25,R30
 242A 09F4              brne X290
 242C 4AC0              xjmp L449
 242E           X290:
 242E           X174:
 242E 8730              cpi R24,7
 2430 E0E0              ldi R30,0
 2432 9E07              cpc R25,R30
 2434 09F4              brne X291
 2436 51C0              xjmp L450
 2438           X291:
 2438           X175:
 2438 91C4              xjmp L90
 243A           L443:
 243A           ; 				case 0:		// 停止当前运行
 243A           ; 					SetDelayTime(MOT_EFFLUENT, 30);
 243A 2EE1              ldi R18,30
 243C 30E0              ldi R19,0
 243E 0BE0              ldi R16,11
 2440 0E940000          xcall _SetDelayTime
 2444           ;                                       workStep = 1;
 2444 81E0              ldi R24,1
 2446 80930100          sts L13,R24
 244A           ;                                       break;
 244A 88C4              xjmp L90
 244C           L444:
 244C           ; 				case 1:		// 废液泵延迟停止
 244C           ; 					MotStop(MOT_EFFLUENT);
 244C 0BE0              ldi R16,11
 244E 0E940000          xcall _MotStop
 2452           ;                                       workStep = 2;
 2452 82E0              ldi R24,2
 2454 80930100          sts L13,R24
 2458           ;                                       break;
 2458 81C4              xjmp L90
 245A           L445:
 245A           ; 				case 2:		// 取样针回到起始点
 245A           ; 					_NeedleMotRunTo(0, 180);//240
 245A 24EB              ldi R18,180
 245C 0027              clr R16
 245E 1127              clr R17
 2460 0E94E529          xcall __NeedleMotRunTo
 2464           ;                                       waitMotSampNeedle = 1;
 2464 81E0              ldi R24,1
 2466 80934E00          sts _waitMotSampNeedle,R24
 246A           ;                                       workStep = 3;
 246A 83E0              ldi R24,3
 246C 80930100          sts L13,R24
 2470           ;                                       break;
 2470 75C4              xjmp L90
 2472           L446:
 2472           ; 				case 3:		// 废液泵排液
 2472           ; 					SetEValve(EV_ALL, EV_CLOSE);
 2472 2227              clr R18
 2474 0027              clr R16
 2476 0E940000          xcall _SetEValve
 247A           ;                                       _EffluentMotRun(30, 200);
 247A 28EC              ldi R18,200
 247C 0EE1              ldi R16,30
 247E 10E0              ldi R17,0
 2480 0E947329          xcall __EffluentMotRun
 2484           ;                                       waitEffluent = 1;
 2484 81E0              ldi R24,1
 2486 80934A00          sts _waitEffluent,R24
 248A           ;                                       workStep = 4;
 248A 84E0              ldi R24,4
 248C 80930100          sts L13,R24
 2490           ;                                       break;
 2490 65C4              xjmp L90
 2492           L447:
 2492           ; 				case 4:		// 取样针运行到清洗池上方
 2492           ; 					MotInitCheck(MOT_SAMP_TRUN);
 2492 02E0              ldi R16,2
 2494 0E940000          xcall _MotInitCheck
 2498           ;                               //      MotRunTo(MOT_SAMP_TRUN,0);
 2498           ;                                       waitMotSampTurn = 1;
 2498 81E0              ldi R24,1
 249A 80934F00          sts _waitMotSampTurn,R24
 249E           ;                                       workStep = 5;
 249E 85E0              ldi R24,5
 24A0 80930100          sts L13,R24
 24A4           ;                                       break;
 24A4 5BC4              xjmp L90
 24A6           L448:
 24A6           ; 				case 5:
 24A6           ; 					
 24A6           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 24A6 20913A00          lds R18,_NeedleOnMixCenterPos
 24AA 30913B00          lds R19,_NeedleOnMixCenterPos+1
 24AE 02E0              ldi R16,2
 24B0 0E940000          xcall _MotRunTo
 24B4           ;                                       waitMotSampTurn = 1;
 24B4 81E0              ldi R24,1
 24B6 80934F00          sts _waitMotSampTurn,R24
 24BA           ;                                       workStep = 6;
 24BA 86E0              ldi R24,6
 24BC 80930100          sts L13,R24
 24C0           ;                                       break;
 24C0 4DC4              xjmp L90
 24C2           L449:
 24C2           ; 				case 6:		// 取样针下降到清洗池中准备清洗
 24C2           ; 					_NeedleMotRunTo(_POS_MIX_TOP, 180);//240
 24C2 24EB              ldi R18,180
 24C4 08E6              ldi R16,360
 24C6 11E0              ldi R17,1
 24C8 0E94E529          xcall __NeedleMotRunTo
 24CC           ;                                       waitMotSampNeedle = 1;
 24CC 81E0              ldi R24,1
 24CE 80934E00          sts _waitMotSampNeedle,R24
 24D2           ;                                       workStep = 7;
 24D2 87E0              ldi R24,7
 24D4 80930100          sts L13,R24
 24D8           ;                                       break;
 24D8 41C4              xjmp L90
 24DA           L450:
 24DA           ; 				case 7:		// 注入清洗液到混匀池中，然后跳转到正常的测试结束清洗程序，继续运行正常程序
 24DA           ; 					_FluidMotRun(10, 80);		// 开启清洗液洗混匀池,注入1.4mL清洗液
 24DA 20E5              ldi R18,80
 24DC 0AE0              ldi R16,10
 24DE 10E0              ldi R17,0
 24E0 0E944E29          xcall __FluidMotRun
 24E4           ;                                       waitMotFluid = 1;       // 等待清洗液注入混匀池完毕
 24E4 81E0              ldi R24,1
 24E6 80934C00          sts _waitMotFluid,R24
 24EA           ;                                       mainStep = 9;           // 直接进入清洗
 24EA 89E0              ldi R24,9
 24EC 80930000          sts L12,R24
 24F0           ;                                       workStep = 6;
 24F0 86E0              ldi R24,6
 24F2 80930100          sts L13,R24
 24F6           ;                                       InsertRingFlag = 1;     // 保证吸样针下来
 24F6 81E0              ldi R24,1
 24F8 80930000          sts _InsertRingFlag,R24
 24FC           ;                                       break;
 24FC           ;                               default:
 24FC           ;                                       break;
 24FC           ;                               }
 24FC           ;                       break;
 24FC 2FC4              xjmp L90
 24FE           L451:
 24FE           ; 		case 12:	// 清洗液空
 24FE           ; 			switch(workStep){
 24FE A0900100          lds R10,L13
 2502 BB24              clr R11
 2504 AA20              tst R10
 2506 19F4              brne X176
 2508 BB20              tst R11
 250A 09F4              brne X292
 250C 2FC0              xjmp L455
 250E           X292:
 250E           X176:
 250E C501              movw R24,R10
 2510 8130              cpi R24,1
 2512 E0E0              ldi R30,0
 2514 9E07              cpc R25,R30
 2516 09F4              brne X293
 2518 7FC0              xjmp L465
 251A           X293:
 251A           X177:
 251A 8230              cpi R24,2
 251C E0E0              ldi R30,0
 251E 9E07              cpc R25,R30
 2520 09F4              brne X294
 2522 81C0              xjmp L466
 2524           X294:
 2524           X178:
 2524 8330              cpi R24,3
 2526 E0E0              ldi R30,0
 2528 9E07              cpc R25,R30
 252A 09F4              brne X295
 252C 8CC0              xjmp L467
 252E           X295:
 252E           X179:
 252E 8430              cpi R24,4
 2530 E0E0              ldi R30,0
 2532 9E07              cpc R25,R30
 2534 09F4              brne X296
 2536 91C0              xjmp L468
 2538           X296:
 2538           X180:
 2538 8530              cpi R24,5
 253A E0E0              ldi R30,0
 253C 9E07              cpc R25,R30
 253E 09F4              brne X297
 2540 98C0              xjmp L469
 2542           X297:
 2542           X181:
 2542 8630              cpi R24,6
 2544 E0E0              ldi R30,0
 2546 9E07              cpc R25,R30
 2548 09F4              brne X298
 254A A1C0              xjmp L470
 254C           X298:
 254C           X182:
 254C 8730              cpi R24,7
 254E E0E0              ldi R30,0
 2550 9E07              cpc R25,R30
 2552 09F4              brne X299
 2554 ACC0              xjmp L471
 2556           X299:
 2556           X183:
 2556 8830              cpi R24,8
 2558 E0E0              ldi R30,0
 255A 9E07              cpc R25,R30
 255C 09F4              brne X300
 255E BAC0              xjmp L472
 2560           X300:
 2560           X184:
 2560 8930              cpi R24,9
 2562 E0E0              ldi R30,0
 2564 9E07              cpc R25,R30
 2566 09F4              brne X301
 2568 BDC0              xjmp L473
 256A           X301:
 256A           X185:
 256A F8C3              xjmp L90
 256C           L455:
 256C           ; 				case 0:
 256C           ; 					if(0 == CleanMode)
 256C 20900B00          lds R2,_CleanMode
 2570 2220              tst R2
 2572 E9F4              brne L456
 2574           X186:
 2574           ; 					{
 2574           ; #ifndef UartSendLong
 2574           ; 					Uart0ReUnable;
 2574           ; 					uart_Printf("!3901 $%8d\r\n", NewTestInfo.testSerial);
 2574           ; 					Uart0ReEnable;
 2574           ; #else
 2574           ; 					Uart0ReUnable;
 2574 8091C100          lds R24,193
 2578 8F7E              andi R24,239
 257A 8093C100          sts 193,R24
 257E           ;                                       uart_Printf("!3901 $ ");
 257E 00E0              ldi R16,<L458
 2580 10E0              ldi R17,>L458
 2582 0E940000          xcall _uart_Printf
 2586           ;                                       uart0SendInt(NewTestInfo.testSerial);
 2586 20915800          lds R18,_NewTestInfo+1+2
 258A 30915900          lds R19,_NewTestInfo+1+2+1
 258E 00915600          lds R16,_NewTestInfo+1
 2592 10915700          lds R17,_NewTestInfo+1+1
 2596 0E940000          xcall _uart0SendInt
 259A           ;                                       uart_Printf("\r\n");
 259A 00E0              ldi R16,<L211
 259C 10E0              ldi R17,>L211
 259E 0E940000          xcall _uart_Printf
 25A2           ;                                       Uart0ReEnable;
 25A2 8091C100          lds R24,193
 25A6 8061              ori R24,16
 25A8 8093C100          sts 193,R24
 25AC           ; #endif        
 25AC           ;                                       }
 25AC 26C0              xjmp L457
 25AE           L456:
 25AE           ; 					else
 25AE           ; 					{
 25AE           ; 						if(1 == CleanMode)
 25AE 80910B00          lds R24,_CleanMode
 25B2 8130              cpi R24,1
 25B4 21F4              brne L460
 25B6           X187:
 25B6           ; 							CleanMode = 250;
 25B6 8AEF              ldi R24,250
 25B8 80930B00          sts _CleanMode,R24
 25BC 07C0              xjmp L461
 25BE           L460:
 25BE           ; 						else if(2 == CleanMode)
 25BE 80910B00          lds R24,_CleanMode
 25C2 8230              cpi R24,2
 25C4 19F4              brne L462
 25C6           X188:
 25C6           ; 							CleanMode = 255;
 25C6 8FEF              ldi R24,255
 25C8 80930B00          sts _CleanMode,R24
 25CC           L462:
 25CC           L461:
 25CC           ; 						Uart0ReUnable;
 25CC 8091C100          lds R24,193
 25D0 8F7E              andi R24,239
 25D2 8093C100          sts 193,R24
 25D6           ;                                               uart_Printf("%s \r\n", strE3905);
 25D6 20E0              ldi R18,<_strE3905
 25D8 30E0              ldi R19,>_strE3905
 25DA 00E0              ldi R16,<L464
 25DC 10E0              ldi R17,>L464
 25DE 0E940000          xcall _uart_Printf
 25E2           ;                                               Uart0ReEnable;
 25E2 8091C100          lds R24,193
 25E6 8061              ori R24,16
 25E8 8093C100          sts 193,R24
 25EC           ;                                               mainStep = 0;
 25EC 2224              clr R2
 25EE 20920000          sts L12,R2
 25F2           ;                                               workStep = 16;
 25F2 80E1              ldi R24,16
 25F4 80930100          sts L13,R24
 25F8           ;                                               break;
 25F8 B1C3              xjmp L90
 25FA           L457:
 25FA           ; 					}
 25FA           ; 					MotStop(MOT_SAMP_NEEDLE);
 25FA 03E0              ldi R16,3
 25FC 0E940000          xcall _MotStop
 2600           ;                                       MotStop(MOT_FLUID);
 2600 0AE0              ldi R16,10
 2602 0E940000          xcall _MotStop
 2606           ;                                       SetDelayTime(MOT_EFFLUENT, 30);
 2606 2EE1              ldi R18,30
 2608 30E0              ldi R19,0
 260A 0BE0              ldi R16,11
 260C 0E940000          xcall _SetDelayTime
 2610           ;                                       workStep = 1;
 2610 81E0              ldi R24,1
 2612 80930100          sts L13,R24
 2616           ;                                       break;
 2616 A2C3              xjmp L90
 2618           L465:
 2618           ; 				case 1:
 2618           ; 					MotStop(MOT_EFFLUENT);
 2618 0BE0              ldi R16,11
 261A 0E940000          xcall _MotStop
 261E           ;                                       workStep = 2;
 261E 82E0              ldi R24,2
 2620 80930100          sts L13,R24
 2624           ;                                       break;
 2624 9BC3              xjmp L90
 2626           L466:
 2626           ; 				case 2:
 2626           ; 					SetEValve(EV_ALL, EV_CLOSE);
 2626 2227              clr R18
 2628 0027              clr R16
 262A 0E940000          xcall _SetEValve
 262E           ;                                       _EffluentMotRun(30, 200);
 262E 28EC              ldi R18,200
 2630 0EE1              ldi R16,30
 2632 10E0              ldi R17,0
 2634 0E947329          xcall __EffluentMotRun
 2638           ;                                       waitEffluent = 1;
 2638 81E0              ldi R24,1
 263A 80934A00          sts _waitEffluent,R24
 263E           ;                                       workStep = 3;
 263E 83E0              ldi R24,3
 2640 80930100          sts L13,R24
 2644           ;                                       break;
 2644 8BC3              xjmp L90
 2646           L467:
 2646           ; 				case 3:
 2646           ; 					MotInitCheck(MOT_SAMP_NEEDLE);
 2646 03E0              ldi R16,3
 2648 0E940000          xcall _MotInitCheck
 264C           ;                                       waitMotSampNeedle = 1;
 264C 81E0              ldi R24,1
 264E 80934E00          sts _waitMotSampNeedle,R24
 2652           ;                                       workStep = 4;
 2652 84E0              ldi R24,4
 2654 80930100          sts L13,R24
 2658           ;                                       break;
 2658 81C3              xjmp L90
 265A           L468:
 265A           ; 				case 4:	// 取样针回到起始点
 265A           ; 					MotRunTo(MOT_SAMP_TRUN,0);
 265A 2227              clr R18
 265C 3327              clr R19
 265E 02E0              ldi R16,2
 2660 0E940000          xcall _MotRunTo
 2664           ;                                       waitMotSampTurn = 1;
 2664 81E0              ldi R24,1
 2666 80934F00          sts _waitMotSampTurn,R24
 266A           ;                                       workStep = 5;
 266A 85E0              ldi R24,5
 266C 80930100          sts L13,R24
 2670           ;                                       break;
 2670 75C3              xjmp L90
 2672           L469:
 2672           ; 				case 5:	// 取样针运行到混匀池中准备清洗针内壁
 2672           ; 					MotRunTo(MOT_SAMP_TRUN,NeedleOnMixCenterPos);
 2672 20913A00          lds R18,_NeedleOnMixCenterPos
 2676 30913B00          lds R19,_NeedleOnMixCenterPos+1
 267A 02E0              ldi R16,2
 267C 0E940000          xcall _MotRunTo
 2680           ;                                       waitMotSampTurn = 1;
 2680 81E0              ldi R24,1
 2682 80934F00          sts _waitMotSampTurn,R24
 2686           ;                                       workStep = 6;
 2686 86E0              ldi R24,6
 2688 80930100          sts L13,R24
 268C           ;                                       break;
 268C 67C3              xjmp L90
 268E           L470:
 268E           ; 				case 6:
 268E           ; 					_NeedleMotRunTo(_POS_MIX_TOP, 200);//240
 268E 28EC              ldi R18,200
 2690 08E6              ldi R16,360
 2692 11E0              ldi R17,1
 2694 0E94E529          xcall __NeedleMotRunTo
 2698           ;                                       SetEValve(EV2, EV_OPEN);
 2698 21E0              ldi R18,1
 269A 02E0              ldi R16,2
 269C 0E940000          xcall _SetEValve
 26A0           ;                                       waitMotSampNeedle = 1;
 26A0 81E0              ldi R24,1
 26A2 80934E00          sts _waitMotSampNeedle,R24
 26A6           ;                                       workStep = 7;
 26A6 87E0              ldi R24,7
 26A8 80930100          sts L13,R24
 26AC           ;                                       break;
 26AC 57C3              xjmp L90
 26AE           L471:
 26AE           ; 				case 7:
 26AE           ; 					_FluidMotRun(10, 60);		// 开启清洗液洗混匀池,注入1.4mL清洗液
 26AE 2CE3              ldi R18,60
 26B0 0AE0              ldi R16,10
 26B2 10E0              ldi R17,0
 26B4 0E944E29          xcall __FluidMotRun
 26B8           ;                                       _EffluentMotRun(20, 80);
 26B8 20E5              ldi R18,80
 26BA 04E1              ldi R16,20
 26BC 10E0              ldi R17,0
 26BE 0E947329          xcall __EffluentMotRun
 26C2           ;                                       waitMotFluid = 1;       // 等待清洗液注入混匀池完毕
 26C2 81E0              ldi R24,1
 26C4 80934C00          sts _waitMotFluid,R24
 26C8           ;                                       waitEffluent = 1;
 26C8 80934A00          sts _waitEffluent,R24
 26CC           ;                                       workStep = 8;
 26CC 88E0              ldi R24,8
 26CE 80930100          sts L13,R24
 26D2           ;                                       break;
 26D2 44C3              xjmp L90
 26D4           L472:
 26D4           ; 				case 8:
 26D4           ; 					SetEValve(EV_ALL, EV_CLOSE);
 26D4 2227              clr R18
 26D6 0027              clr R16
 26D8 0E940000          xcall _SetEValve
 26DC           ;                                       workStep = 9;
 26DC 89E0              ldi R24,9
 26DE 80930100          sts L13,R24
 26E2           ;                                       break;
 26E2 3CC3              xjmp L90
 26E4           L473:
 26E4           ; 				case 9:
 26E4           ; 					SetDelayTime(MOT_EFFLUENT, 2);
 26E4 22E0              ldi R18,2
 26E6 30E0              ldi R19,0
 26E8 0BE0              ldi R16,11
 26EA 0E940000          xcall _SetDelayTime
 26EE           ;                                       ucTmp = _PrimingFluid();
 26EE 0E94BC2C          xcall __PrimingFluid
 26F2 5801              movw R10,R16
 26F4 A0920600          sts L18,R10
 26F8           ;                                       if(ucTmp == 1){ // 自动灌注完成
 26F8 0130              cpi R16,1
 26FA 39F4              brne L474
 26FC           X189:
 26FC           ; 						workStep = 3;
 26FC 83E0              ldi R24,3
 26FE 80930100          sts L13,R24
 2702           ;                                               mainStep = 11;
 2702 8BE0              ldi R24,11
 2704 80930000          sts L12,R24
 2708           ;                                               }
 2708 29C3              xjmp L90
 270A           L474:
 270A           ; 					else if(ucTmp == 0xff){		// 自动灌注失败，进入程序开始阶段等待手动开始液体灌注
 270A 80910600          lds R24,L18
 270E 8F3F              cpi R24,255
 2710 09F0              breq X302
 2712 24C3              xjmp L90
 2714           X302:
 2714           X190:
 2714           ; 					/*
 2714           ; #ifndef UartSendLong
 2714           ; 						Uart0ReUnable;
 2714           ; 						uart_Printf("%s $%8d\r\n", strE3902,NewTestInfo.testSerial);
 2714           ; 						Uart0ReEnable;
 2714           ; #else
 2714           ; 						Uart0ReUnable;
 2714           ; 						uart_Printf("%s $ ",strE3902);
 2714           ; 						uart0SendInt(NewTestInfo.testSerial);
 2714           ; 						uart_Printf("\r\n");
 2714           ; 						Uart0ReEnable;
 2714           ; #endif
 2714           ; 					*/
 2714           ; 						Uart0ReUnable;
 2714 8091C100          lds R24,193
 2718 8F7E              andi R24,239
 271A 8093C100          sts 193,R24
 271E           ;                                               uart_Printf("%s\r\n", strE3902);
 271E 20E0              ldi R18,<_strE3902
 2720 30E0              ldi R19,>_strE3902
 2722 00E0              ldi R16,<L88
 2724 10E0              ldi R17,>L88
 2726 0E940000          xcall _uart_Printf
 272A           ;                                               Uart0ReEnable;
 272A 8091C100          lds R24,193
 272E 8061              ori R24,16
 2730 8093C100          sts 193,R24
 2734           ;                                               mainStep = 0;
 2734 2224              clr R2
 2736 20920000          sts L12,R2
 273A           ;                                               workStep = 1;
 273A 81E0              ldi R24,1
 273C 80930100          sts L13,R24
 2740           ;                                               }
 2740           ;                                       break;
 2740           ;                               default:
 2740           ;                                       break;
 2740           ;                               }
 2740           ;                       break;
 2740 0DC3              xjmp L90
 2742           L478:
 2742           ; 		case 13:	// 稀释液空
 2742           ; 			switch(workStep){
 2742 A0900100          lds R10,L13
 2746 BB24              clr R11
 2748 AA20              tst R10
 274A 19F4              brne X191
 274C BB20              tst R11
 274E 09F4              brne X303
 2750 2FC0              xjmp L482
 2752           X303:
 2752           X191:
 2752 C501              movw R24,R10
 2754 8130              cpi R24,1
 2756 E0E0              ldi R30,0
 2758 9E07              cpc R25,R30
 275A 09F4              brne X304
 275C 54C0              xjmp L485
 275E           X304:
 275E           X192:
 275E 8230              cpi R24,2
 2760 E0E0              ldi R30,0
 2762 9E07              cpc R25,R30
 2764 09F4              brne X305
 2766 56C0              xjmp L486
 2768           X305:
 2768           X193:
 2768 8330              cpi R24,3
 276A E0E0              ldi R30,0
 276C 9E07              cpc R25,R30
 276E 09F4              brne X306
 2770 61C0              xjmp L487
 2772           X306:
 2772           X194:
 2772 8430              cpi R24,4
 2774 E0E0              ldi R30,0
 2776 9E07              cpc R25,R30
 2778 09F4              brne X307
 277A 66C0              xjmp L488
 277C           X307:
 277C           X195:
 277C 8530              cpi R24,5
 277E E0E0              ldi R30,0
 2780 9E07              cpc R25,R30
 2782 09F4              brne X308
 2784 6DC0              xjmp L489
 2786           X308:
 2786           X196:
 2786 8630              cpi R24,6
 2788 E0E0              ldi R30,0
 278A 9E07              cpc R25,R30
 278C 09F4              brne X309
 278E 76C0              xjmp L490
 2790           X309:
 2790           X197:
 2790 8730              cpi R24,7
 2792 E0E0              ldi R30,0
 2794 9E07              cpc R25,R30
 2796 09F4              brne X310
 2798 81C0              xjmp L491
 279A           X310:
 279A           X198:
 279A 8830              cpi R24,8
 279C E0E0              ldi R30,0
 279E 9E07              cpc R25,R30
 27A0 09F4              brne X311
 27A2 8FC0              xjmp L492
 27A4           X311:
 27A4           X199:
 27A4 8930              cpi R24,9
 27A6 E0E0              ldi R30,0
 27A8 9E07              cpc R25,R30
 27AA 09F4              brne X312
 27AC 92C0              xjmp L493
 27AE           X312:
 27AE           X200:
 27AE D6C2              xjmp L90
 27B0           L482:
 27B0           ; 				case 0:
 27B0           ; #ifndef UartSendLong
 27B0           ; 					Uart0ReUnable;
 27B0           ; 					uart_Printf("!3903 $%8d\r\n", NewTestInfo.testSerial);
 27B0           ; 					Uart0ReEnable;
 27B0           ; #else
 27B0           ; 					Uart0ReUnable;
 27B0 8091C100          lds R24,193
 27B4 8F7E              andi R24,239
 27B6 8093C100          sts 193,R24
 27BA           ;                                       uart_Printf("!3903 $ ");
 27BA 00E0              ldi R16,<L483
 27BC 10E0              ldi R17,>L483
 27BE 0E940000          xcall _uart_Printf
 27C2           ;                                       uart0SendInt(NewTestInfo.testSerial);
 27C2 20915800          lds R18,_NewTestInfo+1+2
 27C6 30915900          lds R19,_NewTestInfo+1+2+1
 27CA 00915600          lds R16,_NewTestInfo+1
 27CE 10915700          lds R17,_NewTestInfo+1+1
 27D2 0E940000          xcall _uart0SendInt
 27D6           ;                                       uart_Printf("\r\n");
 27D6 00E0              ldi R16,<L211
 27D8 10E0              ldi R17,>L211
 27DA 0E940000          xcall _uart_Printf
 27DE           ;                                       Uart0ReEnable;
 27DE 8091C100          lds R24,193
 27E2 8061              ori R24,16
 27E4 8093C100          sts 193,R24
 27E8           ; #endif
 27E8           ;                                       MotStop(MOT_SAMP_NEEDLE);
 27E8 03E0              ldi R16,3
 27EA 0E940000          xcall _MotStop
 27EE           ;                                       MotStop(MOT_DILUENT);
 27EE 09E0              ldi R16,9
 27F0 0E940000          xcall _MotStop
 27F4           ;                                       SetDelayTime(MOT_EFFLUENT, 30);
 27F4 2EE1              ldi R18,30
 27F6 30E0              ldi R19,0
 27F8 0BE0              ldi R16,11
 27FA 0E940000          xcall _SetDelayTime
 27FE           ;                                       workStep = 1;
 27FE 81E0              ldi R24,1
 2800 80930100          sts L13,R24
 2804           ;                                       break;
 2804 ABC2              xjmp L90
 2806           L485:
 2806           ; 				case 1:
 2806           ; 					MotStop(MOT_EFFLUENT);
 2806 0BE0              ldi R16,11
 2808 0E940000          xcall _MotStop
 280C           ;                                       workStep = 2;
 280C 82E0              ldi R24,2
 280E 80930100          sts L13,R24
 2812           ;                                       break;
 2812 A4C2              xjmp L90
 2814           L486:
 2814           ; 				case 2:
 2814           ; 					SetEValve(EV_ALL, EV_CLOSE);
 2814 2227              clr R18
 2816 0027              clr R16
 2818 0E940000          xcall _SetEValve
 281C           ;                                       _EffluentMotRun(30, 200);
 281C 28EC              ldi R18,200
 281E 0EE1              ldi R16,30
 2820 10E0              ldi R17,0
 2822 0E947329          xcall __EffluentMotRun
 2826           ;                                       waitEffluent = 1;
 2826 81E0              ldi R24,1
 2828 80934A00          sts _waitEffluent,R24
 282C           ;                                       workStep = 3;
 282C 83E0              ldi R24,3
 282E 80930100          sts L13,R24
 2832           ;                                       break;
 2832 94C2              xjmp L90
 2834           L487:
 2834           ; 				case 3:
 2834           ; 					MotInitCheck(MOT_SAMP_NEEDLE);
 2834 03E0              ldi R16,3
 2836 0E940000          xcall _MotInitCheck
 283A           ;                               //      _NeedleMotRunTo(0, 240);
 283A           ;                                       waitMotSampNeedle = 1;
 283A 81E0              ldi R24,1
 283C 80934E00          sts _waitMotSampNeedle,R24
 2840           ;                                       workStep = 4;
 2840 84E0              ldi R24,4
 2842 80930100          sts L13,R24
 2846           ;                                       break;
 2846 8AC2              xjmp L90
 2848           L488:
 2848           ; 				case 4:	// 取样针回到起始点
 2848           ; 					MotRunTo(MOT_SAMP_TRUN,0);
 2848 2227              clr R18
 284A 3327              clr R19
 284C 02E0              ldi R16,2
 284E 0E940000          xcall _MotRunTo
 2852           ;                                       waitMotSampTurn = 1;
 2852 81E0              ldi R24,1
 2854 80934F00          sts _waitMotSampTurn,R24
 2858           ;                                       workStep = 5;
 2858 85E0              ldi R24,5
 285A 80930100          sts L13,R24
 285E           ;                                       break;
 285E 7EC2              xjmp L90
 2860           L489:
 2860           ; 				case 5:	// 取样针运行到混匀池中准备清洗针内壁
 2860           ; 					MotRunTo(MOT_SAMP_TRUN,NeedleOnMixCenterPos);
 2860 20913A00          lds R18,_NeedleOnMixCenterPos
 2864 30913B00          lds R19,_NeedleOnMixCenterPos+1
 2868 02E0              ldi R16,2
 286A 0E940000          xcall _MotRunTo
 286E           ;                                       waitMotSampTurn = 1;
 286E 81E0              ldi R24,1
 2870 80934F00          sts _waitMotSampTurn,R24
 2874           ;                                       workStep = 6;
 2874 86E0              ldi R24,6
 2876 80930100          sts L13,R24
 287A           ;                                       break;
 287A 70C2              xjmp L90
 287C           L490:
 287C           ; 				case 6:
 287C           ; 					_NeedleMotRunTo(_POS_MIX_TOP, 180);//240
 287C 24EB              ldi R18,180
 287E 08E6              ldi R16,360
 2880 11E0              ldi R17,1
 2882 0E94E529          xcall __NeedleMotRunTo
 2886           ;                                       SetEValve(EV2, EV_OPEN);
 2886 21E0              ldi R18,1
 2888 02E0              ldi R16,2
 288A 0E940000          xcall _SetEValve
 288E           ;                                       waitMotSampNeedle = 1;
 288E 81E0              ldi R24,1
 2890 80934E00          sts _waitMotSampNeedle,R24
 2894           ;                                       workStep = 7;
 2894 87E0              ldi R24,7
 2896 80930100          sts L13,R24
 289A           ;                                       break;
 289A 60C2              xjmp L90
 289C           L491:
 289C           ; 				case 7:
 289C           ; 					_FluidMotRun(10, 60);		// 开启清洗液洗混匀池,注入1.4mL清洗液
 289C 2CE3              ldi R18,60
 289E 0AE0              ldi R16,10
 28A0 10E0              ldi R17,0
 28A2 0E944E29          xcall __FluidMotRun
 28A6           ;                                       _EffluentMotRun(20, 80);
 28A6 20E5              ldi R18,80
 28A8 04E1              ldi R16,20
 28AA 10E0              ldi R17,0
 28AC 0E947329          xcall __EffluentMotRun
 28B0           ;                                       waitMotFluid = 1;       // 等待清洗液注入混匀池完毕
 28B0 81E0              ldi R24,1
 28B2 80934C00          sts _waitMotFluid,R24
 28B6           ;                                       waitEffluent = 1;
 28B6 80934A00          sts _waitEffluent,R24
 28BA           ;                                       workStep = 8;
 28BA 88E0              ldi R24,8
 28BC 80930100          sts L13,R24
 28C0           ;                                       break;
 28C0 4DC2              xjmp L90
 28C2           L492:
 28C2           ; 				case 8:
 28C2           ; 					SetEValve(EV_ALL, EV_CLOSE);
 28C2 2227              clr R18
 28C4 0027              clr R16
 28C6 0E940000          xcall _SetEValve
 28CA           ;                                       workStep = 9;
 28CA 89E0              ldi R24,9
 28CC 80930100          sts L13,R24
 28D0           ;                                       break;
 28D0 45C2              xjmp L90
 28D2           L493:
 28D2           ; 				case 9:
 28D2           ; 					SetDelayTime(MOT_EFFLUENT, 2);
 28D2 22E0              ldi R18,2
 28D4 30E0              ldi R19,0
 28D6 0BE0              ldi R16,11
 28D8 0E940000          xcall _SetDelayTime
 28DC           ;                                       ucTmp = _PrimingDiluent();
 28DC 0E94892A          xcall __PrimingDiluent
 28E0 5801              movw R10,R16
 28E2 A0920600          sts L18,R10
 28E6           ;                                       if(ucTmp == 1){ // 灌注完成
 28E6 0130              cpi R16,1
 28E8 39F4              brne L494
 28EA           X201:
 28EA           ; 						workStep = 3;
 28EA 83E0              ldi R24,3
 28EC 80930100          sts L13,R24
 28F0           ;                                               mainStep = 11;
 28F0 8BE0              ldi R24,11
 28F2 80930000          sts L12,R24
 28F6           ;                                               }
 28F6 32C2              xjmp L90
 28F8           L494:
 28F8           ; 					else if(ucTmp == 0xff){		// 自动灌注失败，进入程序开始阶段等待手动开始液体灌注
 28F8 80910600          lds R24,L18
 28FC 8F3F              cpi R24,255
 28FE 09F0              breq X313
 2900 2DC2              xjmp L90
 2902           X313:
 2902           X202:
 2902           ; 					/*
 2902           ; #ifndef UartSendLong
 2902           ; 						Uart0ReUnable;
 2902           ; 						uart_Printf("%s $%8d\r\n", strE3904,NewTestInfo.testSerial);
 2902           ; 						Uart0ReEnable;
 2902           ; #else
 2902           ; 						Uart0ReUnable;
 2902           ; 						uart_Printf("%s $ ",strE3904);
 2902           ; 						uart0SendInt(NewTestInfo.testSerial);
 2902           ; 						uart_Printf("\r\n");
 2902           ; 						Uart0ReEnable;
 2902           ; #endif
 2902           ; 					*/
 2902           ; 						Uart0ReUnable;
 2902 8091C100          lds R24,193
 2906 8F7E              andi R24,239
 2908 8093C100          sts 193,R24
 290C           ;                                               uart_Printf("%s\r\n", strE3904);
 290C 20E0              ldi R18,<_strE3904
 290E 30E0              ldi R19,>_strE3904
 2910 00E0              ldi R16,<L88
 2912 10E0              ldi R17,>L88
 2914 0E940000          xcall _uart_Printf
 2918           ;                                               Uart0ReEnable;
 2918 8091C100          lds R24,193
 291C 8061              ori R24,16
 291E 8093C100          sts 193,R24
 2922           ;                                               mainStep = 0;
 2922 2224              clr R2
 2924 20920000          sts L12,R2
 2928           ;                                               workStep = 1;
 2928 81E0              ldi R24,1
 292A 80930100          sts L13,R24
 292E           ;                                               }
 292E           ;                                       break;
 292E           ;                               default:
 292E           ;                                       break;
 292E           ;                               }
 292E           ;                       break;
 292E 16C2              xjmp L90
 2930           L498:
 2930           ; 		case 20:	// 进入待机状态, 取样针回零位
 2930           ; 			switch(workStep)
 2930 A0900100          lds R10,L13
 2934 BB24              clr R11
 2936 AA20              tst R10
 2938 11F4              brne X203
 293A BB20              tst R11
 293C 51F0              breq L502
 293E           X203:
 293E C501              movw R24,R10
 2940 8130              cpi R24,1
 2942 E0E0              ldi R30,0
 2944 9E07              cpc R25,R30
 2946 19F1              breq L503
 2948           X204:
 2948 8230              cpi R24,2
 294A E0E0              ldi R30,0
 294C 9E07              cpc R25,R30
 294E 59F1              breq L504
 2950           X205:
 2950 05C2              xjmp L90
 2952           L502:
 2952           ; 			{
 2952           ; 				case 0:	// 取样针上升到最高点
 2952           ; 					SetStateLedBusy();
 2952 0E940000          xcall _SetStateLedBusy
 2956           ;                                       _NeedleMotRunTo(0, 180);// 240
 2956 24EB              ldi R18,180
 2958 0027              clr R16
 295A 1127              clr R17
 295C 0E94E529          xcall __NeedleMotRunTo
 2960           ;                                       waitMotSampNeedle = 1;
 2960 81E0              ldi R24,1
 2962 80934E00          sts _waitMotSampNeedle,R24
 2966           ;                                       Uart0ReUnable;
 2966 8091C100          lds R24,193
 296A 8F7E              andi R24,239
 296C 8093C100          sts 193,R24
 2970           ;                                       uart_Printf("%s\r\n",strM3190);
 2970 20E0              ldi R18,<_strM3190
 2972 30E0              ldi R19,>_strM3190
 2974 00E0              ldi R16,<L88
 2976 10E0              ldi R17,>L88
 2978 0E940000          xcall _uart_Printf
 297C           ;                                       Uart0ReEnable;
 297C 8091C100          lds R24,193
 2980 8061              ori R24,16
 2982 8093C100          sts 193,R24
 2986           ;                                       workStep = 1;
 2986 81E0              ldi R24,1
 2988 80930100          sts L13,R24
 298C           ;                                       break;
 298C E7C1              xjmp L90
 298E           L503:
 298E           ; 				case 1:	// 取样针旋转到起始位
 298E           ; 					MotRunTo(MOT_SAMP_TRUN,0);
 298E 2227              clr R18
 2990 3327              clr R19
 2992 02E0              ldi R16,2
 2994 0E940000          xcall _MotRunTo
 2998           ;                                       waitMotSampTurn = 1;
 2998 81E0              ldi R24,1
 299A 80934F00          sts _waitMotSampTurn,R24
 299E           ;                                       workStep = 2;
 299E 82E0              ldi R24,2
 29A0 80930100          sts L13,R24
 29A4           ;                                       break;
 29A4 DBC1              xjmp L90
 29A6           L504:
 29A6           ; 				case 2:	// 进入待机
 29A6           ; 					Uart0ReUnable;
 29A6 8091C100          lds R24,193
 29AA 8F7E              andi R24,239
 29AC 8093C100          sts 193,R24
 29B0           ;                                       uart_Printf("%s\r\n",strM3191);         // 取样休眠状态
 29B0 20E0              ldi R18,<_strM3191
 29B2 30E0              ldi R19,>_strM3191
 29B4 00E0              ldi R16,<L88
 29B6 10E0              ldi R17,>L88
 29B8 0E940000          xcall _uart_Printf
 29BC           ;                               //      uart_Printf("%s\r\n",strM3101);         // 请按吸样键开始
 29BC           ;                                       Uart0ReEnable;
 29BC 8091C100          lds R24,193
 29C0 8061              ori R24,16
 29C2 8093C100          sts 193,R24
 29C6           ;                                       JumpMode = 2;                                           // 休眠模式,按键之后应该进入液路自检
 29C6 82E0              ldi R24,2
 29C8 80930E00          sts _JumpMode,R24
 29CC           ;                                       mainStep = 0;
 29CC 2224              clr R2
 29CE 20920000          sts L12,R2
 29D2           ;                                       workStep = 1;
 29D2 81E0              ldi R24,1
 29D4 80930100          sts L13,R24
 29D8           ;                                       break;
 29D8           ;                               default:
 29D8           ;                                       break;
 29D8           ;                       }
 29D8           ;                       break;
 29D8 C1C1              xjmp L90
 29DA           L505:
 29DA           ; 		case 100:	// 吸入高浓度清洗液清洗
 29DA           ; 			switch(workStep)
 29DA A0900100          lds R10,L13
 29DE BB24              clr R11
 29E0 C501              movw R24,R10
 29E2 8030              cpi R24,0
 29E4 E0E0              ldi R30,0
 29E6 9E07              cpc R25,R30
 29E8 0CF4              brge X314
 29EA B8C1              xjmp L90
 29EC           X314:
 29EC           X206:
 29EC 8FE0              ldi R24,15
 29EE 8A15              cp R24,R10
 29F0 9B05              cpc R25,R11
 29F2 5CF0              brlt L534
 29F4           X207:
 29F4 80E0              ldi R24,<L535
 29F6 90E0              ldi R25,>L535
 29F8 F501              movw R30,R10
 29FA EE0F              lsl R30
 29FC FF1F              rol R31
 29FE E80F              add R30,R24
 2A00 F91F              adc R31,R25
 2A02 2790              elpm R2,Z+
 2A04 3690              elpm R3,Z
 2A06 F101              movw R30,R2
 2A08 0994               ijmp
 2A0A           L534:
 2A0A C501              movw R24,R10
 2A0C 8436              cpi R24,100
 2A0E E0E0              ldi R30,0
 2A10 9E07              cpc R25,R30
 2A12 29F0              breq L510
 2A14           X208:
 2A14 A3C1              xjmp L90
 2A16           L509:
 2A16           ; 			{
 2A16           ; 				/*      //原先的强力清洗模式   deleted by pan  20161227
 2A16           ; 				case 0:
 2A16           ; 					SetEValve(EV2, EV_OPEN);	// 开启清洗液取样针通道，准备由清洗液泵吸入高浓度清洗液
 2A16           ; 					SetDelayTime(MOT_FLUID, 2);
 2A16           ; 					workStep = 1;
 2A16           ; 					break;
 2A16           ; 				case 1:
 2A16           ; 					_FluidMotRun(-2, 120);		// 吸入高浓度清洗液
 2A16           ; 					waitMotFluid = 1;
 2A16           ; 					workStep = 2;
 2A16           ; 					break;
 2A16           ; 				case 2:
 2A16           ; 					SetEValve(EV2, EV_CLOSE);
 2A16           ; 					_NeedleMotRunTo(0, 180);	// 取样针上升	// 200
 2A16           ; 					waitMotSampNeedle = 1;
 2A16           ; 					workStep = 3;
 2A16           ; 					break;
 2A16           ; 				case 3:
 2A16           ; 					SetMotRunPam(MOT_SAMP_TRUN,255,10,CURRENT_SAMP_TRUN);
 2A16           ; 					MotRunTo(MOT_SAMP_TRUN,0);
 2A16           ; 					waitMotSampTurn = 1;
 2A16           ; 					workStep = 4;
 2A16           ; 					break;
 2A16           ; 				case 4:
 2A16           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);		// 取样臂运行到混匀池壁上方
 2A16           ; 					waitMotSampTurn = 1;
 2A16           ; 					SetDelayTime(MOT_SAMP_TRUN, 10*30);		// 浸泡30秒
 2A16           ; 					workStep = 5;
 2A16           ; 					break;
 2A16           ; 				case 5:
 2A16           ; 					_NeedleMotRunTo(_POS_MIX_BUTTOM, 200); // 240
 2A16           ; 					waitMotSampNeedle = 1;
 2A16           ; 					sc = 5;
 2A16           ; 					mainStep = 0;
 2A16           ; 					workStep = 9;
 2A16           ; 					break;
 2A16           ; 				default:
 2A16           ; 					break;
 2A16           ; 				}
 2A16           ; 			break;
 2A16           ; 			*/   //原先的强力清洗模式   deleted by pan  20161227
 2A16           ; 				
 2A16           ; 				case 0:
 2A16           ; #ifdef Puncture
 2A16           ; 					_NeedleMotRunTo(_POS_SAMP_DOWN, 180);
 2A16           ; 					waitMotSampNeedle = 1;
 2A16           ; 					_WaitStartKey = 1;
 2A16           ; #endif
 2A16           ; 					workStep = 100;
 2A16 84E6              ldi R24,100
 2A18 80930100          sts L13,R24
 2A1C           ;                                       break;
 2A1C 9FC1              xjmp L90
 2A1E           L510:
 2A1E           ; 				case 100:
 2A1E           ; 					SetEValve(EV2, EV_OPEN);	// 开启清洗液取样针通道，准备由清洗液泵吸入高浓度清洗液
 2A1E 21E0              ldi R18,1
 2A20 02E0              ldi R16,2
 2A22 0E940000          xcall _SetEValve
 2A26           ;                                       SetDelayTime(MOT_FLUID, 2);
 2A26 22E0              ldi R18,2
 2A28 30E0              ldi R19,0
 2A2A 0AE0              ldi R16,10
 2A2C 0E940000          xcall _SetDelayTime
 2A30           ;                                       workStep = 1;
 2A30 81E0              ldi R24,1
 2A32 80930100          sts L13,R24
 2A36           ;                                       break;
 2A36 92C1              xjmp L90
 2A38           L511:
 2A38           ; 				case 1:
 2A38           ; 					//_FluidMotRun(-2, 120);		// 吸入高浓度清洗液120uL
 2A38           ; 					MotRun(MOT_FLUID, -120);
 2A38 28E8              ldi R18,-120
 2A3A 3FEF              ldi R19,-1
 2A3C 0AE0              ldi R16,10
 2A3E 0E940000          xcall _MotRun
 2A42           ;                                       waitMotFluid = 1;
 2A42 81E0              ldi R24,1
 2A44 80934C00          sts _waitMotFluid,R24
 2A48           ;                                       workStep = 2;
 2A48 82E0              ldi R24,2
 2A4A 80930100          sts L13,R24
 2A4E           ;                                       //workStep = 100;
 2A4E           ;                                       break;
 2A4E 86C1              xjmp L90
 2A50           L512:
 2A50           ; 				/*
 2A50           ; 				case 100:	
 2A50           ; 					SetEValve(EV3, EV_OPEN);
 2A50           ; 					SetEValve(EV1, EV_OPEN);
 2A50           ; 					SetBeepPrompt();
 2A50           ; 					_EffluentMotRun(70, 240);
 2A50           ; 					SetDelayTime(MOT_EFFLUENT, 2);	// 延迟一段时间，先建立负压
 2A50           ; 					workStep = 101;
 2A50           ; 					break;
 2A50           ; 				case 101:				// 开启洗液泵，清洗针外壁
 2A50           ; 					_FluidMotRun(20, 40);
 2A50           ; 					waitMotSampNeedle = 1;
 2A50           ; 					_NeedleMotRunTo(0, 180);	// 取样针上升
 2A50           ; 					//workStep = 6; //2016-09-18
 2A50           ; 					workStep = 102;	//2016-09-18
 2A50           ; 					break;
 2A50           ; 				
 2A50           ; 				case 102:		// 延迟1秒后停止清洗头吸空, 转换到混匀池排空
 2A50           ; 					SetEValve(EV_ALL,EV_CLOSE);
 2A50           ; 					//waitMotSampTurn = 1;
 2A50           ; 					SetEValve(EV2, EV_OPEN);	
 2A50           ; 					workStep = 3;
 2A50           ; 					break;
 2A50           ; 					*/
 2A50           ; 				case 2:
 2A50           ; 					//SetEValve(EV2, EV_CLOSE);
 2A50           ; 					_NeedleMotRunTo(0, 180);	// 取样针上升	// 200
 2A50 24EB              ldi R18,180
 2A52 0027              clr R16
 2A54 1127              clr R17
 2A56 0E94E529          xcall __NeedleMotRunTo
 2A5A           ;                                       waitMotSampNeedle = 1;
 2A5A 81E0              ldi R24,1
 2A5C 80934E00          sts _waitMotSampNeedle,R24
 2A60           ;                                       workStep = 3;
 2A60 83E0              ldi R24,3
 2A62 80930100          sts L13,R24
 2A66           ;                                       break;
 2A66 7AC1              xjmp L90
 2A68           L513:
 2A68           ; 				case 3:
 2A68           ; 					SetMotRunPam(MOT_SAMP_TRUN,255,10,CURRENT_SAMP_TRUN);
 2A68 84E0              ldi R24,4
 2A6A 8A83              std y+2,R24
 2A6C 8AE0              ldi R24,10
 2A6E 8883              std y+0,R24
 2A70 2FEF              ldi R18,255
 2A72 02E0              ldi R16,2
 2A74 0E940000          xcall _SetMotRunPam
 2A78           ;                                       MotRunTo(MOT_SAMP_TRUN,0);
 2A78 2227              clr R18
 2A7A 3327              clr R19
 2A7C 02E0              ldi R16,2
 2A7E 0E940000          xcall _MotRunTo
 2A82           ;                                       waitMotSampTurn = 1;
 2A82 81E0              ldi R24,1
 2A84 80934F00          sts _waitMotSampTurn,R24
 2A88           ;                                       workStep = 4;
 2A88 84E0              ldi R24,4
 2A8A 80930100          sts L13,R24
 2A8E           ;                                       break;
 2A8E 66C1              xjmp L90
 2A90           L514:
 2A90           ; 				case 4:
 2A90           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);		// 取样臂运行到混匀池壁上方
 2A90 20913A00          lds R18,_NeedleOnMixCenterPos
 2A94 30913B00          lds R19,_NeedleOnMixCenterPos+1
 2A98 02E0              ldi R16,2
 2A9A 0E940000          xcall _MotRunTo
 2A9E           ;                                       waitMotSampTurn = 1;
 2A9E 81E0              ldi R24,1
 2AA0 80934F00          sts _waitMotSampTurn,R24
 2AA4           ;                                       SetDelayTime(MOT_SAMP_TRUN, 10*3);              // 浸泡3秒    改成更长时间
 2AA4 2EE1              ldi R18,30
 2AA6 30E0              ldi R19,0
 2AA8 02E0              ldi R16,2
 2AAA 0E940000          xcall _SetDelayTime
 2AAE           ;                                       workStep = 5;
 2AAE 85E0              ldi R24,5
 2AB0 80930100          sts L13,R24
 2AB4           ;                                       break;                          
 2AB4 53C1              xjmp L90
 2AB6           L515:
 2AB6           ; 				case 5:
 2AB6           ; 					_NeedleMotRunTo(_POS_MIX_BUTTOM, 200); // 240
 2AB6 28EC              ldi R18,200
 2AB8 04E8              ldi R16,900
 2ABA 13E0              ldi R17,3
 2ABC 0E94E529          xcall __NeedleMotRunTo
 2AC0           ;                                       waitMotSampNeedle = 1;
 2AC0 81E0              ldi R24,1
 2AC2 80934E00          sts _waitMotSampNeedle,R24
 2AC6           ;                                       workStep = 7;
 2AC6 87E0              ldi R24,7
 2AC8 80930100          sts L13,R24
 2ACC           ;                                       break;  
 2ACC 47C1              xjmp L90
 2ACE           L516:
 2ACE           ; 				case 7:
 2ACE           ; 					MotRun(MOT_FLUID, 1200);
 2ACE 20EB              ldi R18,1200
 2AD0 34E0              ldi R19,4
 2AD2 0AE0              ldi R16,10
 2AD4 0E940000          xcall _MotRun
 2AD8           ;                                       checkFluid = 1;
 2AD8 81E0              ldi R24,1
 2ADA 80930400          sts L16,R24
 2ADE           ;                                       waitMotFluid = 1;
 2ADE 80934C00          sts _waitMotFluid,R24
 2AE2           ;                                       workStep = 8;
 2AE2 88E0              ldi R24,8
 2AE4 80930100          sts L13,R24
 2AE8           ;                                       sc = 125;
 2AE8 8DE7              ldi R24,125
 2AEA 80930800          sts L20,R24
 2AEE           ;                                       break;
 2AEE 36C1              xjmp L90
 2AF0           L517:
 2AF0           ; 				case 8:		
 2AF0           ; 				    sc--;		
 2AF0 80910800          lds R24,L20
 2AF4 8150              subi R24,1
 2AF6 80930800          sts L20,R24
 2AFA           ;                                       MotRun(MOT_FLUID, -120);
 2AFA 28E8              ldi R18,-120
 2AFC 3FEF              ldi R19,-1
 2AFE 0AE0              ldi R16,10
 2B00 0E940000          xcall _MotRun
 2B04           ;                                       waitMotFluid = 1;
 2B04 81E0              ldi R24,1
 2B06 80934C00          sts _waitMotFluid,R24
 2B0A           ;                                       workStep = 9;
 2B0A 89E0              ldi R24,9
 2B0C 80930100          sts L13,R24
 2B10           ;                                       break;
 2B10 25C1              xjmp L90
 2B12           L518:
 2B12           ; 			    case 9:	
 2B12           ; 				    MotRun(MOT_FLUID, 120);
 2B12 28E7              ldi R18,120
 2B14 30E0              ldi R19,0
 2B16 0AE0              ldi R16,10
 2B18 0E940000          xcall _MotRun
 2B1C           ;                                       waitMotFluid = 1;       
 2B1C 81E0              ldi R24,1
 2B1E 80934C00          sts _waitMotFluid,R24
 2B22           ;                                       if(sc % 5 == 0) 
 2B22 15E0              ldi R17,5
 2B24 00910800          lds R16,L20
 2B28 0E940000          xcall mod8s
 2B2C 0023              tst R16
 2B2E 29F4              brne L519
 2B30           X209:
 2B30           ; 						SetDelayTime(MOT_FLUID, 10*6);	// 每抽打5次暂停6秒
 2B30 2CE3              ldi R18,60
 2B32 30E0              ldi R19,0
 2B34 0AE0              ldi R16,10
 2B36 0E940000          xcall _SetDelayTime
 2B3A           L519:
 2B3A           ; 					
 2B3A           ; 					if(sc==0)
 2B3A 20900800          lds R2,L20
 2B3E 2220              tst R2
 2B40 21F4              brne L521
 2B42           X210:
 2B42           ; 					{
 2B42           ; 					   workStep = 6;
 2B42 86E0              ldi R24,6
 2B44 80930100          sts L13,R24
 2B48           ;                                       // sc=15;
 2B48           ;                                       }
 2B48 09C1              xjmp L90
 2B4A           L521:
 2B4A           ; 					else
 2B4A           ; 					workStep = 8;		
 2B4A 88E0              ldi R24,8
 2B4C 80930100          sts L13,R24
 2B50           ;                                       break;
 2B50 05C1              xjmp L90
 2B52           L523:
 2B52           ; 				case 6:	
 2B52           ; 				    _EffluentMotRun(20, 200);
 2B52 28EC              ldi R18,200
 2B54 04E1              ldi R16,20
 2B56 10E0              ldi R17,0
 2B58 0E947329          xcall __EffluentMotRun
 2B5C           ;                                       SetDelayTime(MOT_FLUID, 20);
 2B5C 24E1              ldi R18,20
 2B5E 30E0              ldi R19,0
 2B60 0AE0              ldi R16,10
 2B62 0E940000          xcall _SetDelayTime
 2B66           ;                                       waitEffluent = 1;
 2B66 81E0              ldi R24,1
 2B68 80934A00          sts _waitEffluent,R24
 2B6C           ;                                       workStep = 13;
 2B6C 8DE0              ldi R24,13
 2B6E 80930100          sts L13,R24
 2B72           ;                                       sc=5;           //清洗外壁5次
 2B72 85E0              ldi R24,5
 2B74 80930800          sts L20,R24
 2B78           ;                                       break;
 2B78 F1C0              xjmp L90
 2B7A           L524:
 2B7A           ; 				case 13:		// 清洗取样针外壁
 2B7A           ; 				    sc--;					
 2B7A 80910800          lds R24,L20
 2B7E 8150              subi R24,1
 2B80 80930800          sts L20,R24
 2B84           ;                                       SetEValve(EV2, EV_CLOSE);       // 取样针通道关闭
 2B84 2227              clr R18
 2B86 02E0              ldi R16,2
 2B88 0E940000          xcall _SetEValve
 2B8C           ;                                       SetEValve(EV1, EV_OPEN);        // 开启清洗头洗液供应
 2B8C 21E0              ldi R18,1
 2B8E 01E0              ldi R16,1
 2B90 0E940000          xcall _SetEValve
 2B94           ;                                       _FluidMotRun(8, 80);            // _FluidMotRun(12, 180);               // 开启清洗液洗混匀池,注入1.0mL清洗液(12, 180)//(12,120)
 2B94 20E5              ldi R18,80
 2B96 08E0              ldi R16,8
 2B98 10E0              ldi R17,0
 2B9A 0E944E29          xcall __FluidMotRun
 2B9E           ;                                       waitMotFluid = 1;
 2B9E 81E0              ldi R24,1
 2BA0 80934C00          sts _waitMotFluid,R24
 2BA4           ;                                       waitEffluent = 1;
 2BA4 80934A00          sts _waitEffluent,R24
 2BA8           ;                                       SetEValve(EV3, EV_OPEN);        // 清洗头排液打开
 2BA8 21E0              ldi R18,1
 2BAA 03E0              ldi R16,3
 2BAC 0E940000          xcall _SetEValve
 2BB0           ;                                       workStep = 14;
 2BB0 8EE0              ldi R24,14
 2BB2 80930100          sts L13,R24
 2BB6           ;                                       break;
 2BB6 D2C0              xjmp L90
 2BB8           L525:
 2BB8           ; 				case 14:		// 抽干清洗头
 2BB8           ; 					_FluidMotRun(-1, 160);
 2BB8 20EA              ldi R18,160
 2BBA 0FEF              ldi R16,-1
 2BBC 1FEF              ldi R17,-1
 2BBE 0E944E29          xcall __FluidMotRun
 2BC2           ;                                       _EffluentMotRun(24, 240);
 2BC2 20EF              ldi R18,240
 2BC4 08E1              ldi R16,24
 2BC6 10E0              ldi R17,0
 2BC8 0E947329          xcall __EffluentMotRun
 2BCC           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 5);
 2BCC 25E0              ldi R18,5
 2BCE 30E0              ldi R19,0
 2BD0 03E0              ldi R16,3
 2BD2 0E940000          xcall _SetDelayTime
 2BD6           ;                                       workStep = 15;
 2BD6 8FE0              ldi R24,15
 2BD8 80930100          sts L13,R24
 2BDC           ;                                       break;
 2BDC BFC0              xjmp L90
 2BDE           L526:
 2BDE           ; 				case 15:	
 2BDE           ; 					// 抽干混匀池
 2BDE           ; 					SetEValve(EV3,EV_CLOSE);	// 清洗头排液打开
 2BDE 2227              clr R18
 2BE0 03E0              ldi R16,3
 2BE2 0E940000          xcall _SetEValve
 2BE6           ;                                       _EffluentMotRun(20, 200);
 2BE6 28EC              ldi R18,200
 2BE8 04E1              ldi R16,20
 2BEA 10E0              ldi R17,0
 2BEC 0E947329          xcall __EffluentMotRun
 2BF0           ;                                       SetDelayTime(MOT_FLUID, 20);
 2BF0 24E1              ldi R18,20
 2BF2 30E0              ldi R19,0
 2BF4 0AE0              ldi R16,10
 2BF6 0E940000          xcall _SetDelayTime
 2BFA           ;                                       waitEffluent = 1;
 2BFA 81E0              ldi R24,1
 2BFC 80934A00          sts _waitEffluent,R24
 2C00           ;                                       if (sc!=0)
 2C00 20900800          lds R2,L20
 2C04 2220              tst R2
 2C06 21F0              breq L527
 2C08           X211:
 2C08           ; 					workStep = 13;
 2C08 8DE0              ldi R24,13
 2C0A 80930100          sts L13,R24
 2C0E A6C0              xjmp L90
 2C10           L527:
 2C10           ; 					else
 2C10           ; 					{
 2C10           ; 					workStep = 10;
 2C10 8AE0              ldi R24,10
 2C12 80930100          sts L13,R24
 2C16           ;                                       sc=15;     //清洗内壁15次
 2C16 8FE0              ldi R24,15
 2C18 80930800          sts L20,R24
 2C1C           ;                                       }
 2C1C           ;                                       break;
 2C1C 9FC0              xjmp L90
 2C1E           L529:
 2C1E           ; 				case 10:	// 清洗和灌注取样针通道
 2C1E           ; 				    sc--;
 2C1E 80910800          lds R24,L20
 2C22 8150              subi R24,1
 2C24 80930800          sts L20,R24
 2C28           ;                                       SetEValve(EV2, EV_OPEN);
 2C28 21E0              ldi R18,1
 2C2A 02E0              ldi R16,2
 2C2C 0E940000          xcall _SetEValve
 2C30           ;                                       SetEValve(EV1, EV_CLOSE);
 2C30 2227              clr R18
 2C32 01E0              ldi R16,1
 2C34 0E940000          xcall _SetEValve
 2C38           ;                                       SetEValve(EV3, EV_CLOSE);
 2C38 2227              clr R18
 2C3A 03E0              ldi R16,3
 2C3C 0E940000          xcall _SetEValve
 2C40           ;                                       MotInitCheck(MOT_SAMP_PUMP);
 2C40 0CE0              ldi R16,12
 2C42 0E940000          xcall _MotInitCheck
 2C46           ;                                       _FluidMotRun(16, 64);           // 注入1.4mL清洗液
 2C46 20E4              ldi R18,64
 2C48 00E1              ldi R16,16
 2C4A 10E0              ldi R17,0
 2C4C 0E944E29          xcall __FluidMotRun
 2C50           ;                                       waitMotFluid = 1;
 2C50 81E0              ldi R24,1
 2C52 80934C00          sts _waitMotFluid,R24
 2C56           ;                                       SetDelayTime(MOT_FLUID, 40);
 2C56 28E2              ldi R18,40
 2C58 30E0              ldi R19,0
 2C5A 0AE0              ldi R16,10
 2C5C 0E940000          xcall _SetDelayTime
 2C60           ;                                       workStep = 11;
 2C60 8BE0              ldi R24,11
 2C62 80930100          sts L13,R24
 2C66           ;                                       break;
 2C66 7AC0              xjmp L90
 2C68           L530:
 2C68           ; 				case 11:
 2C68           ; 					_EffluentMotRun(20, 200);
 2C68 28EC              ldi R18,200
 2C6A 04E1              ldi R16,20
 2C6C 10E0              ldi R17,0
 2C6E 0E947329          xcall __EffluentMotRun
 2C72           ;                                       SetDelayTime(MOT_FLUID, 20);
 2C72 24E1              ldi R18,20
 2C74 30E0              ldi R19,0
 2C76 0AE0              ldi R16,10
 2C78 0E940000          xcall _SetDelayTime
 2C7C           ;                                       waitEffluent = 1;
 2C7C 81E0              ldi R24,1
 2C7E 80934A00          sts _waitEffluent,R24
 2C82           ;                                       if(sc == 0)
 2C82 20900800          lds R2,L20
 2C86 2220              tst R2
 2C88 21F4              brne L531
 2C8A           X212:
 2C8A           ; 					workStep = 12;
 2C8A 8CE0              ldi R24,12
 2C8C 80930100          sts L13,R24
 2C90 65C0              xjmp L90
 2C92           L531:
 2C92           ; 					else
 2C92           ; 					workStep = 10;
 2C92 8AE0              ldi R24,10
 2C94 80930100          sts L13,R24
 2C98           ;                                       break;                     
 2C98 61C0              xjmp L90
 2C9A           L533:
 2C9A           ; 				case 12:		
 2C9A           ; 					sc = 5;
 2C9A 85E0              ldi R24,5
 2C9C 80930800          sts L20,R24
 2CA0           ;                                       mainStep = 0;
 2CA0 2224              clr R2
 2CA2 20920000          sts L12,R2
 2CA6           ;                                       workStep = 9;
 2CA6 89E0              ldi R24,9
 2CA8 80930100          sts L13,R24
 2CAC           ;                                       break;
 2CAC           ;                               default:
 2CAC           ;                                       break;
 2CAC           ;                               }
 2CAC           ;                       break;
 2CAC 57C0              xjmp L90
 2CAE           L536:
 2CAE           ; 		case 105:	// 自动清洗
 2CAE           ; 			switch(workStep)
 2CAE A0900100          lds R10,L13
 2CB2 BB24              clr R11
 2CB4 AA20              tst R10
 2CB6 11F4              brne X213
 2CB8 BB20              tst R11
 2CBA 71F0              breq L540
 2CBC           X213:
 2CBC C501              movw R24,R10
 2CBE 8330              cpi R24,3
 2CC0 E0E0              ldi R30,0
 2CC2 9E07              cpc R25,R30
 2CC4 A9F0              breq L541
 2CC6           X214:
 2CC6 8430              cpi R24,4
 2CC8 E0E0              ldi R30,0
 2CCA 9E07              cpc R25,R30
 2CCC 29F1              breq L542
 2CCE           X215:
 2CCE 8530              cpi R24,5
 2CD0 E0E0              ldi R30,0
 2CD2 9E07              cpc R25,R30
 2CD4 79F1              breq L543
 2CD6           X216:
 2CD6 42C0              xjmp L90
 2CD8           L540:
 2CD8           ; 			{
 2CD8           ; 				case 0:
 2CD8           ; 					_NeedleMotRunTo(0, 180);	// 取样针上升 // 200
 2CD8 24EB              ldi R18,180
 2CDA 0027              clr R16
 2CDC 1127              clr R17
 2CDE 0E94E529          xcall __NeedleMotRunTo
 2CE2           ;                                       waitMotSampNeedle = 1;
 2CE2 81E0              ldi R24,1
 2CE4 80934E00          sts _waitMotSampNeedle,R24
 2CE8           ;                                       workStep = 3;
 2CE8 83E0              ldi R24,3
 2CEA 80930100          sts L13,R24
 2CEE           ;                                       break;
 2CEE 36C0              xjmp L90
 2CF0           L541:
 2CF0           ; 				case 3:
 2CF0           ; 					SetMotRunPam(MOT_SAMP_TRUN,255,10,CURRENT_SAMP_TRUN);
 2CF0 84E0              ldi R24,4
 2CF2 8A83              std y+2,R24
 2CF4 8AE0              ldi R24,10
 2CF6 8883              std y+0,R24
 2CF8 2FEF              ldi R18,255
 2CFA 02E0              ldi R16,2
 2CFC 0E940000          xcall _SetMotRunPam
 2D00           ;                                       MotRunTo(MOT_SAMP_TRUN,0);
 2D00 2227              clr R18
 2D02 3327              clr R19
 2D04 02E0              ldi R16,2
 2D06 0E940000          xcall _MotRunTo
 2D0A           ;                                       waitMotSampTurn = 1;
 2D0A 81E0              ldi R24,1
 2D0C 80934F00          sts _waitMotSampTurn,R24
 2D10           ;                                       workStep = 4;
 2D10 84E0              ldi R24,4
 2D12 80930100          sts L13,R24
 2D16           ;                                       break;
 2D16 22C0              xjmp L90
 2D18           L542:
 2D18           ; 				case 4:
 2D18           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);		// 取样臂运行到混匀池壁上方
 2D18 20913A00          lds R18,_NeedleOnMixCenterPos
 2D1C 30913B00          lds R19,_NeedleOnMixCenterPos+1
 2D20 02E0              ldi R16,2
 2D22 0E940000          xcall _MotRunTo
 2D26           ;                                       waitMotSampTurn = 1;
 2D26 81E0              ldi R24,1
 2D28 80934F00          sts _waitMotSampTurn,R24
 2D2C           ;                                       workStep = 5;
 2D2C 85E0              ldi R24,5
 2D2E 80930100          sts L13,R24
 2D32           ;                                       break;
 2D32 14C0              xjmp L90
 2D34           L543:
 2D34           ; 				case 5:
 2D34           ; 					_NeedleMotRunTo(_POS_MIX_BUTTOM, 180);	 // 240
 2D34 24EB              ldi R18,180
 2D36 04E8              ldi R16,900
 2D38 13E0              ldi R17,3
 2D3A 0E94E529          xcall __NeedleMotRunTo
 2D3E           ;                                       waitMotSampNeedle = 1;
 2D3E 81E0              ldi R24,1
 2D40 80934E00          sts _waitMotSampNeedle,R24
 2D44           ;                                       sc = 5;
 2D44 85E0              ldi R24,5
 2D46 80930800          sts L20,R24
 2D4A           ;                                       checkFluid = 1;
 2D4A 81E0              ldi R24,1
 2D4C 80930400          sts L16,R24
 2D50           ;                                       mainStep = 0;
 2D50 2224              clr R2
 2D52 20920000          sts L12,R2
 2D56           ;                                       workStep = 9;
 2D56 89E0              ldi R24,9
 2D58 80930100          sts L13,R24
 2D5C           ;                                       break;
 2D5C           ;                               default:
 2D5C           ;                                       break;
 2D5C           ;                               }
 2D5C           ;                       break;
 2D5C           ;               default:
 2D5C           ;                       break;
 2D5C           L90:
 2D5C           ; 		}
 2D5C           ; 	return 0;
 2D5C 0027              clr R16
 2D5E           L11:
 2D5E                   .dbline 0 ; func end
 2D5E 2496              adiw R28,4
 2D60 0E940000          xcall pop_xgsetF0FC
 2D64 2296              adiw R28,2
 2D66 0895              ret
                        .area  func_lit(rom, con, rel)
 00E2           L566:
 00E2 E916              .word `L552
 00E4 F316              .word `L553
 00E6 0817              .word `L554
 00E8 1D17              .word `L555
 00EA 3217              .word `L556
 00EC 4717              .word `L557
 00EE 5C17              .word `L558
 00F0 7117              .word `L559
 00F2 8617              .word `L560
 00F4 9B17              .word `L561
 00F6 B017              .word `L562
 00F8 C517              .word `L563
 00FA DA17              .word `L564
 00FC EF17              .word `L565
                        .area text(rom, con, rel)
                ;              l -> y+4
                ;              m -> R10,R11
                ;              n -> y+0
                ;     diluteTime -> R12
                ;      multipNum -> R10
                        .even
 2D68           _CalSampVolume::
 2D68 0E940000          xcall push_xgsetF03C
 2D6C C22E              mov R12,R18
 2D6E A02E              mov R10,R16
 2D70 2897              sbiw R28,8
 2D72           ; }
 2D72           ; 
 2D72           ; signed int CalSampVolume(unsigned char multipNum, unsigned char diluteTime)
 2D72           ; {
 2D72           ;       unsigned long n, l;
 2D72           ;       signed int m;
 2D72           ;       n = 0;
 2D72 80E0              ldi R24,0
 2D74 8883              std y+0,R24
 2D76 8983              std y+1,R24
 2D78 8A83              std y+2,R24
 2D7A 8B83              std y+3,R24
 2D7C           ;       // 设置不同稀释比例下标准吸样量
 2D7C           ; #ifndef Puncture
 2D7C           ;       l = (unsigned long)DiluentCoff[multipNum];      // 读取稀释校准因数
 2D7C 80E0              ldi R24,<_DiluentCoff
 2D7E 90E0              ldi R25,>_DiluentCoff
 2D80 EA2D              mov R30,R10
 2D82 FF27              clr R31
 2D84 EE0F              lsl R30
 2D86 FF1F              rol R31
 2D88 E80F              add R30,R24
 2D8A F91F              adc R31,R25
 2D8C 2080              ldd R2,z+0
 2D8E 3180              ldd R3,z+1
 2D90 4424              clr R4
 2D92 5524              clr R5
 2D94 2C82              std y+4,R2
 2D96 3D82              std y+5,R3
 2D98 4E82              std y+6,R4
 2D9A 5F82              std y+7,R5
 2D9C           ; #else
 2D9C           ;       if(WithoutPuncture != 0)
 2D9C           ;               l = (unsigned long)DiluentCoff[multipNum];      // 读取稀释校准因数
 2D9C           ;       else
 2D9C           ;       {
 2D9C           ;               l = (unsigned long)DiluentCoff[8];      // 读取稀释校准因数
 2D9C           ;               uart_Printf("*9944 CurrentDiluentCoff $%4d\r\n", l);
 2D9C           ;       }
 2D9C           ; #endif
 2D9C           ;       if(diluteTime == 0)
 2D9C CC20              tst R12
 2D9E 09F0              breq X318
 2DA0 38C1              xjmp L547
 2DA2           X318:
 2DA2           X315:
 2DA2           ; 	{
 2DA2           ; 		switch(multipNum)		// 第一次稀释
 2DA2 BB24              clr R11
 2DA4 C501              movw R24,R10
 2DA6 8130              cpi R24,1
 2DA8 E0E0              ldi R30,0
 2DAA 9E07              cpc R25,R30
 2DAC 0CF4              brge X319
 2DAE 2CC1              xjmp L549
 2DB0           X319:
 2DB0           X316:
 2DB0 8EE0              ldi R24,14
 2DB2 8A15              cp R24,R10
 2DB4 9B05              cpc R25,R11
 2DB6 0CF4              brge X320
 2DB8 27C1              xjmp L549
 2DBA           X320:
 2DBA           X317:
 2DBA 80E0              ldi R24,<L566
 2DBC 90E0              ldi R25,>L566
 2DBE F501              movw R30,R10
 2DC0 3197              sbiw R30,1
 2DC2 EE0F              lsl R30
 2DC4 FF1F              rol R31
 2DC6 E80F              add R30,R24
 2DC8 F91F              adc R31,R25
 2DCA 2790              elpm R2,Z+
 2DCC 3690              elpm R3,Z
 2DCE F101              movw R30,R2
 2DD0 0994               ijmp
 2DD2           L552:
 2DD2           ; 		{
 2DD2           ; 			// 一次稀释
 2DD2           ; 			case 1:		//m = _DropVolume;	// 吸样量 == 滴液量
 2DD2           ; 						m = _DropVolume+_SAMP_PUMP_INTERVAL + 210 - 45;	return m; break;
 2DD2 80914800          lds R24,__DropVolume
 2DD6 90914900          lds R25,__DropVolume+1
 2DDA 825F              subi R24,242  ; offset = 270
 2DDC 9E4F              sbci R25,254
 2DDE 8D97              sbiw R24,45
 2DE0 5C01              movw R10,R24
 2DE2 8C01              movw R16,R24
 2DE4 2BC1              xjmp L546
 2DE6           L553:
 2DE6           ; 		//	case 2:		n = l*4244;	break;	// 1:2	100/0.023562 = 4244	
 2DE6           ; 			case 2:		n = l*3400; break;  // 1:2  80/0.023562  = 3395
 2DE6 2C80              ldd R2,y+4
 2DE8 3D80              ldd R3,y+5
 2DEA 4E80              ldd R4,y+6
 2DEC 5F80              ldd R5,y+7
 2DEE 48E4              ldi R20,72
 2DF0 5DE0              ldi R21,13
 2DF2 60E0              ldi R22,0
 2DF4 70E0              ldi R23,0
 2DF6 5A92              st -y,R5
 2DF8 4A92              st -y,R4
 2DFA 3A92              st -y,R3
 2DFC 2A92              st -y,R2
 2DFE 8A01              movw R16,R20
 2E00 9B01              movw R18,R22
 2E02 0E940000          xcall empy32u
 2E06 0883              std y+0,R16
 2E08 1983              std y+1,R17
 2E0A 2A83              std y+2,R18
 2E0C 3B83              std y+3,R19
 2E0E 01C1              xjmp L550
 2E10           L554:
 2E10           ; 			case 3:		n = l*4244;	break;	// 1:5	100/0.023562 = 4244
 2E10 2C80              ldd R2,y+4
 2E12 3D80              ldd R3,y+5
 2E14 4E80              ldd R4,y+6
 2E16 5F80              ldd R5,y+7
 2E18 44E9              ldi R20,148
 2E1A 50E1              ldi R21,16
 2E1C 60E0              ldi R22,0
 2E1E 70E0              ldi R23,0
 2E20 5A92              st -y,R5
 2E22 4A92              st -y,R4
 2E24 3A92              st -y,R3
 2E26 2A92              st -y,R2
 2E28 8A01              movw R16,R20
 2E2A 9B01              movw R18,R22
 2E2C 0E940000          xcall empy32u
 2E30 0883              std y+0,R16
 2E32 1983              std y+1,R17
 2E34 2A83              std y+2,R18
 2E36 3B83              std y+3,R19
 2E38 ECC0              xjmp L550
 2E3A           L555:
 2E3A           ; 			case 4:		n = l*2355;	break;	// 1:10	55.5/0.023562 = 2355
 2E3A 2C80              ldd R2,y+4
 2E3C 3D80              ldd R3,y+5
 2E3E 4E80              ldd R4,y+6
 2E40 5F80              ldd R5,y+7
 2E42 43E3              ldi R20,51
 2E44 59E0              ldi R21,9
 2E46 60E0              ldi R22,0
 2E48 70E0              ldi R23,0
 2E4A 5A92              st -y,R5
 2E4C 4A92              st -y,R4
 2E4E 3A92              st -y,R3
 2E50 2A92              st -y,R2
 2E52 8A01              movw R16,R20
 2E54 9B01              movw R18,R22
 2E56 0E940000          xcall empy32u
 2E5A 0883              std y+0,R16
 2E5C 1983              std y+1,R17
 2E5E 2A83              std y+2,R18
 2E60 3B83              std y+3,R19
 2E62 D7C0              xjmp L550
 2E64           L556:
 2E64           ; 			case 5:		n = l*1116;	break;	// 1:20	26.3/0.023562 = 1116
 2E64 2C80              ldd R2,y+4
 2E66 3D80              ldd R3,y+5
 2E68 4E80              ldd R4,y+6
 2E6A 5F80              ldd R5,y+7
 2E6C 4CE5              ldi R20,92
 2E6E 54E0              ldi R21,4
 2E70 60E0              ldi R22,0
 2E72 70E0              ldi R23,0
 2E74 5A92              st -y,R5
 2E76 4A92              st -y,R4
 2E78 3A92              st -y,R3
 2E7A 2A92              st -y,R2
 2E7C 8A01              movw R16,R20
 2E7E 9B01              movw R18,R22
 2E80 0E940000          xcall empy32u
 2E84 0883              std y+0,R16
 2E86 1983              std y+1,R17
 2E88 2A83              std y+2,R18
 2E8A 3B83              std y+3,R19
 2E8C C2C0              xjmp L550
 2E8E           L557:
 2E8E           ; 		//	case 6:		n = l*864;	break;	// 1:50	20.4/0.023562 = 864
 2E8E           ; 		//	case 6:		n = l*1039;	break;	// 1:50	24.5/0.023562 = 1039  // 4015 设置为114准确
 2E8E           ; 		//	case 6: 	n = l*1183; break;  // 1183 = 1039 * 672 / 590,其中672为设置114的值，590为设置100的值
 2E8E           ; 		//	case 6: 	n = l*1261; break;  // 29.7ul
 2E8E           ; 		//	case 6: 	n = l*1230; break;  // 29ul
 2E8E           ; 		//	case 6: 	n = l*1200; break;  // 28.3ul
 2E8E           ; 		//	case 6: 	n = l*1220; break;  // 28.7ul
 2E8E           ; 		//	case 6:		n = l*1060; break;  // 25ul
 2E8E           ; 		//	case 6:		n = l*1082; break;  // 25.5ul
 2E8E           ; 		//	case 6:		n = l*1188; break;  // 28ul
 2E8E           ; 			case 6:		n = l*923; break;   // 2016-10-25调整  21.75ul
 2E8E 2C80              ldd R2,y+4
 2E90 3D80              ldd R3,y+5
 2E92 4E80              ldd R4,y+6
 2E94 5F80              ldd R5,y+7
 2E96 4BE9              ldi R20,155
 2E98 53E0              ldi R21,3
 2E9A 60E0              ldi R22,0
 2E9C 70E0              ldi R23,0
 2E9E 5A92              st -y,R5
 2EA0 4A92              st -y,R4
 2EA2 3A92              st -y,R3
 2EA4 2A92              st -y,R2
 2EA6 8A01              movw R16,R20
 2EA8 9B01              movw R18,R22
 2EAA 0E940000          xcall empy32u
 2EAE 0883              std y+0,R16
 2EB0 1983              std y+1,R17
 2EB2 2A83              std y+2,R18
 2EB4 3B83              std y+3,R19
 2EB6 ADC0              xjmp L550
 2EB8           L558:
 2EB8           ; 			case 7:		n = l*429;	break;	// 1:100	10.1/0.023562 = 429
 2EB8 2C80              ldd R2,y+4
 2EBA 3D80              ldd R3,y+5
 2EBC 4E80              ldd R4,y+6
 2EBE 5F80              ldd R5,y+7
 2EC0 4DEA              ldi R20,173
 2EC2 51E0              ldi R21,1
 2EC4 60E0              ldi R22,0
 2EC6 70E0              ldi R23,0
 2EC8 5A92              st -y,R5
 2ECA 4A92              st -y,R4
 2ECC 3A92              st -y,R3
 2ECE 2A92              st -y,R2
 2ED0 8A01              movw R16,R20
 2ED2 9B01              movw R18,R22
 2ED4 0E940000          xcall empy32u
 2ED8 0883              std y+0,R16
 2EDA 1983              std y+1,R17
 2EDC 2A83              std y+2,R18
 2EDE 3B83              std y+3,R19
 2EE0 98C0              xjmp L550
 2EE2           L559:
 2EE2           ; 			case 8:		n = l*212;	break;	// 1:200	5/0.023562 = 212
 2EE2 2C80              ldd R2,y+4
 2EE4 3D80              ldd R3,y+5
 2EE6 4E80              ldd R4,y+6
 2EE8 5F80              ldd R5,y+7
 2EEA 44ED              ldi R20,212
 2EEC 50E0              ldi R21,0
 2EEE 60E0              ldi R22,0
 2EF0 70E0              ldi R23,0
 2EF2 5A92              st -y,R5
 2EF4 4A92              st -y,R4
 2EF6 3A92              st -y,R3
 2EF8 2A92              st -y,R2
 2EFA 8A01              movw R16,R20
 2EFC 9B01              movw R18,R22
 2EFE 0E940000          xcall empy32u
 2F02 0883              std y+0,R16
 2F04 1983              std y+1,R17
 2F06 2A83              std y+2,R18
 2F08 3B83              std y+3,R19
 2F0A 83C0              xjmp L550
 2F0C           L560:
 2F0C           ; 			// 高倍率的第一次稀释
 2F0C           ; 		//	case 9:		n = l*429;	break;	// 1:100 X 5	= 1:500
 2F0C           ; 			case 9:		n = l*300;	break;	// 1:100 X 5	= 1:500	7.07/0.023562 = 300
 2F0C 2C80              ldd R2,y+4
 2F0E 3D80              ldd R3,y+5
 2F10 4E80              ldd R4,y+6
 2F12 5F80              ldd R5,y+7
 2F14 4CE2              ldi R20,44
 2F16 51E0              ldi R21,1
 2F18 60E0              ldi R22,0
 2F1A 70E0              ldi R23,0
 2F1C 5A92              st -y,R5
 2F1E 4A92              st -y,R4
 2F20 3A92              st -y,R3
 2F22 2A92              st -y,R2
 2F24 8A01              movw R16,R20
 2F26 9B01              movw R18,R22
 2F28 0E940000          xcall empy32u
 2F2C 0883              std y+0,R16
 2F2E 1983              std y+1,R17
 2F30 2A83              std y+2,R18
 2F32 3B83              std y+3,R19
 2F34 6EC0              xjmp L550
 2F36           L561:
 2F36           ; 			case 10:	n = l*429;	break;	// 1:100 X 10	= 1:1000	10.1/0.023562 = 429
 2F36 2C80              ldd R2,y+4
 2F38 3D80              ldd R3,y+5
 2F3A 4E80              ldd R4,y+6
 2F3C 5F80              ldd R5,y+7
 2F3E 4DEA              ldi R20,173
 2F40 51E0              ldi R21,1
 2F42 60E0              ldi R22,0
 2F44 70E0              ldi R23,0
 2F46 5A92              st -y,R5
 2F48 4A92              st -y,R4
 2F4A 3A92              st -y,R3
 2F4C 2A92              st -y,R2
 2F4E 8A01              movw R16,R20
 2F50 9B01              movw R18,R22
 2F52 0E940000          xcall empy32u
 2F56 0883              std y+0,R16
 2F58 1983              std y+1,R17
 2F5A 2A83              std y+2,R18
 2F5C 3B83              std y+3,R19
 2F5E 59C0              xjmp L550
 2F60           L562:
 2F60           ; 			case 11:	n = l*212;	break;	// 1:200 X 10	= 1:2000	5/0.023562 = 212
 2F60 2C80              ldd R2,y+4
 2F62 3D80              ldd R3,y+5
 2F64 4E80              ldd R4,y+6
 2F66 5F80              ldd R5,y+7
 2F68 44ED              ldi R20,212
 2F6A 50E0              ldi R21,0
 2F6C 60E0              ldi R22,0
 2F6E 70E0              ldi R23,0
 2F70 5A92              st -y,R5
 2F72 4A92              st -y,R4
 2F74 3A92              st -y,R3
 2F76 2A92              st -y,R2
 2F78 8A01              movw R16,R20
 2F7A 9B01              movw R18,R22
 2F7C 0E940000          xcall empy32u
 2F80 0883              std y+0,R16
 2F82 1983              std y+1,R17
 2F84 2A83              std y+2,R18
 2F86 3B83              std y+3,R19
 2F88 44C0              xjmp L550
 2F8A           L563:
 2F8A           ; 			//  2016-05-18
 2F8A           ; 			case 12:	n = l*4244;	break;	// 1:3  100/0.023562 = 4244		
 2F8A 2C80              ldd R2,y+4
 2F8C 3D80              ldd R3,y+5
 2F8E 4E80              ldd R4,y+6
 2F90 5F80              ldd R5,y+7
 2F92 44E9              ldi R20,148
 2F94 50E1              ldi R21,16
 2F96 60E0              ldi R22,0
 2F98 70E0              ldi R23,0
 2F9A 5A92              st -y,R5
 2F9C 4A92              st -y,R4
 2F9E 3A92              st -y,R3
 2FA0 2A92              st -y,R2
 2FA2 8A01              movw R16,R20
 2FA4 9B01              movw R18,R22
 2FA6 0E940000          xcall empy32u
 2FAA 0883              std y+0,R16
 2FAC 1983              std y+1,R17
 2FAE 2A83              std y+2,R18
 2FB0 3B83              std y+3,R19
 2FB2 2FC0              xjmp L550
 2FB4           L564:
 2FB4           ; 			//case 13:	n = l*4244;	break;	// 1:4	100/0.023562 = 4244
 2FB4           ; 			case 13:	n = l*2831; break;	// 1:4  66.7/0.023562 = 2831 
 2FB4 2C80              ldd R2,y+4
 2FB6 3D80              ldd R3,y+5
 2FB8 4E80              ldd R4,y+6
 2FBA 5F80              ldd R5,y+7
 2FBC 4FE0              ldi R20,15
 2FBE 5BE0              ldi R21,11
 2FC0 60E0              ldi R22,0
 2FC2 70E0              ldi R23,0
 2FC4 5A92              st -y,R5
 2FC6 4A92              st -y,R4
 2FC8 3A92              st -y,R3
 2FCA 2A92              st -y,R2
 2FCC 8A01              movw R16,R20
 2FCE 9B01              movw R18,R22
 2FD0 0E940000          xcall empy32u
 2FD4 0883              std y+0,R16
 2FD6 1983              std y+1,R17
 2FD8 2A83              std y+2,R18
 2FDA 3B83              std y+3,R19
 2FDC 1AC0              xjmp L550
 2FDE           L565:
 2FDE           ; 			case 14:    n = l*1634;	break;	// 1:40	38.5/0.023562 = 1634
 2FDE 2C80              ldd R2,y+4
 2FE0 3D80              ldd R3,y+5
 2FE2 4E80              ldd R4,y+6
 2FE4 5F80              ldd R5,y+7
 2FE6 42E6              ldi R20,98
 2FE8 56E0              ldi R21,6
 2FEA 60E0              ldi R22,0
 2FEC 70E0              ldi R23,0
 2FEE 5A92              st -y,R5
 2FF0 4A92              st -y,R4
 2FF2 3A92              st -y,R3
 2FF4 2A92              st -y,R2
 2FF6 8A01              movw R16,R20
 2FF8 9B01              movw R18,R22
 2FFA 0E940000          xcall empy32u
 2FFE 0883              std y+0,R16
 3000 1983              std y+1,R17
 3002 2A83              std y+2,R18
 3004 3B83              std y+3,R19
 3006 05C0              xjmp L550
 3008           L549:
 3008           ; 			default:	n = 0;		break;
 3008 80E0              ldi R24,0
 300A 8883              std y+0,R24
 300C 8983              std y+1,R24
 300E 8A83              std y+2,R24
 3010 8B83              std y+3,R24
 3012           L550:
 3012           ; 			}
 3012           ; 		}
 3012           L547:
 3012           ; 	n = n / _DILUENT_PUMP_BASE_COEFF;
 3012 41E7              ldi R20,113
 3014 52E0              ldi R21,2
 3016 60E0              ldi R22,0
 3018 70E0              ldi R23,0
 301A 0881              ldd R16,y+0
 301C 1981              ldd R17,y+1
 301E 2A81              ldd R18,y+2
 3020 3B81              ldd R19,y+3
 3022 7A93              st -y,R23
 3024 6A93              st -y,R22
 3026 5A93              st -y,R21
 3028 4A93              st -y,R20
 302A 0E940000          xcall div32u
 302E 0883              std y+0,R16
 3030 1983              std y+1,R17
 3032 2A83              std y+2,R18
 3034 3B83              std y+3,R19
 3036           ;       m = (signed int)n;
 3036 A880              ldd R10,y+0
 3038 B980              ldd R11,y+1
 303A           ;       return m;
 303A 8501              movw R16,R10
 303C           L546:
 303C                   .dbline 0 ; func end
 303C 2896              adiw R28,8
 303E 0C940000          xjmp pop_xgsetF03C
                        .area  func_lit(rom, con, rel)
 00FE           L587:
 00FE 3F18              .word `L573
 0100 4218              .word `L574
 0102 4518              .word `L575
 0104 4818              .word `L576
 0106 4B18              .word `L577
 0108 4E18              .word `L578
 010A 5118              .word `L579
 010C 5418              .word `L580
 010E 5718              .word `L581
 0110 5A18              .word `L582
 0112 5D18              .word `L583
 0114 6018              .word `L584
 0116 6318              .word `L585
 0118 6618              .word `L586
                        .area text(rom, con, rel)
                ;              n -> R20,R21
                ;     diluteTime -> R18
                ;      multipNum -> R16
                        .even
 3042           _CalDiluteVolume::
 3042 0E940000          xcall push_xgsetF000
 3046           ; }
 3046           ; 
 3046           ; signed int CalDiluteVolume(unsigned char multipNum, unsigned char diluteTime){
 3046           ;       // 计算各种稀释比例用的稀释液量，结果为稀释泵的n个单位流量
 3046           ;       signed int n;
 3046           ;       if(diluteTime == 0){
 3046 2223              tst R18
 3048 09F0              breq X324
 304A 45C0              xjmp L568
 304C           X324:
 304C           X321:
 304C           ; 		switch(multipNum){		// 第一次稀释
 304C 602F              mov R22,R16
 304E 7727              clr R23
 3050 6130              cpi R22,1
 3052 E0E0              ldi R30,0
 3054 7E07              cpc R23,R30
 3056 0CF4              brge X325
 3058 3CC0              xjmp L570
 305A           X325:
 305A           X322:
 305A 8EE0              ldi R24,14
 305C 90E0              ldi R25,0
 305E 8617              cp R24,R22
 3060 9707              cpc R25,R23
 3062 0CF4              brge X326
 3064 36C0              xjmp L570
 3066           X326:
 3066           X323:
 3066 80E0              ldi R24,<L587
 3068 90E0              ldi R25,>L587
 306A FB01              movw R30,R22
 306C 3197              sbiw R30,1
 306E EE0F              lsl R30
 3070 FF1F              rol R31
 3072 E80F              add R30,R24
 3074 F91F              adc R31,R25
 3076 2790              elpm R2,Z+
 3078 3690              elpm R3,Z
 307A F101              movw R30,R2
 307C 0994               ijmp
 307E           L573:
 307E           ; 			// 一次稀释
 307E           ; 			case 1:		n = 0;		break;		// 1:1
 307E 4427              clr R20
 3080 5527              clr R21
 3082 29C0              xjmp L571
 3084           L574:
 3084           ; 			case 2:		n = 1;		break;		// 1:2		100:(100+100)
 3084 41E0              ldi R20,1
 3086 50E0              ldi R21,0
 3088 26C0              xjmp L571
 308A           L575:
 308A           ; 			case 3:		n = 4;		break;		// 1:5		100:(100+400)
 308A 44E0              ldi R20,4
 308C 50E0              ldi R21,0
 308E 23C0              xjmp L571
 3090           L576:
 3090           ; 			case 4:		n = 5;		break;		// 1:10		55.5:(55.5+500)	
 3090 45E0              ldi R20,5
 3092 50E0              ldi R21,0
 3094 20C0              xjmp L571
 3096           L577:
 3096           ; 			case 5:		n = 5;		break;		// 1:20		26.3:(26.3+500)	
 3096 45E0              ldi R20,5
 3098 50E0              ldi R21,0
 309A 1DC0              xjmp L571
 309C           L578:
 309C           ; 		//	case 6:		n = 10;		break;		// 1:50		20.4:(20.4+1000)
 309C           ; 		    case 6:		n = 12;		break;		// 1:50		24.5:(24.5+1200)
 309C 4CE0              ldi R20,12
 309E 50E0              ldi R21,0
 30A0 1AC0              xjmp L571
 30A2           L579:
 30A2           ; 			case 7:		n = 10;		break;		// 1:100	10.1:(10.1+1000)
 30A2 4AE0              ldi R20,10
 30A4 50E0              ldi R21,0
 30A6 17C0              xjmp L571
 30A8           L580:
 30A8           ; 			case 8:		n = 10;		break;		// 1:200	5:(5+1000)
 30A8 4AE0              ldi R20,10
 30AA 50E0              ldi R21,0
 30AC 14C0              xjmp L571
 30AE           L581:
 30AE           ; 		//	case 9:		n = 10;		break;		// 1:500	1:100	10.1:(10.1+1000)
 30AE           ; 			case 9:		n = 7;		break;		// 1:500	1:100	7.07:(7.07+700)
 30AE 47E0              ldi R20,7
 30B0 50E0              ldi R21,0
 30B2 11C0              xjmp L571
 30B4           L582:
 30B4           ; 			case 10:	n = 10;		break;		// 1:1000	1:100	10.1:(10.1+1000)
 30B4 4AE0              ldi R20,10
 30B6 50E0              ldi R21,0
 30B8 0EC0              xjmp L571
 30BA           L583:
 30BA           ; 			case 11:	n = 10;		break;		// 1:2000	1:200	5:(5+1000)
 30BA 4AE0              ldi R20,10
 30BC 50E0              ldi R21,0
 30BE 0BC0              xjmp L571
 30C0           L584:
 30C0           ; 			// 2016-05-18
 30C0           ; 			case 12:	n = 2;		break;		// 1:3		100:(100+200)
 30C0 42E0              ldi R20,2
 30C2 50E0              ldi R21,0
 30C4 08C0              xjmp L571
 30C6           L585:
 30C6           ; 			//case 13:	n = 3;		break;		// 1:4		100:(100+300)
 30C6           ; 			case 13:	n = 2;		break;		// 1:4      66.7:(66.7+200)
 30C6 42E0              ldi R20,2
 30C8 50E0              ldi R21,0
 30CA 05C0              xjmp L571
 30CC           L586:
 30CC           ; 			case 14:	n = 15;		break;		// 1:40		38.5:(38.5+1500)
 30CC 4FE0              ldi R20,15
 30CE 50E0              ldi R21,0
 30D0 02C0              xjmp L571
 30D2           L570:
 30D2           ; 			default:	 n = 0;		break;
 30D2 4427              clr R20
 30D4 5527              clr R21
 30D6           L571:
 30D6           ; 			}
 30D6           ; 		}
 30D6           L568:
 30D6           ; 	return n;
 30D6 8A01              movw R16,R20
 30D8           L567:
 30D8                   .dbline 0 ; func end
 30D8 0C940000          xjmp pop_xgsetF000
                        .area  func_lit(rom, con, rel)
 011A           L601:
 011A 8A18              .word `L594
 011C 9318              .word `L597
 011E 9318              .word `L597
 0120 9318              .word `L597
 0122 9318              .word `L597
 0124 9318              .word `L597
 0126 9318              .word `L597
 0128 9618              .word `L598
 012A 9918              .word `L599
 012C 9C18              .word `L600
 012E 8D18              .word `L595
 0130 9018              .word `L596
 0132 9318              .word `L597
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 0134           L612:
 0134 B918              .word `L605
 0136 C218              .word `L608
 0138 C218              .word `L608
 013A C218              .word `L608
 013C C218              .word `L608
 013E C218              .word `L608
 0140 C218              .word `L608
 0142 C518              .word `L609
 0144 C818              .word `L610
 0146 CB18              .word `L611
 0148 BC18              .word `L606
 014A BF18              .word `L607
 014C C218              .word `L608
                        .area text(rom, con, rel)
                ;              n -> R20,R21
                ;     dilutetype -> R18
                ;      multipNum -> R16
                        .even
 30DC           _CalDilute2Volume::
 30DC 0E940000          xcall push_xgsetF000
 30E0           ; }
 30E0           ; signed int CalDilute2Volume(unsigned char multipNum, unsigned char dilutetype){
 30E0           ;       signed int n;
 30E0           ;       if(dilutetype == 0)
 30E0 2223              tst R18
 30E2 09F0              breq X332
 30E4 2FC0              xjmp L589
 30E6           X332:
 30E6           X327:
 30E6           ; 	{	// 原液
 30E6           ; 		switch(multipNum)
 30E6 402F              mov R20,R16
 30E8 5527              clr R21
 30EA 4230              cpi R20,2
 30EC E0E0              ldi R30,0
 30EE 5E07              cpc R21,R30
 30F0 34F1              brlt L591
 30F2           X328:
 30F2 8EE0              ldi R24,14
 30F4 90E0              ldi R25,0
 30F6 8417              cp R24,R20
 30F8 9507              cpc R25,R21
 30FA 0CF1              brlt L591
 30FC           X329:
 30FC 80E0              ldi R24,<L601
 30FE 90E0              ldi R25,>L601
 3100 FA01              movw R30,R20
 3102 3297              sbiw R30,2
 3104 EE0F              lsl R30
 3106 FF1F              rol R31
 3108 E80F              add R30,R24
 310A F91F              adc R31,R25
 310C 2790              elpm R2,Z+
 310E 3690              elpm R3,Z
 3110 F101              movw R30,R2
 3112 0994               ijmp
 3114           L594:
 3114           ; 		{
 3114           ; 			case 2:		n = 2;	break;			// 1:2 = 100 + 100 
 3114 42E0              ldi R20,2
 3116 50E0              ldi R21,0
 3118 43C0              xjmp L590
 311A           L595:
 311A           ; 			case 12:	n = 3;	break;			// 1:3 = 100 + 200
 311A 43E0              ldi R20,3
 311C 50E0              ldi R21,0
 311E 40C0              xjmp L590
 3120           L596:
 3120           ; 			case 13:	n = 4;	break;			// 1:4 = 100 + 300
 3120 44E0              ldi R20,4
 3122 50E0              ldi R21,0
 3124 3DC0              xjmp L590
 3126           L597:
 3126           ; 			case 3:		
 3126           ; 			case 4:
 3126           ; 			case 5:
 3126           ; 			case 6:
 3126           ; 			case 7:
 3126           ; 			case 8:
 3126           ; 			case 14:	n = 5;	break;		// 500ul
 3126 45E0              ldi R20,5
 3128 50E0              ldi R21,0
 312A 3AC0              xjmp L590
 312C           L598:
 312C           ; 			case 9:		n = 2;	break;		// 1:500  = 1:100 X 5
 312C 42E0              ldi R20,2
 312E 50E0              ldi R21,0
 3130 37C0              xjmp L590
 3132           L599:
 3132           ; 			case 10:	n = 1;	break;		// 1:1000	= 1:100 X 10	
 3132 41E0              ldi R20,1
 3134 50E0              ldi R21,0
 3136 34C0              xjmp L590
 3138           L600:
 3138           ; 			case 11:	n = 1;	break;		// 1:2000	= 1:200 X 10	
 3138 41E0              ldi R20,1
 313A 50E0              ldi R21,0
 313C 31C0              xjmp L590
 313E           L591:
 313E           ; 			default:	n = 0;	break;
 313E 4427              clr R20
 3140 5527              clr R21
 3142           ;               }
 3142           ;       }
 3142 2EC0              xjmp L590
 3144           L589:
 3144           ; 	else
 3144           ; 	{	// 混合液量
 3144           ; 		switch(multipNum)
 3144 602F              mov R22,R16
 3146 7727              clr R23
 3148 6230              cpi R22,2
 314A E0E0              ldi R30,0
 314C 7E07              cpc R23,R30
 314E 34F1              brlt L602
 3150           X330:
 3150 8EE0              ldi R24,14
 3152 90E0              ldi R25,0
 3154 8617              cp R24,R22
 3156 9707              cpc R25,R23
 3158 0CF1              brlt L602
 315A           X331:
 315A 80E0              ldi R24,<L612
 315C 90E0              ldi R25,>L612
 315E FB01              movw R30,R22
 3160 3297              sbiw R30,2
 3162 EE0F              lsl R30
 3164 FF1F              rol R31
 3166 E80F              add R30,R24
 3168 F91F              adc R31,R25
 316A 2790              elpm R2,Z+
 316C 3690              elpm R3,Z
 316E F101              movw R30,R2
 3170 0994               ijmp
 3172           L605:
 3172           ; 		{
 3172           ; 			case 2:		n = 2;	break;
 3172 42E0              ldi R20,2
 3174 50E0              ldi R21,0
 3176 14C0              xjmp L603
 3178           L606:
 3178           ; 			case 12:	n = 3;	break;
 3178 43E0              ldi R20,3
 317A 50E0              ldi R21,0
 317C 11C0              xjmp L603
 317E           L607:
 317E           ; 			case 13:	n = 4;	break;
 317E 44E0              ldi R20,4
 3180 50E0              ldi R21,0
 3182 0EC0              xjmp L603
 3184           L608:
 3184           ; 			case 3:		
 3184           ; 			case 4:
 3184           ; 			case 5:
 3184           ; 			case 6:
 3184           ; 			case 7:
 3184           ; 			case 8:
 3184           ; 			case 14:	n = 5;	break;
 3184 45E0              ldi R20,5
 3186 50E0              ldi R21,0
 3188 0BC0              xjmp L603
 318A           L609:
 318A           ; 			case 9:		n = 10;		break;		// 1:500	 = 1:100 X 5	
 318A 4AE0              ldi R20,10
 318C 50E0              ldi R21,0
 318E 08C0              xjmp L603
 3190           L610:
 3190           ; 			case 10:	n = 10;		break;		// 1:1000	 = 1:100 X 10
 3190 4AE0              ldi R20,10
 3192 50E0              ldi R21,0
 3194 05C0              xjmp L603
 3196           L611:
 3196           ; 			case 11:	n = 10;		break;		// 1:2000	 = 1:200 X 10	
 3196 4AE0              ldi R20,10
 3198 50E0              ldi R21,0
 319A 02C0              xjmp L603
 319C           L602:
 319C           ; 			default:	 n = 0;		break;
 319C 4427              clr R20
 319E 5527              clr R21
 31A0           L603:
 31A0           ; 		}
 31A0           ; 	}
 31A0           L590:
 31A0           ; 	return n;
 31A0 8A01              movw R16,R20
 31A2           L588:
 31A2                   .dbline 0 ; func end
 31A2 0C940000          xjmp pop_xgsetF000
                        .area  func_lit(rom, con, rel)
 014E           L632:
 014E F018              .word `L619
 0150 F218              .word `L620
 0152 F418              .word `L621
 0154 F618              .word `L622
 0156 F818              .word `L623
 0158 FA18              .word `L624
 015A FC18              .word `L625
 015C FE18              .word `L626
 015E 0019              .word `L627
 0160 0019              .word `L627
 0162 0219              .word `L628
 0164 0419              .word `L629
 0166 0619              .word `L630
 0168 0819              .word `L631
                        .area text(rom, con, rel)
                ;              n -> R20
                ;     diluteTime -> R18
                ;      multipNum -> R16
                        .even
 31A6           _CalSampSyringSpeed::
 31A6 0E940000          xcall push_xgsetF000
 31AA           ; }
 31AA           ; unsigned char CalSampSyringSpeed(unsigned char multipNum, unsigned char diluteTime){
 31AA           ;       // 计算标本注射速度
 31AA           ;       unsigned char n;
 31AA           ;       if(diluteTime == 0){
 31AA 2223              tst R18
 31AC 09F0              breq X336
 31AE 33C0              xjmp L614
 31B0           X336:
 31B0           X333:
 31B0           ; 		switch(multipNum){		// 第一次稀释
 31B0 602F              mov R22,R16
 31B2 7727              clr R23
 31B4 6130              cpi R22,1
 31B6 E0E0              ldi R30,0
 31B8 7E07              cpc R23,R30
 31BA 0CF4              brge X337
 31BC 2BC0              xjmp L616
 31BE           X337:
 31BE           X334:
 31BE 8EE0              ldi R24,14
 31C0 90E0              ldi R25,0
 31C2 8617              cp R24,R22
 31C4 9707              cpc R25,R23
 31C6 34F1              brlt L616
 31C8           X335:
 31C8 80E0              ldi R24,<L632
 31CA 90E0              ldi R25,>L632
 31CC FB01              movw R30,R22
 31CE 3197              sbiw R30,1
 31D0 EE0F              lsl R30
 31D2 FF1F              rol R31
 31D4 E80F              add R30,R24
 31D6 F91F              adc R31,R25
 31D8 2790              elpm R2,Z+
 31DA 3690              elpm R3,Z
 31DC F101              movw R30,R2
 31DE 0994               ijmp
 31E0           L619:
 31E0           ; 			// 一次稀释
 31E0           ; 			case 1:		n = 200;	break;		// 100	1:1
 31E0 48EC              ldi R20,200
 31E2 19C0              xjmp L617
 31E4           L620:
 31E4           ; 			case 2:		n = 200;	break;		// 100	1:2
 31E4 48EC              ldi R20,200
 31E6 17C0              xjmp L617
 31E8           L621:
 31E8           ; 			case 3:		n = 200;	break;		// 100	1:5
 31E8 48EC              ldi R20,200
 31EA 15C0              xjmp L617
 31EC           L622:
 31EC           ; 			case 4:		n = 200;	break;		// 55.5	1:10
 31EC 48EC              ldi R20,200
 31EE 13C0              xjmp L617
 31F0           L623:
 31F0           ; 			case 5:		n = 200;	break;		// 26.3	1:20
 31F0 48EC              ldi R20,200
 31F2 11C0              xjmp L617
 31F4           L624:
 31F4           ; 			//case 6:		n = 140;	break;		// 20.4	1:50
 31F4           ; 			case 6:		n = 200;	break;		// 20.4	1:50
 31F4 48EC              ldi R20,200
 31F6 0FC0              xjmp L617
 31F8           L625:
 31F8           ; 			case 7:		n = 80;		break;		// 10.1	1:100
 31F8 40E5              ldi R20,80
 31FA 0DC0              xjmp L617
 31FC           L626:
 31FC           ; 			case 8:		n = 60;		break;		// 5		1:200
 31FC 4CE3              ldi R20,60
 31FE 0BC0              xjmp L617
 3200           L627:
 3200           ; 			case 9:								// 1:500
 3200           ; 			case 10:	n = 80;		break;		// 1:1000
 3200 40E5              ldi R20,80
 3202 09C0              xjmp L617
 3204           L628:
 3204           ; 			case 11:	n = 40;		break;		// 1:2000		32
 3204 48E2              ldi R20,40
 3206 07C0              xjmp L617
 3208           L629:
 3208           ; 			// 2016-05-18
 3208           ; 			case 12:	n = 200;	break;		// 100	1:3
 3208 48EC              ldi R20,200
 320A 05C0              xjmp L617
 320C           L630:
 320C           ; 			//case 13:	n = 200;	break;		// 100	1:4
 320C           ; 			case 13:	n = 180;	break;		// 66.7 1:4
 320C 44EB              ldi R20,180
 320E 03C0              xjmp L617
 3210           L631:
 3210           ; 			//case 14:	n = 140;	break;		// 20.5	1:40
 3210           ; 			case 14:	n = 200;	break;		// 38.5	1:40
 3210 48EC              ldi R20,200
 3212 01C0              xjmp L617
 3214           L616:
 3214           ; 			default:	 n = 180;	break;
 3214 44EB              ldi R20,180
 3216           L617:
 3216           ; 			}
 3216           ; 		}
 3216           L614:
 3216           ; 	return n;
 3216 042F              mov R16,R20
 3218           L613:
 3218                   .dbline 0 ; func end
 3218 0C940000          xjmp pop_xgsetF000
                        .area  func_lit(rom, con, rel)
 016A           L651:
 016A 2B19              .word `L639
 016C 2D19              .word `L640
 016E 2F19              .word `L641
 0170 3119              .word `L642
 0172 3319              .word `L643
 0174 3519              .word `L644
 0176 3719              .word `L645
 0178 3919              .word `L646
 017A 3B19              .word `L647
 017C 3B19              .word `L647
 017E 3B19              .word `L647
 0180 3D19              .word `L648
 0182 3F19              .word `L649
 0184 4119              .word `L650
                        .area text(rom, con, rel)
                ;              n -> R20
                ;     diluteTime -> R18
                ;      multipNum -> R16
                        .even
 321C           _CalDiluentInjectSpeed::
 321C 0E940000          xcall push_xgsetF000
 3220           ; }
 3220           ; 
 3220           ; unsigned char CalDiluentInjectSpeed(unsigned char multipNum, unsigned char diluteTime){
 3220           ;       // 计算稀释液注入速度
 3220           ;       // 计算标本注射速度
 3220           ;       unsigned char n;
 3220           ;       if(diluteTime == 0){
 3220 2223              tst R18
 3222 09F0              breq X341
 3224 31C0              xjmp L634
 3226           X341:
 3226           X338:
 3226           ; 		switch(multipNum){		// 第一次稀释
 3226 602F              mov R22,R16
 3228 7727              clr R23
 322A 6130              cpi R22,1
 322C E0E0              ldi R30,0
 322E 7E07              cpc R23,R30
 3230 0CF4              brge X342
 3232 29C0              xjmp L636
 3234           X342:
 3234           X339:
 3234 8EE0              ldi R24,14
 3236 90E0              ldi R25,0
 3238 8617              cp R24,R22
 323A 9707              cpc R25,R23
 323C 24F1              brlt L636
 323E           X340:
 323E 80E0              ldi R24,<L651
 3240 90E0              ldi R25,>L651
 3242 FB01              movw R30,R22
 3244 3197              sbiw R30,1
 3246 EE0F              lsl R30
 3248 FF1F              rol R31
 324A E80F              add R30,R24
 324C F91F              adc R31,R25
 324E 2790              elpm R2,Z+
 3250 3690              elpm R3,Z
 3252 F101              movw R30,R2
 3254 0994               ijmp
 3256           L639:
 3256           ; 			// 一次稀释
 3256           ; 			case 1:		n = 0;		break;		// 0		1:1
 3256 4427              clr R20
 3258 17C0              xjmp L637
 325A           L640:
 325A           ; 			//case 2:		n = 4;		break;		// 100	1:2
 325A           ; 			case 2:		n = 25;		break;		// 100	1:2
 325A 49E1              ldi R20,25
 325C 15C0              xjmp L637
 325E           L641:
 325E           ; 			case 3:		n = 16;		break;		// 400	1:5
 325E 40E1              ldi R20,16
 3260 13C0              xjmp L637
 3262           L642:
 3262           ; 			case 4:		n = 40;		break;		// 500	1:10
 3262 48E2              ldi R20,40
 3264 11C0              xjmp L637
 3266           L643:
 3266           ; 			case 5:		n = 75;		break;		// 500	1:20
 3266 4BE4              ldi R20,75
 3268 0FC0              xjmp L637
 326A           L644:
 326A           ; 			case 6:		n = 160;	break;		// 1000	1:50
 326A 40EA              ldi R20,160
 326C 0DC0              xjmp L637
 326E           L645:
 326E           ; 			case 7:		n = 160;	break;		// 1000	1:100
 326E 40EA              ldi R20,160
 3270 0BC0              xjmp L637
 3272           L646:
 3272           ; 			case 8:		n = 160;	break;		// 1000		1:200
 3272 40EA              ldi R20,160
 3274 09C0              xjmp L637
 3276           L647:
 3276           ; 			case 9:								// 1:500
 3276           ; 			case 10:							// 1:1000
 3276           ; 			case 11:	n = 200;	break;		// 1:2000		160-30(cv <1.5)
 3276 48EC              ldi R20,200
 3278 07C0              xjmp L637
 327A           L648:
 327A           ; 						// 2017-05-23  n=160-10 -> n = 200
 327A           ; 			// 2016-05-18
 327A           ; 			//case 12:	n = 8;		break;		// 200	1:3
 327A           ; 			case 12:	n = 50;		break;		// 200	1:3
 327A 42E3              ldi R20,50
 327C 05C0              xjmp L637
 327E           L649:
 327E           ; 			//case 13:	n = 12;		break;		// 300  1:4
 327E           ; 			case 13:	n = 60;		break;		// 300  1:4
 327E 4CE3              ldi R20,60
 3280 03C0              xjmp L637
 3282           L650:
 3282           ; 			//case 14:	n = 150;	break;		// 800	1:40
 3282           ; 			case 14:	n = 220;	break;		// 1500	1:40
 3282 4CED              ldi R20,220
 3284 01C0              xjmp L637
 3286           L636:
 3286           ; 			default:	 n = 0;		break;
 3286 4427              clr R20
 3288           L637:
 3288           ; 			}
 3288           ; 		}
 3288           L634:
 3288           ; 	return n;
 3288 042F              mov R16,R20
 328A           L633:
 328A                   .dbline 0 ; func end
 328A 0C940000          xjmp pop_xgsetF000
 328E           ;            num -> R20
                        .even
 328E           _SetWorkStoreNum::
 328E 4A93              st -y,R20
 3290 402F              mov R20,R16
 3292 2297              sbiw R28,2
 3294           ; }
 3294           ; 
 3294           ; 
 3294           ; /******************************************************************************/
 3294           ; 
 3294           ; void SetWorkStoreNum(unsigned char num){
 3294           ;       // 设置测试卡仓号       1~5,从小仓开始数
 3294           ;       if(num > 5)
 3294 85E0              ldi R24,5
 3296 8417              cp R24,R20
 3298 08F4              brsh L653
 329A           X343:
 329A           ; 		num = 5;
 329A 45E0              ldi R20,5
 329C           L653:
 329C           ; 	if(num == 0)
 329C 4423              tst R20
 329E 09F4              brne L655
 32A0           X344:
 32A0           ; 		num = 1;
 32A0 41E0              ldi R20,1
 32A2           L655:
 32A2           ; 	_NewCardStoreNum = num;
 32A2 40933400          sts __NewCardStoreNum,R20
 32A6           ;       Uart0ReUnable;
 32A6 8091C100          lds R24,193
 32AA 8F7E              andi R24,239
 32AC 8093C100          sts 193,R24
 32B0           ;       uart_Printf("%s $%4d\r\n",strM3137, _NewCardStoreNum);
 32B0 242E              mov R2,R20
 32B2 3324              clr R3
 32B4 3982              std y+1,R3
 32B6 2882              std y+0,R2
 32B8 20E0              ldi R18,<_strM3137
 32BA 30E0              ldi R19,>_strM3137
 32BC 00E0              ldi R16,<L10
 32BE 10E0              ldi R17,>L10
 32C0 0E940000          xcall _uart_Printf
 32C4           ;       Uart0ReEnable;
 32C4 8091C100          lds R24,193
 32C8 8061              ori R24,16
 32CA 8093C100          sts 193,R24
 32CE           L652:
 32CE                   .dbline 0 ; func end
 32CE 2296              adiw R28,2
 32D0 4991              ld R20,y+
 32D2 0895              ret
                        .even
 32D4           _GetWorkStoreNum::
 32D4           ; }
 32D4           ; unsigned char GetWorkStoreNum(void){
 32D4           ; 	return _NewCardStoreNum;
 32D4 00913400          lds R16,__NewCardStoreNum
 32D8           L657:
 32D8                   .dbline 0 ; func end
 32D8 0895              ret
                        .area lit(rom, con, rel)
 0000           _RatioNumber::
 0000 0000              .word 0
 0002 0100              .word 1
 0004 0200              .word 2
 0006 0500              .word 5
 0008 0A00              .word 10
 000A 1400              .word 20
 000C 3200              .word 50
 000E 6400              .word 100
 0010 C800              .word 200
 0012 F401              .word 500
 0014 E803              .word 1000
 0016 D007              .word 2000
 0018 0300              .word 3
 001A 0400              .word 4
 001C 2800              .word 40
                        .area text(rom, con, rel)
                ;            num -> R20
                        .even
 32DA           _SetDiluentRatio::
 32DA 4A93              st -y,R20
 32DC 402F              mov R20,R16
 32DE 2497              sbiw R28,4
 32E0           ; }
 32E0           ; //_CONST unsigned int RatioNumber[] = {0,1,2,5,10,20,50,100,200,500,1000,2000,5000,10000};
 32E0           ; _CONST unsigned int RatioNumber[] = {0,1,2,5,10,20,50,100,200,500,1000,2000,3,4,40};
 32E0           ; void SetDiluentRatio(unsigned char num){
 32E0           ;       // 设置稀释比例
 32E0           ;       //if(num>13)
 32E0           ;       //      num = 13;
 32E0           ;       if(num == 0)
 32E0 4423              tst R20
 32E2 09F4              brne L659
 32E4           X345:
 32E4           ; 		num = 1;
 32E4 41E0              ldi R20,1
 32E6           L659:
 32E6           ; 	if(num > 14)
 32E6 8EE0              ldi R24,14
 32E8 8417              cp R24,R20
 32EA 08F4              brsh L661
 32EC           X346:
 32EC           ; 		num = 14;
 32EC 4EE0              ldi R20,14
 32EE           L661:
 32EE           ; 	_NewMultipNum = num;
 32EE 40933300          sts __NewMultipNum,R20
 32F2           ;       if(1 != _NewMultipNum)  // 如果稀释比例不为1:1
 32F2 4130              cpi R20,1
 32F4 19F0              breq L663
 32F6           X347:
 32F6           ; 		_MixtureMode = 0;
 32F6 2224              clr R2
 32F8 20924100          sts __MixtureMode,R2
 32FC           L663:
 32FC           ; 	Uart0ReUnable;
 32FC 8091C100          lds R24,193
 3300 8F7E              andi R24,239
 3302 8093C100          sts 193,R24
 3306           ;       uart_Printf("%s $%4d $%4d\r\n",strM3136, _NewMultipNum, RatioNumber[_NewMultipNum]);
 3306 40903300          lds R4,__NewMultipNum
 330A 80E0              ldi R24,<_RatioNumber
 330C 90E0              ldi R25,>_RatioNumber
 330E E42D              mov R30,R4
 3310 FF27              clr R31
 3312 EE0F              lsl R30
 3314 FF1F              rol R31
 3316 E80F              add R30,R24
 3318 F91F              adc R31,R25
 331A 2790              elpm R2,Z+
 331C 3690              elpm R3,Z
 331E 3B82              std y+3,R3
 3320 2A82              std y+2,R2
 3322 242C              mov R2,R4
 3324 3324              clr R3
 3326 3982              std y+1,R3
 3328 2882              std y+0,R2
 332A 20E0              ldi R18,<_strM3136
 332C 30E0              ldi R19,>_strM3136
 332E 00E0              ldi R16,<L195
 3330 10E0              ldi R17,>L195
 3332 0E940000          xcall _uart_Printf
 3336           ;       Uart0ReEnable;
 3336 8091C100          lds R24,193
 333A 8061              ori R24,16
 333C 8093C100          sts 193,R24
 3340           L658:
 3340                   .dbline 0 ; func end
 3340 2496              adiw R28,4
 3342 4991              ld R20,y+
 3344 0895              ret
 3346           ;              t -> R20,R21
                        .even
 3346           _SetReadTime0::
 3346 4A93              st -y,R20
 3348 5A93              st -y,R21
 334A A801              movw R20,R16
 334C 2297              sbiw R28,2
 334E           ; }
 334E           ; void SetReadTime0(unsigned int t){
 334E           ;       // 设置A检测头测试时间
 334E           ;       if(t>900)
 334E 84E8              ldi R24,900
 3350 93E0              ldi R25,3
 3352 8417              cp R24,R20
 3354 9507              cpc R25,R21
 3356 10F4              brsh L666
 3358           X348:
 3358           ; 		t = 900;
 3358 44E8              ldi R20,900
 335A 53E0              ldi R21,3
 335C           L666:
 335C           ; 	if(t<20)
 335C 4431              cpi R20,20
 335E E0E0              ldi R30,0
 3360 5E07              cpc R21,R30
 3362 10F4              brsh L668
 3364           X349:
 3364           ; 		t = 20;
 3364 44E1              ldi R20,20
 3366 50E0              ldi R21,0
 3368           L668:
 3368           ; 	_NewReadTime0 = t;
 3368 50933200          sts __NewReadTime0+1,R21
 336C 40933100          sts __NewReadTime0,R20
 3370           ;       Uart0ReUnable;
 3370 8091C100          lds R24,193
 3374 8F7E              andi R24,239
 3376 8093C100          sts 193,R24
 337A           ;       uart_Printf("%s $%4d\r\n",strM3138, _NewReadTime0);
 337A 1A01              movw R2,R20
 337C 3982              std y+1,R3
 337E 2882              std y+0,R2
 3380 20E0              ldi R18,<_strM3138
 3382 30E0              ldi R19,>_strM3138
 3384 00E0              ldi R16,<L10
 3386 10E0              ldi R17,>L10
 3388 0E940000          xcall _uart_Printf
 338C           ;       Uart0ReEnable;
 338C 8091C100          lds R24,193
 3390 8061              ori R24,16
 3392 8093C100          sts 193,R24
 3396           L665:
 3396                   .dbline 0 ; func end
 3396 2296              adiw R28,2
 3398 5991              ld R21,y+
 339A 4991              ld R20,y+
 339C 0895              ret
 339E           ;              t -> R20,R21
                        .even
 339E           _SetReadTime1::
 339E 4A93              st -y,R20
 33A0 5A93              st -y,R21
 33A2 A801              movw R20,R16
 33A4 2297              sbiw R28,2
 33A6           ; }
 33A6           ; void SetReadTime1(unsigned int t){
 33A6           ;       // 设置B检测头测试时间
 33A6           ;       _NewReadTime1 = 0;
 33A6 2224              clr R2
 33A8 3324              clr R3
 33AA 30923000          sts __NewReadTime1+1,R3
 33AE 20922F00          sts __NewReadTime1,R2
 33B2           ;       return;
 33B2 1FC0              xjmp L670
 33B4           X350:
 33B4           ; 
 33B4           ; 	if(t>900)
 33B4           ; 		t = 900;
 33B4 44E8              ldi R20,900
 33B6 53E0              ldi R21,3
 33B8           L671:
 33B8           ; 	if(t<20)
 33B8 4431              cpi R20,20
 33BA E0E0              ldi R30,0
 33BC 5E07              cpc R21,R30
 33BE 10F4              brsh L673
 33C0           X351:
 33C0           ; 		t = 20;
 33C0 44E1              ldi R20,20
 33C2 50E0              ldi R21,0
 33C4           L673:
 33C4           ; 	_NewReadTime1 = t;
 33C4 50933000          sts __NewReadTime1+1,R21
 33C8 40932F00          sts __NewReadTime1,R20
 33CC           ;       Uart0ReUnable;
 33CC 8091C100          lds R24,193
 33D0 8F7E              andi R24,239
 33D2 8093C100          sts 193,R24
 33D6           ;       uart_Printf("%s $%4d\r\n", strM3139, _NewReadTime1);
 33D6 1A01              movw R2,R20
 33D8 3982              std y+1,R3
 33DA 2882              std y+0,R2
 33DC 20E0              ldi R18,<_strM3139
 33DE 30E0              ldi R19,>_strM3139
 33E0 00E0              ldi R16,<L10
 33E2 10E0              ldi R17,>L10
 33E4 0E940000          xcall _uart_Printf
 33E8           ;       Uart0ReEnable;
 33E8 8091C100          lds R24,193
 33EC 8061              ori R24,16
 33EE 8093C100          sts 193,R24
 33F2           L670:
 33F2                   .dbline 0 ; func end
 33F2 2296              adiw R28,2
 33F4 5991              ld R21,y+
 33F6 4991              ld R20,y+
 33F8 0895              ret
 33FA           ;              n -> R10
                        .even
 33FA           _SetReadMolule::
 33FA AA92              st -y,R10
 33FC A02E              mov R10,R16
 33FE 2297              sbiw R28,2
 3400           ; }
 3400           ; void SetReadMolule(unsigned char n){
 3400           ;       // 设置读数头
 3400           ;       if(n == 0)
 3400 AA20              tst R10
 3402 21F4              brne L676
 3404           X352:
 3404           ; 		_NewTestType = 0;
 3404 2224              clr R2
 3406 20922E00          sts __NewTestType,R2
 340A 03C0              xjmp L677
 340C           L676:
 340C           ; 	else
 340C           ; 		_NewTestType = 1;
 340C 81E0              ldi R24,1
 340E 80932E00          sts __NewTestType,R24
 3412           L677:
 3412           ; 	Uart0ReUnable;
 3412 8091C100          lds R24,193
 3416 8F7E              andi R24,239
 3418 8093C100          sts 193,R24
 341C           ;       uart_Printf("%s $%4d\r\n", strM3140, _NewTestType);
 341C 20902E00          lds R2,__NewTestType
 3420 3324              clr R3
 3422 3982              std y+1,R3
 3424 2882              std y+0,R2
 3426 20E0              ldi R18,<_strM3140
 3428 30E0              ldi R19,>_strM3140
 342A 00E0              ldi R16,<L10
 342C 10E0              ldi R17,>L10
 342E 0E940000          xcall _uart_Printf
 3432           ;       Uart0ReEnable;
 3432 8091C100          lds R24,193
 3436 8061              ori R24,16
 3438 8093C100          sts 193,R24
 343C           L675:
 343C                   .dbline 0 ; func end
 343C 2296              adiw R28,2
 343E A990              ld R10,y+
 3440 0895              ret
 3442           ;              l -> y+5
 3442           ;              i -> y+3
 3442           ;              c -> y+2
                        .even
 3442           __NewTestSetial::
 3442 0E940000          xcall push_xgsetF000
 3446 2997              sbiw R28,9
 3448           ; }
 3448           ; 
 3448           ; unsigned long _NewTestSetial(void){
 3448           ;       // 保存序列号
 3448           ;       unsigned char c;
 3448           ;       unsigned int i;
 3448           ;       unsigned long l;
 3448           ; 
 3448           ;       EEPROM_READ(EEP_ADD_SERIAL, c);         // 读取初始化标识
 3448 81E0              ldi R24,1
 344A 90E0              ldi R25,0
 344C 9983              std y+1,R25
 344E 8883              std y+0,R24
 3450 9E01              movw R18,R28
 3452 2E5F              subi R18,254  ; offset = 2
 3454 3F4F              sbci R19,255
 3456 06E9              ldi R16,150
 3458 10E0              ldi R17,0
 345A 0E940000          xcall _EEPROMReadBytes_extIO
 345E           ;       if(c != 0xc5){          // 初始化
 345E 8A81              ldd R24,y+2
 3460 853C              cpi R24,197
 3462 69F1              breq L679
 3464           X353:
 3464           ; 		c = 0xc5;
 3464 85EC              ldi R24,197
 3466 8A83              std y+2,R24
 3468           ;               EEPROM_WRITE(EEP_ADD_SERIAL, c);
 3468 81E0              ldi R24,1
 346A 90E0              ldi R25,0
 346C 9983              std y+1,R25
 346E 8883              std y+0,R24
 3470 9E01              movw R18,R28
 3472 2E5F              subi R18,254  ; offset = 2
 3474 3F4F              sbci R19,255
 3476 06E9              ldi R16,150
 3478 10E0              ldi R17,0
 347A 0E940000          xcall _EEPROMWriteBytes_extIO
 347E           ;               c = 0;
 347E 2224              clr R2
 3480 2A82              std y+2,R2
 3482           ;               EEPROM_WRITE(EEP_ADD_SERIAL + 1, c);    // 出示化写入高8位数
 3482 81E0              ldi R24,1
 3484 90E0              ldi R25,0
 3486 9983              std y+1,R25
 3488 8883              std y+0,R24
 348A 9E01              movw R18,R28
 348C 2E5F              subi R18,254  ; offset = 2
 348E 3F4F              sbci R19,255
 3490 07E9              ldi R16,151
 3492 10E0              ldi R17,0
 3494 0E940000          xcall _EEPROMWriteBytes_extIO
 3498           ;               i = 1;
 3498 81E0              ldi R24,1
 349A 90E0              ldi R25,0
 349C 9C83              std y+4,R25
 349E 8B83              std y+3,R24
 34A0           ;               EEPROM_WRITE(EEP_ADD_SERIAL + 2, i);    // 出示化写入低16位数
 34A0 82E0              ldi R24,2
 34A2 9983              std y+1,R25
 34A4 8883              std y+0,R24
 34A6 9E01              movw R18,R28
 34A8 2D5F              subi R18,253  ; offset = 3
 34AA 3F4F              sbci R19,255
 34AC 08E9              ldi R16,152
 34AE 10E0              ldi R17,0
 34B0 0E940000          xcall _EEPROMWriteBytes_extIO
 34B4           ;               return 1;
 34B4 01E0              ldi R16,1
 34B6 10E0              ldi R17,0
 34B8 20E0              ldi R18,0
 34BA 30E0              ldi R19,0
 34BC 64C0              xjmp L678
 34BE           L679:
 34BE           ; 		}
 34BE           ; 	EEPROM_READ(EEP_ADD_SERIAL + 1, c);		// 读取高8位
 34BE 81E0              ldi R24,1
 34C0 90E0              ldi R25,0
 34C2 9983              std y+1,R25
 34C4 8883              std y+0,R24
 34C6 9E01              movw R18,R28
 34C8 2E5F              subi R18,254  ; offset = 2
 34CA 3F4F              sbci R19,255
 34CC 07E9              ldi R16,151
 34CE 10E0              ldi R17,0
 34D0 0E940000          xcall _EEPROMReadBytes_extIO
 34D4           ;       if(c < 48){
 34D4 8A81              ldd R24,y+2
 34D6 8033              cpi R24,48
 34D8 A0F5              brsh L681
 34DA           X354:
 34DA           ; 		EEPROM_READ(EEP_ADD_SERIAL+2+c*2, i);
 34DA 82E0              ldi R24,2
 34DC 90E0              ldi R25,0
 34DE 9983              std y+1,R25
 34E0 8883              std y+0,R24
 34E2 9E01              movw R18,R28
 34E4 2D5F              subi R18,253  ; offset = 3
 34E6 3F4F              sbci R19,255
 34E8 0A81              ldd R16,y+2
 34EA 1127              clr R17
 34EC 000F              lsl R16
 34EE 111F              rol R17
 34F0 0856              subi R16,104  ; offset = 152
 34F2 1F4F              sbci R17,255
 34F4 0E940000          xcall _EEPROMReadBytes_extIO
 34F8           ;               i++;
 34F8 8B81              ldd R24,y+3
 34FA 9C81              ldd R25,y+4
 34FC 0196              adiw R24,1
 34FE 9C83              std y+4,R25
 3500 8B83              std y+3,R24
 3502           ;               if(i==0){       // 换新的地16位写入地址
 3502 8030              cpi R24,0
 3504 8907              cpc R24,R25
 3506 71F4              brne L683
 3508           X355:
 3508           ; 			c ++;
 3508 8A81              ldd R24,y+2
 350A 8F5F              subi R24,255    ; addi 1
 350C 8A83              std y+2,R24
 350E           ;                       EEPROM_WRITE(EEP_ADD_SERIAL + 1, c);    // 初始化写入高8位数
 350E 81E0              ldi R24,1
 3510 90E0              ldi R25,0
 3512 9983              std y+1,R25
 3514 8883              std y+0,R24
 3516 9E01              movw R18,R28
 3518 2E5F              subi R18,254  ; offset = 2
 351A 3F4F              sbci R19,255
 351C 07E9              ldi R16,151
 351E 10E0              ldi R17,0
 3520 0E940000          xcall _EEPROMWriteBytes_extIO
 3524           ;                       }
 3524           L683:
 3524           ; 		EEPROM_WRITE(EEP_ADD_SERIAL+2+c*2, i);
 3524 82E0              ldi R24,2
 3526 90E0              ldi R25,0
 3528 9983              std y+1,R25
 352A 8883              std y+0,R24
 352C 9E01              movw R18,R28
 352E 2D5F              subi R18,253  ; offset = 3
 3530 3F4F              sbci R19,255
 3532 0A81              ldd R16,y+2
 3534 1127              clr R17
 3536 000F              lsl R16
 3538 111F              rol R17
 353A 0856              subi R16,104  ; offset = 152
 353C 1F4F              sbci R17,255
 353E 0E940000          xcall _EEPROMWriteBytes_extIO
 3542           ;               }
 3542           L681:
 3542           ; 	l = c * 0x10000 + i;
 3542 2A80              ldd R2,y+2
 3544 3324              clr R3
 3546 4424              clr R4
 3548 5524              clr R5
 354A 40E0              ldi R20,0
 354C 50E0              ldi R21,0
 354E 61E0              ldi R22,1
 3550 70E0              ldi R23,0
 3552 5A92              st -y,R5
 3554 4A92              st -y,R4
 3556 3A92              st -y,R3
 3558 2A92              st -y,R2
 355A 8A01              movw R16,R20
 355C 9B01              movw R18,R22
 355E 0E940000          xcall empy32s
 3562 1801              movw R2,R16
 3564 2901              movw R4,R18
 3566 6B80              ldd R6,y+3
 3568 7C80              ldd R7,y+4
 356A 8824              clr R8
 356C 9924              clr R9
 356E 260C              add R2,R6
 3570 371C              adc R3,R7
 3572 481C              adc R4,R8
 3574 591C              adc R5,R9
 3576 2D82              std y+5,R2
 3578 3E82              std y+6,R3
 357A 4F82              std y+7,R4
 357C 5886              std y+8,R5
 357E           ;       return l;
 357E 0D81              ldd R16,y+5
 3580 1E81              ldd R17,y+6
 3582 2F81              ldd R18,y+7
 3584 3885              ldd R19,y+8
 3586           L678:
 3586                   .dbline 0 ; func end
 3586 2996              adiw R28,9
 3588 0C940000          xjmp pop_xgsetF000
 358C           ;              l -> y+5
 358C           ;              i -> y+3
 358C           ;              c -> y+2
                        .even
 358C           _ReadCurTestSetial::
 358C 0E940000          xcall push_xgsetF000
 3590 2997              sbiw R28,9
 3592           ; }
 3592           ; unsigned long ReadCurTestSetial(void){
 3592           ;       unsigned char c;
 3592           ;       unsigned int i;
 3592           ;       unsigned long l;
 3592           ;       l = 1;
 3592 81E0              ldi R24,1
 3594 8D83              std y+5+0,R24
 3596 80E0              ldi R24,0
 3598 8E83              std y+5+1,R24
 359A 8F83              std y+5+2,R24
 359C 8887              std y+5+3,R24
 359E           ;       EEPROM_READ(EEP_ADD_SERIAL, c);         // 读取初始化标识
 359E 81E0              ldi R24,1
 35A0 90E0              ldi R25,0
 35A2 9983              std y+1,R25
 35A4 8883              std y+0,R24
 35A6 9E01              movw R18,R28
 35A8 2E5F              subi R18,254  ; offset = 2
 35AA 3F4F              sbci R19,255
 35AC 06E9              ldi R16,150
 35AE 10E0              ldi R17,0
 35B0 0E940000          xcall _EEPROMReadBytes_extIO
 35B4           ;       if(c != 0xc5){          // 初始化
 35B4 8A81              ldd R24,y+2
 35B6 853C              cpi R24,197
 35B8 69F1              breq L686
 35BA           X356:
 35BA           ; 		c = 0xc5;
 35BA 85EC              ldi R24,197
 35BC 8A83              std y+2,R24
 35BE           ;               EEPROM_WRITE(EEP_ADD_SERIAL, c);
 35BE 81E0              ldi R24,1
 35C0 90E0              ldi R25,0
 35C2 9983              std y+1,R25
 35C4 8883              std y+0,R24
 35C6 9E01              movw R18,R28
 35C8 2E5F              subi R18,254  ; offset = 2
 35CA 3F4F              sbci R19,255
 35CC 06E9              ldi R16,150
 35CE 10E0              ldi R17,0
 35D0 0E940000          xcall _EEPROMWriteBytes_extIO
 35D4           ;               c = 0;
 35D4 2224              clr R2
 35D6 2A82              std y+2,R2
 35D8           ;               EEPROM_WRITE(EEP_ADD_SERIAL + 1, c);    // 出示化写入高8位数
 35D8 81E0              ldi R24,1
 35DA 90E0              ldi R25,0
 35DC 9983              std y+1,R25
 35DE 8883              std y+0,R24
 35E0 9E01              movw R18,R28
 35E2 2E5F              subi R18,254  ; offset = 2
 35E4 3F4F              sbci R19,255
 35E6 07E9              ldi R16,151
 35E8 10E0              ldi R17,0
 35EA 0E940000          xcall _EEPROMWriteBytes_extIO
 35EE           ;               i = 1;
 35EE 81E0              ldi R24,1
 35F0 90E0              ldi R25,0
 35F2 9C83              std y+4,R25
 35F4 8B83              std y+3,R24
 35F6           ;               EEPROM_WRITE(EEP_ADD_SERIAL + 2, i);    // 出示化写入低16位数
 35F6 82E0              ldi R24,2
 35F8 9983              std y+1,R25
 35FA 8883              std y+0,R24
 35FC 9E01              movw R18,R28
 35FE 2D5F              subi R18,253  ; offset = 3
 3600 3F4F              sbci R19,255
 3602 08E9              ldi R16,152
 3604 10E0              ldi R17,0
 3606 0E940000          xcall _EEPROMWriteBytes_extIO
 360A           ;               return 1;
 360A 01E0              ldi R16,1
 360C 10E0              ldi R17,0
 360E 20E0              ldi R18,0
 3610 30E0              ldi R19,0
 3612 3FC0              xjmp L685
 3614           L686:
 3614           ; 		}
 3614           ; 	EEPROM_READ(EEP_ADD_SERIAL + 1, c);		// 读取高8位
 3614 81E0              ldi R24,1
 3616 90E0              ldi R25,0
 3618 9983              std y+1,R25
 361A 8883              std y+0,R24
 361C 9E01              movw R18,R28
 361E 2E5F              subi R18,254  ; offset = 2
 3620 3F4F              sbci R19,255
 3622 07E9              ldi R16,151
 3624 10E0              ldi R17,0
 3626 0E940000          xcall _EEPROMReadBytes_extIO
 362A           ;       if(c < 48){
 362A 8A81              ldd R24,y+2
 362C 8033              cpi R24,48
 362E 68F5              brsh L688
 3630           X357:
 3630           ; 		EEPROM_READ(EEP_ADD_SERIAL+2+c*2, i);
 3630 82E0              ldi R24,2
 3632 90E0              ldi R25,0
 3634 9983              std y+1,R25
 3636 8883              std y+0,R24
 3638 9E01              movw R18,R28
 363A 2D5F              subi R18,253  ; offset = 3
 363C 3F4F              sbci R19,255
 363E 0A81              ldd R16,y+2
 3640 1127              clr R17
 3642 000F              lsl R16
 3644 111F              rol R17
 3646 0856              subi R16,104  ; offset = 152
 3648 1F4F              sbci R17,255
 364A 0E940000          xcall _EEPROMReadBytes_extIO
 364E           ;               l = c * 0x10000 + i;
 364E 2A80              ldd R2,y+2
 3650 3324              clr R3
 3652 4424              clr R4
 3654 5524              clr R5
 3656 40E0              ldi R20,0
 3658 50E0              ldi R21,0
 365A 61E0              ldi R22,1
 365C 70E0              ldi R23,0
 365E 5A92              st -y,R5
 3660 4A92              st -y,R4
 3662 3A92              st -y,R3
 3664 2A92              st -y,R2
 3666 8A01              movw R16,R20
 3668 9B01              movw R18,R22
 366A 0E940000          xcall empy32s
 366E 1801              movw R2,R16
 3670 2901              movw R4,R18
 3672 6B80              ldd R6,y+3
 3674 7C80              ldd R7,y+4
 3676 8824              clr R8
 3678 9924              clr R9
 367A 260C              add R2,R6
 367C 371C              adc R3,R7
 367E 481C              adc R4,R8
 3680 591C              adc R5,R9
 3682 2D82              std y+5,R2
 3684 3E82              std y+6,R3
 3686 4F82              std y+7,R4
 3688 5886              std y+8,R5
 368A           ;               }
 368A           L688:
 368A           ; 	return l;
 368A 0D81              ldd R16,y+5
 368C 1E81              ldd R17,y+6
 368E 2F81              ldd R18,y+7
 3690 3885              ldd R19,y+8
 3692           L685:
 3692                   .dbline 0 ; func end
 3692 2996              adiw R28,9
 3694 0C940000          xjmp pop_xgsetF000
                        .even
 3698           __SetCurWorkParamter::
 3698 2897              sbiw R28,8
 369A           ; }
 369A           ; void _SetCurWorkParamter(void){
 369A           ;       NewTestInfo.cardStoreNum = _NewCardStoreNum;
 369A 20903400          lds R2,__NewCardStoreNum
 369E 20925B00          sts _NewTestInfo+6,R2
 36A2           ;       NewTestInfo.sampDiluteMult = _NewMultipNum;
 36A2 20903300          lds R2,__NewMultipNum
 36A6 20925C00          sts _NewTestInfo+7,R2
 36AA           ;       NewTestInfo.testTime0 = _NewReadTime0;
 36AA 20903100          lds R2,__NewReadTime0
 36AE 30903200          lds R3,__NewReadTime0+1
 36B2 30925F00          sts _NewTestInfo+9+1,R3
 36B6 20925E00          sts _NewTestInfo+9,R2
 36BA           ;       NewTestInfo.testTime1 = _NewReadTime1;
 36BA 20902F00          lds R2,__NewReadTime1
 36BE 30903000          lds R3,__NewReadTime1+1
 36C2 30926100          sts _NewTestInfo+11+1,R3
 36C6 20926000          sts _NewTestInfo+11,R2
 36CA           ;       NewTestInfo.readType = _NewTestType;
 36CA 20902E00          lds R2,__NewTestType
 36CE 20925D00          sts _NewTestInfo+8,R2
 36D2           ;       NewTestInfo.testSerial = _NewTestSetial();
 36D2 B7DE              xcall __NewTestSetial
 36D4 10935700          sts _NewTestInfo+1+1,R17
 36D8 00935600          sts _NewTestInfo+1,R16
 36DC 30935900          sts _NewTestInfo+1+2+1,R19
 36E0 20935800          sts _NewTestInfo+1+2,R18
 36E4           ; //    NewTestInfo.testSerial ++;      // 测试自动编号
 36E4           ;       // 输出新测试信息
 36E4           ; #ifndef UartSendLong
 36E4           ;       Uart0ReUnable;
 36E4           ;       uart_Printf("%s $%8d ",strM3103,NewTestInfo.testSerial);
 36E4           ; #else
 36E4           ;       Uart0ReUnable;
 36E4 8091C100          lds R24,193
 36E8 8F7E              andi R24,239
 36EA 8093C100          sts 193,R24
 36EE           ;       uart_Printf("%s $ ",strM3103);
 36EE 20E0              ldi R18,<_strM3103
 36F0 30E0              ldi R19,>_strM3103
 36F2 00E0              ldi R16,<L209
 36F4 10E0              ldi R17,>L209
 36F6 0E940000          xcall _uart_Printf
 36FA           ;       uart0SendInt(NewTestInfo.testSerial);
 36FA 20915800          lds R18,_NewTestInfo+1+2
 36FE 30915900          lds R19,_NewTestInfo+1+2+1
 3702 00915600          lds R16,_NewTestInfo+1
 3706 10915700          lds R17,_NewTestInfo+1+1
 370A 0E940000          xcall _uart0SendInt
 370E           ; #endif
 370E           ;       uart_Printf("$%4d $%4d $%4d $%4d $%4d\r\n", 
 370E 20906000          lds R2,_NewTestInfo+11
 3712 30906100          lds R3,_NewTestInfo+11+1
 3716 3F82              std y+7,R3
 3718 2E82              std y+6,R2
 371A 20905E00          lds R2,_NewTestInfo+9
 371E 30905F00          lds R3,_NewTestInfo+9+1
 3722 3D82              std y+5,R3
 3724 2C82              std y+4,R2
 3726 20905D00          lds R2,_NewTestInfo+8
 372A 3324              clr R3
 372C 3B82              std y+3,R3
 372E 2A82              std y+2,R2
 3730 20905B00          lds R2,_NewTestInfo+6
 3734 3324              clr R3
 3736 3982              std y+1,R3
 3738 2882              std y+0,R2
 373A 20915C00          lds R18,_NewTestInfo+7
 373E 3327              clr R19
 3740 00E0              ldi R16,<L698
 3742 10E0              ldi R17,>L698
 3744 0E940000          xcall _uart_Printf
 3748           ;                       NewTestInfo.sampDiluteMult, 
 3748           ;                       NewTestInfo.cardStoreNum, 
 3748           ;                       NewTestInfo.readType, 
 3748           ;                       NewTestInfo.testTime0, 
 3748           ;                       NewTestInfo.testTime1);
 3748           ;       Uart0ReEnable; 
 3748 8091C100          lds R24,193
 374C 8061              ori R24,16
 374E 8093C100          sts 193,R24
 3752           L690:
 3752                   .dbline 0 ; func end
 3752 2896              adiw R28,8
 3754 0895              ret
                        .even
 3756           _TestSleep::
 3756           ; }
 3756           ; /*
 3756           ; void SetSleepTime(unsigned int t){
 3756           ; 	unsigned int i;
 3756           ; 	// 设置休眠时间
 3756           ; 	if(t>4095)
 3756           ; 		t = 4095;
 3756           ; 	_SleepTime = t;
 3756           ; 	i = _SleepTime  + 0xc000;	// 0xc000 初始化标记
 3756           ; 	EEPROM_WRITE(EEP_ADD_SLEEP_TIME,  i);
 3756           ; 	Uart0ReUnable;
 3756           ; 	uart_Printf("%s $%4d\r\n", strM3152, _SleepTime);
 3756           ; 	Uart0ReEnable;
 3756           ; }
 3756           ; */
 3756           ; 
 3756           ; void TestSleep(void)
 3756           ; {
 3756           ; 	// 进入休眠
 3756           ; 	_SleepTime = 1;
 3756 81E0              ldi R24,1
 3758 90E0              ldi R25,0
 375A 90934000          sts __SleepTime+1,R25
 375E 80933F00          sts __SleepTime,R24
 3762           L704:
 3762                   .dbline 0 ; func end
 3762 0895              ret
                        .even
 3764           _TestStartup::
 3764           ; }
 3764           ; void TestStartup(void){
 3764           ; 	// 测试启动
 3764           ; 	_WaitStartKey = 0;
 3764 2224              clr R2
 3766 20923500          sts __WaitStartKey,R2
 376A           L705:
 376A                   .dbline 0 ; func end
 376A 0895              ret
 376C           ;            num -> R16
                        .even
 376C           __SetNewCardGet::
 376C           ; }
 376C           ; void _SetNewCardGet(unsigned char num)
 376C           ; {
 376C           ; 	if(GetNewTestCard != 254 && GetNewTestCard != 222)	// 如果卡片已经取出，将不再取卡片
 376C 20905300          lds R2,_GetNewTestCard
 3770 822D              mov R24,R2
 3772 8E3F              cpi R24,254
 3774 21F0              breq L707
 3776           X358:
 3776 8E3D              cpi R24,222
 3778 11F0              breq L707
 377A           X359:
 377A           ; 	{
 377A           ; 		GetNewTestCard = num;	// 设置本次取卡片仓号
 377A 00935300          sts _GetNewTestCard,R16
 377E           ;       }
 377E           L707:
 377E           L706:
 377E                   .dbline 0 ; func end
 377E 0895              ret
 3780           ;              n -> y+2
                        .even
 3780           _SetDropVolumeFactor::
 3780 1A93              st -y,r17
 3782 0A93              st -y,r16
 3784 2297              sbiw R28,2
 3786           ; }
 3786           ; 
 3786           ; // 滴样量调节因子
 3786           ; //signed char SetDropVolumeFactor(signed char n)
 3786           ; void SetDropVolumeFactor(signed int n)
 3786           ; {
 3786           ;       if(n <= 500 && n >= -500)
 3786 84EF              ldi R24,500
 3788 91E0              ldi R25,1
 378A 2A80              ldd R2,y+2
 378C 3B80              ldd R3,y+3
 378E 8215              cp R24,R2
 3790 9305              cpc R25,R3
 3792 8CF0              brlt L710
 3794           X360:
 3794 C101              movw R24,R2
 3796 8C30              cpi R24,12
 3798 EEEF              ldi R30,254
 379A 9E07              cpc R25,R30
 379C 64F0              brlt L710
 379E           X361:
 379E           ; 	{	// 参数范围判断
 379E           ; 		EEPROM_WRITE(EEP_DROP_VOLUME_FACTOR, n);
 379E 82E0              ldi R24,2
 37A0 90E0              ldi R25,0
 37A2 9983              std y+1,R25
 37A4 8883              std y+0,R24
 37A6 9E01              movw R18,R28
 37A8 2E5F              subi R18,254  ; offset = 2
 37AA 3F4F              sbci R19,255
 37AC 00EE              ldi R16,224
 37AE 10E0              ldi R17,0
 37B0 0E940000          xcall _EEPROMWriteBytes_extIO
 37B4           ;       }
 37B4 21C0              xjmp L711
 37B6           L710:
 37B6           ; 	else
 37B6           ; 	{
 37B6           ; 		EEPROM_READ(EEP_DROP_VOLUME_FACTOR, _DropVolumeFactor);		// 重新读取写入的设置值
 37B6 82E0              ldi R24,2
 37B8 90E0              ldi R25,0
 37BA 9983              std y+1,R25
 37BC 8883              std y+0,R24
 37BE 20E0              ldi R18,<__DropVolumeFactor
 37C0 30E0              ldi R19,>__DropVolumeFactor
 37C2 00EE              ldi R16,224
 37C4 10E0              ldi R17,0
 37C6 0E940000          xcall _EEPROMReadBytes_extIO
 37CA           ;               Uart0ReUnable;
 37CA 8091C100          lds R24,193
 37CE 8F7E              andi R24,239
 37D0 8093C100          sts 193,R24
 37D4           ;               uart_Printf("%s $%4d\r\n", strM3218, _DropVolumeFactor);
 37D4 20904600          lds R2,__DropVolumeFactor
 37D8 30904700          lds R3,__DropVolumeFactor+1
 37DC 3982              std y+1,R3
 37DE 2882              std y+0,R2
 37E0 20E0              ldi R18,<_strM3218
 37E2 30E0              ldi R19,>_strM3218
 37E4 00E0              ldi R16,<L10
 37E6 10E0              ldi R17,>L10
 37E8 0E940000          xcall _uart_Printf
 37EC           ;               Uart0ReEnable;
 37EC 8091C100          lds R24,193
 37F0 8061              ori R24,16
 37F2 8093C100          sts 193,R24
 37F6           ;               return;
 37F6 3EC0              xjmp L709
 37F8           L711:
 37F8           ; 	}
 37F8           ; 	EEPROM_READ(EEP_DROP_VOLUME_FACTOR, _DropVolumeFactor);		// 重新读取写入的设置值
 37F8 82E0              ldi R24,2
 37FA 90E0              ldi R25,0
 37FC 9983              std y+1,R25
 37FE 8883              std y+0,R24
 3800 20E0              ldi R18,<__DropVolumeFactor
 3802 30E0              ldi R19,>__DropVolumeFactor
 3804 00EE              ldi R16,224
 3806 10E0              ldi R17,0
 3808 0E940000          xcall _EEPROMReadBytes_extIO
 380C           ;       if(_DropVolumeFactor > 500 || _DropVolumeFactor < -500)
 380C 20904600          lds R2,__DropVolumeFactor
 3810 30904700          lds R3,__DropVolumeFactor+1
 3814 84EF              ldi R24,500
 3816 91E0              ldi R25,1
 3818 8215              cp R24,R2
 381A 9305              cpc R25,R3
 381C 2CF0              brlt L714
 381E           X362:
 381E C101              movw R24,R2
 3820 8C30              cpi R24,12
 3822 EEEF              ldi R30,254
 3824 9E07              cpc R25,R30
 3826 84F4              brge L712
 3828           X363:
 3828           L714:
 3828           ; 	{		// 保存的值有异常
 3828           ; 		_DropVolumeFactor = 0;
 3828 2224              clr R2
 382A 3324              clr R3
 382C 30924700          sts __DropVolumeFactor+1,R3
 3830 20924600          sts __DropVolumeFactor,R2
 3834           ;               EEPROM_WRITE(EEP_DROP_VOLUME_FACTOR, _DropVolumeFactor);
 3834 82E0              ldi R24,2
 3836 90E0              ldi R25,0
 3838 9983              std y+1,R25
 383A 8883              std y+0,R24
 383C 20E0              ldi R18,<__DropVolumeFactor
 383E 30E0              ldi R19,>__DropVolumeFactor
 3840 00EE              ldi R16,224
 3842 10E0              ldi R17,0
 3844 0E940000          xcall _EEPROMWriteBytes_extIO
 3848           ;       }
 3848           L712:
 3848           ; 	Uart0ReUnable;
 3848 8091C100          lds R24,193
 384C 8F7E              andi R24,239
 384E 8093C100          sts 193,R24
 3852           ;       uart_Printf("%s $%4d\r\n", strM3218, _DropVolumeFactor);
 3852 20904600          lds R2,__DropVolumeFactor
 3856 30904700          lds R3,__DropVolumeFactor+1
 385A 3982              std y+1,R3
 385C 2882              std y+0,R2
 385E 20E0              ldi R18,<_strM3218
 3860 30E0              ldi R19,>_strM3218
 3862 00E0              ldi R16,<L10
 3864 10E0              ldi R17,>L10
 3866 0E940000          xcall _uart_Printf
 386A           ;       Uart0ReEnable;
 386A 8091C100          lds R24,193
 386E 8061              ori R24,16
 3870 8093C100          sts 193,R24
 3874           L709:
 3874                   .dbline 0 ; func end
 3874 2496              adiw R28,4
 3876 0895              ret
 3878           ;             sc -> y+2
                        .even
 3878           _GetDropVolumeFactor::
 3878 2497              sbiw R28,4
 387A           ; }
 387A           ; 
 387A           ; signed int GetDropVolumeFactor(void)
 387A           ; {
 387A           ;       signed int sc;
 387A           ;       EEPROM_READ(EEP_DROP_VOLUME_FACTOR, sc);                // 重新读取写入的设置值
 387A 82E0              ldi R24,2
 387C 90E0              ldi R25,0
 387E 9983              std y+1,R25
 3880 8883              std y+0,R24
 3882 9E01              movw R18,R28
 3884 2E5F              subi R18,254  ; offset = 2
 3886 3F4F              sbci R19,255
 3888 00EE              ldi R16,224
 388A 10E0              ldi R17,0
 388C 0E940000          xcall _EEPROMReadBytes_extIO
 3890           ;       if(sc > 500 || sc < -500)
 3890 84EF              ldi R24,500
 3892 91E0              ldi R25,1
 3894 2A80              ldd R2,y+2
 3896 3B80              ldd R3,y+3
 3898 8215              cp R24,R2
 389A 9305              cpc R25,R3
 389C 2CF0              brlt L718
 389E           X364:
 389E C101              movw R24,R2
 38A0 8C30              cpi R24,12
 38A2 EEEF              ldi R30,254
 38A4 9E07              cpc R25,R30
 38A6 7CF4              brge L716
 38A8           X365:
 38A8           L718:
 38A8           ; 	{		// 保存的值有异常
 38A8           ; 		sc = 0;
 38A8 2224              clr R2
 38AA 3324              clr R3
 38AC 3B82              std y+3,R3
 38AE 2A82              std y+2,R2
 38B0           ;               EEPROM_WRITE(EEP_DROP_VOLUME_FACTOR, sc);
 38B0 82E0              ldi R24,2
 38B2 90E0              ldi R25,0
 38B4 9983              std y+1,R25
 38B6 8883              std y+0,R24
 38B8 9E01              movw R18,R28
 38BA 2E5F              subi R18,254  ; offset = 2
 38BC 3F4F              sbci R19,255
 38BE 00EE              ldi R16,224
 38C0 10E0              ldi R17,0
 38C2 0E940000          xcall _EEPROMWriteBytes_extIO
 38C6           ;       }
 38C6           L716:
 38C6           ; 	return sc;
 38C6 0A81              ldd R16,y+2
 38C8 1B81              ldd R17,y+3
 38CA           L715:
 38CA                   .dbline 0 ; func end
 38CA 2496              adiw R28,4
 38CC 0895              ret
 38CE           ;            vol -> R20,R21
                        .even
 38CE           _SetDropVolume::
 38CE 4A93              st -y,R20
 38D0 5A93              st -y,R21
 38D2 A801              movw R20,R16
 38D4 2297              sbiw R28,2
 38D6           ; }
 38D6           ; 
 38D6           ; void SetDropVolume(unsigned int vol)
 38D6           ; {
 38D6           ;       if(vol > 110)
 38D6 8EE6              ldi R24,110
 38D8 90E0              ldi R25,0
 38DA 8417              cp R24,R20
 38DC 9507              cpc R25,R21
 38DE 10F4              brsh L720
 38E0           X366:
 38E0           ; 		vol = 110;
 38E0 4EE6              ldi R20,110
 38E2 50E0              ldi R21,0
 38E4           L720:
 38E4           ; 	Uart0ReUnable;
 38E4 8091C100          lds R24,193
 38E8 8F7E              andi R24,239
 38EA 8093C100          sts 193,R24
 38EE           ;       uart_Printf("%s $%4d\r\n", strM3141, vol);
 38EE 5983              std y+1,R21
 38F0 4883              std y+0,R20
 38F2 20E0              ldi R18,<_strM3141
 38F4 30E0              ldi R19,>_strM3141
 38F6 00E0              ldi R16,<L10
 38F8 10E0              ldi R17,>L10
 38FA 0E940000          xcall _uart_Printf
 38FE           ;       Uart0ReEnable;
 38FE 8091C100          lds R24,193
 3902 8061              ori R24,16
 3904 8093C100          sts 193,R24
 3908           ;       _DropVolume = (vol * 425) / 10; // 每uL42.5步，0.023562uL/步
 3908 09EA              ldi R16,425
 390A 11E0              ldi R17,1
 390C 9A01              movw R18,R20
 390E 0E940000          xcall empy16s
 3912 2AE0              ldi R18,10
 3914 30E0              ldi R19,0
 3916 0E940000          xcall div16u
 391A 10934900          sts __DropVolume+1,R17
 391E 00934800          sts __DropVolume,R16
 3922           ;       // 2016-06-17 增加 if(_DropVolume != 0)
 3922           ;       if(_DropVolume != 0)
 3922 1801              movw R2,R16
 3924 0030              cpi R16,0
 3926 0107              cpc R16,R17
 3928 39F0              breq L722
 392A           X367:
 392A           ; 		_DropVolume += 149; 	// 3.5uL
 392A C101              movw R24,R2
 392C 8B56              subi R24,107  ; offset = 149
 392E 9F4F              sbci R25,255
 3930 90934900          sts __DropVolume+1,R25
 3934 80934800          sts __DropVolume,R24
 3938           L722:
 3938           L719:
 3938                   .dbline 0 ; func end
 3938 2296              adiw R28,2
 393A 5991              ld R21,y+
 393C 4991              ld R20,y+
 393E 0895              ret
 3940           ;            vol -> R20,R21
                        .even
 3940           _SetSamplingVolume::
 3940 4A93              st -y,R20
 3942 5A93              st -y,R21
 3944 A801              movw R20,R16
 3946 2297              sbiw R28,2
 3948           ; }
 3948           ; 
 3948           ; 
 3948           ; //********************************************************
 3948           ; //add 2016.7.6
 3948           ; void SetSamplingVolume(unsigned int vol)
 3948           ; {
 3948           ;       if(vol > 110)
 3948 8EE6              ldi R24,110
 394A 90E0              ldi R25,0
 394C 8417              cp R24,R20
 394E 9507              cpc R25,R21
 3950 10F4              brsh L725
 3952           X368:
 3952           ; 		vol = 110;
 3952 4EE6              ldi R20,110
 3954 50E0              ldi R21,0
 3956           L725:
 3956           ; 	Uart0ReUnable;
 3956 8091C100          lds R24,193
 395A 8F7E              andi R24,239
 395C 8093C100          sts 193,R24
 3960           ;       uart_Printf("%s $%4d\r\n", strM3121, vol);
 3960 5983              std y+1,R21
 3962 4883              std y+0,R20
 3964 20E0              ldi R18,<_strM3121
 3966 30E0              ldi R19,>_strM3121
 3968 00E0              ldi R16,<L10
 396A 10E0              ldi R17,>L10
 396C 0E940000          xcall _uart_Printf
 3970           ;       Uart0ReEnable;
 3970 8091C100          lds R24,193
 3974 8061              ori R24,16
 3976 8093C100          sts 193,R24
 397A           ;       _SamplingVolume = (vol * 425) / 10;     // 每uL42.5步，0.023562uL/步
 397A 09EA              ldi R16,425
 397C 11E0              ldi R17,1
 397E 9A01              movw R18,R20
 3980 0E940000          xcall empy16s
 3984 2AE0              ldi R18,10
 3986 30E0              ldi R19,0
 3988 0E940000          xcall div16u
 398C 10934500          sts __SamplingVolume+1,R17
 3990 00934400          sts __SamplingVolume,R16
 3994           L724:
 3994                   .dbline 0 ; func end
 3994 2296              adiw R28,2
 3996 5991              ld R21,y+
 3998 4991              ld R20,y+
 399A 0895              ret
 399C           ;           mode -> R20,R21
                        .even
 399C           _SetDropMode::
 399C 4A93              st -y,R20
 399E 5A93              st -y,R21
 39A0 A801              movw R20,R16
 39A2 2297              sbiw R28,2
 39A4           ; }
 39A4           ; //********************************************************
 39A4           ; 
 39A4           ; //********************************************************
 39A4           ; //add 2016.4.20
 39A4           ; void SetDropMode(unsigned int mode)
 39A4           ; {
 39A4           ;       if(mode > 1)
 39A4 81E0              ldi R24,1
 39A6 90E0              ldi R25,0
 39A8 8417              cp R24,R20
 39AA 9507              cpc R25,R21
 39AC 10F4              brsh L728
 39AE           X369:
 39AE           ; 		mode = 1;
 39AE 41E0              ldi R20,1
 39B0 50E0              ldi R21,0
 39B2           L728:
 39B2           ; 	Uart0ReUnable;
 39B2 8091C100          lds R24,193
 39B6 8F7E              andi R24,239
 39B8 8093C100          sts 193,R24
 39BC           ;       uart_Printf("%s $%4d\r\n", strM3142, mode);
 39BC 5983              std y+1,R21
 39BE 4883              std y+0,R20
 39C0 20E0              ldi R18,<_strM3142
 39C2 30E0              ldi R19,>_strM3142
 39C4 00E0              ldi R16,<L10
 39C6 10E0              ldi R17,>L10
 39C8 0E940000          xcall _uart_Printf
 39CC           ;       Uart0ReEnable;
 39CC 8091C100          lds R24,193
 39D0 8061              ori R24,16
 39D2 8093C100          sts 193,R24
 39D6           ;       _DropMode = mode;
 39D6 50934300          sts __DropMode+1,R21
 39DA 40934200          sts __DropMode,R20
 39DE           ;       //2016-06-15  是否需要同时设置滴样量
 39DE           ;       if(_DropMode)
 39DE 4030              cpi R20,0
 39E0 4507              cpc R20,R21
 39E2 01F0              breq L730
 39E4           X370:
 39E4           ; 	{
 39E4           ; 		;
 39E4           ; 	}
 39E4           L730:
 39E4           L727:
 39E4                   .dbline 0 ; func end
 39E4 2296              adiw R28,2
 39E6 5991              ld R21,y+
 39E8 4991              ld R20,y+
 39EA 0895              ret
 39EC           ;           mode -> R20,R21
                        .even
 39EC           _SetMixtureMode::
 39EC 4A93              st -y,R20
 39EE 5A93              st -y,R21
 39F0 A801              movw R20,R16
 39F2 2297              sbiw R28,2
 39F4           ; }
 39F4           ; 
 39F4           ; // 设置_DropMode 模式下,设置1:1是否需要抽打混匀
 39F4           ; void SetMixtureMode(unsigned int mode)
 39F4           ; {
 39F4           ;       if(0 == _DropMode)              return;                 // 非_DropMode模式下,无效
 39F4 20904200          lds R2,__DropMode
 39F8 30904300          lds R3,__DropMode+1
 39FC 2220              tst R2
 39FE 19F4              brne L733
 3A00 3320              tst R3
 3A02 09F4              brne L733
 3A04           X371:
 3A04 1BC0              xjmp L732
 3A06           L733:
 3A06           ; 	if(mode > 1)
 3A06 81E0              ldi R24,1
 3A08 90E0              ldi R25,0
 3A0A 8417              cp R24,R20
 3A0C 9507              cpc R25,R21
 3A0E 10F4              brsh L735
 3A10           X372:
 3A10           ; 		mode = 1;
 3A10 41E0              ldi R20,1
 3A12 50E0              ldi R21,0
 3A14           L735:
 3A14           ; 	Uart0ReUnable;
 3A14 8091C100          lds R24,193
 3A18 8F7E              andi R24,239
 3A1A 8093C100          sts 193,R24
 3A1E           ;       uart_Printf("%s $%4d\r\n", strM3166, mode);
 3A1E 5983              std y+1,R21
 3A20 4883              std y+0,R20
 3A22 20E0              ldi R18,<_strM3166
 3A24 30E0              ldi R19,>_strM3166
 3A26 00E0              ldi R16,<L10
 3A28 10E0              ldi R17,>L10
 3A2A 0E940000          xcall _uart_Printf
 3A2E           ;       Uart0ReEnable;
 3A2E 8091C100          lds R24,193
 3A32 8061              ori R24,16
 3A34 8093C100          sts 193,R24
 3A38           ;       _MixtureMode = mode;
 3A38 40934100          sts __MixtureMode,R20
 3A3C           L732:
 3A3C                   .dbline 0 ; func end
 3A3C 2296              adiw R28,2
 3A3E 5991              ld R21,y+
 3A40 4991              ld R20,y+
 3A42 0895              ret
 3A44           ;         MixNum -> R20,R21
                        .even
 3A44           _SetReMixNum::
 3A44 4A93              st -y,R20
 3A46 5A93              st -y,R21
 3A48 A801              movw R20,R16
 3A4A 2297              sbiw R28,2
 3A4C           ; }
 3A4C           ; 
 3A4C           ; void SetReMixNum(unsigned int MixNum)
 3A4C           ; {
 3A4C           ;       if(_DropMode == 0) 
 3A4C 20904200          lds R2,__DropMode
 3A50 30904300          lds R3,__DropMode+1
 3A54 2220              tst R2
 3A56 D9F4              brne L738
 3A58 3320              tst R3
 3A5A C9F4              brne L738
 3A5C           X373:
 3A5C           ;   	{
 3A5C           ; 		Uart0ReUnable;
 3A5C 8091C100          lds R24,193
 3A60 8F7E              andi R24,239
 3A62 8093C100          sts 193,R24
 3A66           ;               uart_Printf("%s $%4d\r\n", strM3142, _DropMode);
 3A66 3982              std y+1,R3
 3A68 2882              std y+0,R2
 3A6A 20E0              ldi R18,<_strM3142
 3A6C 30E0              ldi R19,>_strM3142
 3A6E 00E0              ldi R16,<L10
 3A70 10E0              ldi R17,>L10
 3A72 0E940000          xcall _uart_Printf
 3A76           ;       uart_Printf("%s\r\n",strM3144);
 3A76 20E0              ldi R18,<_strM3144
 3A78 30E0              ldi R19,>_strM3144
 3A7A 00E0              ldi R16,<L88
 3A7C 10E0              ldi R17,>L88
 3A7E 0E940000          xcall _uart_Printf
 3A82           ;               Uart0ReEnable;
 3A82 8091C100          lds R24,193
 3A86 8061              ori R24,16
 3A88 8093C100          sts 193,R24
 3A8C           ;       return;
 3A8C 25C0              xjmp L737
 3A8E           L738:
 3A8E           ;   	}
 3A8E           ;   	if(MixNum < 5)
 3A8E 4530              cpi R20,5
 3A90 E0E0              ldi R30,0
 3A92 5E07              cpc R21,R30
 3A94 18F4              brsh L740
 3A96           X374:
 3A96           ;     	MixNum = 5;
 3A96 45E0              ldi R20,5
 3A98 50E0              ldi R21,0
 3A9A 07C0              xjmp L741
 3A9C           L740:
 3A9C           ;   	else if(MixNum > 20)
 3A9C 84E1              ldi R24,20
 3A9E 90E0              ldi R25,0
 3AA0 8417              cp R24,R20
 3AA2 9507              cpc R25,R21
 3AA4 10F4              brsh L742
 3AA6           X375:
 3AA6           ;     	MixNum = 20;
 3AA6 44E1              ldi R20,20
 3AA8 50E0              ldi R21,0
 3AAA           L742:
 3AAA           L741:
 3AAA           ;   	_ReMixNum = MixNum;
 3AAA 50930800          sts __ReMixNum+1,R21
 3AAE 40930700          sts __ReMixNum,R20
 3AB2           ;       Uart0ReUnable;
 3AB2 8091C100          lds R24,193
 3AB6 8F7E              andi R24,239
 3AB8 8093C100          sts 193,R24
 3ABC           ;       uart_Printf("%s $%4d\r\n", strM3143, _ReMixNum);
 3ABC 1A01              movw R2,R20
 3ABE 3982              std y+1,R3
 3AC0 2882              std y+0,R2
 3AC2 20E0              ldi R18,<_strM3143
 3AC4 30E0              ldi R19,>_strM3143
 3AC6 00E0              ldi R16,<L10
 3AC8 10E0              ldi R17,>L10
 3ACA 0E940000          xcall _uart_Printf
 3ACE           ;       Uart0ReEnable;
 3ACE 8091C100          lds R24,193
 3AD2 8061              ori R24,16
 3AD4 8093C100          sts 193,R24
 3AD8           L737:
 3AD8                   .dbline 0 ; func end
 3AD8 2296              adiw R28,2
 3ADA 5991              ld R21,y+
 3ADC 4991              ld R20,y+
 3ADE 0895              ret
 3AE0           ;              n -> R18,R19
 3AE0           ;              m -> R16,R17
                        .even
 3AE0           _CalculateCalStandCoeff::
 3AE0           ; }
 3AE0           ; //********************************************************
 3AE0           ; 
 3AE0           ; // 定标数据
 3AE0           ; 
 3AE0           ; /*
 3AE0           ; unsigned int  CalculateCalStandCoeff(unsigned int n)
 3AE0           ; {
 3AE0           ; 	unsigned long l1,l2;
 3AE0           ; 	unsigned int i;
 3AE0           ; 	if(n == 0)
 3AE0           ; 		return _DiluentCalChart.calStand;	// 返回当前设置值
 3AE0           ; 
 3AE0           ; 	if(n>_DILUENT_MIX_BASE_COEFF_UP)
 3AE0           ; 		n = _DILUENT_MIX_BASE_COEFF_UP;
 3AE0           ; 	if(n<_DILUENT_MIX_BASE_COEFF_DOWN)
 3AE0           ; 		n = _DILUENT_MIX_BASE_COEFF_DOWN;
 3AE0           ; 	_DiluentCalChart.calStand = n;
 3AE0           ; 	//Save_DiluentCalChart();
 3AE0           ; 	return _DiluentCalChart.calStand;		// 返回设置后的校准因子
 3AE0           ; }
 3AE0           ; */
 3AE0           ; 
 3AE0           ; // 将吸样量调整为不同稀释倍数下
 3AE0           ; // m 为稀释倍数   n 为调节因子
 3AE0           ; unsigned int  CalculateCalStandCoeff(unsigned int m,unsigned int n)
 3AE0           ; {
 3AE0           ; //#ifndef Puncture
 3AE0           ; 	if(m > 13)	m = 13;
 3AE0 8DE0              ldi R24,13
 3AE2 90E0              ldi R25,0
 3AE4 8017              cp R24,R16
 3AE6 9107              cpc R25,R17
 3AE8 10F4              brsh L745
 3AEA           X376:
 3AEA 0DE0              ldi R16,13
 3AEC 10E0              ldi R17,0
 3AEE           L745:
 3AEE           ; 	if(m == 0)	m = 9;
 3AEE 0030              cpi R16,0
 3AF0 0107              cpc R16,R17
 3AF2 11F4              brne L747
 3AF4           X377:
 3AF4 09E0              ldi R16,9
 3AF6 10E0              ldi R17,0
 3AF8           L747:
 3AF8           ; 	if(n == 0)
 3AF8 2030              cpi R18,0
 3AFA 2307              cpc R18,R19
 3AFC 51F4              brne L749
 3AFE           X378:
 3AFE           ; 		return _DiluentCalChart.calStand[m];	// 返回当前设置值
 3AFE 80E0              ldi R24,<__DiluentCalChart+13
 3B00 90E0              ldi R25,>__DiluentCalChart+13
 3B02 F801              movw R30,R16
 3B04 EE0F              lsl R30
 3B06 FF1F              rol R31
 3B08 E80F              add R30,R24
 3B0A F91F              adc R31,R25
 3B0C 0081              ldd R16,z+0
 3B0E 1181              ldd R17,z+1
 3B10 1DC0              xjmp L744
 3B12           L749:
 3B12           ; 	if(n > _DILUENT_MIX_BASE_COEFF_UP)
 3B12 8AEF              ldi R24,250
 3B14 90E0              ldi R25,0
 3B16 8217              cp R24,R18
 3B18 9307              cpc R25,R19
 3B1A 10F4              brsh L752
 3B1C           X379:
 3B1C           ; 		n = _DILUENT_MIX_BASE_COEFF_UP;
 3B1C 2AEF              ldi R18,250
 3B1E 30E0              ldi R19,0
 3B20           L752:
 3B20           ; 	if(n < _DILUENT_MIX_BASE_COEFF_DOWN)
 3B20 2A30              cpi R18,10
 3B22 E0E0              ldi R30,0
 3B24 3E07              cpc R19,R30
 3B26 10F4              brsh L754
 3B28           X380:
 3B28           ; 		n = _DILUENT_MIX_BASE_COEFF_DOWN;
 3B28 2AE0              ldi R18,10
 3B2A 30E0              ldi R19,0
 3B2C           L754:
 3B2C           ; 	_DiluentCalChart.calStand[m] = n;
 3B2C 80E0              ldi R24,<__DiluentCalChart+13
 3B2E 90E0              ldi R25,>__DiluentCalChart+13
 3B30 F801              movw R30,R16
 3B32 EE0F              lsl R30
 3B34 FF1F              rol R31
 3B36 E80F              add R30,R24
 3B38 F91F              adc R31,R25
 3B3A 3183              std z+1,R19
 3B3C 2083              std z+0,R18
 3B3E           ;       return _DiluentCalChart.calStand[m];    // 返回当前设置值
 3B3E F801              movw R30,R16
 3B40 EE0F              lsl R30
 3B42 FF1F              rol R31
 3B44 E80F              add R30,R24
 3B46 F91F              adc R31,R25
 3B48 0081              ldd R16,z+0
 3B4A 1181              ldd R17,z+1
 3B4C           L744:
 3B4C                   .dbline 0 ; func end
 3B4C 0895              ret
                        .area bss(ram, con, rel)
 0011           L759:
 0011                   .blkb 1
 0012           L760:
 0012                   .blkb 1
 0013           L761:
 0013                   .blkb 1
 0014           L762:
 0014                   .blkb 1
 0015           L763:
 0015                   .blkb 1
 0016           L764:
 0016                   .blkb 1
 0017           L765:
 0017                   .blkb 2
 0019           L766:
 0019                   .blkb 2
 001B           L767:
 001B                   .blkb 1
 001C           L768:
 001C                   .blkb 2
 001E           L769:
 001E                   .blkb 2
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 0186           L932:
 0186 0022              .word `L878
 0188 3E22              .word `L882
 018A 5222              .word `L883
 018C 5D22              .word `L884
 018E D722              .word `L897
 0190 E222              .word `L898
 0192 EA22              .word `L899
 0194 1D23              .word `L904
 0196 3423              .word `L905
 0198 9423              .word `L915
 019A C323              .word `L917
 019C CE23              .word `L918
 019E E523              .word `L919
 01A0 2024              .word `L928
 01A2 4924              .word `L929
 01A4 5524              .word `L930
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 01A6           L1022:
 01A6 8E24              .word `L937
 01A8 D328              .word `L807
 01AA 3A25              .word `L949
 01AC 0426              .word `L971
 01AE 4827              .word `L1003
 01B0 6A27              .word `L1006
 01B2 7627              .word `L1007
 01B4 9427              .word `L1010
 01B6 9F27              .word `L1011
 01B8 A827              .word `L1012
 01BA B427              .word `L1013
 01BC D027              .word `L1014
 01BE E027              .word `L1015
 01C0 EC27              .word `L1018
 01C2 0528              .word `L1019
 01C4 1428              .word `L1020
 01C6 2028              .word `L1021
                        .area text(rom, con, rel)
                ;              n -> <dead>
                ;         siTmp1 -> <dead>
                ;          siTmp -> <dead>
                ;              m -> R12,R13
                ;              i -> R10,R11
                ;          ucTmp -> R20
                ;     pInfoEvent -> R12,R13
                        .even
 3B4E           _DiluteStartCheck::
 3B4E 0E940000          xcall push_xgsetF03C
 3B52 6801              movw R12,R16
 3B54 2397              sbiw R28,3
 3B56           ; /*
 3B56           ; #else
 3B56           ; {
 3B56           ;       if(WithoutPuncture != 0)                // 无需穿刺
 3B56           ;       {
 3B56           ;               if(m > 13)      m = 13;
 3B56           ;               if(m == 0)      m = 9;
 3B56           ;               if(n == 0)
 3B56           ;                       return _DiluentCalChart.calStand[m];    // 返回当前设置值
 3B56           ;               if(n > _DILUENT_MIX_BASE_COEFF_UP)
 3B56           ;               n = _DILUENT_MIX_BASE_COEFF_UP;
 3B56           ;               if(n < _DILUENT_MIX_BASE_COEFF_DOWN)
 3B56           ;               n = _DILUENT_MIX_BASE_COEFF_DOWN;
 3B56           ;               _DiluentCalChart.calStand[m] = n;
 3B56           ;               return _DiluentCalChart.calStand[m];    // 返回当前设置值
 3B56           ;       }
 3B56           ;       else
 3B56           ;       {
 3B56           ;               if(n == 0)
 3B56           ;                       return _DiluentCalChart.calStand[8];    // 返回当前设置值
 3B56           ;               if(n > _DILUENT_MIX_BASE_COEFF_UP)
 3B56           ;               n = _DILUENT_MIX_BASE_COEFF_UP;
 3B56           ;               if(n < _DILUENT_MIX_BASE_COEFF_DOWN)
 3B56           ;               n = _DILUENT_MIX_BASE_COEFF_DOWN;
 3B56           ;               _DiluentCalChart.calStand[8] = n;
 3B56           ;               return _DiluentCalChart.calStand[8];    // 返回当前设置值
 3B56           ;       }
 3B56           ; }
 3B56           ; #endif
 3B56           ; */
 3B56           ; }
 3B56           ; 
 3B56           ; // 此部分函数暂未使用
 3B56           ; /*
 3B56           ; unsigned int CalMixingHeight(unsigned char multipNum, unsigned char diluteTime)
 3B56           ; {
 3B56           ;       // 计算混匀液高度
 3B56           ;       unsigned int n;
 3B56           ;       if(diluteTime == 0)
 3B56           ;       {
 3B56           ;               switch(multipNum)               // 第一次稀释
 3B56           ;               {
 3B56           ;                       // 一次稀释
 3B56           ;                       case 1:         n = 1740;                       break;          // 0 1:1
 3B56           ;                       case 2:         n = 1740-56;            break;          // 240uL-130uL=110uL 1:2
 3B56           ;                       case 3:         n = 1740-163;           break;          // 450uL-130uL=320uL 1:5
 3B56           ;                       case 4:         n = 1740-239;           break;          // 600uL-130uL=470uL 1:10
 3B56           ;                       case 5:         n = 1740-239;           break;          // 600uL-130uL=470uL 19 1:20
 3B56           ;                       case 6:         n = 1740-448;           break;          // 1010uL-130uL=880uL 33 1:50
 3B56           ;                       case 7:         n = 1740-443;           break;          // 1000uL-130uL=870uL 33 1:100
 3B56           ;                       case 8:         n = 1740-442;           break;          // 995uL-130uL=865uL 33 1:200
 3B56           ;                       // 二次稀释的第一次稀释
 3B56           ;                       case 9:                                                                         // 1:500
 3B56           ;                       case 10:                                                                        // 1:1000
 3B56           ;                       case 11:                                                                        // 1:2000
 3B56           ;                       case 12:                                                                        // 1:5000       
 3B56           ;                       case 13:        n = 1740-443;           break;          // 33 1:10000
 3B56           ;                       default:        n = 1740;                       break;
 3B56           ;                       }
 3B56           ;               }
 3B56           ;       else
 3B56           ;       {                       // 二次稀释
 3B56           ;               switch(multipNum)
 3B56           ;               {
 3B56           ;                       // 二次稀释中的第二次稀释
 3B56           ;                       case 9:         n = 1740-201;           break;          // 525uL-130uL=395uL 14 1:500
 3B56           ;                       case 10:        n = 1740-443;           break;          // 1000uL-130uL=870uL 30 1:1000
 3B56           ;                       case 11:        n = 1740-433;           break;          // 979uL-130uL=849uL 31 1:2000
 3B56           ;                       case 12:        n = 1740-417;           break;          // 949uL-130uL=819uL 31 1:5000
 3B56           ;                       case 13:        n = 1740-443;           break;          // 1000uL-130uL=870uL 33 1:10000
 3B56           ;                       default:        n = 1740;                       break;
 3B56           ;               }
 3B56           ;       }
 3B56           ;       return n;
 3B56           ; }
 3B56           ; */
 3B56           ; 
 3B56           ; /********************************  液路自检处理程序  ***************************************/
 3B56           ; 
 3B56           ; unsigned char DiluteStartCheck(INFO_EVENT * pInfoEvent)
 3B56           ; {
 3B56           ; //    static unsigned int liqDetBaseAdc;
 3B56           ; //    static unsigned char waitMotSampTurn,waitMotSampNeedle, waitMotSampPump,waitMotFluid,waitMotDiluent,waitEffluent;
 3B56           ;       static unsigned char mainStep,workStep, subStep;                
 3B56           ;       static unsigned char pos;
 3B56           ;       static unsigned char detRetry ;         // 液体探测重试次数
 3B56           ;       static unsigned char CalCnt;            // 重复校准计数
 3B56           ;       static unsigned int CalValue1, CalValue2;
 3B56           ;       static unsigned char cNum;
 3B56           ; 
 3B56           ;               
 3B56           ;       static unsigned int mixLiqLevel;
 3B56           ;       static unsigned int mixCalStartPos;
 3B56           ;       unsigned char ucTmp;
 3B56           ;       signed int siTmp, siTmp1;
 3B56           ;       unsigned int i, n, m;
 3B56           ; 
 3B56           ;       if(pInfoEvent == 0)
 3B56 CC20              tst R12
 3B58 09F0              breq X512
 3B5A 8FC0              xjmp L770
 3B5C           X512:
 3B5C DD20              tst R13
 3B5E 09F0              breq X513
 3B60 8CC0              xjmp L770
 3B62           X513:
 3B62           X381:
 3B62           ; 	{
 3B62           ; 		if(WaitDelayTime(MOT_SAMP_PUMP))		return 0;
 3B62 0CE0              ldi R16,12
 3B64 0E940000          xcall _WaitDelayTime
 3B68 0023              tst R16
 3B6A 19F0              breq L772
 3B6C           X382:
 3B6C 0027              clr R16
 3B6E 0C94D428          xjmp L758
 3B72           L772:
 3B72           ; 		if(WaitDelayTime(MOT_SAMP_TRUN))		return 0;
 3B72 02E0              ldi R16,2
 3B74 0E940000          xcall _WaitDelayTime
 3B78 0023              tst R16
 3B7A 19F0              breq L774
 3B7C           X383:
 3B7C 0027              clr R16
 3B7E 0C94D428          xjmp L758
 3B82           L774:
 3B82           ; 		if(WaitDelayTime(MOT_SAMP_NEEDLE))		return 0;
 3B82 03E0              ldi R16,3
 3B84 0E940000          xcall _WaitDelayTime
 3B88 C02E              mov R12,R16
 3B8A 0023              tst R16
 3B8C 19F0              breq L776
 3B8E           X384:
 3B8E 0027              clr R16
 3B90 0C94D428          xjmp L758
 3B94           L776:
 3B94           ; 		if(WaitDelayTime(MOT_EFFLUENT))			return 0;
 3B94 0BE0              ldi R16,11
 3B96 0E940000          xcall _WaitDelayTime
 3B9A C02E              mov R12,R16
 3B9C 0023              tst R16
 3B9E 19F0              breq L778
 3BA0           X385:
 3BA0 0027              clr R16
 3BA2 0C94D428          xjmp L758
 3BA6           L778:
 3BA6           ; 		if(WaitDelayTime(MOT_DILUENT))			return 0;
 3BA6 09E0              ldi R16,9
 3BA8 0E940000          xcall _WaitDelayTime
 3BAC C02E              mov R12,R16
 3BAE 0023              tst R16
 3BB0 19F0              breq L780
 3BB2           X386:
 3BB2 0027              clr R16
 3BB4 0C94D428          xjmp L758
 3BB8           L780:
 3BB8           ; 		
 3BB8           ; 		if(waitMotSampTurn)		{	if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)		return 0;	waitMotSampTurn = 0;	}
 3BB8 20904F00          lds R2,_waitMotSampTurn
 3BBC 2220              tst R2
 3BBE 61F0              breq L782
 3BC0           X387:
 3BC0 02E0              ldi R16,2
 3BC2 0E940000          xcall _GetMotState
 3BC6 402F              mov R20,R16
 3BC8 0130              cpi R16,1
 3BCA 19F0              breq L784
 3BCC           X388:
 3BCC 0027              clr R16
 3BCE 0C94D428          xjmp L758
 3BD2           L784:
 3BD2 2224              clr R2
 3BD4 20924F00          sts _waitMotSampTurn,R2
 3BD8           L782:
 3BD8           ; 		if(waitMotSampNeedle)	{	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotSampNeedle = 0;	}
 3BD8 20904E00          lds R2,_waitMotSampNeedle
 3BDC 2220              tst R2
 3BDE 61F0              breq L786
 3BE0           X389:
 3BE0 03E0              ldi R16,3
 3BE2 0E940000          xcall _GetMotState
 3BE6 402F              mov R20,R16
 3BE8 0130              cpi R16,1
 3BEA 19F0              breq L788
 3BEC           X390:
 3BEC 0027              clr R16
 3BEE 0C94D428          xjmp L758
 3BF2           L788:
 3BF2 2224              clr R2
 3BF4 20924E00          sts _waitMotSampNeedle,R2
 3BF8           L786:
 3BF8           ; 		if(waitMotSampPump)		{	if(GetMotState(MOT_SAMP_PUMP)!=STA_SLAVE_FREE)		return 0;	waitMotSampPump = 0;	}
 3BF8 20904D00          lds R2,_waitMotSampPump
 3BFC 2220              tst R2
 3BFE 61F0              breq L790
 3C00           X391:
 3C00 0CE0              ldi R16,12
 3C02 0E940000          xcall _GetMotState
 3C06 402F              mov R20,R16
 3C08 0130              cpi R16,1
 3C0A 19F0              breq L792
 3C0C           X392:
 3C0C 0027              clr R16
 3C0E 0C94D428          xjmp L758
 3C12           L792:
 3C12 2224              clr R2
 3C14 20924D00          sts _waitMotSampPump,R2
 3C18           L790:
 3C18           ; 		if(waitMotFluid)		{	if(GetMotState(MOT_FLUID)!=STA_SLAVE_FREE)			return 0;	waitMotFluid = 0;	}
 3C18 20904C00          lds R2,_waitMotFluid
 3C1C 2220              tst R2
 3C1E 61F0              breq L794
 3C20           X393:
 3C20 0AE0              ldi R16,10
 3C22 0E940000          xcall _GetMotState
 3C26 402F              mov R20,R16
 3C28 0130              cpi R16,1
 3C2A 19F0              breq L796
 3C2C           X394:
 3C2C 0027              clr R16
 3C2E 0C94D428          xjmp L758
 3C32           L796:
 3C32 2224              clr R2
 3C34 20924C00          sts _waitMotFluid,R2
 3C38           L794:
 3C38           ; 		if(waitMotDiluent)		{	if(GetMotState(MOT_DILUENT)!=STA_SLAVE_FREE)		return 0;	waitMotDiluent = 0;	}
 3C38 20904B00          lds R2,_waitMotDiluent
 3C3C 2220              tst R2
 3C3E 61F0              breq L798
 3C40           X395:
 3C40 09E0              ldi R16,9
 3C42 0E940000          xcall _GetMotState
 3C46 402F              mov R20,R16
 3C48 0130              cpi R16,1
 3C4A 19F0              breq L800
 3C4C           X396:
 3C4C 0027              clr R16
 3C4E 0C94D428          xjmp L758
 3C52           L800:
 3C52 2224              clr R2
 3C54 20924B00          sts _waitMotDiluent,R2
 3C58           L798:
 3C58           ; 		if(waitEffluent)		{	if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitEffluent = 0;	}
 3C58 20904A00          lds R2,_waitEffluent
 3C5C 2220              tst R2
 3C5E 81F0              breq L771
 3C60           X397:
 3C60 0BE0              ldi R16,11
 3C62 0E940000          xcall _GetMotState
 3C66 402F              mov R20,R16
 3C68 0130              cpi R16,1
 3C6A 19F0              breq L804
 3C6C           X398:
 3C6C 0027              clr R16
 3C6E 0C94D428          xjmp L758
 3C72           L804:
 3C72 2224              clr R2
 3C74 20924A00          sts _waitEffluent,R2
 3C78           ;       }
 3C78 03C0              xjmp L771
 3C7A           L770:
 3C7A           ; 	else
 3C7A           ; 		return 0;
 3C7A 0027              clr R16
 3C7C 0C94D428          xjmp L758
 3C80           L771:
 3C80           ; 
 3C80           ; 	switch(mainStep)
 3C80 40911100          lds R20,L759
 3C84 5527              clr R21
 3C86 4030              cpi R20,0
 3C88 4507              cpc R20,R21
 3C8A 69F1              breq L809
 3C8C           X399:
 3C8C 4130              cpi R20,1
 3C8E E0E0              ldi R30,0
 3C90 5E07              cpc R21,R30
 3C92 09F4              brne X514
 3C94 4DC2              xjmp L850
 3C96           X514:
 3C96           X400:
 3C96 4230              cpi R20,2
 3C98 E0E0              ldi R30,0
 3C9A 5E07              cpc R21,R30
 3C9C 09F4              brne X515
 3C9E 5FC3              xjmp L869
 3CA0           X515:
 3CA0           X401:
 3CA0 4330              cpi R20,3
 3CA2 E0E0              ldi R30,0
 3CA4 5E07              cpc R21,R30
 3CA6 09F4              brne X516
 3CA8 86C3              xjmp L874
 3CAA           X516:
 3CAA           X402:
 3CAA 4430              cpi R20,4
 3CAC E0E0              ldi R30,0
 3CAE 5E07              cpc R21,R30
 3CB0 09F4              brne X517
 3CB2 1BC6              xjmp L933
 3CB4           X517:
 3CB4           X403:
 3CB4 4730              cpi R20,7
 3CB6 E0E0              ldi R30,0
 3CB8 5E07              cpc R21,R30
 3CBA 11F4              brne X518
 3CBC 0C943428          xjmp L1023
 3CC0           X518:
 3CC0           X404:
 3CC0 4830              cpi R20,8
 3CC2 E0E0              ldi R30,0
 3CC4 5E07              cpc R21,R30
 3CC6 11F4              brne X519
 3CC8 0C945128          xjmp L1024
 3CCC           X519:
 3CCC           X405:
 3CCC 4030              cpi R20,0
 3CCE E0E0              ldi R30,0
 3CD0 5E07              cpc R21,R30
 3CD2 14F4              brge X520
 3CD4 0C94CE28          xjmp L806
 3CD8           X520:
 3CD8           X406:
 3CD8           L1036:
 3CD8 4436              cpi R20,100
 3CDA E0E0              ldi R30,0
 3CDC 5E07              cpc R21,R30
 3CDE 09F4              brne X521
 3CE0 56C2              xjmp L855
 3CE2           X521:
 3CE2           X407:
 3CE2 0C94CE28          xjmp L806
 3CE6           L809:
 3CE6           ; 	{
 3CE6           ; 		case 0:		// 取样臂位置初始化
 3CE6           ; 			switch(workStep)
 3CE6 40911200          lds R20,L760
 3CEA 5527              clr R21
 3CEC 4030              cpi R20,0
 3CEE 4507              cpc R20,R21
 3CF0 09F4              brne X522
 3CF2 4EC0              xjmp L813
 3CF4           X522:
 3CF4           X408:
 3CF4 4130              cpi R20,1
 3CF6 E0E0              ldi R30,0
 3CF8 5E07              cpc R21,R30
 3CFA 09F4              brne X523
 3CFC 84C0              xjmp L814
 3CFE           X523:
 3CFE           X409:
 3CFE 4230              cpi R20,2
 3D00 E0E0              ldi R30,0
 3D02 5E07              cpc R21,R30
 3D04 09F4              brne X524
 3D06 98C0              xjmp L815
 3D08           X524:
 3D08           X410:
 3D08 4330              cpi R20,3
 3D0A E0E0              ldi R30,0
 3D0C 5E07              cpc R21,R30
 3D0E 09F4              brne X525
 3D10 A7C0              xjmp L816
 3D12           X525:
 3D12           X411:
 3D12 4430              cpi R20,4
 3D14 E0E0              ldi R30,0
 3D16 5E07              cpc R21,R30
 3D18 09F4              brne X526
 3D1A 1CC1              xjmp L826
 3D1C           X526:
 3D1C           X412:
 3D1C 4530              cpi R20,5
 3D1E E0E0              ldi R30,0
 3D20 5E07              cpc R21,R30
 3D22 09F4              brne X527
 3D24 24C1              xjmp L827
 3D26           X527:
 3D26           X413:
 3D26 4630              cpi R20,6
 3D28 E0E0              ldi R30,0
 3D2A 5E07              cpc R21,R30
 3D2C 09F4              brne X528
 3D2E 38C1              xjmp L828
 3D30           X528:
 3D30           X414:
 3D30 4730              cpi R20,7
 3D32 E0E0              ldi R30,0
 3D34 5E07              cpc R21,R30
 3D36 09F4              brne X529
 3D38 80C1              xjmp L838
 3D3A           X529:
 3D3A           X415:
 3D3A 4830              cpi R20,8
 3D3C E0E0              ldi R30,0
 3D3E 5E07              cpc R21,R30
 3D40 09F4              brne X530
 3D42 8DC1              xjmp L839
 3D44           X530:
 3D44           X416:
 3D44 4930              cpi R20,9
 3D46 E0E0              ldi R30,0
 3D48 5E07              cpc R21,R30
 3D4A 09F4              brne X531
 3D4C A1C1              xjmp L840
 3D4E           X531:
 3D4E           X417:
 3D4E 4030              cpi R20,0
 3D50 E0E0              ldi R30,0
 3D52 5E07              cpc R21,R30
 3D54 14F4              brge X532
 3D56 0C94D328          xjmp L807
 3D5A           X532:
 3D5A           X418:
 3D5A           L849:
 3D5A 4E36              cpi R20,110
 3D5C E0E0              ldi R30,0
 3D5E 5E07              cpc R21,R30
 3D60 09F4              brne X533
 3D62 A8C0              xjmp L819
 3D64           X533:
 3D64           X419:
 3D64 4F36              cpi R20,111
 3D66 E0E0              ldi R30,0
 3D68 5E07              cpc R21,R30
 3D6A 09F4              brne X534
 3D6C B4C0              xjmp L820
 3D6E           X534:
 3D6E           X420:
 3D6E 4037              cpi R20,112
 3D70 E0E0              ldi R30,0
 3D72 5E07              cpc R21,R30
 3D74 09F4              brne X535
 3D76 BDC0              xjmp L821
 3D78           X535:
 3D78           X421:
 3D78 4137              cpi R20,113
 3D7A E0E0              ldi R30,0
 3D7C 5E07              cpc R21,R30
 3D7E 09F4              brne X536
 3D80 CAC0              xjmp L824
 3D82           X536:
 3D82           X422:
 3D82 4237              cpi R20,114
 3D84 E0E0              ldi R30,0
 3D86 5E07              cpc R21,R30
 3D88 09F4              brne X537
 3D8A D6C0              xjmp L825
 3D8C           X537:
 3D8C           X423:
 3D8C 0C94D328          xjmp L807
 3D90           L813:
 3D90           ; 			{
 3D90           ; 				case 0:		// 	取样针回到起始位
 3D90           ; 					ReadLiquidMonitorResult(0);
 3D90 0027              clr R16
 3D92 0E940000          xcall _ReadLiquidMonitorResult
 3D96           ;                                       ReadLiquidMonitorResult(1);
 3D96 01E0              ldi R16,1
 3D98 0E940000          xcall _ReadLiquidMonitorResult
 3D9C           ;                                       ReadLiquidMonitorResult(2);
 3D9C 02E0              ldi R16,2
 3D9E 0E940000          xcall _ReadLiquidMonitorResult
 3DA2           ;                                       ReadLiquidMonitorResult(3);
 3DA2 03E0              ldi R16,3
 3DA4 0E940000          xcall _ReadLiquidMonitorResult
 3DA8           ;                                       SetMotRunPam(MOT_SAMP_NEEDLE, 240, 20, CURRENT_SAMP_NEEDLE);
 3DA8 83E0              ldi R24,3
 3DAA 8A83              std y+2,R24
 3DAC 84E1              ldi R24,20
 3DAE 8883              std y+0,R24
 3DB0 20EF              ldi R18,240
 3DB2 03E0              ldi R16,3
 3DB4 0E940000          xcall _SetMotRunPam
 3DB8           ;                                       SetMotRunPam(MOT_SAMP_TRUN,200,10,CURRENT_SAMP_TRUN);
 3DB8 84E0              ldi R24,4
 3DBA 8A83              std y+2,R24
 3DBC 8AE0              ldi R24,10
 3DBE 8883              std y+0,R24
 3DC0 28EC              ldi R18,200
 3DC2 02E0              ldi R16,2
 3DC4 0E940000          xcall _SetMotRunPam
 3DC8           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 3DC8 03E0              ldi R16,3
 3DCA 0E940000          xcall _MotInitCheck
 3DCE           ;                                       _EffluentMotRun(20, 120);
 3DCE 28E7              ldi R18,120
 3DD0 04E1              ldi R16,20
 3DD2 10E0              ldi R17,0
 3DD4 0E947329          xcall __EffluentMotRun
 3DD8           ;                                       waitMotSampNeedle = 1;
 3DD8 81E0              ldi R24,1
 3DDA 80934E00          sts _waitMotSampNeedle,R24
 3DDE           ;                                       workStep = 1;
 3DDE 80931200          sts L760,R24
 3DE2           ;                                       Uart0ReUnable;
 3DE2 8091C100          lds R24,193
 3DE6 8F7E              andi R24,239
 3DE8 8093C100          sts 193,R24
 3DEC           ;                                       uart_Printf("%s\r\n",strM2100);
 3DEC 20E0              ldi R18,<_strM2100
 3DEE 30E0              ldi R19,>_strM2100
 3DF0 00E0              ldi R16,<L88
 3DF2 10E0              ldi R17,>L88
 3DF4 0E940000          xcall _uart_Printf
 3DF8           ;                                       Uart0ReEnable;
 3DF8 8091C100          lds R24,193
 3DFC 8061              ori R24,16
 3DFE 8093C100          sts 193,R24
 3E02           ;                                       break;
 3E02 0C94D328          xjmp L807
 3E06           L814:
 3E06           ; 				case 1:		// 旋转臂回到起始点
 3E06           ; 					MotInitCheck(MOT_SAMP_TRUN);
 3E06 02E0              ldi R16,2
 3E08 0E940000          xcall _MotInitCheck
 3E0C           ;                                       waitMotSampTurn = 1;
 3E0C 81E0              ldi R24,1
 3E0E 80934F00          sts _waitMotSampTurn,R24
 3E12           ;                                       // 读取取样臂位置
 3E12           ;                                       NeedleOnMixCenterPos = GetNeedleOnMixCenterPos();
 3E12 0E940000          xcall _GetNeedleOnMixCenterPos
 3E16 6801              movw R12,R16
 3E18 D0923B00          sts _NeedleOnMixCenterPos+1,R13
 3E1C C0923A00          sts _NeedleOnMixCenterPos,R12
 3E20           ;                                       NeedleOnMixSidePos = GetNeedleOnMixSidePos();
 3E20 0E940000          xcall _GetNeedleOnMixSidePos
 3E24 6801              movw R12,R16
 3E26 D0923D00          sts _NeedleOnMixSidePos+1,R13
 3E2A C0923C00          sts _NeedleOnMixSidePos,R12
 3E2E           ;                                       workStep = 2;
 3E2E 82E0              ldi R24,2
 3E30 80931200          sts L760,R24
 3E34           ;                                       break;
 3E34 0C94D328          xjmp L807
 3E38           L815:
 3E38           ; 				case 2:		// 取样臂运行到混匀池正上方
 3E38           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);	
 3E38 20913A00          lds R18,_NeedleOnMixCenterPos
 3E3C 30913B00          lds R19,_NeedleOnMixCenterPos+1
 3E40 02E0              ldi R16,2
 3E42 0E940000          xcall _MotRunTo
 3E46           ;                                       waitMotSampTurn = 1;
 3E46 81E0              ldi R24,1
 3E48 80934F00          sts _waitMotSampTurn,R24
 3E4C           ;                                       waitEffluent = 1;
 3E4C 80934A00          sts _waitEffluent,R24
 3E50           ;                                       detRetry = 0;
 3E50 2224              clr R2
 3E52 20921500          sts L763,R2
 3E56           ;                                       workStep = 3;
 3E56 83E0              ldi R24,3
 3E58 80931200          sts L760,R24
 3E5C           ;                                       break;
 3E5C 0C94D328          xjmp L807
 3E60           L816:
 3E60           ; 				case 3:		// 预排清洗头
 3E60           ; 					detRetry ++;
 3E60 80911500          lds R24,L763
 3E64 8F5F              subi R24,255    ; addi 1
 3E66 80931500          sts L763,R24
 3E6A           ;                                       SetEValve(EV3, EV_OPEN);
 3E6A 21E0              ldi R18,1
 3E6C 03E0              ldi R16,3
 3E6E 0E940000          xcall _SetEValve
 3E72           ;                                       _EffluentMotRun(20, 120);
 3E72 28E7              ldi R18,120
 3E74 04E1              ldi R16,20
 3E76 10E0              ldi R17,0
 3E78 0E947329          xcall __EffluentMotRun
 3E7C           ;                                       _NeedleMotRunTo(_POS_MIX_TOP, 200);
 3E7C 28EC              ldi R18,200
 3E7E 08E6              ldi R16,360
 3E80 11E0              ldi R17,1
 3E82 0E94E529          xcall __NeedleMotRunTo
 3E86           ;                                       waitMotSampNeedle = 1;
 3E86 81E0              ldi R24,1
 3E88 80934E00          sts _waitMotSampNeedle,R24
 3E8C           ;                                       waitEffluent = 1;
 3E8C 80934A00          sts _waitEffluent,R24
 3E90           ;                                       if( getLiqDetADC(NeedleChannel) < 500)  // 检查液体探测
 3E90 0027              clr R16
 3E92 0E940000          xcall _getLiqDetADC
 3E96 A801              movw R20,R16
 3E98 043F              cpi R16,244
 3E9A E1E0              ldi R30,1
 3E9C 1E07              cpc R17,R30
 3E9E 28F4              brsh L817
 3EA0           X424:
 3EA0           ; 						workStep = 110;
 3EA0 8EE6              ldi R24,110
 3EA2 80931200          sts L760,R24
 3EA6 0C94D328          xjmp L807
 3EAA           L817:
 3EAA           ; 					else
 3EAA           ; 						workStep = 4;
 3EAA 84E0              ldi R24,4
 3EAC 80931200          sts L760,R24
 3EB0           ;                                       break;
 3EB0 0C94D328          xjmp L807
 3EB4           L819:
 3EB4           ; 				case 110:	// 取样针空吸,将液路与针隔离
 3EB4           ; 					SetEValve(EV2, EV_OPEN);
 3EB4 21E0              ldi R18,1
 3EB6 02E0              ldi R16,2
 3EB8 0E940000          xcall _SetEValve
 3EBC           ;                                       _FluidMotRun(-1, 20);
 3EBC 24E1              ldi R18,20
 3EBE 0FEF              ldi R16,-1
 3EC0 1FEF              ldi R17,-1
 3EC2 0E944E29          xcall __FluidMotRun
 3EC6           ;                                       waitMotFluid = 1;
 3EC6 81E0              ldi R24,1
 3EC8 80934C00          sts _waitMotFluid,R24
 3ECC           ;                                       workStep = 111;
 3ECC 8FE6              ldi R24,111
 3ECE 80931200          sts L760,R24
 3ED2           ;                                       break;
 3ED2 0C94D328          xjmp L807
 3ED6           L820:
 3ED6           ; 				case 111:	// 关闭吸空
 3ED6           ; 					SetDelayTime(MOT_FLUID, 20);
 3ED6 24E1              ldi R18,20
 3ED8 30E0              ldi R19,0
 3EDA 0AE0              ldi R16,10
 3EDC 0E940000          xcall _SetDelayTime
 3EE0           ;                                       SetEValve(EV2, EV_CLOSE);
 3EE0 2227              clr R18
 3EE2 02E0              ldi R16,2
 3EE4 0E940000          xcall _SetEValve
 3EE8           ;                                       workStep = 112;
 3EE8 80E7              ldi R24,112
 3EEA 80931200          sts L760,R24
 3EEE           ;                                       break;
 3EEE 0C94D328          xjmp L807
 3EF2           L821:
 3EF2           ; 				case 112:	// 再次检查液体探测
 3EF2           ; 					if( getLiqDetADC(NeedleChannel) < 500)	// 检查液体探测
 3EF2 0027              clr R16
 3EF4 0E940000          xcall _getLiqDetADC
 3EF8 A801              movw R20,R16
 3EFA 043F              cpi R16,244
 3EFC E1E0              ldi R30,1
 3EFE 1E07              cpc R17,R30
 3F00 28F4              brsh L822
 3F02           X425:
 3F02           ; 						workStep = 113;
 3F02 81E7              ldi R24,113
 3F04 80931200          sts L760,R24
 3F08 0C94D328          xjmp L807
 3F0C           L822:
 3F0C           ; 					else
 3F0C           ; 						workStep = 4;
 3F0C 84E0              ldi R24,4
 3F0E 80931200          sts L760,R24
 3F12           ;                                       break;
 3F12 0C94D328          xjmp L807
 3F16           L824:
 3F16           ; 				case 113:	// 清洗头液路吸空, 将液路与针隔离
 3F16           ; 					SetEValve(EV1, EV_OPEN);
 3F16 21E0              ldi R18,1
 3F18 01E0              ldi R16,1
 3F1A 0E940000          xcall _SetEValve
 3F1E           ;                                       _FluidMotRun(-1, 20);
 3F1E 24E1              ldi R18,20
 3F20 0FEF              ldi R16,-1
 3F22 1FEF              ldi R17,-1
 3F24 0E944E29          xcall __FluidMotRun
 3F28           ;                                       waitMotFluid = 1;
 3F28 81E0              ldi R24,1
 3F2A 80934C00          sts _waitMotFluid,R24
 3F2E           ;                                       workStep = 114;
 3F2E 82E7              ldi R24,114
 3F30 80931200          sts L760,R24
 3F34           ;                                       break;
 3F34 0C94D328          xjmp L807
 3F38           L825:
 3F38           ; 				case 114:
 3F38           ; 					SetDelayTime(MOT_FLUID, 20);
 3F38 24E1              ldi R18,20
 3F3A 30E0              ldi R19,0
 3F3C 0AE0              ldi R16,10
 3F3E 0E940000          xcall _SetDelayTime
 3F42           ;                                       SetEValve(EV1, EV_CLOSE);
 3F42 2227              clr R18
 3F44 01E0              ldi R16,1
 3F46 0E940000          xcall _SetEValve
 3F4A           ;                               //      if(detRetry < 4)
 3F4A           ;                               //              workStep = 3;
 3F4A           ;                               //      else
 3F4A           ;                                               workStep = 4;
 3F4A 84E0              ldi R24,4
 3F4C 80931200          sts L760,R24
 3F50           ;                                       break;
 3F50 0C94D328          xjmp L807
 3F54           L826:
 3F54           ; 				case 4:		// 液体探测初始化
 3F54           ; 				/*	if(CheckLiqDetBase())
 3F54           ; 					{
 3F54           ; 						mainStep = 8;	
 3F54           ; 						workStep = 0;
 3F54           ; 						Uart0ReUnable;	
 3F54           ; 						uart_Printf("!2501\r\n");		// 开始液路自检，在进行液面探测功能检验时发生错误
 3F54           ; 						Uart0ReEnable;
 3F54           ; 						break;// 退出处理
 3F54           ; 					}
 3F54           ; 				*/
 3F54           ; 					liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 3F54 0027              clr R16
 3F56 0E940000          xcall _getLiqDetADC
 3F5A 6801              movw R12,R16
 3F5C D0925200          sts _liqDetBaseAdc+1,R13
 3F60 C0925100          sts _liqDetBaseAdc,R12
 3F64           ;                                       //uart_Printf("//LiqDetBaseAdc1 $%4d\r\n",liqDetBaseAdc);       
 3F64           ;                                       workStep = 5;
 3F64 85E0              ldi R24,5
 3F66 80931200          sts L760,R24
 3F6A           ;                                       break;
 3F6A 0C94D328          xjmp L807
 3F6E           L827:
 3F6E           ; 				case 5:		// 取样针运行到混匀池中,探测池中是否有液体, 分两段进行
 3F6E           ; 					SetEValve(EV_ALL, EV_CLOSE);
 3F6E 2227              clr R18
 3F70 0027              clr R16
 3F72 0E940000          xcall _SetEValve
 3F76           ;                                       SetMotRunPam(MOT_SAMP_NEEDLE, 100, 10, CURRENT_SAMP_NEEDLE);
 3F76 83E0              ldi R24,3
 3F78 8A83              std y+2,R24
 3F7A 8AE0              ldi R24,10
 3F7C 8883              std y+0,R24
 3F7E 24E6              ldi R18,100
 3F80 03E0              ldi R16,3
 3F82 0E940000          xcall _SetMotRunPam
 3F86           ;                                       MotRunTo(MOT_SAMP_NEEDLE, (_POS_MIX_TOP+_POS_MIX_BUTTOM)/2);
 3F86 26E7              ldi R18,630
 3F88 32E0              ldi R19,2
 3F8A 03E0              ldi R16,3
 3F8C 0E940000          xcall _MotRunTo
 3F90           ;                                       detRetry = 0;
 3F90 2224              clr R2
 3F92 20921500          sts L763,R2
 3F96           ;                                       workStep = 6;
 3F96 86E0              ldi R24,6
 3F98 80931200          sts L760,R24
 3F9C           ;                                       break;
 3F9C 0C94D328          xjmp L807
 3FA0           L828:
 3FA0           ; 				case 6:		// 液面探测，如果有探测到液体，则报警排液异常
 3FA0           ; 					i = getLiqDetADC(NeedleChannel);
 3FA0 0027              clr R16
 3FA2 0E940000          xcall _getLiqDetADC
 3FA6 6801              movw R12,R16
 3FA8 5601              movw R10,R12
 3FAA           ;                                       if(i < liqDetBaseAdc)
 3FAA 20905100          lds R2,_liqDetBaseAdc
 3FAE 30905200          lds R3,_liqDetBaseAdc+1
 3FB2 0215              cp R16,R2
 3FB4 1305              cpc R17,R3
 3FB6 A0F5              brsh L829
 3FB8           X426:
 3FB8           ; 					{
 3FB8           ; 						i = liqDetBaseAdc - i;
 3FB8 201A              sub R2,R16
 3FBA 310A              sbc R3,R17
 3FBC 5101              movw R10,R2
 3FBE           ;                                               if(i > 200)
 3FBE 88EC              ldi R24,200
 3FC0 90E0              ldi R25,0
 3FC2 8215              cp R24,R2
 3FC4 9305              cpc R25,R3
 3FC6 48F5              brsh L831
 3FC8           X427:
 3FC8           ; 						{
 3FC8           ; 							if(detRetry < 15)	// 重测计数
 3FC8 80911500          lds R24,L763
 3FCC 8F30              cpi R24,15
 3FCE 28F4              brsh L833
 3FD0           X428:
 3FD0           ; 							{
 3FD0           ; 								detRetry ++;	
 3FD0 8F5F              subi R24,255    ; addi 1
 3FD2 80931500          sts L763,R24
 3FD6           ;                                                               break;  
 3FD6 0C94D328          xjmp L807
 3FDA           L833:
 3FDA           ; 							}
 3FDA           ; 							// 混匀池有残留液，排液异常
 3FDA           ; 							MotStop(MOT_SAMP_NEEDLE);
 3FDA 03E0              ldi R16,3
 3FDC 0E940000          xcall _MotStop
 3FE0           ;                                                       SetBeepWarning();
 3FE0 0E940000          xcall _SetBeepWarning
 3FE4           ;                                                       mainStep = 8;
 3FE4 88E0              ldi R24,8
 3FE6 80931100          sts L759,R24
 3FEA           ;                                                       workStep = 0;
 3FEA 2224              clr R2
 3FEC 20921200          sts L760,R2
 3FF0           ;                                                       SetDelayTime(MOT_SAMP_NEEDLE, 20);
 3FF0 24E1              ldi R18,20
 3FF2 30E0              ldi R19,0
 3FF4 03E0              ldi R16,3
 3FF6 0E940000          xcall _SetDelayTime
 3FFA           ;                                                       Uart0ReUnable;
 3FFA 8091C100          lds R24,193
 3FFE 8F7E              andi R24,239
 4000 8093C100          sts 193,R24
 4004           ;                                                       uart_Printf("!2502\r\n");       // 开始液路自检， 在检查混匀池时， 发现混匀池中有残留水， 请检查废液泵以及排液通道
 4004 00E0              ldi R16,<L835
 4006 10E0              ldi R17,>L835
 4008 0E940000          xcall _uart_Printf
 400C           ;                                                       Uart0ReEnable;
 400C 8091C100          lds R24,193
 4010 8061              ori R24,16
 4012 8093C100          sts 193,R24
 4016           ;                                                       break;
 4016 0C94D328          xjmp L807
 401A           L831:
 401A           ; 						}
 401A           ; 						else
 401A           ; 							detRetry = 0;
 401A 2224              clr R2
 401C 20921500          sts L763,R2
 4020           ;                                       }
 4020           L829:
 4020           ; 					if(GetMotState(MOT_SAMP_NEEDLE) == STA_SLAVE_FREE)
 4020 03E0              ldi R16,3
 4022 0E940000          xcall _GetMotState
 4026 402F              mov R20,R16
 4028 0130              cpi R16,1
 402A 11F0              breq X538
 402C 0C94D328          xjmp L807
 4030           X538:
 4030           X429:
 4030           ; 					{
 4030           ; 						// 取样针下降停止，未探测到残留液体,正常
 4030           ; 						workStep = 7;
 4030 87E0              ldi R24,7
 4032 80931200          sts L760,R24
 4036           ;                                       }
 4036           ;                                       break;
 4036 0C94D328          xjmp L807
 403A           L838:
 403A           ; 				case 7:		// 液体探测初始化
 403A           ; 				/*	if(CheckLiqDetBase())
 403A           ; 					{
 403A           ; 						mainStep = 8;	
 403A           ; 						workStep = 0;	
 403A           ; 						break;// 退出处理
 403A           ; 					}
 403A           ; 				*/
 403A           ; 					liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 403A 0027              clr R16
 403C 0E940000          xcall _getLiqDetADC
 4040 6801              movw R12,R16
 4042 D0925200          sts _liqDetBaseAdc+1,R13
 4046 C0925100          sts _liqDetBaseAdc,R12
 404A           ;                                       //uart_Printf("//LiqDetBaseAdc2 $%4d\r\n",liqDetBaseAdc);       
 404A           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 20);
 404A 24E1              ldi R18,20
 404C 30E0              ldi R19,0
 404E 03E0              ldi R16,3
 4050 0E940000          xcall _SetDelayTime
 4054           ;                                       workStep = 8;
 4054 88E0              ldi R24,8
 4056 80931200          sts L760,R24
 405A           ;                                       break;
 405A 0C94D328          xjmp L807
 405E           L839:
 405E           ; 				case 8:		// 取样针运行到混匀池中,探测池中是否有液体, 第二`段
 405E           ; 					SetEValve(EV_ALL, EV_CLOSE);
 405E 2227              clr R18
 4060 0027              clr R16
 4062 0E940000          xcall _SetEValve
 4066           ;                                       SetMotRunPam(MOT_SAMP_NEEDLE, 60, 20, CURRENT_SAMP_NEEDLE);
 4066 83E0              ldi R24,3
 4068 8A83              std y+2,R24
 406A 84E1              ldi R24,20
 406C 8883              std y+0,R24
 406E 2CE3              ldi R18,60
 4070 03E0              ldi R16,3
 4072 0E940000          xcall _SetMotRunPam
 4076           ;                                       MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_BUTTOM);
 4076 24E8              ldi R18,900
 4078 33E0              ldi R19,3
 407A 03E0              ldi R16,3
 407C 0E940000          xcall _MotRunTo
 4080           ;                                       detRetry = 0;
 4080 2224              clr R2
 4082 20921500          sts L763,R2
 4086           ;                                       workStep = 9;
 4086 89E0              ldi R24,9
 4088 80931200          sts L760,R24
 408C           ;                                       break;
 408C 0C94D328          xjmp L807
 4090           L840:
 4090           ; 				case 9:		// 液面探测，如果有探测到液体，则报警排液异常
 4090           ; 					i = getLiqDetADC(NeedleChannel);
 4090 0027              clr R16
 4092 0E940000          xcall _getLiqDetADC
 4096 6801              movw R12,R16
 4098 5601              movw R10,R12
 409A           ;                                       if(i < liqDetBaseAdc)
 409A 20905100          lds R2,_liqDetBaseAdc
 409E 30905200          lds R3,_liqDetBaseAdc+1
 40A2 0215              cp R16,R2
 40A4 1305              cpc R17,R3
 40A6 A0F5              brsh L841
 40A8           X430:
 40A8           ; 					{
 40A8           ; 						i = liqDetBaseAdc - i;
 40A8 201A              sub R2,R16
 40AA 310A              sbc R3,R17
 40AC 5101              movw R10,R2
 40AE           ;                                               if(i > 150)
 40AE 86E9              ldi R24,150
 40B0 90E0              ldi R25,0
 40B2 8215              cp R24,R2
 40B4 9305              cpc R25,R3
 40B6 48F5              brsh L843
 40B8           X431:
 40B8           ; 						{
 40B8           ; 							if(detRetry < 15)	// 重测计数
 40B8 80911500          lds R24,L763
 40BC 8F30              cpi R24,15
 40BE 28F4              brsh L845
 40C0           X432:
 40C0           ; 							{
 40C0           ; 								detRetry ++;	
 40C0 8F5F              subi R24,255    ; addi 1
 40C2 80931500          sts L763,R24
 40C6           ;                                                               break;  
 40C6 0C94D328          xjmp L807
 40CA           L845:
 40CA           ; 							}
 40CA           ; 							// 混匀池有残留液，排液异常
 40CA           ; 							MotStop(MOT_SAMP_NEEDLE);
 40CA 03E0              ldi R16,3
 40CC 0E940000          xcall _MotStop
 40D0           ;                                                       SetBeepWarning();
 40D0 0E940000          xcall _SetBeepWarning
 40D4           ;                                                       mainStep = 8;
 40D4 88E0              ldi R24,8
 40D6 80931100          sts L759,R24
 40DA           ;                                                       workStep = 0;
 40DA 2224              clr R2
 40DC 20921200          sts L760,R2
 40E0           ;                                                       SetDelayTime(MOT_SAMP_NEEDLE, 5);
 40E0 25E0              ldi R18,5
 40E2 30E0              ldi R19,0
 40E4 03E0              ldi R16,3
 40E6 0E940000          xcall _SetDelayTime
 40EA           ;                                                       Uart0ReUnable;
 40EA 8091C100          lds R24,193
 40EE 8F7E              andi R24,239
 40F0 8093C100          sts 193,R24
 40F4           ;                                                       uart_Printf("!2502\r\n");       // 开始液路自检， 在检查混匀池时， 发现混匀池中有残留水， 请检查废液泵以及排液通道
 40F4 00E0              ldi R16,<L835
 40F6 10E0              ldi R17,>L835
 40F8 0E940000          xcall _uart_Printf
 40FC           ;                                                       Uart0ReEnable;
 40FC 8091C100          lds R24,193
 4100 8061              ori R24,16
 4102 8093C100          sts 193,R24
 4106           ;                                                       break;
 4106 0C94D328          xjmp L807
 410A           L843:
 410A           ; 							}
 410A           ; 						else
 410A           ; 							detRetry = 0;
 410A 2224              clr R2
 410C 20921500          sts L763,R2
 4110           ;                                       }
 4110           L841:
 4110           ; 					if(GetMotState(MOT_SAMP_NEEDLE) == STA_SLAVE_FREE)
 4110 03E0              ldi R16,3
 4112 0E940000          xcall _GetMotState
 4116 402F              mov R20,R16
 4118 0130              cpi R16,1
 411A 11F0              breq X539
 411C 0C94D328          xjmp L807
 4120           X539:
 4120           X433:
 4120           ; 					{
 4120           ; 						// 取样针下降停止，未探测到残留液体,正常
 4120           ; 						workStep = 0;
 4120 2224              clr R2
 4122 20921200          sts L760,R2
 4126           ;                                               mainStep = 1;
 4126 81E0              ldi R24,1
 4128 80931100          sts L759,R24
 412C           ;                                       }
 412C           ;                                       break;
 412C           ;                               }
 412C           ;                       break;
 412C 0C94D328          xjmp L807
 4130           L850:
 4130           ; 		case 1:		// 灌注清洗液
 4130           ; 			SetDelayTime(MOT_EFFLUENT, 2);
 4130 22E0              ldi R18,2
 4132 30E0              ldi R19,0
 4134 0BE0              ldi R16,11
 4136 0E940000          xcall _SetDelayTime
 413A           ;                       ucTmp = _PrimingFluid();
 413A 0E94BC2C          xcall __PrimingFluid
 413E 6801              movw R12,R16
 4140 4C2D              mov R20,R12
 4142           ;                       if(ucTmp == 1)
 4142 0130              cpi R16,1
 4144 41F4              brne L851
 4146           X434:
 4146           ; 			{
 4146           ; 				workStep = 0;
 4146 2224              clr R2
 4148 20921200          sts L760,R2
 414C           ;                               mainStep = 100;
 414C 84E6              ldi R24,100
 414E 80931100          sts L759,R24
 4152           ;                       }
 4152 0C94D328          xjmp L807
 4156           L851:
 4156           ; 			else if(ucTmp == 0xff)
 4156 4F3F              cpi R20,255
 4158 11F0              breq X540
 415A 0C94D328          xjmp L807
 415E           X540:
 415E           X435:
 415E           ; 			{
 415E           ; 				Uart0ReUnable;
 415E 8091C100          lds R24,193
 4162 8F7E              andi R24,239
 4164 8093C100          sts 193,R24
 4168           ;                               uart_Printf("%s\r\n",strE3902); 
 4168 20E0              ldi R18,<_strE3902
 416A 30E0              ldi R19,>_strE3902
 416C 00E0              ldi R16,<L88
 416E 10E0              ldi R17,>L88
 4170 0E940000          xcall _uart_Printf
 4174           ;                               Uart0ReEnable;
 4174 8091C100          lds R24,193
 4178 8061              ori R24,16
 417A 8093C100          sts 193,R24
 417E           ;                               mainStep = 8;
 417E 88E0              ldi R24,8
 4180 80931100          sts L759,R24
 4184           ;                               workStep = 0;
 4184 2224              clr R2
 4186 20921200          sts L760,R2
 418A           ;                       }
 418A           ;                       break;
 418A 0C94D328          xjmp L807
 418E           L855:
 418E           ; 		case 100:	// 清洗清洗头和取样针通道
 418E           ; 			switch(workStep)
 418E 60911200          lds R22,L760
 4192 7727              clr R23
 4194 6030              cpi R22,0
 4196 6707              cpc R22,R23
 4198 09F4              brne X541
 419A 2EC0              xjmp L859
 419C           X541:
 419C           X436:
 419C 6130              cpi R22,1
 419E E0E0              ldi R30,0
 41A0 7E07              cpc R23,R30
 41A2 09F4              brne X542
 41A4 3AC0              xjmp L860
 41A6           X542:
 41A6           X437:
 41A6 6230              cpi R22,2
 41A8 E0E0              ldi R30,0
 41AA 7E07              cpc R23,R30
 41AC 09F4              brne X543
 41AE 4DC0              xjmp L861
 41B0           X543:
 41B0           X438:
 41B0 6330              cpi R22,3
 41B2 E0E0              ldi R30,0
 41B4 7E07              cpc R23,R30
 41B6 09F4              brne X544
 41B8 59C0              xjmp L862
 41BA           X544:
 41BA           X439:
 41BA 6430              cpi R22,4
 41BC E0E0              ldi R30,0
 41BE 7E07              cpc R23,R30
 41C0 09F4              brne X545
 41C2 67C0              xjmp L863
 41C4           X545:
 41C4           X440:
 41C4 6530              cpi R22,5
 41C6 E0E0              ldi R30,0
 41C8 7E07              cpc R23,R30
 41CA 09F4              brne X546
 41CC 7CC0              xjmp L864
 41CE           X546:
 41CE           X441:
 41CE 6630              cpi R22,6
 41D0 E0E0              ldi R30,0
 41D2 7E07              cpc R23,R30
 41D4 09F4              brne X547
 41D6 91C0              xjmp L865
 41D8           X547:
 41D8           X442:
 41D8 6730              cpi R22,7
 41DA E0E0              ldi R30,0
 41DC 7E07              cpc R23,R30
 41DE 09F4              brne X548
 41E0 9BC0              xjmp L866
 41E2           X548:
 41E2           X443:
 41E2 6830              cpi R22,8
 41E4 E0E0              ldi R30,0
 41E6 7E07              cpc R23,R30
 41E8 09F4              brne X549
 41EA A3C0              xjmp L867
 41EC           X549:
 41EC           X444:
 41EC 6930              cpi R22,9
 41EE E0E0              ldi R30,0
 41F0 7E07              cpc R23,R30
 41F2 09F4              brne X550
 41F4 A9C0              xjmp L868
 41F6           X550:
 41F6           X445:
 41F6 D7C7              xjmp L807
 41F8           L859:
 41F8           ; 			{
 41F8           ; 				case 0:	// 建立负压
 41F8           ; 					SetEValve(EV3, EV_OPEN);
 41F8 21E0              ldi R18,1
 41FA 03E0              ldi R16,3
 41FC 0E940000          xcall _SetEValve
 4200           ;                                       _EffluentMotRun(100, 200);
 4200 28EC              ldi R18,200
 4202 04E6              ldi R16,100
 4204 10E0              ldi R17,0
 4206 0E947329          xcall __EffluentMotRun
 420A           ;                                       SetDelayTime(MOT_EFFLUENT, 5);
 420A 25E0              ldi R18,5
 420C 30E0              ldi R19,0
 420E 0BE0              ldi R16,11
 4210 0E940000          xcall _SetDelayTime
 4214           ;                                       workStep = 1;
 4214 81E0              ldi R24,1
 4216 80931200          sts L760,R24
 421A           L860:
 421A           ; 				case 1:	// 清洗
 421A           ; 					SetEValve(EV1, EV_OPEN);
 421A 21E0              ldi R18,1
 421C 01E0              ldi R16,1
 421E 0E940000          xcall _SetEValve
 4222           ;                                       _FluidMotRun(30, 30);
 4222 2EE1              ldi R18,30
 4224 0EE1              ldi R16,30
 4226 10E0              ldi R17,0
 4228 0E944E29          xcall __FluidMotRun
 422C           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 422C 03E0              ldi R16,3
 422E 0E940000          xcall _MotInitCheck
 4232           ;                                       SetDelayTime(MOT_EFFLUENT, 20);
 4232 24E1              ldi R18,20
 4234 30E0              ldi R19,0
 4236 0BE0              ldi R16,11
 4238 0E940000          xcall _SetDelayTime
 423C           ;                                       waitMotSampNeedle = 1;
 423C 81E0              ldi R24,1
 423E 80934E00          sts _waitMotSampNeedle,R24
 4242           ;                                       workStep = 2;
 4242 82E0              ldi R24,2
 4244 80931200          sts L760,R24
 4248           ;                                       break;
 4248 AEC7              xjmp L807
 424A           L861:
 424A           ; 				case 2:	// 先关闭清洗液
 424A           ; 					MotStop(MOT_FLUID);
 424A 0AE0              ldi R16,10
 424C 0E940000          xcall _MotStop
 4250           ;                                       _FluidMotRun(-1, 80);
 4250 20E5              ldi R18,80
 4252 0FEF              ldi R16,-1
 4254 1FEF              ldi R17,-1
 4256 0E944E29          xcall __FluidMotRun
 425A           ;                                       SetDelayTime(MOT_EFFLUENT, 5);
 425A 25E0              ldi R18,5
 425C 30E0              ldi R19,0
 425E 0BE0              ldi R16,11
 4260 0E940000          xcall _SetDelayTime
 4264           ;                                       workStep = 3;
 4264 83E0              ldi R24,3
 4266 80931200          sts L760,R24
 426A           ;                                       break;
 426A 9DC7              xjmp L807
 426C           L862:
 426C           ; 				case 3:	// 关闭负压
 426C           ; 					SetEValve(EV_ALL, EV_CLOSE);
 426C 2227              clr R18
 426E 0027              clr R16
 4270 0E940000          xcall _SetEValve
 4274           ;                                       MotStop(MOT_EFFLUENT);
 4274 0BE0              ldi R16,11
 4276 0E940000          xcall _MotStop
 427A           ;                                       _NeedleMotRunTo(_POS_MIX_TOP, 240);
 427A 20EF              ldi R18,240
 427C 08E6              ldi R16,360
 427E 11E0              ldi R17,1
 4280 0E94E529          xcall __NeedleMotRunTo
 4284           ;                                       waitMotSampNeedle = 1;
 4284 81E0              ldi R24,1
 4286 80934E00          sts _waitMotSampNeedle,R24
 428A           ;                                       workStep = 4;
 428A 84E0              ldi R24,4
 428C 80931200          sts L760,R24
 4290           ;                                       break;
 4290 8AC7              xjmp L807
 4292           L863:
 4292           ; 				case 4:	// 清洗和灌注取样针通道
 4292           ; 					SetEValve(EV2, EV_OPEN);
 4292 21E0              ldi R18,1
 4294 02E0              ldi R16,2
 4296 0E940000          xcall _SetEValve
 429A           ;                                       SetMotRunPam(MOT_SAMP_PUMP,64,60,CURRENT_SAMP_PUMP);
 429A 86E0              ldi R24,6
 429C 8A83              std y+2,R24
 429E 8CE3              ldi R24,60
 42A0 8883              std y+0,R24
 42A2 20E4              ldi R18,64
 42A4 0CE0              ldi R16,12
 42A6 0E940000          xcall _SetMotRunPam
 42AA           ;                                       MotInitCheck(MOT_SAMP_PUMP);
 42AA 0CE0              ldi R16,12
 42AC 0E940000          xcall _MotInitCheck
 42B0           ;                                       _FluidMotRun(10, 64);
 42B0 20E4              ldi R18,64
 42B2 0AE0              ldi R16,10
 42B4 10E0              ldi R17,0
 42B6 F2D7              xcall __FluidMotRun
 42B8           ;                                       waitMotFluid = 1;
 42B8 81E0              ldi R24,1
 42BA 80934C00          sts _waitMotFluid,R24
 42BE           ;                                       workStep = 5;
 42BE 85E0              ldi R24,5
 42C0 80931200          sts L760,R24
 42C4           ;                                       break;
 42C4 70C7              xjmp L807
 42C6           L864:
 42C6           ; 				case 5:	// 清洗完毕，抽清洗头残留水
 42C6           ; 					SetEValve(EV_ALL, EV_CLOSE);
 42C6 2227              clr R18
 42C8 0027              clr R16
 42CA 0E940000          xcall _SetEValve
 42CE           ;                                       SetEValve(EV3, EV_OPEN);
 42CE 21E0              ldi R18,1
 42D0 03E0              ldi R16,3
 42D2 0E940000          xcall _SetEValve
 42D6           ;                                       _NeedleMotRunTo(0, 240);
 42D6 20EF              ldi R18,240
 42D8 0027              clr R16
 42DA 1127              clr R17
 42DC 0E94E529          xcall __NeedleMotRunTo
 42E0           ;                                       _EffluentMotRun(20, 200);
 42E0 28EC              ldi R18,200
 42E2 04E1              ldi R16,20
 42E4 10E0              ldi R17,0
 42E6 FFD7              xcall __EffluentMotRun
 42E8           ;                                       waitMotSampNeedle = 1;
 42E8 81E0              ldi R24,1
 42EA 80934E00          sts _waitMotSampNeedle,R24
 42EE           ;                                       waitEffluent = 1;
 42EE 80934A00          sts _waitEffluent,R24
 42F2           ;                                       workStep = 6;
 42F2 86E0              ldi R24,6
 42F4 80931200          sts L760,R24
 42F8           ;                                       break;
 42F8 56C7              xjmp L807
 42FA           L865:
 42FA           ; 				case 6:	// 排干混匀池水
 42FA           ; 					SetEValve(EV_ALL, EV_CLOSE);
 42FA 2227              clr R18
 42FC 0027              clr R16
 42FE 0E940000          xcall _SetEValve
 4302           ;                                       _EffluentMotRun(20, 220);
 4302 2CED              ldi R18,220
 4304 04E1              ldi R16,20
 4306 10E0              ldi R17,0
 4308 EED7              xcall __EffluentMotRun
 430A           ;                                       waitEffluent = 1;
 430A 81E0              ldi R24,1
 430C 80934A00          sts _waitEffluent,R24
 4310           ;                                       workStep = 7;
 4310 87E0              ldi R24,7
 4312 80931200          sts L760,R24
 4316           ;                                       break;
 4316 47C7              xjmp L807
 4318           L866:
 4318           ; 				case 7:	// 吸样针回抽液体，形成隔离段
 4318           ; 					SetEValve(EV2, EV_OPEN);
 4318 21E0              ldi R18,1
 431A 02E0              ldi R16,2
 431C 0E940000          xcall _SetEValve
 4320           ;                                       SetDelayTime(MOT_DILUENT, 2);
 4320 22E0              ldi R18,2
 4322 30E0              ldi R19,0
 4324 09E0              ldi R16,9
 4326 0E940000          xcall _SetDelayTime
 432A           ;                                       workStep = 8;
 432A 88E0              ldi R24,8
 432C 80931200          sts L760,R24
 4330           ;                                       break;
 4330 3AC7              xjmp L807
 4332           L867:
 4332           ; 				case 8:
 4332           ; 					_FluidMotRun(-2, 64);
 4332 20E4              ldi R18,64
 4334 0EEF              ldi R16,-2
 4336 1FEF              ldi R17,-1
 4338 B1D7              xcall __FluidMotRun
 433A           ;                                       waitMotFluid = 1;
 433A 81E0              ldi R24,1
 433C 80934C00          sts _waitMotFluid,R24
 4340           ;                                       workStep = 9;
 4340 89E0              ldi R24,9
 4342 80931200          sts L760,R24
 4346           ;                                       break;
 4346 2FC7              xjmp L807
 4348           L868:
 4348           ; 				case 9:
 4348           ; 					SetEValve(EV2, EV_CLOSE);
 4348 2227              clr R18
 434A 02E0              ldi R16,2
 434C 0E940000          xcall _SetEValve
 4350           ;                                       workStep = 0;
 4350 2224              clr R2
 4352 20921200          sts L760,R2
 4356           ;                                       mainStep = 2;
 4356 82E0              ldi R24,2
 4358 80931100          sts L759,R24
 435C           ;                                       break;
 435C           ;                               }
 435C           ;                       break;
 435C 24C7              xjmp L807
 435E           L869:
 435E           ; 		case 2:		// 灌注稀释液
 435E           ; 			SetDelayTime(MOT_EFFLUENT, 2);
 435E 22E0              ldi R18,2
 4360 30E0              ldi R19,0
 4362 0BE0              ldi R16,11
 4364 0E940000          xcall _SetDelayTime
 4368           ;                       ucTmp = _PrimingDiluent();
 4368 0E94892A          xcall __PrimingDiluent
 436C 6801              movw R12,R16
 436E 4C2D              mov R20,R12
 4370           ;                       if(ucTmp == 1)
 4370 0130              cpi R16,1
 4372 39F4              brne L870
 4374           X446:
 4374           ; 			{
 4374           ; 				workStep = 0;
 4374 2224              clr R2
 4376 20921200          sts L760,R2
 437A           ;                               mainStep = 3;
 437A 83E0              ldi R24,3
 437C 80931100          sts L759,R24
 4380           ;                       }
 4380 12C7              xjmp L807
 4382           L870:
 4382           ; 			else if(ucTmp == 0xff)
 4382 4F3F              cpi R20,255
 4384 09F0              breq X551
 4386 0FC7              xjmp L807
 4388           X551:
 4388           X447:
 4388           ; 			{
 4388           ; 				Uart0ReUnable;
 4388 8091C100          lds R24,193
 438C 8F7E              andi R24,239
 438E 8093C100          sts 193,R24
 4392           ;                               uart_Printf("%s\r\n", strE3904);
 4392 20E0              ldi R18,<_strE3904
 4394 30E0              ldi R19,>_strE3904
 4396 00E0              ldi R16,<L88
 4398 10E0              ldi R17,>L88
 439A 0E940000          xcall _uart_Printf
 439E           ;                               Uart0ReEnable;
 439E 8091C100          lds R24,193
 43A2 8061              ori R24,16
 43A4 8093C100          sts 193,R24
 43A8           ;                               mainStep = 8;
 43A8 88E0              ldi R24,8
 43AA 80931100          sts L759,R24
 43AE           ;                               workStep = 0;
 43AE 2224              clr R2
 43B0 20921200          sts L760,R2
 43B4           ;                       }
 43B4           ;                       break;
 43B4 F8C6              xjmp L807
 43B6           L874:
 43B6           ; 		// 清洗液泵和废液泵流量定标
 43B6           ; 		case 3:	
 43B6           ; 			switch(workStep)
 43B6 40911200          lds R20,L760
 43BA 5527              clr R21
 43BC 4030              cpi R20,0
 43BE E0E0              ldi R30,0
 43C0 5E07              cpc R21,R30
 43C2 0CF4              brge X552
 43C4 F0C6              xjmp L807
 43C6           X552:
 43C6           X448:
 43C6 8FE0              ldi R24,15
 43C8 90E0              ldi R25,0
 43CA 8417              cp R24,R20
 43CC 9507              cpc R25,R21
 43CE 5CF0              brlt L931
 43D0           X449:
 43D0 80E0              ldi R24,<L932
 43D2 90E0              ldi R25,>L932
 43D4 FA01              movw R30,R20
 43D6 EE0F              lsl R30
 43D8 FF1F              rol R31
 43DA E80F              add R30,R24
 43DC F91F              adc R31,R25
 43DE 2790              elpm R2,Z+
 43E0 3690              elpm R3,Z
 43E2 F101              movw R30,R2
 43E4 0994               ijmp
 43E6           L931:
 43E6 4436              cpi R20,100
 43E8 E0E0              ldi R30,0
 43EA 5E07              cpc R21,R30
 43EC D9F0              breq L879
 43EE           X450:
 43EE 4536              cpi R20,101
 43F0 E0E0              ldi R30,0
 43F2 5E07              cpc R21,R30
 43F4 59F1              breq L880
 43F6           X451:
 43F6 4636              cpi R20,102
 43F8 E0E0              ldi R30,0
 43FA 5E07              cpc R21,R30
 43FC A9F1              breq L881
 43FE           X452:
 43FE D3C6              xjmp L807
 4400           L878:
 4400           ; 			{
 4400           ; 				case 0:
 4400           ; 					SetMotRunPam(MOT_SAMP_NEEDLE, 240, 20, CURRENT_SAMP_NEEDLE);
 4400 83E0              ldi R24,3
 4402 8A83              std y+2,R24
 4404 84E1              ldi R24,20
 4406 8883              std y+0,R24
 4408 20EF              ldi R18,240
 440A 03E0              ldi R16,3
 440C 0E940000          xcall _SetMotRunPam
 4410           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 4410 03E0              ldi R16,3
 4412 0E940000          xcall _MotInitCheck
 4416           ;                                       waitMotSampNeedle = 1;
 4416 81E0              ldi R24,1
 4418 80934E00          sts _waitMotSampNeedle,R24
 441C           ;                                       workStep = 100;
 441C 84E6              ldi R24,100
 441E 80931200          sts L760,R24
 4422           ;                                       break;
 4422 C1C6              xjmp L807
 4424           L879:
 4424           ; 				case 100:
 4424           ; 					SetMotRunPam(MOT_SAMP_TRUN,200,5,CURRENT_SAMP_TRUN);
 4424 84E0              ldi R24,4
 4426 8A83              std y+2,R24
 4428 85E0              ldi R24,5
 442A 8883              std y+0,R24
 442C 28EC              ldi R18,200
 442E 02E0              ldi R16,2
 4430 0E940000          xcall _SetMotRunPam
 4434           ;                                       MotRunTo(MOT_SAMP_TRUN, 0);
 4434 2227              clr R18
 4436 3327              clr R19
 4438 02E0              ldi R16,2
 443A 0E940000          xcall _MotRunTo
 443E           ;                                       waitMotSampTurn = 1;
 443E 81E0              ldi R24,1
 4440 80934F00          sts _waitMotSampTurn,R24
 4444           ;                                       workStep = 101;
 4444 85E6              ldi R24,101
 4446 80931200          sts L760,R24
 444A           ;                                       break;
 444A ADC6              xjmp L807
 444C           L880:
 444C           ; 				case 101:
 444C           ; 					MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 444C 20913A00          lds R18,_NeedleOnMixCenterPos
 4450 30913B00          lds R19,_NeedleOnMixCenterPos+1
 4454 02E0              ldi R16,2
 4456 0E940000          xcall _MotRunTo
 445A           ;                                       waitMotSampTurn = 1;
 445A 81E0              ldi R24,1
 445C 80934F00          sts _waitMotSampTurn,R24
 4460           ;                                       workStep = 102;
 4460 86E6              ldi R24,102
 4462 80931200          sts L760,R24
 4466           ;                                       break;
 4466 9FC6              xjmp L807
 4468           L881:
 4468           ; 				case 102:		// 取样针运行到定标液起始高位
 4468           ; 					_NeedleMotRunTo(_POS_MIX_CAL_START, 240);
 4468 20EF              ldi R18,240
 446A 0CE5              ldi R16,860
 446C 13E0              ldi R17,3
 446E ADD7              xcall __NeedleMotRunTo
 4470           ;                                       waitMotSampNeedle = 1;
 4470 81E0              ldi R24,1
 4472 80934E00          sts _waitMotSampNeedle,R24
 4476           ;                                       //workStep = 103;
 4476           ;                                       workStep = 1;
 4476 80931200          sts L760,R24
 447A           ;                                       break;
 447A 95C6              xjmp L807
 447C           L882:
 447C           ; 				/*
 447C           ; 				case 103:
 447C           ; 					if(CheckLiqDetBase())
 447C           ; 					{
 447C           ; 						SetEValve(EV1, EV_OPEN);
 447C           ; 						_FluidMotRun(-1, 30);
 447C           ; 						waitMotFluid = 1;
 447C           ; 						workStep = 104;
 447C           ; 					}
 447C           ; 					else
 447C           ; 						workStep = 1;
 447C           ; 					break;
 447C           ; 				case 104:
 447C           ; 					SetEValve(EV1, EV_CLOSE);
 447C           ; 					if(CheckLiqDetBase())
 447C           ; 					{
 447C           ; 						SetEValve(EV2, EV_OPEN);
 447C           ; 						_FluidMotRun(-1, 30);
 447C           ; 						waitMotFluid = 1;
 447C           ; 					}
 447C           ; 					workStep = 1;
 447C           ; 					break;
 447C           ; 				*/
 447C           ; 				case 1:		// 初始化液面探测
 447C           ; 					SetEValve(EV_ALL, EV_CLOSE);
 447C 2227              clr R18
 447E 0027              clr R16
 4480 0E940000          xcall _SetEValve
 4484           ;                               /*      if(CheckLiqDetBase())
 4484           ;                                       {
 4484           ;                                               mainStep = 8;   
 4484           ;                                               workStep = 0;   
 4484           ;                                               Uart0ReUnable;
 4484           ;                                               uart_Printf("!2510\r\n");       // 开始准备清洗液泵流量检查时，液面探测功能自检出现错误
 4484           ;                                               Uart0ReEnable;
 4484           ;                                               break;// 退出处理
 4484           ;                                       }
 4484           ;                               */
 4484           ;                                       liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 4484 0027              clr R16
 4486 0E940000          xcall _getLiqDetADC
 448A 6801              movw R12,R16
 448C D0925200          sts _liqDetBaseAdc+1,R13
 4490 C0925100          sts _liqDetBaseAdc,R12
 4494           ;                                       //uart_Printf("//LiqDetBaseAdc3 $%4d\r\n",liqDetBaseAdc);       
 4494           ;                                       _SampPumpMotRun(100, 64);               // 注射泵吸入，防止针头挂水滴
 4494 20E4              ldi R18,64
 4496 04E6              ldi R16,100
 4498 10E0              ldi R17,0
 449A B7D7              xcall __SampPumpMotRun
 449C           ;                                       workStep = 2;
 449C 82E0              ldi R24,2
 449E 80931200          sts L760,R24
 44A2           ;                                       break;
 44A2 81C6              xjmp L807
 44A4           L883:
 44A4           ; 				case 2:		// 注入最大800mL清洗液到定标液预定高度	
 44A4           ; 					_FluidMotRun(9, 32);
 44A4 20E2              ldi R18,32
 44A6 09E0              ldi R16,9
 44A8 10E0              ldi R17,0
 44AA F8D6              xcall __FluidMotRun
 44AC           ;                                       detRetry = 0;
 44AC 2224              clr R2
 44AE 20921500          sts L763,R2
 44B2           ;                                       workStep = 3;
 44B2 83E0              ldi R24,3
 44B4 80931200          sts L760,R24
 44B8           ;                                       break;
 44B8 76C6              xjmp L807
 44BA           L884:
 44BA           ; 				case 3:		// 等待探测到液面
 44BA           ; 					if(GetLiquidMonitorState(1) == INFO_LIQ_EMPTY)
 44BA 01E0              ldi R16,1
 44BC 0E940000          xcall _GetLiquidMonitorState
 44C0 402F              mov R20,R16
 44C2 0E30              cpi R16,14
 44C4 11F5              brne L885
 44C6           X453:
 44C6           ; 					{
 44C6           ; 						// 清洗液供应异常
 44C6           ; 						SetBeepWarning();
 44C6 0E940000          xcall _SetBeepWarning
 44CA           ;                                               // 退出处理
 44CA           ;                                               mainStep = 8;
 44CA 88E0              ldi R24,8
 44CC 80931100          sts L759,R24
 44D0           ;                                               workStep = 0;
 44D0 2224              clr R2
 44D2 20921200          sts L760,R2
 44D6           ;                                               MotStop(MOT_FLUID);
 44D6 0AE0              ldi R16,10
 44D8 0E940000          xcall _MotStop
 44DC           ;                                               MotInitCheck(MOT_SAMP_PUMP);
 44DC 0CE0              ldi R16,12
 44DE 0E940000          xcall _MotInitCheck
 44E2           ;                                               SetDelayTime(MOT_SAMP_NEEDLE, 5);
 44E2 25E0              ldi R18,5
 44E4 30E0              ldi R19,0
 44E6 03E0              ldi R16,3
 44E8 0E940000          xcall _SetDelayTime
 44EC           ;                                               Uart0ReUnable;
 44EC 8091C100          lds R24,193
 44F0 8F7E              andi R24,239
 44F2 8093C100          sts 193,R24
 44F6           ;                                               uart_Printf("!2511\r\n");       // 清洗液泵流量检查时，出现清洗液供应中断，请更换清洗液后重试
 44F6 00E0              ldi R16,<L887
 44F8 10E0              ldi R17,>L887
 44FA 0E940000          xcall _uart_Printf
 44FE           ;                                               Uart0ReEnable;
 44FE 8091C100          lds R24,193
 4502 8061              ori R24,16
 4504 8093C100          sts 193,R24
 4508           ;                                               break;
 4508 4EC6              xjmp L807
 450A           L885:
 450A           ; 					}
 450A           ; 					if(GetMotState(MOT_FLUID) == STA_SLAVE_FREE)
 450A 0AE0              ldi R16,10
 450C 0E940000          xcall _GetMotState
 4510 402F              mov R20,R16
 4512 0130              cpi R16,1
 4514 F9F4              brne L888
 4516           X454:
 4516           ; 					{
 4516           ; 						// 检查清洗液泵是否在运行，如果停止表示未注入液体或注入液体偏少
 4516           ; 						SetBeepWarning();
 4516 0E940000          xcall _SetBeepWarning
 451A           ;                                               // 退出处理
 451A           ;                                               mainStep = 8;
 451A 88E0              ldi R24,8
 451C 80931100          sts L759,R24
 4520           ;                                               workStep = 0;
 4520 2224              clr R2
 4522 20921200          sts L760,R2
 4526           ;                                               MotInitCheck(MOT_SAMP_PUMP);
 4526 0CE0              ldi R16,12
 4528 0E940000          xcall _MotInitCheck
 452C           ;                                               SetDelayTime(MOT_SAMP_NEEDLE, 5);
 452C 25E0              ldi R18,5
 452E 30E0              ldi R19,0
 4530 03E0              ldi R16,3
 4532 0E940000          xcall _SetDelayTime
 4536           ;                                               Uart0ReUnable;
 4536 8091C100          lds R24,193
 453A 8F7E              andi R24,239
 453C 8093C100          sts 193,R24
 4540           ;                                               uart_Printf("!2512\r\n");       // 清洗液泵流量检查时，未检测到清洗液注入，请检查清洗液泵后重新运行液路自检程序
 4540 00E0              ldi R16,<L890
 4542 10E0              ldi R17,>L890
 4544 0E940000          xcall _uart_Printf
 4548           ;                                               Uart0ReEnable;
 4548 8091C100          lds R24,193
 454C 8061              ori R24,16
 454E 8093C100          sts 193,R24
 4552           ;                                               break;
 4552 29C6              xjmp L807
 4554           L888:
 4554           ; 						}
 4554           ; 					i = getLiqDetADC(NeedleChannel);
 4554 0027              clr R16
 4556 0E940000          xcall _getLiqDetADC
 455A 6801              movw R12,R16
 455C 5601              movw R10,R12
 455E           ;                                       if(i < liqDetBaseAdc)
 455E 20905100          lds R2,_liqDetBaseAdc
 4562 30905200          lds R3,_liqDetBaseAdc+1
 4566 0215              cp R16,R2
 4568 1305              cpc R17,R3
 456A 08F0              brlo X553
 456C 1CC6              xjmp L807
 456E           X553:
 456E           X455:
 456E           ; 					{
 456E           ; 						i = liqDetBaseAdc - i;
 456E 201A              sub R2,R16
 4570 310A              sbc R3,R17
 4572 5101              movw R10,R2
 4574           ;                                               if(i > 30)
 4574 8EE1              ldi R24,30
 4576 90E0              ldi R25,0
 4578 8215              cp R24,R2
 457A 9305              cpc R25,R3
 457C A0F4              brsh L893
 457E           X456:
 457E           ; 						{
 457E           ; 							if(detRetry < 5)	// 重测计数
 457E 80911500          lds R24,L763
 4582 8530              cpi R24,5
 4584 20F4              brsh L895
 4586           X457:
 4586           ; 							{
 4586           ; 								detRetry ++;	
 4586 8F5F              subi R24,255    ; addi 1
 4588 80931500          sts L763,R24
 458C           ;                                                               break;  
 458C 0CC6              xjmp L807
 458E           L895:
 458E           ; 							}
 458E           ; 							MotStop(MOT_FLUID);
 458E 0AE0              ldi R16,10
 4590 0E940000          xcall _MotStop
 4594           ;                                                       MotInitCheck(MOT_SAMP_PUMP);
 4594 0CE0              ldi R16,12
 4596 0E940000          xcall _MotInitCheck
 459A           ;                                                       workStep = 4;
 459A 84E0              ldi R24,4
 459C 80931200          sts L760,R24
 45A0           ;                                                       SetBeepAck();
 45A0 0E940000          xcall _SetBeepAck
 45A4           ;                                               }
 45A4 00C6              xjmp L807
 45A6           L893:
 45A6           ; 						else
 45A6           ; 							detRetry = 0;
 45A6 2224              clr R2
 45A8 20921500          sts L763,R2
 45AC           ;                                       }
 45AC           ;                                       break;
 45AC FCC5              xjmp L807
 45AE           L897:
 45AE           ; 				case 4:		// 取样针运行到高位
 45AE           ; 					_NeedleMotRunTo(_POS_MIX_TOP, 240);
 45AE 20EF              ldi R18,240
 45B0 08E6              ldi R16,360
 45B2 11E0              ldi R17,1
 45B4 0AD7              xcall __NeedleMotRunTo
 45B6           ;                                       waitMotSampNeedle = 1;
 45B6 81E0              ldi R24,1
 45B8 80934E00          sts _waitMotSampNeedle,R24
 45BC           ;                                       workStep = 5;
 45BC 85E0              ldi R24,5
 45BE 80931200          sts L760,R24
 45C2           ;                                       break;
 45C2 F1C5              xjmp L807
 45C4           L898:
 45C4           ; 				case 5:		// 注入1.2mL定标液
 45C4           ; 					_FluidMotRun(12, 64);
 45C4 20E4              ldi R18,64
 45C6 0CE0              ldi R16,12
 45C8 10E0              ldi R17,0
 45CA 68D6              xcall __FluidMotRun
 45CC           ;                                       workStep = 6;
 45CC 86E0              ldi R24,6
 45CE 80931200          sts L760,R24
 45D2           ;                                       break;
 45D2 E9C5              xjmp L807
 45D4           L899:
 45D4           ; 				case 6:		// 监测清洗液供应
 45D4           ; 					if(GetLiquidMonitorState(1) == INFO_LIQ_EMPTY)
 45D4 01E0              ldi R16,1
 45D6 0E940000          xcall _GetLiquidMonitorState
 45DA 402F              mov R20,R16
 45DC 0E30              cpi R16,14
 45DE 11F5              brne L900
 45E0           X458:
 45E0           ; 					{
 45E0           ; 						// 清洗液供应异常
 45E0           ; 						SetBeepWarning();
 45E0 0E940000          xcall _SetBeepWarning
 45E4           ;                                               // 退出处理
 45E4           ;                                               mainStep = 8;
 45E4 88E0              ldi R24,8
 45E6 80931100          sts L759,R24
 45EA           ;                                               workStep = 0;
 45EA 2224              clr R2
 45EC 20921200          sts L760,R2
 45F0           ;                                               MotStop(MOT_FLUID);
 45F0 0AE0              ldi R16,10
 45F2 0E940000          xcall _MotStop
 45F6           ;                                               MotInitCheck(MOT_SAMP_PUMP);
 45F6 0CE0              ldi R16,12
 45F8 0E940000          xcall _MotInitCheck
 45FC           ;                                               SetDelayTime(MOT_SAMP_NEEDLE, 5);
 45FC 25E0              ldi R18,5
 45FE 30E0              ldi R19,0
 4600 03E0              ldi R16,3
 4602 0E940000          xcall _SetDelayTime
 4606           ;                                               Uart0ReUnable;
 4606 8091C100          lds R24,193
 460A 8F7E              andi R24,239
 460C 8093C100          sts 193,R24
 4610           ;                                               uart_Printf("!2511\r\n");       // 清洗液泵流量检查时，出现清洗液供应中断，请更换清洗液后重试
 4610 00E0              ldi R16,<L887
 4612 10E0              ldi R17,>L887
 4614 0E940000          xcall _uart_Printf
 4618           ;                                               Uart0ReEnable;
 4618 8091C100          lds R24,193
 461C 8061              ori R24,16
 461E 8093C100          sts 193,R24
 4622           ;                                               break;
 4622 C1C5              xjmp L807
 4624           L900:
 4624           ; 						}
 4624           ; 					if(GetMotState(MOT_FLUID) == STA_SLAVE_FREE)
 4624 0AE0              ldi R16,10
 4626 0E940000          xcall _GetMotState
 462A 402F              mov R20,R16
 462C 0130              cpi R16,1
 462E 09F0              breq X554
 4630 BAC5              xjmp L807
 4632           X554:
 4632           X459:
 4632           ; 					{
 4632           ; 						workStep = 7;	// 注液完毕
 4632 87E0              ldi R24,7
 4634 80931200          sts L760,R24
 4638           ;                                       }
 4638           ;                                       break;
 4638 B6C5              xjmp L807
 463A           L904:
 463A           ; 				case 7:			// 初始化液面探测
 463A           ; 				/*	if(CheckLiqDetBase())
 463A           ; 					{
 463A           ; 						mainStep = 8;	
 463A           ; 						workStep = 0;	
 463A           ; 						Uart0ReUnable;
 463A           ; 						uart_Printf("!2513\r\n");	// 清洗液泵流量检查时，液面探测功能自检出现错误
 463A           ; 						Uart0ReEnable;
 463A           ; 						break;// 退出处理
 463A           ; 					}
 463A           ; 				*/
 463A           ; 					liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 463A 0027              clr R16
 463C 0E940000          xcall _getLiqDetADC
 4640 6801              movw R12,R16
 4642 D0925200          sts _liqDetBaseAdc+1,R13
 4646 C0925100          sts _liqDetBaseAdc,R12
 464A           ;                                       //uart_Printf("//LiqDetBaseAdc4 $%4d\r\n",liqDetBaseAdc);       
 464A           ;                                       _SampPumpMotRun(100, 64);
 464A 20E4              ldi R18,64
 464C 04E6              ldi R16,100
 464E 10E0              ldi R17,0
 4650 DCD6              xcall __SampPumpMotRun
 4652           ;                                       _NeedleMotRunTo(_POS_MIX_CAL_START-200, 16);
 4652 20E1              ldi R18,16
 4654 04E9              ldi R16,660
 4656 12E0              ldi R17,2
 4658 B8D6              xcall __NeedleMotRunTo
 465A           ;                                       detRetry = 0;
 465A 2224              clr R2
 465C 20921500          sts L763,R2
 4660           ;                                       workStep = 8;
 4660 88E0              ldi R24,8
 4662 80931200          sts L760,R24
 4666           ;                                       break;
 4666 9FC5              xjmp L807
 4668           L905:
 4668           ; 				case 8:		// 取样针下降探测液面
 4668           ; 					if(GetMotState(MOT_SAMP_NEEDLE) == STA_SLAVE_FREE)
 4668 03E0              ldi R16,3
 466A 0E940000          xcall _GetMotState
 466E 402F              mov R20,R16
 4670 0130              cpi R16,1
 4672 01F5              brne L906
 4674           X460:
 4674           ; 					{
 4674           ; 						// 检查 取样针是否在运行，如果停止表示液面高度太低
 4674           ; 						SetBeepWarning();
 4674 0E940000          xcall _SetBeepWarning
 4678           ;                                               // 退出处理
 4678           ;                                               mainStep = 8;
 4678 88E0              ldi R24,8
 467A 80931100          sts L759,R24
 467E           ;                                               workStep = 0;
 467E 2224              clr R2
 4680 20921200          sts L760,R2
 4684           ;                                               MotInitCheck(MOT_SAMP_PUMP);
 4684 0CE0              ldi R16,12
 4686 0E940000          xcall _MotInitCheck
 468A           ;                                       //      uart_Printf("!2514\r\n");       // 清洗液泵流量检查时在检测流量时，未检测到液体注入，请检查稀释液泵后重新运行液路自检程序
 468A           ;                                               Uart0ReUnable;
 468A 8091C100          lds R24,193
 468E 8F7E              andi R24,239
 4690 8093C100          sts 193,R24
 4694           ;                                               uart_Printf("!2514 $%4d $%4d\r\n",liqDetBaseAdc,i);  // 2016-08-24 更改
 4694 B982              std y+1,R11
 4696 A882              std y+0,R10
 4698 20915100          lds R18,_liqDetBaseAdc
 469C 30915200          lds R19,_liqDetBaseAdc+1
 46A0 00E0              ldi R16,<L908
 46A2 10E0              ldi R17,>L908
 46A4 0E940000          xcall _uart_Printf
 46A8           ;                                               Uart0ReEnable;
 46A8 8091C100          lds R24,193
 46AC 8061              ori R24,16
 46AE 8093C100          sts 193,R24
 46B2           ;                                               break;
 46B2 79C5              xjmp L807
 46B4           L906:
 46B4           ; 					}
 46B4           ; 					i = getLiqDetADC(NeedleChannel);
 46B4 0027              clr R16
 46B6 0E940000          xcall _getLiqDetADC
 46BA 6801              movw R12,R16
 46BC 5601              movw R10,R12
 46BE           ;                                       if(i < liqDetBaseAdc)
 46BE 20905100          lds R2,_liqDetBaseAdc
 46C2 30905200          lds R3,_liqDetBaseAdc+1
 46C6 0215              cp R16,R2
 46C8 1305              cpc R17,R3
 46CA 08F0              brlo X555
 46CC 6CC5              xjmp L807
 46CE           X555:
 46CE           X461:
 46CE           ; 					{
 46CE           ; 						i = liqDetBaseAdc - i;
 46CE 201A              sub R2,R16
 46D0 310A              sbc R3,R17
 46D2 5101              movw R10,R2
 46D4           ;                                               if(i > 90)
 46D4 8AE5              ldi R24,90
 46D6 90E0              ldi R25,0
 46D8 8215              cp R24,R2
 46DA 9305              cpc R25,R3
 46DC 08F5              brsh L911
 46DE           X462:
 46DE           ; 						{
 46DE           ; 							if(detRetry < 10)	// 重测计数
 46DE 80911500          lds R24,L763
 46E2 8A30              cpi R24,10
 46E4 20F4              brsh L913
 46E6           X463:
 46E6           ; 							{
 46E6           ; 								detRetry ++;	
 46E6 8F5F              subi R24,255    ; addi 1
 46E8 80931500          sts L763,R24
 46EC           ;                                                               break;  
 46EC 5CC5              xjmp L807
 46EE           L913:
 46EE           ; 							}
 46EE           ; 							MotStop(MOT_SAMP_NEEDLE);
 46EE 03E0              ldi R16,3
 46F0 0E940000          xcall _MotStop
 46F4           ;                                                       MotInitCheck(MOT_SAMP_PUMP);
 46F4 0CE0              ldi R16,12
 46F6 0E940000          xcall _MotInitCheck
 46FA           ;                                                       SetMotRunPam(MOT_SAMP_NEEDLE, 240, 20, CURRENT_SAMP_NEEDLE);
 46FA 83E0              ldi R24,3
 46FC 8A83              std y+2,R24
 46FE 84E1              ldi R24,20
 4700 8883              std y+0,R24
 4702 20EF              ldi R18,240
 4704 03E0              ldi R16,3
 4706 0E940000          xcall _SetMotRunPam
 470A           ;                                                       workStep = 9;
 470A 89E0              ldi R24,9
 470C 80931200          sts L760,R24
 4710           ;                                                       SetDelayTime(MOT_SAMP_NEEDLE, 5);
 4710 25E0              ldi R18,5
 4712 30E0              ldi R19,0
 4714 03E0              ldi R16,3
 4716 0E940000          xcall _SetDelayTime
 471A           ;                                                       SetBeepAck();
 471A 0E940000          xcall _SetBeepAck
 471E           ;                                               }
 471E 43C5              xjmp L807
 4720           L911:
 4720           ; 						else
 4720           ; 							detRetry = 0;
 4720 2224              clr R2
 4722 20921500          sts L763,R2
 4726           ;                                       }
 4726           ;                                       break;
 4726 3FC5              xjmp L807
 4728           L915:
 4728           ; 				case 9:		// 计算定标结果
 4728           ; 					MotInitCheck(MOT_SAMP_PUMP);
 4728 0CE0              ldi R16,12
 472A 0E940000          xcall _MotInitCheck
 472E           ;                                       waitMotSampPump = 1;
 472E 81E0              ldi R24,1
 4730 80934D00          sts _waitMotSampPump,R24
 4734           ;                                       i = (unsigned int)GetMotPositionOfStep(MOT_SAMP_NEEDLE);
 4734 03E0              ldi R16,3
 4736 0E940000          xcall _GetMotPositionOfStep
 473A 6801              movw R12,R16
 473C 5601              movw R10,R12
 473E           ;                                       mixLiqLevel = i;
 473E B0921D00          sts L768+1,R11
 4742 A0921C00          sts L768,R10
 4746           ;                                       i = _POS_MIX_CAL_START - mixLiqLevel;
 4746 8CE5              ldi R24,860
 4748 93E0              ldi R25,3
 474A 5C01              movw R10,R24
 474C A01A              sub R10,R16
 474E B10A              sbc R11,R17
 4750           ;                                       Uart0ReUnable;
 4750 8091C100          lds R24,193
 4754 8F7E              andi R24,239
 4756 8093C100          sts 193,R24
 475A           ;                                       uart_Printf("%s $%d\r\n",strM2111, i);
 475A B982              std y+1,R11
 475C A882              std y+0,R10
 475E 20E0              ldi R18,<_strM2111
 4760 30E0              ldi R19,>_strM2111
 4762 00E0              ldi R16,<L916
 4764 10E0              ldi R17,>L916
 4766 0E940000          xcall _uart_Printf
 476A           ;                                       Uart0ReEnable;
 476A 8091C100          lds R24,193
 476E 8061              ori R24,16
 4770 8093C100          sts 193,R24
 4774           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 10);
 4774 2AE0              ldi R18,10
 4776 30E0              ldi R19,0
 4778 03E0              ldi R16,3
 477A 0E940000          xcall _SetDelayTime
 477E           ;                                       workStep = 10;
 477E 8AE0              ldi R24,10
 4780 80931200          sts L760,R24
 4784           ;                                       break;
 4784 10C5              xjmp L807
 4786           L917:
 4786           ; 				// 开始废液定标
 4786           ; 				case 10:
 4786           ; 					_EffluentMotRun(10, 140);		// 1000/125 = 8
 4786 2CE8              ldi R18,140
 4788 0AE0              ldi R16,10
 478A 10E0              ldi R17,0
 478C ACD5              xcall __EffluentMotRun
 478E           ;                                       waitEffluent = 1;
 478E 81E0              ldi R24,1
 4790 80934A00          sts _waitEffluent,R24
 4794           ;                                       workStep = 11;
 4794 8BE0              ldi R24,11
 4796 80931200          sts L760,R24
 479A           ;                                       break;
 479A 05C5              xjmp L807
 479C           L918:
 479C           ; 				case 11:			// 初始化液面探测
 479C           ; 				/*	if(CheckLiqDetBase())
 479C           ; 					{
 479C           ; 						mainStep = 8;	workStep = 0;	
 479C           ; 						Uart0ReUnable;
 479C           ; 						uart_Printf("!2520\r\n");	// 开始废液泵流量检查时，液面探测功能自检出现错误
 479C           ; 						Uart0ReEnable;
 479C           ; 						break;// 退出处理
 479C           ; 					}
 479C           ; 				*/
 479C           ; 					liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 479C 0027              clr R16
 479E 0E940000          xcall _getLiqDetADC
 47A2 6801              movw R12,R16
 47A4 D0925200          sts _liqDetBaseAdc+1,R13
 47A8 C0925100          sts _liqDetBaseAdc,R12
 47AC           ;                                       //uart_Printf("//LiqDetBaseAdc5 $%4d\r\n",liqDetBaseAdc);       
 47AC           ;                                       _SampPumpMotRun(100, 64);               // 注射泵吸入，防止针头挂水滴
 47AC 20E4              ldi R18,64
 47AE 04E6              ldi R16,100
 47B0 10E0              ldi R17,0
 47B2 2BD6              xcall __SampPumpMotRun
 47B4           ;                                       _NeedleMotRunTo(_POS_MIX_CAL_START, 16);
 47B4 20E1              ldi R18,16
 47B6 0CE5              ldi R16,860
 47B8 13E0              ldi R17,3
 47BA 07D6              xcall __NeedleMotRunTo
 47BC           ;                                       detRetry = 0;
 47BC 2224              clr R2
 47BE 20921500          sts L763,R2
 47C2           ;                                       workStep = 12;
 47C2 8CE0              ldi R24,12
 47C4 80931200          sts L760,R24
 47C8           ;                                       break;
 47C8 EEC4              xjmp L807
 47CA           L919:
 47CA           ; 				case 12:	// 液面探测
 47CA           ; 					// 检查 取样针是否在运行，如果停止表示液面高度太低
 47CA           ; 					if(GetMotState(MOT_SAMP_NEEDLE) == STA_SLAVE_FREE)
 47CA 03E0              ldi R16,3
 47CC 0E940000          xcall _GetMotState
 47D0 402F              mov R20,R16
 47D2 0130              cpi R16,1
 47D4 31F4              brne L920
 47D6           X464:
 47D6           ; 					{
 47D6           ; 						SetBeepWarning();
 47D6 0E940000          xcall _SetBeepWarning
 47DA           ;                                               // 退出处理
 47DA           ;                                       //      mainStep = 8;   
 47DA           ;                                       //      workStep = 0;
 47DA           ;                                       //      MotInitCheck(MOT_SAMP_PUMP);
 47DA           ;                                       //      uart_Printf("!2521\r\n");       // 在废液泵流量检测时，取样针未探测到液体，请检查液面探测功能后重新运行液路自检程序
 47DA           ;                                               workStep = 13;
 47DA 8DE0              ldi R24,13
 47DC 80931200          sts L760,R24
 47E0           ;                                               break;
 47E0 E2C4              xjmp L807
 47E2           L920:
 47E2           ; 					}
 47E2           ; 					i = getLiqDetADC(NeedleChannel);
 47E2 0027              clr R16
 47E4 0E940000          xcall _getLiqDetADC
 47E8 6801              movw R12,R16
 47EA 5601              movw R10,R12
 47EC           ;                                       if(i < liqDetBaseAdc)
 47EC 20905100          lds R2,_liqDetBaseAdc
 47F0 30905200          lds R3,_liqDetBaseAdc+1
 47F4 0215              cp R16,R2
 47F6 1305              cpc R17,R3
 47F8 08F0              brlo X556
 47FA D5C4              xjmp L807
 47FC           X556:
 47FC           X465:
 47FC           ; 					{
 47FC           ; 						i = liqDetBaseAdc - i;
 47FC 201A              sub R2,R16
 47FE 310A              sbc R3,R17
 4800 5101              movw R10,R2
 4802           ;                                               if(i > 50)
 4802 82E3              ldi R24,50
 4804 90E0              ldi R25,0
 4806 8215              cp R24,R2
 4808 9305              cpc R25,R3
 480A B0F4              brsh L924
 480C           X466:
 480C           ; 						{
 480C           ; 							if(detRetry < 10)	// 重测计数
 480C 80911500          lds R24,L763
 4810 8A30              cpi R24,10
 4812 20F4              brsh L926
 4814           X467:
 4814           ; 							{
 4814           ; 								detRetry ++;	
 4814 8F5F              subi R24,255    ; addi 1
 4816 80931500          sts L763,R24
 481A           ;                                                               break;  
 481A C5C4              xjmp L807
 481C           L926:
 481C           ; 							}
 481C           ; 							MotStop(MOT_SAMP_NEEDLE);
 481C 03E0              ldi R16,3
 481E 0E940000          xcall _MotStop
 4822           ;                                                       SetDelayTime(MOT_SAMP_NEEDLE, 5);
 4822 25E0              ldi R18,5
 4824 30E0              ldi R19,0
 4826 03E0              ldi R16,3
 4828 0E940000          xcall _SetDelayTime
 482C           ;                                                       SetBeepAck();
 482C 0E940000          xcall _SetBeepAck
 4830           ;                                                       workStep = 13;
 4830 8DE0              ldi R24,13
 4832 80931200          sts L760,R24
 4836           ;                                               }
 4836 B7C4              xjmp L807
 4838           L924:
 4838           ; 						else
 4838           ; 							detRetry = 0;
 4838 2224              clr R2
 483A 20921500          sts L763,R2
 483E           ;                                       }
 483E           ;                                       break;
 483E B3C4              xjmp L807
 4840           L928:
 4840           ; 				case 13:	// 计算废液泵流量
 4840           ; 					MotInitCheck(MOT_SAMP_PUMP);	// 注射泵复位
 4840 0CE0              ldi R16,12
 4842 0E940000          xcall _MotInitCheck
 4846           ;                                       i = (unsigned int)GetMotPositionOfStep(MOT_SAMP_NEEDLE);
 4846 03E0              ldi R16,3
 4848 0E940000          xcall _GetMotPositionOfStep
 484C 6801              movw R12,R16
 484E 5601              movw R10,R12
 4850           ;                                       i = i-mixLiqLevel;
 4850 20901C00          lds R2,L768
 4854 30901D00          lds R3,L768+1
 4858 A218              sub R10,R2
 485A B308              sbc R11,R3
 485C           ;                                       Uart0ReUnable;
 485C 8091C100          lds R24,193
 4860 8F7E              andi R24,239
 4862 8093C100          sts 193,R24
 4866           ;                                       uart_Printf("%s $%d\r\n",strM2112, i);
 4866 B982              std y+1,R11
 4868 A882              std y+0,R10
 486A 20E0              ldi R18,<_strM2112
 486C 30E0              ldi R19,>_strM2112
 486E 00E0              ldi R16,<L916
 4870 10E0              ldi R17,>L916
 4872 0E940000          xcall _uart_Printf
 4876           ;                                       Uart0ReEnable;
 4876 8091C100          lds R24,193
 487A 8061              ori R24,16
 487C 8093C100          sts 193,R24
 4880           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 10);
 4880 2AE0              ldi R18,10
 4882 30E0              ldi R19,0
 4884 03E0              ldi R16,3
 4886 0E940000          xcall _SetDelayTime
 488A           ;                                       workStep = 14;
 488A 8EE0              ldi R24,14
 488C 80931200          sts L760,R24
 4890           ;                                       break;
 4890 8AC4              xjmp L807
 4892           L929:
 4892           ; 				case 14:
 4892           ; 					SetEValve(EV_ALL,EV_CLOSE);
 4892 2227              clr R18
 4894 0027              clr R16
 4896 0E940000          xcall _SetEValve
 489A           ;                                       _NeedleMotRunTo(0, 240);
 489A 20EF              ldi R18,240
 489C 0027              clr R16
 489E 1127              clr R17
 48A0 94D5              xcall __NeedleMotRunTo
 48A2           ;                                       workStep = 15;
 48A2 8FE0              ldi R24,15
 48A4 80931200          sts L760,R24
 48A8           ;                                       break;
 48A8 7EC4              xjmp L807
 48AA           L930:
 48AA           ; 				case 15:
 48AA           ; 					_EffluentMotRun(20, 200);
 48AA 28EC              ldi R18,200
 48AC 04E1              ldi R16,20
 48AE 10E0              ldi R17,0
 48B0 1AD5              xcall __EffluentMotRun
 48B2           ;                                       workStep = 0;
 48B2 2224              clr R2
 48B4 20921200          sts L760,R2
 48B8           ;                                       mainStep = 4;
 48B8 84E0              ldi R24,4
 48BA 80931100          sts L759,R24
 48BE           ;                                       subStep = 0;
 48BE 20921300          sts L761,R2
 48C2           ;                                       waitEffluent = 1;
 48C2 81E0              ldi R24,1
 48C4 80934A00          sts _waitEffluent,R24
 48C8           ;                                       waitMotSampNeedle = 1;
 48C8 80934E00          sts _waitMotSampNeedle,R24
 48CC           ;                                       CalCnt = 5;
 48CC 85E0              ldi R24,5
 48CE 80931600          sts L764,R24
 48D2           ;                                       CalValue1 = 0;
 48D2 3324              clr R3
 48D4 30921800          sts L765+1,R3
 48D8 20921700          sts L765,R2
 48DC           ;                                       CalValue2 = 0;
 48DC 30921A00          sts L766+1,R3
 48E0 20921900          sts L766,R2
 48E4           ;                                       InitFlowMeter(); // 初始化流量定标判断
 48E4 0E940000          xcall _InitFlowMeter
 48E8           ;                                       break;
 48E8           ;                               }
 48E8           ;                       break;
 48E8 5EC4              xjmp L807
 48EA           L933:
 48EA           ; 		case 4:		//  稀释液蠕动泵流量定标
 48EA           ; 			switch(workStep)
 48EA 40911200          lds R20,L760
 48EE 5527              clr R21
 48F0 4030              cpi R20,0
 48F2 E0E0              ldi R30,0
 48F4 5E07              cpc R21,R30
 48F6 0CF4              brge X557
 48F8 56C4              xjmp L807
 48FA           X557:
 48FA           X468:
 48FA 80E1              ldi R24,16
 48FC 90E0              ldi R25,0
 48FE 8417              cp R24,R20
 4900 9507              cpc R25,R21
 4902 0CF4              brge X558
 4904 50C4              xjmp L807
 4906           X558:
 4906           X469:
 4906 80E0              ldi R24,<L1022
 4908 90E0              ldi R25,>L1022
 490A FA01              movw R30,R20
 490C EE0F              lsl R30
 490E FF1F              rol R31
 4910 E80F              add R30,R24
 4912 F91F              adc R31,R25
 4914 2790              elpm R2,Z+
 4916 3690              elpm R3,Z
 4918 F101              movw R30,R2
 491A 0994               ijmp
 491C           L937:
 491C           ; 			{
 491C           ; 				case 0:		// 准备
 491C           ; 					switch(subStep)
 491C 40911300          lds R20,L761
 4920 5527              clr R21
 4922 4030              cpi R20,0
 4924 4507              cpc R20,R21
 4926 19F1              breq L941
 4928           X470:
 4928 4130              cpi R20,1
 492A E0E0              ldi R30,0
 492C 5E07              cpc R21,R30
 492E 81F1              breq L942
 4930           X471:
 4930 4230              cpi R20,2
 4932 E0E0              ldi R30,0
 4934 5E07              cpc R21,R30
 4936 09F4              brne X559
 4938 3FC0              xjmp L943
 493A           X559:
 493A           X472:
 493A 4330              cpi R20,3
 493C E0E0              ldi R30,0
 493E 5E07              cpc R21,R30
 4940 09F4              brne X560
 4942 48C0              xjmp L944
 4944           X560:
 4944           X473:
 4944 4430              cpi R20,4
 4946 E0E0              ldi R30,0
 4948 5E07              cpc R21,R30
 494A 09F4              brne X561
 494C 5AC0              xjmp L945
 494E           X561:
 494E           X474:
 494E 4530              cpi R20,5
 4950 E0E0              ldi R30,0
 4952 5E07              cpc R21,R30
 4954 09F4              brne X562
 4956 65C0              xjmp L946
 4958           X562:
 4958           X475:
 4958 4630              cpi R20,6
 495A E0E0              ldi R30,0
 495C 5E07              cpc R21,R30
 495E 09F4              brne X563
 4960 64C0              xjmp L947
 4962           X563:
 4962           X476:
 4962 4730              cpi R20,7
 4964 E0E0              ldi R30,0
 4966 5E07              cpc R21,R30
 4968 09F4              brne X564
 496A 76C0              xjmp L948
 496C           X564:
 496C           X477:
 496C 1CC4              xjmp L807
 496E           L941:
 496E           ; 					{
 496E           ; 						case 0:
 496E           ; 							SetMotRunPam(MOT_SAMP_NEEDLE, 220, 20, CURRENT_SAMP_NEEDLE);
 496E 83E0              ldi R24,3
 4970 8A83              std y+2,R24
 4972 84E1              ldi R24,20
 4974 8883              std y+0,R24
 4976 2CED              ldi R18,220
 4978 03E0              ldi R16,3
 497A 0E940000          xcall _SetMotRunPam
 497E           ;                                                       MotInitCheck(MOT_SAMP_NEEDLE);
 497E 03E0              ldi R16,3
 4980 0E940000          xcall _MotInitCheck
 4984           ;                                                       waitMotSampNeedle = 1;
 4984 81E0              ldi R24,1
 4986 80934E00          sts _waitMotSampNeedle,R24
 498A           ;                                                       subStep = 1;
 498A 80931300          sts L761,R24
 498E           ;                                                       break;
 498E 0BC4              xjmp L807
 4990           L942:
 4990           ; 						case 1:
 4990           ; 							SetMotRunPam(MOT_SAMP_TRUN,200,10,CURRENT_SAMP_TRUN);
 4990 84E0              ldi R24,4
 4992 8A83              std y+2,R24
 4994 8AE0              ldi R24,10
 4996 8883              std y+0,R24
 4998 28EC              ldi R18,200
 499A 02E0              ldi R16,2
 499C 0E940000          xcall _SetMotRunPam
 49A0           ;                                                       MotRunTo(MOT_SAMP_TRUN, 0);
 49A0 2227              clr R18
 49A2 3327              clr R19
 49A4 02E0              ldi R16,2
 49A6 0E940000          xcall _MotRunTo
 49AA           ;                                                       waitMotSampTurn = 1;
 49AA 81E0              ldi R24,1
 49AC 80934F00          sts _waitMotSampTurn,R24
 49B0           ;                                                       subStep = 2;
 49B0 82E0              ldi R24,2
 49B2 80931300          sts L761,R24
 49B6           ;                                                       break;
 49B6 F7C3              xjmp L807
 49B8           L943:
 49B8           ; 						case 2:
 49B8           ; 							MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 49B8 20913A00          lds R18,_NeedleOnMixCenterPos
 49BC 30913B00          lds R19,_NeedleOnMixCenterPos+1
 49C0 02E0              ldi R16,2
 49C2 0E940000          xcall _MotRunTo
 49C6           ;                                                       waitMotSampTurn = 1;
 49C6 81E0              ldi R24,1
 49C8 80934F00          sts _waitMotSampTurn,R24
 49CC           ;                                                       subStep = 3;
 49CC 83E0              ldi R24,3
 49CE 80931300          sts L761,R24
 49D2           ;                                                       break;
 49D2 E9C3              xjmp L807
 49D4           L944:
 49D4           ; 						case 3:		// 取样针运行到低位,同时取样针吸干清洗头
 49D4           ; 							_FluidMotRun(-1, 70);
 49D4 26E4              ldi R18,70
 49D6 0FEF              ldi R16,-1
 49D8 1FEF              ldi R17,-1
 49DA 60D4              xcall __FluidMotRun
 49DC           ;                                                       SetEValve(EV3,EV_OPEN);
 49DC 21E0              ldi R18,1
 49DE 03E0              ldi R16,3
 49E0 0E940000          xcall _SetEValve
 49E4           ;                                                       _EffluentMotRun(100, 200);
 49E4 28EC              ldi R18,200
 49E6 04E6              ldi R16,100
 49E8 10E0              ldi R17,0
 49EA 7DD4              xcall __EffluentMotRun
 49EC           ;                                                       _NeedleMotRunTo(_POS_MIX_CAL_START - 100 - 100, 220); // 2017-05-26 -100 -> -100 - 100
 49EC 2CED              ldi R18,220
 49EE 04E9              ldi R16,660
 49F0 12E0              ldi R17,2
 49F2 EBD4              xcall __NeedleMotRunTo
 49F4           ;                                                       waitMotSampNeedle = 1;
 49F4 81E0              ldi R24,1
 49F6 80934E00          sts _waitMotSampNeedle,R24
 49FA           ;                                                       subStep = 4;
 49FA 84E0              ldi R24,4
 49FC 80931300          sts L761,R24
 4A00           ;                                                       break;
 4A00 D2C3              xjmp L807
 4A02           L945:
 4A02           ; 						case 4:
 4A02           ; 							MotStop(MOT_EFFLUENT);
 4A02 0BE0              ldi R16,11
 4A04 0E940000          xcall _MotStop
 4A08           ;                                                       SetEValve(0, 0);
 4A08 2227              clr R18
 4A0A 0027              clr R16
 4A0C 0E940000          xcall _SetEValve
 4A10           ;                                                       subStep = 5;
 4A10 85E0              ldi R24,5
 4A12 80931300          sts L761,R24
 4A16           ;                                                       SetDelayTime(MOT_EFFLUENT, 5);
 4A16 25E0              ldi R18,5
 4A18 30E0              ldi R19,0
 4A1A 0BE0              ldi R16,11
 4A1C 0E940000          xcall _SetDelayTime
 4A20           ;                                                       break;
 4A20 C2C3              xjmp L807
 4A22           L946:
 4A22           ; 						case 5:
 4A22           ; 						/*	if(CheckLiqDetBase())
 4A22           ; 							{
 4A22           ; 								mainStep = 8;	
 4A22           ; 								workStep = 0;	// 退出处理
 4A22           ; 								Uart0ReUnable;
 4A22           ; 								uart_Printf("!2530\r\n");	// 开始准备稀释液流量定标时，液面探测功能自检出现错误
 4A22           ; 								Uart0ReEnable;
 4A22           ; 							}
 4A22           ; 							else
 4A22           ; 						*/
 4A22           ; 								subStep = 6;
 4A22 86E0              ldi R24,6
 4A24 80931300          sts L761,R24
 4A28           ;                                                       break;
 4A28 BEC3              xjmp L807
 4A2A           L947:
 4A2A           ; 						case 6:		// 注入第一段液体
 4A2A           ; 							_SampPumpMotRun(100, 64);
 4A2A 20E4              ldi R18,64
 4A2C 04E6              ldi R16,100
 4A2E 10E0              ldi R17,0
 4A30 ECD4              xcall __SampPumpMotRun
 4A32           ;                                                       liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 4A32 0027              clr R16
 4A34 0E940000          xcall _getLiqDetADC
 4A38 6801              movw R12,R16
 4A3A D0925200          sts _liqDetBaseAdc+1,R13
 4A3E C0925100          sts _liqDetBaseAdc,R12
 4A42           ;                                                       //uart_Printf("//LiqDetBaseAdc6 $%4d\r\n",liqDetBaseAdc);       
 4A42           ; #if   (DILUTE_TUBE == 14)
 4A42           ;                                                       _DiluentMotRun(12+5, 16);
 4A42           ; #elif (DILUTE_TUBE == 16)
 4A42           ;                                                       _DiluentMotRun(4, 64);  
 4A42 20E4              ldi R18,64
 4A44 04E0              ldi R16,4
 4A46 10E0              ldi R17,0
 4A48 67D4              xcall __DiluentMotRun
 4A4A           ; #endif
 4A4A           ;                                                       waitMotDiluent = 1;
 4A4A 81E0              ldi R24,1
 4A4C 80934B00          sts _waitMotDiluent,R24
 4A50           ;                                               //      workStep = 2;
 4A50           ;                                                       subStep = 7;
 4A50 87E0              ldi R24,7
 4A52 80931300          sts L761,R24
 4A56           ;                                                       break;
 4A56 A7C3              xjmp L807
 4A58           L948:
 4A58           ; 						case 7:		// 稀释液回抽
 4A58           ; #if 	(DILUTE_TUBE == 14)
 4A58           ; 							_DiluentMotRun(-5, 64);	
 4A58           ; #elif	(DILUTE_TUBE == 16)
 4A58           ; 							_DiluentMotRun(-1, 64);	
 4A58 20E4              ldi R18,64
 4A5A 0FEF              ldi R16,-1
 4A5C 1FEF              ldi R17,-1
 4A5E 5CD4              xcall __DiluentMotRun
 4A60           ; #endif
 4A60           ;                                                       waitMotDiluent = 1;
 4A60 81E0              ldi R24,1
 4A62 80934B00          sts _waitMotDiluent,R24
 4A66           ;                                                       workStep = 2;
 4A66 82E0              ldi R24,2
 4A68 80931200          sts L760,R24
 4A6C           ;                                                       subStep = 0;
 4A6C 2224              clr R2
 4A6E 20921300          sts L761,R2
 4A72           ;                                                       break;
 4A72           ;                                               }
 4A72           ;                                       break;
 4A72 99C3              xjmp L807
 4A74           L949:
 4A74           ; 				case 2:		// 探测液面高度
 4A74           ; 					switch(subStep)
 4A74 40911300          lds R20,L761
 4A78 5527              clr R21
 4A7A 4030              cpi R20,0
 4A7C 4507              cpc R20,R21
 4A7E 81F0              breq L953
 4A80           X478:
 4A80 4130              cpi R20,1
 4A82 E0E0              ldi R30,0
 4A84 5E07              cpc R21,R30
 4A86 09F4              brne X565
 4A88 38C0              xjmp L959
 4A8A           X565:
 4A8A           X479:
 4A8A 4230              cpi R20,2
 4A8C E0E0              ldi R30,0
 4A8E 5E07              cpc R21,R30
 4A90 09F4              brne X566
 4A92 4BC0              xjmp L960
 4A94           X566:
 4A94           X480:
 4A94 4330              cpi R20,3
 4A96 E0E0              ldi R30,0
 4A98 5E07              cpc R21,R30
 4A9A 09F4              brne X567
 4A9C 95C0              xjmp L970
 4A9E           X567:
 4A9E           X481:
 4A9E 83C3              xjmp L807
 4AA0           L953:
 4AA0           ; 					{
 4AA0           ; 						case 0:		// 检查液面探测
 4AA0           ; 							i = getLiqDetADC(NeedleChannel);
 4AA0 0027              clr R16
 4AA2 0E940000          xcall _getLiqDetADC
 4AA6 6801              movw R12,R16
 4AA8 5601              movw R10,R12
 4AAA           ;                                                       if(i < liqDetBaseAdc)
 4AAA 20905100          lds R2,_liqDetBaseAdc
 4AAE 30905200          lds R3,_liqDetBaseAdc+1
 4AB2 0215              cp R16,R2
 4AB4 1305              cpc R17,R3
 4AB6 E8F4              brsh L954
 4AB8           X482:
 4AB8           ; 							{
 4AB8           ; 								i = liqDetBaseAdc - i;
 4AB8 201A              sub R2,R16
 4ABA 310A              sbc R3,R17
 4ABC 5101              movw R10,R2
 4ABE           ;                                                               if(i > 30)              // 液面高度异常
 4ABE 8EE1              ldi R24,30
 4AC0 90E0              ldi R25,0
 4AC2 8215              cp R24,R2
 4AC4 9305              cpc R25,R3
 4AC6 A8F4              brsh L956
 4AC8           X483:
 4AC8           ; 								{
 4AC8           ; 									mainStep = 8;	
 4AC8 88E0              ldi R24,8
 4ACA 80931100          sts L759,R24
 4ACE           ;                                                                       workStep = 0;   // 退出处理
 4ACE 2224              clr R2
 4AD0 20921200          sts L760,R2
 4AD4           ;                                                                       Uart0ReUnable;
 4AD4 8091C100          lds R24,193
 4AD8 8F7E              andi R24,239
 4ADA 8093C100          sts 193,R24
 4ADE           ;                                                                       uart_Printf("!2531\r\n");       // 在稀释液流量定标起始液面高度测量时，检测出液面高度超高，请检重新调整取样针高度后重新运行液路自检程序
 4ADE 00E0              ldi R16,<L958
 4AE0 10E0              ldi R17,>L958
 4AE2 0E940000          xcall _uart_Printf
 4AE6           ;                                                                       Uart0ReEnable;
 4AE6 8091C100          lds R24,193
 4AEA 8061              ori R24,16
 4AEC 8093C100          sts 193,R24
 4AF0           ;                                                                       break;
 4AF0 5AC3              xjmp L807
 4AF2           L956:
 4AF2           ; 								}
 4AF2           ; 							}
 4AF2           L954:
 4AF2           ; 							subStep = 1;
 4AF2 81E0              ldi R24,1
 4AF4 80931300          sts L761,R24
 4AF8           ;                                                       break;
 4AF8 56C3              xjmp L807
 4AFA           L959:
 4AFA           ; 						case 1:
 4AFA           ; 							liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 4AFA 0027              clr R16
 4AFC 0E940000          xcall _getLiqDetADC
 4B00 6801              movw R12,R16
 4B02 D0925200          sts _liqDetBaseAdc+1,R13
 4B06 C0925100          sts _liqDetBaseAdc,R12
 4B0A           ;                                                       //uart_Printf("//LiqDetBaseAdc7 $%4d\r\n",liqDetBaseAdc);       
 4B0A           ;                                                       _NeedleMotRunTo(_POS_MIX_CAL_START + 50, 8);   // 2017-05-26 + 100 -> +50
 4B0A 28E0              ldi R18,8
 4B0C 0EE8              ldi R16,910
 4B0E 13E0              ldi R17,3
 4B10 5CD4              xcall __NeedleMotRunTo
 4B12           ;                                                       mixCalStartPos = 0;
 4B12 2224              clr R2
 4B14 3324              clr R3
 4B16 30921F00          sts L769+1,R3
 4B1A 20921E00          sts L769,R2
 4B1E           ;                                                       detRetry = 0;
 4B1E 20921500          sts L763,R2
 4B22           ;                                                       subStep = 2;
 4B22 82E0              ldi R24,2
 4B24 80931300          sts L761,R24
 4B28           ;                                                       break;
 4B28 3EC3              xjmp L807
 4B2A           L960:
 4B2A           ; 						case 2:	// 等待取样针接触到液面
 4B2A           ; 							// 检查取样针是否在运行，如果停止表示在指定行程内未探测到液面
 4B2A           ; 							if(GetMotState(MOT_SAMP_NEEDLE) == STA_SLAVE_FREE)
 4B2A 03E0              ldi R16,3
 4B2C 0E940000          xcall _GetMotState
 4B30 402F              mov R20,R16
 4B32 0130              cpi R16,1
 4B34 D1F4              brne L961
 4B36           X484:
 4B36           ; 							{
 4B36           ; 								SetBeepWarning();
 4B36 0E940000          xcall _SetBeepWarning
 4B3A           ;                                                               // 退出处理
 4B3A           ;                                                               mainStep = 8;
 4B3A 88E0              ldi R24,8
 4B3C 80931100          sts L759,R24
 4B40           ;                                                               workStep = 0;
 4B40 2224              clr R2
 4B42 20921200          sts L760,R2
 4B46           ;                                                               MotInitCheck(MOT_SAMP_PUMP);
 4B46 0CE0              ldi R16,12
 4B48 0E940000          xcall _MotInitCheck
 4B4C           ;                                                               Uart0ReUnable;
 4B4C 8091C100          lds R24,193
 4B50 8F7E              andi R24,239
 4B52 8093C100          sts 193,R24
 4B56           ;                                                               uart_Printf("!2532\r\n");       // 在稀释液流量定标起始液面高度测量时，未探测到液面，请检查稀释液泵后重新运行液路自检程序
 4B56 00E0              ldi R16,<L963
 4B58 10E0              ldi R17,>L963
 4B5A 0E940000          xcall _uart_Printf
 4B5E           ;                                                               Uart0ReEnable;
 4B5E 8091C100          lds R24,193
 4B62 8061              ori R24,16
 4B64 8093C100          sts 193,R24
 4B68           ;                                                               break;
 4B68 1EC3              xjmp L807
 4B6A           L961:
 4B6A           ; 							}
 4B6A           ; 							i = getLiqDetADC(NeedleChannel);
 4B6A 0027              clr R16
 4B6C 0E940000          xcall _getLiqDetADC
 4B70 6801              movw R12,R16
 4B72 5601              movw R10,R12
 4B74           ;                                                       if(i < liqDetBaseAdc)
 4B74 20905100          lds R2,_liqDetBaseAdc
 4B78 30905200          lds R3,_liqDetBaseAdc+1
 4B7C 0215              cp R16,R2
 4B7E 1305              cpc R17,R3
 4B80 08F0              brlo X568
 4B82 11C3              xjmp L807
 4B84           X568:
 4B84           X485:
 4B84           ; 							{
 4B84           ; 								i = liqDetBaseAdc - i;
 4B84 201A              sub R2,R16
 4B86 310A              sbc R3,R17
 4B88 5101              movw R10,R2
 4B8A           ;                                                               if(i > 30)
 4B8A 8EE1              ldi R24,30
 4B8C 90E0              ldi R25,0
 4B8E 8215              cp R24,R2
 4B90 9305              cpc R25,R3
 4B92 B0F4              brsh L966
 4B94           X486:
 4B94           ; 								{
 4B94           ; 									if(detRetry < 5)	// 重测计数
 4B94 80911500          lds R24,L763
 4B98 8530              cpi R24,5
 4B9A 20F4              brsh L968
 4B9C           X487:
 4B9C           ; 									{
 4B9C           ; 										detRetry ++;	
 4B9C 8F5F              subi R24,255    ; addi 1
 4B9E 80931500          sts L763,R24
 4BA2           ;                                                                               break;  
 4BA2 01C3              xjmp L807
 4BA4           L968:
 4BA4           ; 									}
 4BA4           ; 									MotStop(MOT_SAMP_NEEDLE);
 4BA4 03E0              ldi R16,3
 4BA6 0E940000          xcall _MotStop
 4BAA           ;                                                                       subStep = 3;
 4BAA 83E0              ldi R24,3
 4BAC 80931300          sts L761,R24
 4BB0           ;                                                                       SetDelayTime(MOT_SAMP_NEEDLE, 10);
 4BB0 2AE0              ldi R18,10
 4BB2 30E0              ldi R19,0
 4BB4 03E0              ldi R16,3
 4BB6 0E940000          xcall _SetDelayTime
 4BBA           ;                                                                       SetBeepAck();
 4BBA 0E940000          xcall _SetBeepAck
 4BBE           ;                                                               }
 4BBE F3C2              xjmp L807
 4BC0           L966:
 4BC0           ; 								else
 4BC0           ; 									detRetry = 0;
 4BC0 2224              clr R2
 4BC2 20921500          sts L763,R2
 4BC6           ;                                                       }
 4BC6           ;                                                       break;
 4BC6 EFC2              xjmp L807
 4BC8           L970:
 4BC8           ; 						case 3:		// 记录起始液面高度
 4BC8           ; 							mixCalStartPos = (unsigned int)GetMotPositionOfStep(MOT_SAMP_NEEDLE);
 4BC8 03E0              ldi R16,3
 4BCA 0E940000          xcall _GetMotPositionOfStep
 4BCE 6801              movw R12,R16
 4BD0 D0921F00          sts L769+1,R13
 4BD4 C0921E00          sts L769,R12
 4BD8           ;                                                       _NeedleMotRunTo(_POS_MIX_TOP, 200);
 4BD8 28EC              ldi R18,200
 4BDA 08E6              ldi R16,360
 4BDC 11E0              ldi R17,1
 4BDE F5D3              xcall __NeedleMotRunTo
 4BE0           ;                                                       MotInitCheck(MOT_SAMP_PUMP);
 4BE0 0CE0              ldi R16,12
 4BE2 0E940000          xcall _MotInitCheck
 4BE6           ;                                                       SetDelayTime(MOT_DILUENT, 10);
 4BE6 2AE0              ldi R18,10
 4BE8 30E0              ldi R19,0
 4BEA 09E0              ldi R16,9
 4BEC 0E940000          xcall _SetDelayTime
 4BF0           ;                                                       subStep = 0;
 4BF0 2224              clr R2
 4BF2 20921300          sts L761,R2
 4BF6           ;                                                       workStep = 3;
 4BF6 83E0              ldi R24,3
 4BF8 80931200          sts L760,R24
 4BFC           ;                                                       waitMotSampNeedle = 1;
 4BFC 81E0              ldi R24,1
 4BFE 80934E00          sts _waitMotSampNeedle,R24
 4C02           ;                                                       waitMotSampPump = 1;
 4C02 80934D00          sts _waitMotSampPump,R24
 4C06           ;                                                       break;
 4C06           ;                                               }
 4C06           ;                                       break;
 4C06 CFC2              xjmp L807
 4C08           L971:
 4C08           ; 				case 3:		// 注入定标液
 4C08           ; 					switch(subStep)
 4C08 40911300          lds R20,L761
 4C0C 5527              clr R21
 4C0E 4030              cpi R20,0
 4C10 4507              cpc R20,R21
 4C12 F1F0              breq L975
 4C14           X488:
 4C14 4130              cpi R20,1
 4C16 E0E0              ldi R30,0
 4C18 5E07              cpc R21,R30
 4C1A 11F1              breq L976
 4C1C           X489:
 4C1C 4230              cpi R20,2
 4C1E E0E0              ldi R30,0
 4C20 5E07              cpc R21,R30
 4C22 09F4              brne X569
 4C24 4DC0              xjmp L982
 4C26           X569:
 4C26           X490:
 4C26 4330              cpi R20,3
 4C28 E0E0              ldi R30,0
 4C2A 5E07              cpc R21,R30
 4C2C 09F4              brne X570
 4C2E 53C0              xjmp L983
 4C30           X570:
 4C30           X491:
 4C30 4430              cpi R20,4
 4C32 E0E0              ldi R30,0
 4C34 5E07              cpc R21,R30
 4C36 09F4              brne X571
 4C38 65C0              xjmp L984
 4C3A           X571:
 4C3A           X492:
 4C3A 4530              cpi R20,5
 4C3C E0E0              ldi R30,0
 4C3E 5E07              cpc R21,R30
 4C40 09F4              brne X572
 4C42 B2C0              xjmp L994
 4C44           X572:
 4C44           X493:
 4C44 4630              cpi R20,6
 4C46 E0E0              ldi R30,0
 4C48 5E07              cpc R21,R30
 4C4A 09F4              brne X573
 4C4C 1AC1              xjmp L1002
 4C4E           X573:
 4C4E           X494:
 4C4E ABC2              xjmp L807
 4C50           L975:
 4C50           ; 					{
 4C50           ; 						case 0:
 4C50           ; 					//		_DiluentMotRun(50, 80);		// 注入50个单位溶液
 4C50           ; #if 	(DILUTE_TUBE == 14)
 4C50           ; 							_DiluentMotRun(40+5, 64);		// 注入40个单位溶液
 4C50           ; #elif	(DILUTE_TUBE == 16)
 4C50           ; 							_DiluentMotRun(12+2, 64);		// 注入12+2个单位溶液
 4C50 20E4              ldi R18,64
 4C52 0EE0              ldi R16,14
 4C54 10E0              ldi R17,0
 4C56 60D3              xcall __DiluentMotRun
 4C58           ; #endif
 4C58           ;                                                       subStep = 1;
 4C58 81E0              ldi R24,1
 4C5A 80931300          sts L761,R24
 4C5E           ;                                                       break;
 4C5E A3C2              xjmp L807
 4C60           L976:
 4C60           ; 						case 1:
 4C60           ; 							if(GetLiquidMonitorState(0) == INFO_LIQ_EMPTY)
 4C60 0027              clr R16
 4C62 0E940000          xcall _GetLiquidMonitorState
 4C66 402F              mov R20,R16
 4C68 0E30              cpi R16,14
 4C6A F9F4              brne L977
 4C6C           X495:
 4C6C           ; 							{
 4C6C           ; 								// 稀释液供应异常
 4C6C           ; 								SetBeepWarning();
 4C6C 0E940000          xcall _SetBeepWarning
 4C70           ;                                                               // 退出处理
 4C70           ;                                                               mainStep = 8;
 4C70 88E0              ldi R24,8
 4C72 80931100          sts L759,R24
 4C76           ;                                                               workStep = 0;
 4C76 2224              clr R2
 4C78 20921200          sts L760,R2
 4C7C           ;                                                               MotStop(MOT_DILUENT);
 4C7C 09E0              ldi R16,9
 4C7E 0E940000          xcall _MotStop
 4C82           ;                                                               SetDelayTime(MOT_SAMP_NEEDLE, 5);
 4C82 25E0              ldi R18,5
 4C84 30E0              ldi R19,0
 4C86 03E0              ldi R16,3
 4C88 0E940000          xcall _SetDelayTime
 4C8C           ;                                                               Uart0ReUnable;
 4C8C 8091C100          lds R24,193
 4C90 8F7E              andi R24,239
 4C92 8093C100          sts 193,R24
 4C96           ;                                                               uart_Printf("!2533\r\n");       // 在稀释液流量定标时，稀释液供应中断，请检查和更换稀释液后重新运行液路自检程序
 4C96 00E0              ldi R16,<L979
 4C98 10E0              ldi R17,>L979
 4C9A 0E940000          xcall _uart_Printf
 4C9E           ;                                                               Uart0ReEnable;
 4C9E 8091C100          lds R24,193
 4CA2 8061              ori R24,16
 4CA4 8093C100          sts 193,R24
 4CA8           ;                                                               break;
 4CA8 7EC2              xjmp L807
 4CAA           L977:
 4CAA           ; 							}
 4CAA           ; 							if(GetMotState(MOT_DILUENT) == STA_SLAVE_FREE)
 4CAA 09E0              ldi R16,9
 4CAC 0E940000          xcall _GetMotState
 4CB0 402F              mov R20,R16
 4CB2 0130              cpi R16,1
 4CB4 09F0              breq X574
 4CB6 77C2              xjmp L807
 4CB8           X574:
 4CB8           X496:
 4CB8           ; 							{
 4CB8           ; 								subStep = 2;
 4CB8 82E0              ldi R24,2
 4CBA 80931300          sts L761,R24
 4CBE           ;                                                       }
 4CBE           ;                                                       break;
 4CBE 73C2              xjmp L807
 4CC0           L982:
 4CC0           ; 						case 2:	
 4CC0           ; #if 	(DILUTE_TUBE == 14)
 4CC0           ; 							_DiluentMotRun(-5, 64);
 4CC0           ; #elif	(DILUTE_TUBE == 16)
 4CC0           ; 							_DiluentMotRun(-2, 64);
 4CC0 20E4              ldi R18,64
 4CC2 0EEF              ldi R16,-2
 4CC4 1FEF              ldi R17,-1
 4CC6 28D3              xcall __DiluentMotRun
 4CC8           ; #endif
 4CC8           ;                                                       waitMotDiluent = 1;
 4CC8 81E0              ldi R24,1
 4CCA 80934B00          sts _waitMotDiluent,R24
 4CCE           ;                                                       subStep = 3;
 4CCE 83E0              ldi R24,3
 4CD0 80931300          sts L761,R24
 4CD4           ;                                                       break;
 4CD4 68C2              xjmp L807
 4CD6           L983:
 4CD6           ; 						case 3:		// 取样针下降探测液面高度
 4CD6           ; 						/*
 4CD6           ; 							if(CheckLiqDetBase())
 4CD6           ; 							{
 4CD6           ; 								mainStep = 8;	workStep = 0;
 4CD6           ; 								Uart0ReUnable;
 4CD6           ; 								uart_Printf("!2534\r\n");	// 在稀释液流量定标液面高度测量时，液面探测功能自检出现错误
 4CD6           ; 								Uart0ReEnable;
 4CD6           ; 								break;// 退出处理
 4CD6           ; 							}
 4CD6           ; 							*/
 4CD6           ; 							liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 4CD6 0027              clr R16
 4CD8 0E940000          xcall _getLiqDetADC
 4CDC 6801              movw R12,R16
 4CDE D0925200          sts _liqDetBaseAdc+1,R13
 4CE2 C0925100          sts _liqDetBaseAdc,R12
 4CE6           ;                                                       //uart_Printf("//LiqDetBaseAdc8 $%4d\r\n",liqDetBaseAdc);       
 4CE6           ;                                                       _SampPumpMotRun(100, 64);
 4CE6 20E4              ldi R18,64
 4CE8 04E6              ldi R16,100
 4CEA 10E0              ldi R17,0
 4CEC 8ED3              xcall __SampPumpMotRun
 4CEE           ;                                                       _NeedleMotRunTo(_POS_MIX_CAL_START-225, 8);
 4CEE 28E0              ldi R18,8
 4CF0 0BE7              ldi R16,635
 4CF2 12E0              ldi R17,2
 4CF4 6AD3              xcall __NeedleMotRunTo
 4CF6           ;                                                       detRetry = 0;
 4CF6 2224              clr R2
 4CF8 20921500          sts L763,R2
 4CFC           ;                                                       subStep = 4;
 4CFC 84E0              ldi R24,4
 4CFE 80931300          sts L761,R24
 4D02           ;                                                       break;
 4D02 51C2              xjmp L807
 4D04           L984:
 4D04           ; 						case 4:	// 等待取样针接触到液面
 4D04           ; 							// 检查稀释液泵是否在运行，如果停止表示未注入液体或液面探测失败
 4D04           ; 							if(GetMotState(MOT_SAMP_NEEDLE)==STA_SLAVE_FREE)
 4D04 03E0              ldi R16,3
 4D06 0E940000          xcall _GetMotState
 4D0A 402F              mov R20,R16
 4D0C 0130              cpi R16,1
 4D0E E9F4              brne L985
 4D10           X497:
 4D10           ; 							{
 4D10           ; 								MotStop(MOT_SAMP_NEEDLE);
 4D10 03E0              ldi R16,3
 4D12 0E940000          xcall _MotStop
 4D16           ;                                                               SetBeepWarning();
 4D16 0E940000          xcall _SetBeepWarning
 4D1A           ;                                                               // 退出处理
 4D1A           ;                                                               mainStep = 8;
 4D1A 88E0              ldi R24,8
 4D1C 80931100          sts L759,R24
 4D20           ;                                                               workStep = 0;
 4D20 2224              clr R2
 4D22 20921200          sts L760,R2
 4D26           ;                                                               MotInitCheck(MOT_SAMP_PUMP);
 4D26 0CE0              ldi R16,12
 4D28 0E940000          xcall _MotInitCheck
 4D2C           ;                                                               Uart0ReUnable;
 4D2C 8091C100          lds R24,193
 4D30 8F7E              andi R24,239
 4D32 8093C100          sts 193,R24
 4D36           ;                                                               uart_Printf("!2535\r\n");       // 在稀释液流量定标液面高度测量时，未探测到液面，请检查稀释液泵后重新运行液路自检程序
 4D36 00E0              ldi R16,<L987
 4D38 10E0              ldi R17,>L987
 4D3A 0E940000          xcall _uart_Printf
 4D3E           ;                                                               Uart0ReEnable;
 4D3E 8091C100          lds R24,193
 4D42 8061              ori R24,16
 4D44 8093C100          sts 193,R24
 4D48           ;                                                               break;
 4D48 2EC2              xjmp L807
 4D4A           L985:
 4D4A           ; 							}
 4D4A           ; 							i = getLiqDetADC(NeedleChannel);
 4D4A 0027              clr R16
 4D4C 0E940000          xcall _getLiqDetADC
 4D50 6801              movw R12,R16
 4D52 5601              movw R10,R12
 4D54           ;                                                       if(i < liqDetBaseAdc)
 4D54 20905100          lds R2,_liqDetBaseAdc
 4D58 30905200          lds R3,_liqDetBaseAdc+1
 4D5C 0215              cp R16,R2
 4D5E 1305              cpc R17,R3
 4D60 08F0              brlo X575
 4D62 21C2              xjmp L807
 4D64           X575:
 4D64           X498:
 4D64           ; 							{
 4D64           ; 								i = liqDetBaseAdc - i;
 4D64 201A              sub R2,R16
 4D66 310A              sbc R3,R17
 4D68 5101              movw R10,R2
 4D6A           ;                                                               if(i>90)
 4D6A 8AE5              ldi R24,90
 4D6C 90E0              ldi R25,0
 4D6E 8215              cp R24,R2
 4D70 9305              cpc R25,R3
 4D72 B0F4              brsh L990
 4D74           X499:
 4D74           ; 								{
 4D74           ; 									if(detRetry < 5)	// 重测计数
 4D74 80911500          lds R24,L763
 4D78 8530              cpi R24,5
 4D7A 20F4              brsh L992
 4D7C           X500:
 4D7C           ; 									{
 4D7C           ; 										detRetry ++;	
 4D7C 8F5F              subi R24,255    ; addi 1
 4D7E 80931500          sts L763,R24
 4D82           ;                                                                               break;  
 4D82 11C2              xjmp L807
 4D84           L992:
 4D84           ; 									}
 4D84           ; 									MotStop(MOT_SAMP_NEEDLE);
 4D84 03E0              ldi R16,3
 4D86 0E940000          xcall _MotStop
 4D8A           ;                                                                       subStep = 5;
 4D8A 85E0              ldi R24,5
 4D8C 80931300          sts L761,R24
 4D90           ;                                                                       SetDelayTime(MOT_SAMP_NEEDLE, 10);
 4D90 2AE0              ldi R18,10
 4D92 30E0              ldi R19,0
 4D94 03E0              ldi R16,3
 4D96 0E940000          xcall _SetDelayTime
 4D9A           ;                                                                       SetBeepAck();
 4D9A 0E940000          xcall _SetBeepAck
 4D9E           ;                                                               }
 4D9E 03C2              xjmp L807
 4DA0           L990:
 4DA0           ; 								else
 4DA0           ; 									detRetry = 0;
 4DA0 2224              clr R2
 4DA2 20921500          sts L763,R2
 4DA6           ;                                                       }
 4DA6           ;                                                       break;
 4DA6 FFC1              xjmp L807
 4DA8           L994:
 4DA8           ; 						case 5:
 4DA8           ; 						//	MotInitCheck(MOT_SAMP_PUMP);
 4DA8           ; 							MotRunTo(MOT_SAMP_PUMP, 0);
 4DA8 2227              clr R18
 4DAA 3327              clr R19
 4DAC 0CE0              ldi R16,12
 4DAE 0E940000          xcall _MotRunTo
 4DB2           ;                                                       i = (unsigned int)GetMotPositionOfStep(MOT_SAMP_NEEDLE);                // 记录泵起始值
 4DB2 03E0              ldi R16,3
 4DB4 0E940000          xcall _GetMotPositionOfStep
 4DB8           ;                                                       i = mixCalStartPos - i; // 1680
 4DB8 20901E00          lds R2,L769
 4DBC 30901F00          lds R3,L769+1
 4DC0 201A              sub R2,R16
 4DC2 310A              sbc R3,R17
 4DC4 5101              movw R10,R2
 4DC6           ; #ifndef Puncture
 4DC6           ;                                                       i = i*2;
 4DC6 AA0C              lsl R10
 4DC8 BB1C              rol R11
 4DCA           ; #endif
 4DCA           ;                                                       Uart0ReUnable;
 4DCA 8091C100          lds R24,193
 4DCE 8F7E              andi R24,239
 4DD0 8093C100          sts 193,R24
 4DD4           ;                                                       uart_Printf("// DiluteFlow:%d\r\n", i);
 4DD4 9501              movw R18,R10
 4DD6 00E0              ldi R16,<L995
 4DD8 10E0              ldi R17,>L995
 4DDA 0E940000          xcall _uart_Printf
 4DDE           ;                                                       Uart0ReEnable;
 4DDE 8091C100          lds R24,193
 4DE2 8061              ori R24,16
 4DE4 8093C100          sts 193,R24
 4DE8           ;                                                       m = JudgeFlowMeter(i);
 4DE8 8501              movw R16,R10
 4DEA 0E940000          xcall _JudgeFlowMeter
 4DEE 6801              movw R12,R16
 4DF0           ;                                                       if(m)
 4DF0 0030              cpi R16,0
 4DF2 0107              cpc R16,R17
 4DF4 09F4              brne X576
 4DF6 3BC0              xjmp L996
 4DF8           X576:
 4DF8           X501:
 4DF8           ; 							{
 4DF8           ; 								Uart0ReUnable;
 4DF8 8091C100          lds R24,193
 4DFC 8F7E              andi R24,239
 4DFE 8093C100          sts 193,R24
 4E02           ;                                                               uart_Printf("// FlowJudge:%d\r\n", m);
 4E02 9601              movw R18,R12
 4E04 00E0              ldi R16,<L998
 4E06 10E0              ldi R17,>L998
 4E08 0E940000          xcall _uart_Printf
 4E0C           ;                                                               Uart0ReEnable;
 4E0C 8091C100          lds R24,193
 4E10 8061              ori R24,16
 4E12 8093C100          sts 193,R24
 4E16           ;                                                               i = InsetrDiluentFlowCalValue(m);
 4E16 8601              movw R16,R12
 4E18 0E940000          xcall _InsetrDiluentFlowCalValue
 4E1C 6801              movw R12,R16
 4E1E 5601              movw R10,R12
 4E20           ;                                                               if(i)
 4E20 0030              cpi R16,0
 4E22 0107              cpc R16,R17
 4E24 B1F0              breq L999
 4E26           X502:
 4E26           ; 								{
 4E26           ; 									Uart0ReUnable;
 4E26 8091C100          lds R24,193
 4E2A 8F7E              andi R24,239
 4E2C 8093C100          sts 193,R24
 4E30           ;                                                                       uart_Printf("%s $%4d\r\n",strM2110, i);
 4E30 B982              std y+1,R11
 4E32 A882              std y+0,R10
 4E34 20E0              ldi R18,<_strM2110
 4E36 30E0              ldi R19,>_strM2110
 4E38 00E0              ldi R16,<L10
 4E3A 10E0              ldi R17,>L10
 4E3C 0E940000          xcall _uart_Printf
 4E40           ;                                                                       Uart0ReEnable;
 4E40 8091C100          lds R24,193
 4E44 8061              ori R24,16
 4E46 8093C100          sts 193,R24
 4E4A           ;                                                                       CalCnt = 0;             
 4E4A 2224              clr R2
 4E4C 20921600          sts L764,R2
 4E50           ;                                                               }
 4E50 0EC0              xjmp L997
 4E52           L999:
 4E52           ; 								else
 4E52           ; 								{	
 4E52           ; 									Uart0ReUnable;
 4E52 8091C100          lds R24,193
 4E56 8F7E              andi R24,239
 4E58 8093C100          sts 193,R24
 4E5C           ;                                                                       uart_Printf("// CalibRetry:\r\n");
 4E5C 00E0              ldi R16,<L1001
 4E5E 10E0              ldi R17,>L1001
 4E60 0E940000          xcall _uart_Printf
 4E64           ;                                                                       Uart0ReEnable;
 4E64 8091C100          lds R24,193
 4E68 8061              ori R24,16
 4E6A 8093C100          sts 193,R24
 4E6E           ;                                                               //      CalCnt --;
 4E6E           ;                                                               }
 4E6E           ;                                                       }
 4E6E           L996:
 4E6E           ; 							else
 4E6E           ; 							{
 4E6E           ; 							//	CalCnt = 2;
 4E6E           ; 							}
 4E6E           L997:
 4E6E           ; 							subStep = 0;
 4E6E 2224              clr R2
 4E70 20921300          sts L761,R2
 4E74           ;                                                       workStep = 4;
 4E74 84E0              ldi R24,4
 4E76 80931200          sts L760,R24
 4E7A           ;                                                       waitMotSampPump = 1;
 4E7A 81E0              ldi R24,1
 4E7C 80934D00          sts _waitMotSampPump,R24
 4E80           ;                                                       break;
 4E80 92C1              xjmp L807
 4E82           L1002:
 4E82           ; 						case 6:
 4E82           ; 							subStep = 0;
 4E82 2224              clr R2
 4E84 20921300          sts L761,R2
 4E88           ;                                                       workStep = 4;
 4E88 84E0              ldi R24,4
 4E8A 80931200          sts L760,R24
 4E8E           ;                                                       break;
 4E8E           ;                                               default:
 4E8E           ;                                                       break;
 4E8E           ;                                               }
 4E8E           ;                                       break;
 4E8E 8BC1              xjmp L807
 4E90           L1003:
 4E90           ; 				case 4:
 4E90           ; 					_NeedleMotRunTo(0, 240);
 4E90 20EF              ldi R18,240
 4E92 0027              clr R16
 4E94 1127              clr R17
 4E96 99D2              xcall __NeedleMotRunTo
 4E98           ;                                       _EffluentMotRun(30, 120);
 4E98 28E7              ldi R18,120
 4E9A 0EE1              ldi R16,30
 4E9C 10E0              ldi R17,0
 4E9E 23D2              xcall __EffluentMotRun
 4EA0           ;                                       waitMotSampNeedle = 1;
 4EA0 81E0              ldi R24,1
 4EA2 80934E00          sts _waitMotSampNeedle,R24
 4EA6           ;                                       waitEffluent = 1;
 4EA6 80934A00          sts _waitEffluent,R24
 4EAA           ;                                       if(CalCnt != 0)
 4EAA 20901600          lds R2,L764
 4EAE 2220              tst R2
 4EB0 69F0              breq L1004
 4EB2           X503:
 4EB2           ; 					{
 4EB2           ; 						CalCnt --;
 4EB2 822D              mov R24,R2
 4EB4 8150              subi R24,1
 4EB6 80931600          sts L764,R24
 4EBA           ;                                               workStep = 0;
 4EBA 2224              clr R2
 4EBC 20921200          sts L760,R2
 4EC0           ;                                               mainStep = 4;
 4EC0 84E0              ldi R24,4
 4EC2 80931100          sts L759,R24
 4EC6           ;                                               subStep = 0;
 4EC6 20921300          sts L761,R2
 4ECA           ;                                       }
 4ECA 6DC1              xjmp L807
 4ECC           L1004:
 4ECC           ; 					else
 4ECC           ; 						workStep = 5;
 4ECC 85E0              ldi R24,5
 4ECE 80931200          sts L760,R24
 4ED2           ;                                       break;
 4ED2 69C1              xjmp L807
 4ED4           L1006:
 4ED4           ; 				case 5:
 4ED4           ; 					MotRunTo(MOT_SAMP_TRUN, 0);
 4ED4 2227              clr R18
 4ED6 3327              clr R19
 4ED8 02E0              ldi R16,2
 4EDA 0E940000          xcall _MotRunTo
 4EDE           ;                                       waitMotSampTurn= 1;
 4EDE 81E0              ldi R24,1
 4EE0 80934F00          sts _waitMotSampTurn,R24
 4EE4           ;                                       workStep = 6;
 4EE4 86E0              ldi R24,6
 4EE6 80931200          sts L760,R24
 4EEA           ;                                       break;
 4EEA 5DC1              xjmp L807
 4EEC           L1007:
 4EEC           ; 				case 6:
 4EEC           ; 					if(WorkProcessStep == 3)
 4EEC 80910000          lds R24,_WorkProcessStep
 4EF0 8330              cpi R24,3
 4EF2 89F4              brne L1008
 4EF4           X504:
 4EF4           ; 					{
 4EF4           ; 
 4EF4           ; 						MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 4EF4 20913A00          lds R18,_NeedleOnMixCenterPos
 4EF8 30913B00          lds R19,_NeedleOnMixCenterPos+1
 4EFC 02E0              ldi R16,2
 4EFE 0E940000          xcall _MotRunTo
 4F02           ;                                               waitMotSampTurn= 1;
 4F02 81E0              ldi R24,1
 4F04 80934F00          sts _waitMotSampTurn,R24
 4F08           ;                                               cNum = 3;
 4F08 83E0              ldi R24,3
 4F0A 80931B00          sts L767,R24
 4F0E           ;                                               workStep = 9;
 4F0E 89E0              ldi R24,9
 4F10 80931200          sts L760,R24
 4F14           ; /*
 4F14           ;                                               MotRunTo(MOT_SAMP_TRUN, _POS_SAMPTURN_SAMP);
 4F14           ;                                               waitMotSampTurn= 1;
 4F14           ; #ifndef Puncture
 4F14           ;                                               workStep = 7;
 4F14           ; #else
 4F14           ;                                               workStep = 8;
 4F14           ; #endif
 4F14           ; */
 4F14           ;                                       }
 4F14 48C1              xjmp L807
 4F16           L1008:
 4F16           ; 					else
 4F16           ; 					{
 4F16           ; 						workStep = 0;
 4F16 2224              clr R2
 4F18 20921200          sts L760,R2
 4F1C           ;                                               mainStep = 7;
 4F1C 87E0              ldi R24,7
 4F1E 80931100          sts L759,R24
 4F22           ;                                               subStep = 0;
 4F22 20921300          sts L761,R2
 4F26           ;                                       }
 4F26           ;                                       break;
 4F26 3FC1              xjmp L807
 4F28           L1010:
 4F28           ; 				case 7:
 4F28           ; 					_NeedleMotRunTo(_POS_SAMP_DOWN, 180);
 4F28 24EB              ldi R18,180
 4F2A 08EA              ldi R16,1960
 4F2C 17E0              ldi R17,7
 4F2E 4DD2              xcall __NeedleMotRunTo
 4F30           ;                                       waitMotSampNeedle = 1;
 4F30 81E0              ldi R24,1
 4F32 80934E00          sts _waitMotSampNeedle,R24
 4F36           ;                                       workStep = 8;
 4F36 88E0              ldi R24,8
 4F38 80931200          sts L760,R24
 4F3C           ;                                       break;
 4F3C 34C1              xjmp L807
 4F3E           L1011:
 4F3E           ; 				case 8:
 4F3E           ; 					workStep = 0;
 4F3E 2224              clr R2
 4F40 20921200          sts L760,R2
 4F44           ;                                       mainStep = 7;
 4F44 87E0              ldi R24,7
 4F46 80931100          sts L759,R24
 4F4A           ;                                       subStep = 0;
 4F4A 20921300          sts L761,R2
 4F4E           ;                                       break;
 4F4E 2BC1              xjmp L807
 4F50           L1012:
 4F50           ; 				case 9:	
 4F50           ; 					MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_TOP);
 4F50 28E6              ldi R18,360
 4F52 31E0              ldi R19,1
 4F54 03E0              ldi R16,3
 4F56 0E940000          xcall _MotRunTo
 4F5A           ;                                       waitMotSampNeedle = 1;
 4F5A 81E0              ldi R24,1
 4F5C 80934E00          sts _waitMotSampNeedle,R24
 4F60           ;                                       workStep = 10;
 4F60 8AE0              ldi R24,10
 4F62 80931200          sts L760,R24
 4F66           ;                                       break;
 4F66 1FC1              xjmp L807
 4F68           L1013:
 4F68           ; 				case 10:// 清洗和灌注取样针通道
 4F68           ; 					cNum--;
 4F68 80911B00          lds R24,L767
 4F6C 8150              subi R24,1
 4F6E 80931B00          sts L767,R24
 4F72           ;                                       SetEValve(EV2, EV_OPEN);
 4F72 21E0              ldi R18,1
 4F74 02E0              ldi R16,2
 4F76 0E940000          xcall _SetEValve
 4F7A           ;                                       MotInitCheck(MOT_SAMP_PUMP);
 4F7A 0CE0              ldi R16,12
 4F7C 0E940000          xcall _MotInitCheck
 4F80           ;                                       _FluidMotRun(12, 100);          // 注入1mL清洗液
 4F80 24E6              ldi R18,100
 4F82 0CE0              ldi R16,12
 4F84 10E0              ldi R17,0
 4F86 8AD1              xcall __FluidMotRun
 4F88           ;                                       waitMotFluid = 1;
 4F88 81E0              ldi R24,1
 4F8A 80934C00          sts _waitMotFluid,R24
 4F8E           ;                                       SetDelayTime(MOT_FLUID, 40);
 4F8E 28E2              ldi R18,40
 4F90 30E0              ldi R19,0
 4F92 0AE0              ldi R16,10
 4F94 0E940000          xcall _SetDelayTime
 4F98           ;                                       workStep = 11;
 4F98 8BE0              ldi R24,11
 4F9A 80931200          sts L760,R24
 4F9E           ;                                       break;
 4F9E 03C1              xjmp L807
 4FA0           L1014:
 4FA0           ; 				case 11:
 4FA0           ; 					_EffluentMotRun(20, 200);
 4FA0 28EC              ldi R18,200
 4FA2 04E1              ldi R16,20
 4FA4 10E0              ldi R17,0
 4FA6 9FD1              xcall __EffluentMotRun
 4FA8           ;                                       SetDelayTime(MOT_FLUID, 20);
 4FA8 24E1              ldi R18,20
 4FAA 30E0              ldi R19,0
 4FAC 0AE0              ldi R16,10
 4FAE 0E940000          xcall _SetDelayTime
 4FB2           ;                                       waitEffluent = 1;
 4FB2 81E0              ldi R24,1
 4FB4 80934A00          sts _waitEffluent,R24
 4FB8           ;                                       workStep = 12;
 4FB8 8CE0              ldi R24,12
 4FBA 80931200          sts L760,R24
 4FBE           ;                                       break;
 4FBE F3C0              xjmp L807
 4FC0           L1015:
 4FC0           ; 				case 12:
 4FC0           ; 					if(cNum != 0)
 4FC0 20901B00          lds R2,L767
 4FC4 2220              tst R2
 4FC6 21F0              breq L1016
 4FC8           X505:
 4FC8           ; 						workStep = 10;
 4FC8 8AE0              ldi R24,10
 4FCA 80931200          sts L760,R24
 4FCE EBC0              xjmp L807
 4FD0           L1016:
 4FD0           ; 					else
 4FD0           ; 						workStep = 13;
 4FD0 8DE0              ldi R24,13
 4FD2 80931200          sts L760,R24
 4FD6           ;                                       break;
 4FD6 E7C0              xjmp L807
 4FD8           L1018:
 4FD8           ; 				case 13:	// 清洗完毕，抽清洗头残留水
 4FD8           ; 					SetEValve(EV_ALL, EV_CLOSE);
 4FD8 2227              clr R18
 4FDA 0027              clr R16
 4FDC 0E940000          xcall _SetEValve
 4FE0           ;                                       SetEValve(EV3, EV_OPEN);
 4FE0 21E0              ldi R18,1
 4FE2 03E0              ldi R16,3
 4FE4 0E940000          xcall _SetEValve
 4FE8           ;                                       _NeedleMotRunTo(0, 180);//240
 4FE8 24EB              ldi R18,180
 4FEA 0027              clr R16
 4FEC 1127              clr R17
 4FEE EDD1              xcall __NeedleMotRunTo
 4FF0           ;                                       _EffluentMotRun(30, 200);
 4FF0 28EC              ldi R18,200
 4FF2 0EE1              ldi R16,30
 4FF4 10E0              ldi R17,0
 4FF6 77D1              xcall __EffluentMotRun
 4FF8           ;                                       waitMotSampNeedle = 1;
 4FF8 81E0              ldi R24,1
 4FFA 80934E00          sts _waitMotSampNeedle,R24
 4FFE           ;                                       waitEffluent = 1;
 4FFE 80934A00          sts _waitEffluent,R24
 5002           ;                                       workStep = 14;
 5002 8EE0              ldi R24,14
 5004 80931200          sts L760,R24
 5008           ;                                       break;
 5008 CEC0              xjmp L807
 500A           L1019:
 500A           ; 				case 14:	// 排干混匀池水
 500A           ; 					SetEValve(EV_ALL, EV_CLOSE);
 500A 2227              clr R18
 500C 0027              clr R16
 500E 0E940000          xcall _SetEValve
 5012           ;                                       _EffluentMotRun(20, 220);
 5012 2CED              ldi R18,220
 5014 04E1              ldi R16,20
 5016 10E0              ldi R17,0
 5018 66D1              xcall __EffluentMotRun
 501A           ;                                       waitEffluent = 1;
 501A 81E0              ldi R24,1
 501C 80934A00          sts _waitEffluent,R24
 5020           ;                                       workStep = 15;
 5020 8FE0              ldi R24,15
 5022 80931200          sts L760,R24
 5026           ;                                       break;
 5026 BFC0              xjmp L807
 5028           L1020:
 5028           ; 				case 15:
 5028           ; 					MotRunTo(MOT_SAMP_TRUN, 0);
 5028 2227              clr R18
 502A 3327              clr R19
 502C 02E0              ldi R16,2
 502E 0E940000          xcall _MotRunTo
 5032           ;                                       waitMotSampTurn= 1;
 5032 81E0              ldi R24,1
 5034 80934F00          sts _waitMotSampTurn,R24
 5038           ;                                       workStep = 16;
 5038 80E1              ldi R24,16
 503A 80931200          sts L760,R24
 503E           ;                                       break;
 503E B3C0              xjmp L807
 5040           L1021:
 5040           ; 				case 16:
 5040           ; 					MotRunTo(MOT_SAMP_TRUN, _POS_SAMPTURN_SAMP);
 5040 24ED              ldi R18,980
 5042 33E0              ldi R19,3
 5044 02E0              ldi R16,2
 5046 0E940000          xcall _MotRunTo
 504A           ;                                       waitMotSampTurn= 1;
 504A 81E0              ldi R24,1
 504C 80934F00          sts _waitMotSampTurn,R24
 5050           ;                                       MotRun(MOT_SAMP_PUMP, _SAMP_PUMP_INTERVAL + _SAMP_PUMP_AIR_ISOLATE);
 5050 28E6              ldi R18,360
 5052 31E0              ldi R19,1
 5054 0CE0              ldi R16,12
 5056 0E940000          xcall _MotRun
 505A           ;                                       waitMotSampPump = 1;
 505A 81E0              ldi R24,1
 505C 80934D00          sts _waitMotSampPump,R24
 5060           ; #ifndef Puncture
 5060           ;                                       workStep = 7;
 5060 87E0              ldi R24,7
 5062 80931200          sts L760,R24
 5066           ; #else
 5066           ;                                       workStep = 8;
 5066           ; #endif
 5066           ;                                       break;
 5066           ;                       }
 5066           ;                       break;
 5066 9FC0              xjmp L807
 5068           L1023:
 5068           ; 		case 7:		// 液路自检完成
 5068           ; 			SetBeepAck();
 5068 0E940000          xcall _SetBeepAck
 506C           ;                       SetEValve(EV_ALL, EV_CLOSE);
 506C 2227              clr R18
 506E 0027              clr R16
 5070 0E940000          xcall _SetEValve
 5074           ;                       workStep = 0;
 5074 2224              clr R2
 5076 20921200          sts L760,R2
 507A           ;                       mainStep = 0;
 507A 20921100          sts L759,R2
 507E           ;                       Uart0ReUnable;
 507E 8091C100          lds R24,193
 5082 8F7E              andi R24,239
 5084 8093C100          sts 193,R24
 5088           ;                       uart_Printf("%s\r\n",strM2120);
 5088 20E0              ldi R18,<_strM2120
 508A 30E0              ldi R19,>_strM2120
 508C 00E0              ldi R16,<L88
 508E 10E0              ldi R17,>L88
 5090 0E940000          xcall _uart_Printf
 5094           ;                       Uart0ReEnable;
 5094 8091C100          lds R24,193
 5098 8061              ori R24,16
 509A 8093C100          sts 193,R24
 509E           ;                       return 1;
 509E 01E0              ldi R16,1
 50A0 83C0              xjmp L758
 50A2           L1024:
 50A2           ; 			break;
 50A2           ; 		case 8:		// 液路自检失败，失败跳转到这里
 50A2           ; 			switch(workStep)
 50A2 40911200          lds R20,L760
 50A6 5527              clr R21
 50A8 4030              cpi R20,0
 50AA 4507              cpc R20,R21
 50AC A1F0              breq L1028
 50AE           X506:
 50AE 4130              cpi R20,1
 50B0 E0E0              ldi R30,0
 50B2 5E07              cpc R21,R30
 50B4 49F1              breq L1029
 50B6           X507:
 50B6 4230              cpi R20,2
 50B8 E0E0              ldi R30,0
 50BA 5E07              cpc R21,R30
 50BC 09F4              brne X577
 50BE 38C0              xjmp L1032
 50C0           X577:
 50C0           X508:
 50C0 4330              cpi R20,3
 50C2 E0E0              ldi R30,0
 50C4 5E07              cpc R21,R30
 50C6 09F4              brne X578
 50C8 4AC0              xjmp L1034
 50CA           X578:
 50CA           X509:
 50CA 4430              cpi R20,4
 50CC E0E0              ldi R30,0
 50CE 5E07              cpc R21,R30
 50D0 09F4              brne X579
 50D2 59C0              xjmp L1035
 50D4           X579:
 50D4           X510:
 50D4 68C0              xjmp L807
 50D6           L1028:
 50D6           ; 			{
 50D6           ; 				case 0:
 50D6           ; 					SetMotRunPam(MOT_SAMP_NEEDLE, 220, 20, CURRENT_SAMP_NEEDLE);	// 恢复取样针正常运行参数
 50D6 83E0              ldi R24,3
 50D8 8A83              std y+2,R24
 50DA 84E1              ldi R24,20
 50DC 8883              std y+0,R24
 50DE 2CED              ldi R18,220
 50E0 03E0              ldi R16,3
 50E2 0E940000          xcall _SetMotRunPam
 50E6           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 50E6 03E0              ldi R16,3
 50E8 0E940000          xcall _MotInitCheck
 50EC           ;                                       SetEValve(EV_ALL, EV_CLOSE);
 50EC 2227              clr R18
 50EE 0027              clr R16
 50F0 0E940000          xcall _SetEValve
 50F4           ;                                       _EffluentMotRun(30, 200);
 50F4 28EC              ldi R18,200
 50F6 0EE1              ldi R16,30
 50F8 10E0              ldi R17,0
 50FA F5D0              xcall __EffluentMotRun
 50FC           ;                                       waitMotSampNeedle = 1;
 50FC 81E0              ldi R24,1
 50FE 80934E00          sts _waitMotSampNeedle,R24
 5102           ;                                       workStep = 1;
 5102 80931200          sts L760,R24
 5106           ;                                       break;
 5106 4FC0              xjmp L807
 5108           L1029:
 5108           ; 				case 1:
 5108           ; 					MotInitCheck(MOT_SAMP_TRUN);
 5108 02E0              ldi R16,2
 510A 0E940000          xcall _MotInitCheck
 510E           ;                                       waitMotSampTurn= 1;
 510E 81E0              ldi R24,1
 5110 80934F00          sts _waitMotSampTurn,R24
 5114           ;                                       waitEffluent = 1;
 5114 80934A00          sts _waitEffluent,R24
 5118           ;                                       if(WorkProcessStep == 3)                // 测试模式下吸样针下来
 5118 80910000          lds R24,_WorkProcessStep
 511C 8330              cpi R24,3
 511E 21F4              brne L1030
 5120           X511:
 5120           ; 						workStep = 3;
 5120 83E0              ldi R24,3
 5122 80931200          sts L760,R24
 5126 3FC0              xjmp L807
 5128           L1030:
 5128           ; 					else
 5128           ; 						workStep = 2;
 5128 82E0              ldi R24,2
 512A 80931200          sts L760,R24
 512E           ;                                       break;
 512E 3BC0              xjmp L807
 5130           L1032:
 5130           ; 				case 2:
 5130           ; 					workStep = 0;
 5130 2224              clr R2
 5132 20921200          sts L760,R2
 5136           ;                                       mainStep = 0;
 5136 20921100          sts L759,R2
 513A           ;                                       subStep = 0;
 513A 20921300          sts L761,R2
 513E           ;                                       Uart0ReUnable;
 513E 8091C100          lds R24,193
 5142 8F7E              andi R24,239
 5144 8093C100          sts 193,R24
 5148           ;                                       uart_Printf("!2550\r\n");       // 液路自检失败退出
 5148 00E0              ldi R16,<L1033
 514A 10E0              ldi R17,>L1033
 514C 0E940000          xcall _uart_Printf
 5150           ;                                       Uart0ReEnable;
 5150 8091C100          lds R24,193
 5154 8061              ori R24,16
 5156 8093C100          sts 193,R24
 515A           ;                                       return 1;
 515A 01E0              ldi R16,1
 515C 25C0              xjmp L758
 515E           L1034:
 515E           ; 					break;
 515E           ; 				case 3:
 515E           ; 					MotRunTo(MOT_SAMP_TRUN, _POS_SAMPTURN_SAMP);
 515E 24ED              ldi R18,980
 5160 33E0              ldi R19,3
 5162 02E0              ldi R16,2
 5164 0E940000          xcall _MotRunTo
 5168           ;                                       waitMotSampTurn= 1;
 5168 81E0              ldi R24,1
 516A 80934F00          sts _waitMotSampTurn,R24
 516E           ;                                       MotRun(MOT_SAMP_PUMP, _SAMP_PUMP_INTERVAL + _SAMP_PUMP_AIR_ISOLATE);
 516E 28E6              ldi R18,360
 5170 31E0              ldi R19,1
 5172 0CE0              ldi R16,12
 5174 0E940000          xcall _MotRun
 5178           ;                                       waitMotSampPump = 1;
 5178 81E0              ldi R24,1
 517A 80934D00          sts _waitMotSampPump,R24
 517E           ; #ifndef Puncture
 517E           ;                                       workStep = 4;
 517E 84E0              ldi R24,4
 5180 80931200          sts L760,R24
 5184           ; #else
 5184           ;                                       workStep = 2;
 5184           ; #endif
 5184           ;                                       break;
 5184 10C0              xjmp L807
 5186           L1035:
 5186           ; 				case 4:
 5186           ; 					_NeedleMotRunTo(_POS_SAMP_DOWN, 180);
 5186 24EB              ldi R18,180
 5188 08EA              ldi R16,1960
 518A 17E0              ldi R17,7
 518C 1ED1              xcall __NeedleMotRunTo
 518E           ;                                       waitMotSampNeedle = 1;
 518E 81E0              ldi R24,1
 5190 80934E00          sts _waitMotSampNeedle,R24
 5194           ;                                       workStep = 2;
 5194 82E0              ldi R24,2
 5196 80931200          sts L760,R24
 519A           ;                                       break;
 519A           ;                       }
 519A           ;                       break;
 519A 05C0              xjmp L807
 519C           L806:
 519C           ; 		default:
 519C           ; 			mainStep = 0;
 519C 2224              clr R2
 519E 20921100          sts L759,R2
 51A2           ;                       workStep = 0;
 51A2 20921200          sts L760,R2
 51A6           ;                       break;
 51A6           L807:
 51A6           ; 		}
 51A6           ; 	return 0;
 51A6 0027              clr R16
 51A8           L758:
 51A8                   .dbline 0 ; func end
 51A8 2396              adiw R28,3
 51AA 0C940000          xjmp pop_xgsetF03C
 51AE           ;          pChar -> R20,R21
 51AE           ;              i -> y+2
                        .even
 51AE           _DiluteProcDatInit::
 51AE 4A93              st -y,R20
 51B0 5A93              st -y,R21
 51B2 2497              sbiw R28,4
 51B4           ; }
 51B4           ; 
 51B4           ; 
 51B4           ; /*******************************************************************************************/
 51B4           ; 
 51B4           ; 
 51B4           ; void DiluteProcDatInit(void)
 51B4           ; {
 51B4           ;       unsigned int i;
 51B4           ;       unsigned char *pChar;
 51B4           ; 
 51B4           ;       pChar = (unsigned char *)&(NewTestInfo);
 51B4 40E0              ldi R20,<_NewTestInfo
 51B6 50E0              ldi R21,>_NewTestInfo
 51B8           ;       for(i=0; i<sizeof(SAMP_INFO); i++)
 51B8 2224              clr R2
 51BA 3324              clr R3
 51BC 3B82              std y+3,R3
 51BE 2A82              std y+2,R2
 51C0 09C0              xjmp L1041
 51C2           L1038:
 51C2           ; 	{
 51C2           ; 		*pChar++ = 0;
 51C2 2224              clr R2
 51C4 FA01              movw R30,R20
 51C6 2192              st Z+,R2
 51C8 AF01              movw R20,R30
 51CA           ;       }
 51CA           L1039:
 51CA 8A81              ldd R24,y+2
 51CC 9B81              ldd R25,y+3
 51CE 0196              adiw R24,1
 51D0 9B83              std y+3,R25
 51D2 8A83              std y+2,R24
 51D4           L1041:
 51D4 8A81              ldd R24,y+2
 51D6 9B81              ldd R25,y+3
 51D8 8D30              cpi R24,13
 51DA E0E0              ldi R30,0
 51DC 9E07              cpc R25,R30
 51DE 88F3              brlo L1038
 51E0           X580:
 51E0           ; 	CurInsertRingNum = 0xff;
 51E0 8FEF              ldi R24,255
 51E2 80935400          sts _CurInsertRingNum,R24
 51E6           ;       GetNewTestCard = 0;
 51E6 2224              clr R2
 51E8 20925300          sts _GetNewTestCard,R2
 51EC           ;       SecondCount = 0;
 51EC 80E0              ldi R24,0
 51EE 80930200          sts _SecondCount+0,R24
 51F2 80930300          sts _SecondCount+1,R24
 51F6 80930400          sts _SecondCount+2,R24
 51FA 80930500          sts _SecondCount+3,R24
 51FE           ;       // 初始化测试参数
 51FE           ;       _NewCardStoreNum = 1;
 51FE 81E0              ldi R24,1
 5200 80933400          sts __NewCardStoreNum,R24
 5204           ;       _NewMultipNum = 9;
 5204 89E0              ldi R24,9
 5206 80933300          sts __NewMultipNum,R24
 520A           ;       _NewReadTime0 = 60;
 520A 8CE3              ldi R24,60
 520C 90E0              ldi R25,0
 520E 90933200          sts __NewReadTime0+1,R25
 5212 80933100          sts __NewReadTime0,R24
 5216           ;       _NewReadTime1 = 0;
 5216 3324              clr R3
 5218 30923000          sts __NewReadTime1+1,R3
 521C 20922F00          sts __NewReadTime1,R2
 5220           ;       _NewTestType = 0;
 5220 20922E00          sts __NewTestType,R2
 5224           ; //    _DropVolume = 0; 
 5224           ;       _DropVolume = 0;//60*42; 
 5224 30924900          sts __DropVolume+1,R3
 5228 20924800          sts __DropVolume,R2
 522C           ;       Read_DiluentCalChart();
 522C 0E940000          xcall _Read_DiluentCalChart
 5230           ;       EEPROM_READ(EEP_ADD_SLEEP_TIME,  i);
 5230 82E0              ldi R24,2
 5232 90E0              ldi R25,0
 5234 9983              std y+1,R25
 5236 8883              std y+0,R24
 5238 9E01              movw R18,R28
 523A 2E5F              subi R18,254  ; offset = 2
 523C 3F4F              sbci R19,255
 523E 00E5              ldi R16,80
 5240 10E0              ldi R17,0
 5242 0E940000          xcall _EEPROMReadBytes_extIO
 5246           ;       if((i & 0xc000) != 0xc000)              // 0xc000 初始化标记
 5246 8A81              ldd R24,y+2
 5248 9B81              ldd R25,y+3
 524A 8070              andi R24,0
 524C 907C              andi R25,192
 524E 8030              cpi R24,0
 5250 E0EC              ldi R30,192
 5252 9E07              cpc R25,R30
 5254 21F0              breq L1042
 5256           X581:
 5256           ; 	{
 5256           ; 		i = 1800;
 5256 88E0              ldi R24,1800
 5258 97E0              ldi R25,7
 525A 9B83              std y+3,R25
 525C 8A83              std y+2,R24
 525E           ;       }
 525E           L1042:
 525E           ; 	_SleepTime = i;
 525E 2A80              ldd R2,y+2
 5260 3B80              ldd R3,y+3
 5262 30924000          sts __SleepTime+1,R3
 5266 20923F00          sts __SleepTime,R2
 526A           ;       EEPROM_WRITE(EEP_ADD_SLEEP_TIME,  i + 0xc000);
 526A 82E0              ldi R24,2
 526C 90E0              ldi R25,0
 526E 9983              std y+1,R25
 5270 8883              std y+0,R24
 5272 9E01              movw R18,R28
 5274 2E5F              subi R18,254  ; offset = 32770
 5276 3F47              sbci R19,127
 5278 00E5              ldi R16,80
 527A 10E0              ldi R17,0
 527C 0E940000          xcall _EEPROMWriteBytes_extIO
 5280           ;       NewTestInfo.testSerial = ReadCurTestSetial();
 5280 0E94C61A          xcall _ReadCurTestSetial
 5284 10935700          sts _NewTestInfo+1+1,R17
 5288 00935600          sts _NewTestInfo+1,R16
 528C 30935900          sts _NewTestInfo+1+2+1,R19
 5290 20935800          sts _NewTestInfo+1+2,R18
 5294           L1037:
 5294                   .dbline 0 ; func end
 5294 2496              adiw R28,4
 5296 5991              ld R21,y+
 5298 4991              ld R20,y+
 529A 0895              ret
 529C           ;            vel -> R12
 529C           ;              n -> R10,R11
                        .even
 529C           __FluidMotRun::
 529C 0E940000          xcall push_xgset003C
 52A0 C22E              mov R12,R18
 52A2 5801              movw R10,R16
 52A4 2397              sbiw R28,3
 52A6           ; }
 52A6           ; 
 52A6           ; void _FluidMotRun(signed int n,unsigned char vel)
 52A6           ; {
 52A6           ;       if(vel>128)
 52A6 80E8              ldi R24,128
 52A8 8C15              cp R24,R12
 52AA 48F4              brsh L1047
 52AC           X582:
 52AC           ; 		SetMotRunPam(MOT_FLUID, vel, 10, CURRENT_FLUID);
 52AC 84E0              ldi R24,4
 52AE 8A83              std y+2,R24
 52B0 8AE0              ldi R24,10
 52B2 8883              std y+0,R24
 52B4 2C2D              mov R18,R12
 52B6 0AE0              ldi R16,10
 52B8 0E940000          xcall _SetMotRunPam
 52BC 08C0              xjmp L1048
 52BE           L1047:
 52BE           ; 	else
 52BE           ; 		SetMotRunPam(MOT_FLUID, vel, 10, CURRENT_FLUID);
 52BE 84E0              ldi R24,4
 52C0 8A83              std y+2,R24
 52C2 8AE0              ldi R24,10
 52C4 8883              std y+0,R24
 52C6 2C2D              mov R18,R12
 52C8 0AE0              ldi R16,10
 52CA 0E940000          xcall _SetMotRunPam
 52CE           L1048:
 52CE           ; 	MotRun(MOT_FLUID, n*100);			// 开启清洗液泵
 52CE 04E6              ldi R16,100
 52D0 10E0              ldi R17,0
 52D2 9501              movw R18,R10
 52D4 0E940000          xcall empy16s
 52D8 9801              movw R18,R16
 52DA 0AE0              ldi R16,10
 52DC 0E940000          xcall _MotRun
 52E0           L1046:
 52E0                   .dbline 0 ; func end
 52E0 2396              adiw R28,3
 52E2 0C940000          xjmp pop_xgset003C
 52E6           ;            vel -> R12
 52E6           ;              n -> R10,R11
                        .even
 52E6           __EffluentMotRun::
 52E6 0E940000          xcall push_xgset003C
 52EA C22E              mov R12,R18
 52EC 5801              movw R10,R16
 52EE 2397              sbiw R28,3
 52F0           ; }
 52F0           ; 
 52F0           ; void _EffluentMotRun(signed int n,unsigned char vel)
 52F0           ; {
 52F0           ;       SetMotRunPam(MOT_EFFLUENT, vel, 10, CURRENT_EFFLUENT);
 52F0 84E0              ldi R24,4
 52F2 8A83              std y+2,R24
 52F4 8AE0              ldi R24,10
 52F6 8883              std y+0,R24
 52F8 2C2D              mov R18,R12
 52FA 0BE0              ldi R16,11
 52FC 0E940000          xcall _SetMotRunPam
 5300           ;       MotRun(MOT_EFFLUENT, n*100);                    // 开启废液泵
 5300 04E6              ldi R16,100
 5302 10E0              ldi R17,0
 5304 9501              movw R18,R10
 5306 0E940000          xcall empy16s
 530A 9801              movw R18,R16
 530C 0BE0              ldi R16,11
 530E 0E940000          xcall _MotRun
 5312           L1049:
 5312                   .dbline 0 ; func end
 5312 2396              adiw R28,3
 5314 0C940000          xjmp pop_xgset003C
 5318           ;            vel -> R12
 5318           ;              n -> R10,R11
                        .even
 5318           __DiluentMotRun::
 5318 0E940000          xcall push_xgset003C
 531C C22E              mov R12,R18
 531E 5801              movw R10,R16
 5320 2397              sbiw R28,3
 5322           ; }
 5322           ; 
 5322           ; void _DiluentMotRun(signed int n,unsigned char vel)
 5322           ; {
 5322           ;       if(vel>128)
 5322 80E8              ldi R24,128
 5324 8C15              cp R24,R12
 5326 48F4              brsh L1051
 5328           X583:
 5328           ; 		SetMotRunPam(MOT_DILUENT, vel, 10, CURRENT_DILUENT);
 5328 84E0              ldi R24,4
 532A 8A83              std y+2,R24
 532C 8AE0              ldi R24,10
 532E 8883              std y+0,R24
 5330 2C2D              mov R18,R12
 5332 09E0              ldi R16,9
 5334 0E940000          xcall _SetMotRunPam
 5338 08C0              xjmp L1052
 533A           L1051:
 533A           ; 	else
 533A           ; 		SetMotRunPam(MOT_DILUENT, vel, 10, CURRENT_DILUENT);
 533A 84E0              ldi R24,4
 533C 8A83              std y+2,R24
 533E 8AE0              ldi R24,10
 5340 8883              std y+0,R24
 5342 2C2D              mov R18,R12
 5344 09E0              ldi R16,9
 5346 0E940000          xcall _SetMotRunPam
 534A           L1052:
 534A           ; 	MotRun(MOT_DILUENT, n*100);			// 开启稀释液泵
 534A 04E6              ldi R16,100
 534C 10E0              ldi R17,0
 534E 9501              movw R18,R10
 5350 0E940000          xcall empy16s
 5354 9801              movw R18,R16
 5356 09E0              ldi R16,9
 5358 0E940000          xcall _MotRun
 535C           L1050:
 535C                   .dbline 0 ; func end
 535C 2396              adiw R28,3
 535E 0C940000          xjmp pop_xgset003C
 5362           ;            vel -> R12
 5362           ;              n -> R10,R11
                        .even
 5362           __NewDiluentMotRun::
 5362 0E940000          xcall push_xgset003C
 5366 C22E              mov R12,R18
 5368 5801              movw R10,R16
 536A 2397              sbiw R28,3
 536C           ; }
 536C           ; 
 536C           ; void _NewDiluentMotRun(signed int n,unsigned char vel)
 536C           ; {
 536C           ;       SetMotRunPam(MOT_DILUENT, vel, 10, CURRENT_DILUENT);
 536C 84E0              ldi R24,4
 536E 8A83              std y+2,R24
 5370 8AE0              ldi R24,10
 5372 8883              std y+0,R24
 5374 2C2D              mov R18,R12
 5376 09E0              ldi R16,9
 5378 0E940000          xcall _SetMotRunPam
 537C           ;       MotRun(MOT_DILUENT, n);                 
 537C 9501              movw R18,R10
 537E 09E0              ldi R16,9
 5380 0E940000          xcall _MotRun
 5384           L1053:
 5384                   .dbline 0 ; func end
 5384 2396              adiw R28,3
 5386 0C940000          xjmp pop_xgset003C
 538A           ;            vel -> R12
 538A           ;              n -> R10,R11
                        .even
 538A           __NeedleMotRun::
 538A 0E940000          xcall push_xgset003C
 538E C22E              mov R12,R18
 5390 5801              movw R10,R16
 5392 2397              sbiw R28,3
 5394           ; }
 5394           ; 
 5394           ; void _NeedleMotRun(signed int n,unsigned char vel)
 5394           ; {
 5394           ;       if(vel>128)
 5394 80E8              ldi R24,128
 5396 8C15              cp R24,R12
 5398 48F4              brsh L1055
 539A           X584:
 539A           ; 		SetMotRunPam(MOT_SAMP_NEEDLE, vel, 5, CURRENT_SAMP_NEEDLE);
 539A 83E0              ldi R24,3
 539C 8A83              std y+2,R24
 539E 85E0              ldi R24,5
 53A0 8883              std y+0,R24
 53A2 2C2D              mov R18,R12
 53A4 03E0              ldi R16,3
 53A6 0E940000          xcall _SetMotRunPam
 53AA 08C0              xjmp L1056
 53AC           L1055:
 53AC           ; 	else
 53AC           ; 		SetMotRunPam(MOT_SAMP_NEEDLE, vel, 5, CURRENT_SAMP_NEEDLE);
 53AC 83E0              ldi R24,3
 53AE 8A83              std y+2,R24
 53B0 85E0              ldi R24,5
 53B2 8883              std y+0,R24
 53B4 2C2D              mov R18,R12
 53B6 03E0              ldi R16,3
 53B8 0E940000          xcall _SetMotRunPam
 53BC           L1056:
 53BC           ; 	MotRun(MOT_SAMP_NEEDLE, n);	
 53BC 9501              movw R18,R10
 53BE 03E0              ldi R16,3
 53C0 0E940000          xcall _MotRun
 53C4           L1054:
 53C4                   .dbline 0 ; func end
 53C4 2396              adiw R28,3
 53C6 0C940000          xjmp pop_xgset003C
 53CA           ;            vel -> R12
 53CA           ;              n -> R10,R11
                        .even
 53CA           __NeedleMotRunTo::
 53CA 0E940000          xcall push_xgset003C
 53CE C22E              mov R12,R18
 53D0 5801              movw R10,R16
 53D2 2397              sbiw R28,3
 53D4           ; }
 53D4           ; 
 53D4           ; void _NeedleMotRunTo(signed int n,unsigned char vel)
 53D4           ; {
 53D4           ;       if(vel>128)
 53D4 80E8              ldi R24,128
 53D6 8C15              cp R24,R12
 53D8 48F4              brsh L1058
 53DA           X585:
 53DA           ; 		SetMotRunPam(MOT_SAMP_NEEDLE, vel, 5, CURRENT_SAMP_NEEDLE);
 53DA 83E0              ldi R24,3
 53DC 8A83              std y+2,R24
 53DE 85E0              ldi R24,5
 53E0 8883              std y+0,R24
 53E2 2C2D              mov R18,R12
 53E4 03E0              ldi R16,3
 53E6 0E940000          xcall _SetMotRunPam
 53EA 08C0              xjmp L1059
 53EC           L1058:
 53EC           ; 	else
 53EC           ; 		SetMotRunPam(MOT_SAMP_NEEDLE, vel, 5, CURRENT_SAMP_NEEDLE);
 53EC 83E0              ldi R24,3
 53EE 8A83              std y+2,R24
 53F0 85E0              ldi R24,5
 53F2 8883              std y+0,R24
 53F4 2C2D              mov R18,R12
 53F6 03E0              ldi R16,3
 53F8 0E940000          xcall _SetMotRunPam
 53FC           L1059:
 53FC           ; 	MotRunTo(MOT_SAMP_NEEDLE, n);	
 53FC 9501              movw R18,R10
 53FE 03E0              ldi R16,3
 5400 0E940000          xcall _MotRunTo
 5404           L1057:
 5404                   .dbline 0 ; func end
 5404 2396              adiw R28,3
 5406 0C940000          xjmp pop_xgset003C
 540A           ;            vel -> R12
 540A           ;              n -> R10,R11
                        .even
 540A           __SampPumpMotRun::
 540A 0E940000          xcall push_xgset003C
 540E C22E              mov R12,R18
 5410 5801              movw R10,R16
 5412 2397              sbiw R28,3
 5414           ; }
 5414           ; 
 5414           ; void _SampPumpMotRun(signed int n,unsigned char vel)
 5414           ; {
 5414           ;       if(vel>128)
 5414 80E8              ldi R24,128
 5416 8C15              cp R24,R12
 5418 48F4              brsh L1061
 541A           X586:
 541A           ; 		SetMotRunPam(MOT_SAMP_PUMP, vel, 5, CURRENT_SAMP_PUMP);
 541A 86E0              ldi R24,6
 541C 8A83              std y+2,R24
 541E 85E0              ldi R24,5
 5420 8883              std y+0,R24
 5422 2C2D              mov R18,R12
 5424 0CE0              ldi R16,12
 5426 0E940000          xcall _SetMotRunPam
 542A 08C0              xjmp L1062
 542C           L1061:
 542C           ; 	else
 542C           ; 		SetMotRunPam(MOT_SAMP_PUMP, vel, 5, CURRENT_SAMP_PUMP);
 542C 86E0              ldi R24,6
 542E 8A83              std y+2,R24
 5430 85E0              ldi R24,5
 5432 8883              std y+0,R24
 5434 2C2D              mov R18,R12
 5436 0CE0              ldi R16,12
 5438 0E940000          xcall _SetMotRunPam
 543C           L1062:
 543C           ; 	MotRun(MOT_SAMP_PUMP, n);	
 543C 9501              movw R18,R10
 543E 0CE0              ldi R16,12
 5440 0E940000          xcall _MotRun
 5444           L1060:
 5444                   .dbline 0 ; func end
 5444 2396              adiw R28,3
 5446 0C940000          xjmp pop_xgset003C
 544A           ;            vel -> R12
 544A           ;              n -> R10,R11
                        .even
 544A           __SampPumpMotRunTo::
 544A 0E940000          xcall push_xgset003C
 544E C22E              mov R12,R18
 5450 5801              movw R10,R16
 5452 2397              sbiw R28,3
 5454           ; }
 5454           ; void _SampPumpMotRunTo(signed int n,unsigned char vel)
 5454           ; {
 5454           ;       if(vel>128)
 5454 80E8              ldi R24,128
 5456 8C15              cp R24,R12
 5458 48F4              brsh L1064
 545A           X587:
 545A           ; 		SetMotRunPam(MOT_SAMP_PUMP, vel, 5, CURRENT_SAMP_PUMP);
 545A 86E0              ldi R24,6
 545C 8A83              std y+2,R24
 545E 85E0              ldi R24,5
 5460 8883              std y+0,R24
 5462 2C2D              mov R18,R12
 5464 0CE0              ldi R16,12
 5466 0E940000          xcall _SetMotRunPam
 546A 08C0              xjmp L1065
 546C           L1064:
 546C           ; 	else
 546C           ; 		SetMotRunPam(MOT_SAMP_PUMP, vel, 5, CURRENT_SAMP_PUMP);
 546C 86E0              ldi R24,6
 546E 8A83              std y+2,R24
 5470 85E0              ldi R24,5
 5472 8883              std y+0,R24
 5474 2C2D              mov R18,R12
 5476 0CE0              ldi R16,12
 5478 0E940000          xcall _SetMotRunPam
 547C           L1065:
 547C           ; 	MotRunTo(MOT_SAMP_PUMP, n);	
 547C 9501              movw R18,R10
 547E 0CE0              ldi R16,12
 5480 0E940000          xcall _MotRunTo
 5484           L1063:
 5484                   .dbline 0 ; func end
 5484 2396              adiw R28,3
 5486 0C940000          xjmp pop_xgset003C
 548A           ;            num -> R16,R17
                        .even
 548A           _SetAutoTestCycle::
 548A           ; }
 548A           ; 
 548A           ; void SetAutoTestCycle(unsigned int num)
 548A           ; {
 548A           ; 	_AutoTestCycleNum = num;
 548A 10930A00          sts __AutoTestCycleNum+1,R17
 548E 00930900          sts __AutoTestCycleNum,R16
 5492           L1066:
 5492                   .dbline 0 ; func end
 5492 0895              ret
                        .even
 5494           _SetDiluentQuit::
 5494           ; }
 5494           ; 
 5494           ; unsigned char SetDiluentQuit(void)
 5494           ; {
 5494           ; 	_DiluentQuitFlag = 1;
 5494 81E0              ldi R24,1
 5496 80930600          sts __DiluentQuitFlag,R24
 549A           ;       return 0;
 549A 0027              clr R16
 549C           L1067:
 549C                   .dbline 0 ; func end
 549C 0895              ret
                        .even
 549E           __CheckFluidSupply::
 549E           ; }
 549E           ; 
 549E           ; unsigned char _CheckFluidSupply(void)
 549E           ; {
 549E           ; 	if(GetLiquidMonitorState(1) == INFO_LIQ_EMPTY)
 549E 01E0              ldi R16,1
 54A0 0E940000          xcall _GetLiquidMonitorState
 54A4 0E30              cpi R16,14
 54A6 C1F4              brne L1069
 54A8           X588:
 54A8           ; 	{
 54A8           ; 		// 清洗液空
 54A8           ; 		SetBeepWarning();
 54A8 0E940000          xcall _SetBeepWarning
 54AC           ;               if(0 == CleanMode)
 54AC 20900B00          lds R2,_CleanMode
 54B0 2220              tst R2
 54B2 81F4              brne L1071
 54B4           X589:
 54B4           ; 		{
 54B4           ; 			Uart0ReUnable;
 54B4 8091C100          lds R24,193
 54B8 8F7E              andi R24,239
 54BA 8093C100          sts 193,R24
 54BE           ;                       uart_Printf("%s\r\n",strE2953);
 54BE 20E0              ldi R18,<_strE2953
 54C0 30E0              ldi R19,>_strE2953
 54C2 00E0              ldi R16,<L88
 54C4 10E0              ldi R17,>L88
 54C6 0E940000          xcall _uart_Printf
 54CA           ;                       Uart0ReEnable;
 54CA 8091C100          lds R24,193
 54CE 8061              ori R24,16
 54D0 8093C100          sts 193,R24
 54D4           ;               }
 54D4           L1071:
 54D4           ; 		return 1;
 54D4 01E0              ldi R16,1
 54D6 01C0              xjmp L1068
 54D8           L1069:
 54D8           ; 	}
 54D8           ; 	/*	
 54D8           ; 	else if(GetLiquidMonitorState(1) == INFO_LIQ_BUBBLE)
 54D8           ; 	{
 54D8           ; 		// 清洗液气泡
 54D8           ; 		SetBeepWarning();
 54D8           ; 		uart0SendString(strE2956);	uart_Printf("\r\n");
 54D8           ; 		return 2;
 54D8           ; 	}
 54D8           ; 	*/
 54D8           ; 	return 0;
 54D8 0027              clr R16
 54DA           L1068:
 54DA                   .dbline 0 ; func end
 54DA 0895              ret
                        .even
 54DC           __CheckDiluentSupply::
 54DC           ; }
 54DC           ; unsigned char _CheckDiluentSupply(void)
 54DC           ; {
 54DC           ; 	if(GetLiquidMonitorState(0) == INFO_LIQ_EMPTY)
 54DC 0027              clr R16
 54DE 0E940000          xcall _GetLiquidMonitorState
 54E2 0E30              cpi R16,14
 54E4 A1F4              brne L1074
 54E6           X590:
 54E6           ; 	{
 54E6           ; 		// 稀释液空
 54E6           ; 		SetBeepWarning();
 54E6 0E940000          xcall _SetBeepWarning
 54EA           ;               Uart0ReUnable;
 54EA 8091C100          lds R24,193
 54EE 8F7E              andi R24,239
 54F0 8093C100          sts 193,R24
 54F4           ;               uart_Printf("%s\r\n",strE2952);
 54F4 20E0              ldi R18,<_strE2952
 54F6 30E0              ldi R19,>_strE2952
 54F8 00E0              ldi R16,<L88
 54FA 10E0              ldi R17,>L88
 54FC 0E940000          xcall _uart_Printf
 5500           ;               Uart0ReEnable;
 5500 8091C100          lds R24,193
 5504 8061              ori R24,16
 5506 8093C100          sts 193,R24
 550A           ;               return 1;
 550A 01E0              ldi R16,1
 550C 01C0              xjmp L1073
 550E           L1074:
 550E           ; 	}
 550E           ; 	/*
 550E           ; 	else if(GetLiquidMonitorState(0) == INFO_LIQ_BUBBLE)
 550E           ; 	{
 550E           ; 		// 稀释液气泡
 550E           ; 		SetBeepWarning();
 550E           ; 		uart0SendString(strE2955);	uart_Printf("\r\n");
 550E           ; 		return 2;
 550E           ; 	}
 550E           ; 	*/
 550E           ; 	return 0;
 550E 0027              clr R16
 5510           L1073:
 5510                   .dbline 0 ; func end
 5510 0895              ret
                        .area data(ram, con, rel)
 0015           L1077:
 0015                   .blkb 1
                        .area idata
 0015 00                .byte 0
                        .area data(ram, con, rel)
                        .area bss(ram, con, rel)
 0020           L1078:
 0020                   .blkb 2
 0022           L1079:
 0022                   .blkb 1
 0023           L1080:
 0023                   .blkb 1
                        .area text(rom, con, rel)
                        .even
 5512           __PrimingDiluent::
 5512 0E940000          xcall push_xgset300C
 5516 2397              sbiw R28,3
 5518           ; }
 5518           ; 
 5518           ; unsigned char _PrimingDiluent(void)
 5518           ; {
 5518           ;       static unsigned char mainStep = 0;
 5518           ;       static unsigned int i;
 5518           ;       static unsigned char ucTmp;
 5518           ;       static unsigned char detRetry;
 5518           ; 
 5518           ;       switch(mainStep)
 5518 40911500          lds R20,L1077
 551C 5527              clr R21
 551E 4030              cpi R20,0
 5520 4507              cpc R20,R21
 5522 09F4              brne X614
 5524 33C0              xjmp L1084
 5526           X614:
 5526           X591:
 5526 4130              cpi R20,1
 5528 E0E0              ldi R30,0
 552A 5E07              cpc R21,R30
 552C 09F4              brne X615
 552E 59C0              xjmp L1085
 5530           X615:
 5530           X592:
 5530 4430              cpi R20,4
 5532 E0E0              ldi R30,0
 5534 5E07              cpc R21,R30
 5536 09F4              brne X616
 5538 6AC0              xjmp L1086
 553A           X616:
 553A           X593:
 553A 4530              cpi R20,5
 553C E0E0              ldi R30,0
 553E 5E07              cpc R21,R30
 5540 09F4              brne X617
 5542 81C0              xjmp L1087
 5544           X617:
 5544           X594:
 5544 4630              cpi R20,6
 5546 E0E0              ldi R30,0
 5548 5E07              cpc R21,R30
 554A 09F4              brne X618
 554C 8FC0              xjmp L1088
 554E           X618:
 554E           X595:
 554E 4730              cpi R20,7
 5550 E0E0              ldi R30,0
 5552 5E07              cpc R21,R30
 5554 09F4              brne X619
 5556 A2C0              xjmp L1089
 5558           X619:
 5558           X596:
 5558 4830              cpi R20,8
 555A E0E0              ldi R30,0
 555C 5E07              cpc R21,R30
 555E 09F4              brne X620
 5560 AAC0              xjmp L1090
 5562           X620:
 5562           X597:
 5562 4930              cpi R20,9
 5564 E0E0              ldi R30,0
 5566 5E07              cpc R21,R30
 5568 09F4              brne X621
 556A 09C1              xjmp L1099
 556C           X621:
 556C           X598:
 556C 4A30              cpi R20,10
 556E E0E0              ldi R30,0
 5570 5E07              cpc R21,R30
 5572 09F4              brne X622
 5574 1CC1              xjmp L1100
 5576           X622:
 5576           X599:
 5576 4431              cpi R20,20
 5578 E0E0              ldi R30,0
 557A 5E07              cpc R21,R30
 557C 09F4              brne X623
 557E D9C1              xjmp L1117
 5580           X623:
 5580           X600:
 5580 4531              cpi R20,21
 5582 E0E0              ldi R30,0
 5584 5E07              cpc R21,R30
 5586 09F4              brne X624
 5588 E2C1              xjmp L1118
 558A           X624:
 558A           X601:
 558A EFC1              xjmp L1081
 558C           L1084:
 558C           ; 	{
 558C           ; 		case 0:		// 取样针高度回零
 558C           ; 			ReadLiquidMonitorResult(0);
 558C 0027              clr R16
 558E 0E940000          xcall _ReadLiquidMonitorResult
 5592           ;                       ReadLiquidMonitorResult(1);
 5592 01E0              ldi R16,1
 5594 0E940000          xcall _ReadLiquidMonitorResult
 5598           ;                       ReadLiquidMonitorResult(2);
 5598 02E0              ldi R16,2
 559A 0E940000          xcall _ReadLiquidMonitorResult
 559E           ;                       ReadLiquidMonitorResult(3);
 559E 03E0              ldi R16,3
 55A0 0E940000          xcall _ReadLiquidMonitorResult
 55A4           ;                       SetMotRunPam(MOT_SAMP_NEEDLE, 220, 20, 4);
 55A4 84E0              ldi R24,4
 55A6 8A83              std y+2,R24
 55A8 84E1              ldi R24,20
 55AA 8883              std y+0,R24
 55AC 2CED              ldi R18,220
 55AE 03E0              ldi R16,3
 55B0 0E940000          xcall _SetMotRunPam
 55B4           ;                       MotInitCheck(MOT_SAMP_NEEDLE);
 55B4 03E0              ldi R16,3
 55B6 0E940000          xcall _MotInitCheck
 55BA           ;                       waitMotSampNeedle = 1;
 55BA 81E0              ldi R24,1
 55BC 80934E00          sts _waitMotSampNeedle,R24
 55C0           ;                       // 读取取样臂位置
 55C0           ;                       NeedleOnMixCenterPos = GetNeedleOnMixCenterPos();
 55C0 0E940000          xcall _GetNeedleOnMixCenterPos
 55C4 10933B00          sts _NeedleOnMixCenterPos+1,R17
 55C8 00933A00          sts _NeedleOnMixCenterPos,R16
 55CC           ;                       SetEValve(EV_ALL, EV_CLOSE);
 55CC 2227              clr R18
 55CE 0027              clr R16
 55D0 0E940000          xcall _SetEValve
 55D4           ;                       mainStep = 1;
 55D4 81E0              ldi R24,1
 55D6 80931500          sts L1077,R24
 55DA           ;               //      mainStep = 9;   // 关闭液面探测
 55DA           ;                       runNum = 5;
 55DA 85E0              ldi R24,5
 55DC 80935000          sts _runNum,R24
 55E0           ;                       break;
 55E0 C7C1              xjmp L1082
 55E2           L1085:
 55E2           ; 		case 1:
 55E2           ; 			SetMotRunPam(MOT_SAMP_TRUN,240,10,CURRENT_SAMP_TRUN);
 55E2 84E0              ldi R24,4
 55E4 8A83              std y+2,R24
 55E6 8AE0              ldi R24,10
 55E8 8883              std y+0,R24
 55EA 20EF              ldi R18,240
 55EC 02E0              ldi R16,2
 55EE 0E940000          xcall _SetMotRunPam
 55F2           ;                       MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 55F2 20913A00          lds R18,_NeedleOnMixCenterPos
 55F6 30913B00          lds R19,_NeedleOnMixCenterPos+1
 55FA 02E0              ldi R16,2
 55FC 0E940000          xcall _MotRunTo
 5600           ;                       waitMotSampTurn = 1;
 5600 81E0              ldi R24,1
 5602 80934F00          sts _waitMotSampTurn,R24
 5606           ;                       mainStep = 4;
 5606 84E0              ldi R24,4
 5608 80931500          sts L1077,R24
 560C           ;                       break;
 560C B1C1              xjmp L1082
 560E           L1086:
 560E           ; 		case 4:		// 
 560E           ; 			SetMotRunPam(MOT_SAMP_NEEDLE, 100, 20, CURRENT_SAMP_NEEDLE);
 560E 83E0              ldi R24,3
 5610 8A83              std y+2,R24
 5612 84E1              ldi R24,20
 5614 8883              std y+0,R24
 5616 24E6              ldi R18,100
 5618 03E0              ldi R16,3
 561A 0E940000          xcall _SetMotRunPam
 561E           ;                       MotInitCheck(MOT_SAMP_NEEDLE);
 561E 03E0              ldi R16,3
 5620 0E940000          xcall _MotInitCheck
 5624           ;                       SetEValve(EV3, EV_OPEN);
 5624 21E0              ldi R18,1
 5626 03E0              ldi R16,3
 5628 0E940000          xcall _SetEValve
 562C           ;                       _EffluentMotRun(40, 160);       // 清洗头吸空
 562C 20EA              ldi R18,160
 562E 08E2              ldi R16,40
 5630 10E0              ldi R17,0
 5632 59DE              xcall __EffluentMotRun
 5634           ;                       waitMotSampNeedle = 1;
 5634 81E0              ldi R24,1
 5636 80934E00          sts _waitMotSampNeedle,R24
 563A           ;                       waitEffluent = 1;
 563A 80934A00          sts _waitEffluent,R24
 563E           ;                       mainStep = 5;
 563E 85E0              ldi R24,5
 5640 80931500          sts L1077,R24
 5644           ;                       break;
 5644 95C1              xjmp L1082
 5646           L1087:
 5646           ; 		case 5:	// 	取样针运行到混匀池上方
 5646           ; 			SetEValve(EV3, EV_CLOSE);
 5646 2227              clr R18
 5648 03E0              ldi R16,3
 564A 0E940000          xcall _SetEValve
 564E           ;                       MotRunTo(MOT_SAMP_NEEDLE, _POS_MIX_TOP + 100);  // 200
 564E 2CEC              ldi R18,460
 5650 31E0              ldi R19,1
 5652 03E0              ldi R16,3
 5654 0E940000          xcall _MotRunTo
 5658           ;                       waitMotSampNeedle = 1;
 5658 81E0              ldi R24,1
 565A 80934E00          sts _waitMotSampNeedle,R24
 565E           ;                       detRetry = 0;
 565E 2224              clr R2
 5660 20922300          sts L1080,R2
 5664           ;                       mainStep = 6;
 5664 86E0              ldi R24,6
 5666 80931500          sts L1077,R24
 566A           ;                       break;
 566A 82C1              xjmp L1082
 566C           L1088:
 566C           ; 		case 6:	// 取样针管道吸入空气,将液路与取样针隔离
 566C           ; 			SetEValve(EV1, EV_CLOSE);
 566C 2227              clr R18
 566E 01E0              ldi R16,1
 5670 0E940000          xcall _SetEValve
 5674           ;                       SetEValve(EV2, EV_OPEN);
 5674 21E0              ldi R18,1
 5676 02E0              ldi R16,2
 5678 0E940000          xcall _SetEValve
 567C           ;                       _FluidMotRun(-1, 20);
 567C 24E1              ldi R18,20
 567E 0FEF              ldi R16,-1
 5680 1FEF              ldi R17,-1
 5682 0CDE              xcall __FluidMotRun
 5684           ;                       waitMotFluid = 1;
 5684 81E0              ldi R24,1
 5686 80934C00          sts _waitMotFluid,R24
 568A           ;                       detRetry ++;
 568A 80912300          lds R24,L1080
 568E 8F5F              subi R24,255    ; addi 1
 5690 80932300          sts L1080,R24
 5694           ;                       mainStep = 7;
 5694 87E0              ldi R24,7
 5696 80931500          sts L1077,R24
 569A           ;                       break;
 569A 6AC1              xjmp L1082
 569C           L1089:
 569C           ; 		case 7:
 569C           ; 			SetDelayTime(MOT_FLUID, 30);
 569C 2EE1              ldi R18,30
 569E 30E0              ldi R19,0
 56A0 0AE0              ldi R16,10
 56A2 0E940000          xcall _SetDelayTime
 56A6           ;                       SetEValve(EV2, EV_CLOSE);
 56A6 2227              clr R18
 56A8 02E0              ldi R16,2
 56AA 0E940000          xcall _SetEValve
 56AE           ;                       mainStep = 8;
 56AE 88E0              ldi R24,8
 56B0 80931500          sts L1077,R24
 56B4           ;                       break;
 56B4 5DC1              xjmp L1082
 56B6           L1090:
 56B6           ; 		case 8:		// 初始化液面探测
 56B6           ; 			liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 56B6 0027              clr R16
 56B8 0E940000          xcall _getLiqDetADC
 56BC 10935200          sts _liqDetBaseAdc+1,R17
 56C0 00935100          sts _liqDetBaseAdc,R16
 56C4           ;                       if(liqDetBaseAdc > 1015)
 56C4 87EF              ldi R24,1015
 56C6 93E0              ldi R25,3
 56C8 8017              cp R24,R16
 56CA 9107              cpc R25,R17
 56CC C8F4              brsh L1091
 56CE           X602:
 56CE           ; 			{
 56CE           ; 				SetBeepWarning();
 56CE 0E940000          xcall _SetBeepWarning
 56D2           ;                               Uart0ReUnable;
 56D2 8091C100          lds R24,193
 56D6 8F7E              andi R24,239
 56D8 8093C100          sts 193,R24
 56DC           ;                               uart_Printf("!2901 $%d\r\n", liqDetBaseAdc);            // 液体探测电极未连接, 请检查液体探测电极连接是否完好
 56DC 20915100          lds R18,_liqDetBaseAdc
 56E0 30915200          lds R19,_liqDetBaseAdc+1
 56E4 00E0              ldi R16,<L1093
 56E6 10E0              ldi R17,>L1093
 56E8 0E940000          xcall _uart_Printf
 56EC           ;                               Uart0ReEnable;
 56EC 8091C100          lds R24,193
 56F0 8061              ori R24,16
 56F2 8093C100          sts 193,R24
 56F6           ;                               mainStep = 0;
 56F6 2224              clr R2
 56F8 20921500          sts L1077,R2
 56FC           ;                               return 0xff;
 56FC 0FEF              ldi R16,255
 56FE 39C1              xjmp L1076
 5700           L1091:
 5700           ; 			}
 5700           ; 			//else if(liqDetBaseAdc < 400)
 5700           ; 			else if(liqDetBaseAdc < 200)
 5700 80915100          lds R24,_liqDetBaseAdc
 5704 90915200          lds R25,_liqDetBaseAdc+1
 5708 883C              cpi R24,200
 570A E0E0              ldi R30,0
 570C 9E07              cpc R25,R30
 570E 58F5              brsh L1094
 5710           X603:
 5710           ; 			{
 5710           ; 				if(detRetry < 3)
 5710 80912300          lds R24,L1080
 5714 8330              cpi R24,3
 5716 78F4              brsh L1096
 5718           X604:
 5718           ; 				{
 5718           ; 					SetEValve(EV1, EV_OPEN);
 5718 21E0              ldi R18,1
 571A 01E0              ldi R16,1
 571C 0E940000          xcall _SetEValve
 5720           ;                                       _FluidMotRun(-1, 20);
 5720 24E1              ldi R18,20
 5722 0FEF              ldi R16,-1
 5724 1FEF              ldi R17,-1
 5726 BADD              xcall __FluidMotRun
 5728           ;                                       waitMotFluid = 1;
 5728 81E0              ldi R24,1
 572A 80934C00          sts _waitMotFluid,R24
 572E           ;                                       mainStep = 6;
 572E 86E0              ldi R24,6
 5730 80931500          sts L1077,R24
 5734           ;                                       break;
 5734 1DC1              xjmp L1082
 5736           L1096:
 5736           ; 				}
 5736           ; 				else
 5736           ; 				{
 5736           ; 					SetBeepWarning();
 5736 0E940000          xcall _SetBeepWarning
 573A           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 573A 03E0              ldi R16,3
 573C 0E940000          xcall _MotInitCheck
 5740           ;                                       Uart0ReUnable;
 5740 8091C100          lds R24,193
 5744 8F7E              andi R24,239
 5746 8093C100          sts 193,R24
 574A           ;                                       uart_Printf("!2911\r\n");               // 在进行稀释液灌注时，液面探测自检出现异常     
 574A 00E0              ldi R16,<L1098
 574C 10E0              ldi R17,>L1098
 574E 0E940000          xcall _uart_Printf
 5752           ;                                       Uart0ReEnable;
 5752 8091C100          lds R24,193
 5756 8061              ori R24,16
 5758 8093C100          sts 193,R24
 575C           ;                                       mainStep = 0;
 575C 2224              clr R2
 575E 20921500          sts L1077,R2
 5762           ;                                       return 0xff;    
 5762 0FEF              ldi R16,255
 5764 06C1              xjmp L1076
 5766           L1094:
 5766           ; 				}
 5766           ; 			}
 5766           ; 			else
 5766           ; 			{
 5766           ; 				liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 5766 0027              clr R16
 5768 0E940000          xcall _getLiqDetADC
 576C 5801              movw R10,R16
 576E B0925200          sts _liqDetBaseAdc+1,R11
 5772 A0925100          sts _liqDetBaseAdc,R10
 5776           ;                               mainStep = 9;
 5776 89E0              ldi R24,9
 5778 80931500          sts L1077,R24
 577C           ;                       }
 577C           ;                       break;
 577C F9C0              xjmp L1082
 577E           L1099:
 577E           ; 		case 9:		// 启动稀释液泵和废液泵
 577E           ; 			SetEValve(EV_ALL, EV_CLOSE);
 577E 2227              clr R18
 5780 0027              clr R16
 5782 0E940000          xcall _SetEValve
 5786           ; #if           (DILUTE_TUBE == 14)
 5786           ;                       _DiluentMotRun(300, 160);               // 最大灌注9mL液体，超出表示灌注失败，提示用户检查供液
 5786           ;                       _EffluentMotRun(160, 80);
 5786           ; #elif (DILUTE_TUBE == 16)
 5786           ;                       _DiluentMotRun(100, 120);               // 最大灌注9mL液体，超出表示灌注失败，提示用户检查供液
 5786 28E7              ldi R18,120
 5788 04E6              ldi R16,100
 578A 10E0              ldi R17,0
 578C C5DD              xcall __DiluentMotRun
 578E           ;                       _EffluentMotRun(160, 140);
 578E 2CE8              ldi R18,140
 5790 00EA              ldi R16,160
 5792 10E0              ldi R17,0
 5794 A8DD              xcall __EffluentMotRun
 5796           ; #endif
 5796           ;                       SetDelayTime(15, 50);           // 设置灌注延时量，跳过内部存在的量，防止外部管道液体未进入时就判断灌注结果
 5796 22E3              ldi R18,50
 5798 30E0              ldi R19,0
 579A 0FE0              ldi R16,15
 579C 0E940000          xcall _SetDelayTime
 57A0           ;                       detRetry = 0;
 57A0 2224              clr R2
 57A2 20922300          sts L1080,R2
 57A6           ;                       mainStep = 10;
 57A6 8AE0              ldi R24,10
 57A8 80931500          sts L1077,R24
 57AC           ;                       break;
 57AC E1C0              xjmp L1082
 57AE           L1100:
 57AE           ; 		case 10:		// 等待液路事件
 57AE           ; 			SetDelayTime(MOT_EFFLUENT, 3);
 57AE 23E0              ldi R18,3
 57B0 30E0              ldi R19,0
 57B2 0BE0              ldi R16,11
 57B4 0E940000          xcall _SetDelayTime
 57B8           ;                       ReadLiquidMonitorResult(0);
 57B8 0027              clr R16
 57BA 0E940000          xcall _ReadLiquidMonitorResult
 57BE           ;                       i = getLiqDetADC(NeedleChannel);
 57BE 0027              clr R16
 57C0 0E940000          xcall _getLiqDetADC
 57C4 5801              movw R10,R16
 57C6 B0922100          sts L1078+1,R11
 57CA A0922000          sts L1078,R10
 57CE           ;                       if(i<liqDetBaseAdc)
 57CE 20905100          lds R2,_liqDetBaseAdc
 57D2 30905200          lds R3,_liqDetBaseAdc+1
 57D6 2501              movw R4,R10
 57D8 0215              cp R16,R2
 57DA 1305              cpc R17,R3
 57DC 78F5              brsh L1101
 57DE           X605:
 57DE           ; 			{
 57DE           ; 				i = liqDetBaseAdc - i;
 57DE 2101              movw R4,R2
 57E0 401A              sub R4,R16
 57E2 510A              sbc R5,R17
 57E4 50922100          sts L1078+1,R5
 57E8 40922000          sts L1078,R4
 57EC           ;                               //if(i>300)     
 57EC           ;                               if(i > 150)
 57EC 86E9              ldi R24,150
 57EE 90E0              ldi R25,0
 57F0 8415              cp R24,R4
 57F2 9505              cpc R25,R5
 57F4 00F5              brsh L1103
 57F6           X606:
 57F6           ; 				{
 57F6           ; 					if(detRetry < 10)	// 重测计数
 57F6 80912300          lds R24,L1080
 57FA 8A30              cpi R24,10
 57FC 20F4              brsh L1105
 57FE           X607:
 57FE           ; 					{
 57FE           ; 						detRetry ++;	
 57FE 8F5F              subi R24,255    ; addi 1
 5800 80932300          sts L1080,R24
 5804           ;                                               break;  
 5804 B5C0              xjmp L1082
 5806           L1105:
 5806           ; 						}
 5806           ; 					// 探测到排液异常
 5806           ; 					MotStop(MOT_DILUENT);
 5806 09E0              ldi R16,9
 5808 0E940000          xcall _MotStop
 580C           ;                                       MotStop(MOT_EFFLUENT);
 580C 0BE0              ldi R16,11
 580E 0E940000          xcall _MotStop
 5812           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 5812 03E0              ldi R16,3
 5814 0E940000          xcall _MotInitCheck
 5818           ;                                       SetBeepWarning();
 5818 0E940000          xcall _SetBeepWarning
 581C           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 5);
 581C 25E0              ldi R18,5
 581E 30E0              ldi R19,0
 5820 03E0              ldi R16,3
 5822 0E940000          xcall _SetDelayTime
 5826           ;                                       uart_Printf("!2912\r\n");       // 稀释液灌注过程中检测到混匀池中液体水位超高，请检查废液泵排液状态
 5826 00E0              ldi R16,<L1107
 5828 10E0              ldi R17,>L1107
 582A 0E940000          xcall _uart_Printf
 582E           ;                                       // 退出处理
 582E           ;                                       mainStep = 21;
 582E 85E1              ldi R24,21
 5830 80931500          sts L1077,R24
 5834           ;                                       }
 5834 03C0              xjmp L1104
 5836           L1103:
 5836           ; 				else
 5836           ; 					detRetry = 0;
 5836 2224              clr R2
 5838 20922300          sts L1080,R2
 583C           L1104:
 583C           ; 				}
 583C           L1101:
 583C           ; 				
 583C           ; 			if(GetMotState(MOT_DILUENT)!=STA_SLAVE_FREE && GetMotState(MOT_EFFLUENT) != STA_SLAVE_FREE)
 583C 09E0              ldi R16,9
 583E 0E940000          xcall _GetMotState
 5842 402F              mov R20,R16
 5844 0130              cpi R16,1
 5846 09F4              brne X625
 5848 3DC0              xjmp L1108
 584A           X625:
 584A           X608:
 584A 0BE0              ldi R16,11
 584C 0E940000          xcall _GetMotState
 5850 402F              mov R20,R16
 5852 0130              cpi R16,1
 5854 B9F1              breq L1108
 5856           X609:
 5856           ; 			{
 5856           ; 				if(WaitDelayTime(15)!=0)
 5856 0FE0              ldi R16,15
 5858 0E940000          xcall _WaitDelayTime
 585C A02E              mov R10,R16
 585E 0023              tst R16
 5860 91F0              breq L1110
 5862           X610:
 5862           ; 				{
 5862           ; 					ucTmp = GetLiquidMonitorState(0);	// 读取0号液路
 5862 0027              clr R16
 5864 0E940000          xcall _GetLiquidMonitorState
 5868 A02E              mov R10,R16
 586A A0922200          sts L1079,R10
 586E           ;                                       if(ucTmp==INFO_LIQ_EMPTY || ucTmp==INFO_LIQ_BUBBLE)
 586E 4A2D              mov R20,R10
 5870 0E30              cpi R16,14
 5872 19F0              breq L1114
 5874           X611:
 5874 0031              cpi R16,16
 5876 09F0              breq X626
 5878 7BC0              xjmp L1082
 587A           X626:
 587A           X612:
 587A           L1114:
 587A           ; 					{
 587A           ; 						SetDelayTime(15, 50);	// 液路有空气，重新开始计时
 587A 22E3              ldi R18,50
 587C 30E0              ldi R19,0
 587E 0FE0              ldi R16,15
 5880 0E940000          xcall _SetDelayTime
 5884           ;                                       }
 5884           ;                               }
 5884 75C0              xjmp L1082
 5886           L1110:
 5886           ; 				else
 5886           ; 				{
 5886           ; 					// 灌注完成
 5886           ; 					MotStop(MOT_DILUENT);
 5886 09E0              ldi R16,9
 5888 0E940000          xcall _MotStop
 588C           ;                                       MotStop(MOT_EFFLUENT);
 588C 0BE0              ldi R16,11
 588E 0E940000          xcall _MotStop
 5892           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 5892 03E0              ldi R16,3
 5894 0E940000          xcall _MotInitCheck
 5898           ;                                       SetBeepAck();
 5898 0E940000          xcall _SetBeepAck
 589C           ;                                       Uart0ReUnable;
 589C 8091C100          lds R24,193
 58A0 8F7E              andi R24,239
 58A2 8093C100          sts 193,R24
 58A6           ;                                       uart_Printf("%s\r\n",strM2102);
 58A6 20E0              ldi R18,<_strM2102
 58A8 30E0              ldi R19,>_strM2102
 58AA 00E0              ldi R16,<L88
 58AC 10E0              ldi R17,>L88
 58AE 0E940000          xcall _uart_Printf
 58B2           ;                                       Uart0ReEnable;
 58B2 8091C100          lds R24,193
 58B6 8061              ori R24,16
 58B8 8093C100          sts 193,R24
 58BC           ;                                       mainStep = 20;
 58BC 84E1              ldi R24,20
 58BE 80931500          sts L1077,R24
 58C2           ;                               }
 58C2           ;                       }
 58C2 56C0              xjmp L1082
 58C4           L1108:
 58C4           ; 			else
 58C4           ; 			{
 58C4           ; 				if(runNum!=0)		// 因为稀释液泵流量小，需要最多灌注3遍
 58C4 20905000          lds R2,_runNum
 58C8 2220              tst R2
 58CA A1F0              breq L1115
 58CC           X613:
 58CC           ; 				{
 58CC           ; 					MotStop(MOT_DILUENT);
 58CC 09E0              ldi R16,9
 58CE 0E940000          xcall _MotStop
 58D2           ;                                       MotStop(MOT_EFFLUENT);
 58D2 0BE0              ldi R16,11
 58D4 0E940000          xcall _MotStop
 58D8           ;                               //      _EffluentMotRun(5, 220);
 58D8           ;                                       SetDelayTime(MOT_DILUENT, 20);
 58D8 24E1              ldi R18,20
 58DA 30E0              ldi R19,0
 58DC 09E0              ldi R16,9
 58DE 0E940000          xcall _SetDelayTime
 58E2           ;                                       mainStep = 9;
 58E2 89E0              ldi R24,9
 58E4 80931500          sts L1077,R24
 58E8           ;                                       runNum --;
 58E8 80915000          lds R24,_runNum
 58EC 8150              subi R24,1
 58EE 80935000          sts _runNum,R24
 58F2           ;                                       break;
 58F2 3EC0              xjmp L1082
 58F4           L1115:
 58F4           ; 				}
 58F4           ; 				// 供液已经停止，灌注失败
 58F4           ; 				MotStop(MOT_DILUENT);
 58F4 09E0              ldi R16,9
 58F6 0E940000          xcall _MotStop
 58FA           ;                               MotStop(MOT_EFFLUENT);
 58FA 0BE0              ldi R16,11
 58FC 0E940000          xcall _MotStop
 5900           ;                               MotInitCheck(MOT_SAMP_NEEDLE);
 5900 03E0              ldi R16,3
 5902 0E940000          xcall _MotInitCheck
 5906           ;                               SetBeepWarning();
 5906 0E940000          xcall _SetBeepWarning
 590A           ;                               Uart0ReUnable;
 590A 8091C100          lds R24,193
 590E 8F7E              andi R24,239
 5910 8093C100          sts 193,R24
 5914           ;                               uart_Printf("%s\r\n",strE3904);// 稀释液灌注失败， 请检查稀释液供给，如果供给正常则请重新调试稀释液传感器后重试灌注
 5914 20E0              ldi R18,<_strE3904
 5916 30E0              ldi R19,>_strE3904
 5918 00E0              ldi R16,<L88
 591A 10E0              ldi R17,>L88
 591C 0E940000          xcall _uart_Printf
 5920           ;                               Uart0ReEnable;
 5920 8091C100          lds R24,193
 5924 8061              ori R24,16
 5926 8093C100          sts 193,R24
 592A           ;                               mainStep = 21;
 592A 85E1              ldi R24,21
 592C 80931500          sts L1077,R24
 5930           ;                       }
 5930           ;                       break;
 5930 1FC0              xjmp L1082
 5932           L1117:
 5932           ; 		case 20:		// 完成退出
 5932           ; 			//SetEValve(EV_ALL, EV_CLOSE);
 5932           ; 			_EffluentMotRun(20, 220);
 5932 2CED              ldi R18,220
 5934 04E1              ldi R16,20
 5936 10E0              ldi R17,0
 5938 D6DC              xcall __EffluentMotRun
 593A           ;                       waitEffluent = 1;
 593A 81E0              ldi R24,1
 593C 80934A00          sts _waitEffluent,R24
 5940           ;                       waitMotSampNeedle = 1;
 5940 80934E00          sts _waitMotSampNeedle,R24
 5944           ;                       mainStep = 0;
 5944 2224              clr R2
 5946 20921500          sts L1077,R2
 594A           ;                       return 1;
 594A 01E0              ldi R16,1
 594C 12C0              xjmp L1076
 594E           L1118:
 594E           ; 			break;
 594E           ; 		case 21:		// 失败退出
 594E           ; 			_EffluentMotRun(20, 220);
 594E 2CED              ldi R18,220
 5950 04E1              ldi R16,20
 5952 10E0              ldi R17,0
 5954 C8DC              xcall __EffluentMotRun
 5956           ;                       waitEffluent = 1;
 5956 81E0              ldi R24,1
 5958 80934A00          sts _waitEffluent,R24
 595C           ;                       waitMotSampNeedle = 1;
 595C 80934E00          sts _waitMotSampNeedle,R24
 5960           ;                       mainStep = 0;
 5960 2224              clr R2
 5962 20921500          sts L1077,R2
 5966           ;                       return 0xff;
 5966 0FEF              ldi R16,255
 5968 04C0              xjmp L1076
 596A           L1081:
 596A           ; 			break;
 596A           ; 		default:
 596A           ; 			mainStep = 0;
 596A 2224              clr R2
 596C 20921500          sts L1077,R2
 5970           ;                       break;
 5970           L1082:
 5970           ; 		}
 5970           ; 	return 0;
 5970 0027              clr R16
 5972           L1076:
 5972                   .dbline 0 ; func end
 5972 2396              adiw R28,3
 5974 0C940000          xjmp pop_xgset300C
                        .area data(ram, con, rel)
 0016           L1120:
 0016                   .blkb 1
                        .area idata
 0016 00                .byte 0
                        .area data(ram, con, rel)
                        .area bss(ram, con, rel)
 0024           L1121:
 0024                   .blkb 2
 0026           L1122:
 0026                   .blkb 1
 0027           L1123:
 0027                   .blkb 1
                        .area text(rom, con, rel)
                        .even
 5978           __PrimingFluid::
 5978 0E940000          xcall push_xgset300C
 597C 2397              sbiw R28,3
 597E           ; }
 597E           ; 
 597E           ; unsigned char _PrimingFluid(void)
 597E           ; {
 597E           ;       static unsigned char mainStep = 0;
 597E           ;       static unsigned int i;
 597E           ;       static unsigned char ucTmp;
 597E           ;       static unsigned char detRetry;
 597E           ; //    static unsigned char waitMotSampTurn,waitMotSampNeedle,waitMotFluid,waitEffluent;
 597E           ; 
 597E           ; //    if(WaitDelayTime(MOT_FLUID))                    return 0;
 597E           ;               
 597E           ;       if(waitMotSampTurn)             {       if(GetMotState(MOT_SAMP_TRUN)!=STA_SLAVE_FREE)          return 0;       waitMotSampTurn = 0;    }
 597E 20904F00          lds R2,_waitMotSampTurn
 5982 2220              tst R2
 5984 51F0              breq L1124
 5986           X627:
 5986 02E0              ldi R16,2
 5988 0E940000          xcall _GetMotState
 598C 0130              cpi R16,1
 598E 11F0              breq L1126
 5990           X628:
 5990 0027              clr R16
 5992 43C2              xjmp L1119
 5994           L1126:
 5994 2224              clr R2
 5996 20924F00          sts _waitMotSampTurn,R2
 599A           L1124:
 599A           ; 	if(waitMotSampNeedle)	{	if(GetMotState(MOT_SAMP_NEEDLE)!=STA_SLAVE_FREE)	return 0;	waitMotSampNeedle = 0;	}
 599A 20904E00          lds R2,_waitMotSampNeedle
 599E 2220              tst R2
 59A0 51F0              breq L1128
 59A2           X629:
 59A2 03E0              ldi R16,3
 59A4 0E940000          xcall _GetMotState
 59A8 0130              cpi R16,1
 59AA 11F0              breq L1130
 59AC           X630:
 59AC 0027              clr R16
 59AE 35C2              xjmp L1119
 59B0           L1130:
 59B0 2224              clr R2
 59B2 20924E00          sts _waitMotSampNeedle,R2
 59B6           L1128:
 59B6           ; 	if(waitMotFluid)		{	if(GetMotState(MOT_FLUID)!=STA_SLAVE_FREE)			return 0;	waitMotFluid = 0;	}
 59B6 20904C00          lds R2,_waitMotFluid
 59BA 2220              tst R2
 59BC 59F0              breq L1132
 59BE           X631:
 59BE 0AE0              ldi R16,10
 59C0 0E940000          xcall _GetMotState
 59C4 402F              mov R20,R16
 59C6 0130              cpi R16,1
 59C8 11F0              breq L1134
 59CA           X632:
 59CA 0027              clr R16
 59CC 26C2              xjmp L1119
 59CE           L1134:
 59CE 2224              clr R2
 59D0 20924C00          sts _waitMotFluid,R2
 59D4           L1132:
 59D4           ; 	if(waitEffluent)		{	if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitEffluent = 0;	}
 59D4 20904A00          lds R2,_waitEffluent
 59D8 2220              tst R2
 59DA 59F0              breq L1136
 59DC           X633:
 59DC 0BE0              ldi R16,11
 59DE 0E940000          xcall _GetMotState
 59E2 402F              mov R20,R16
 59E4 0130              cpi R16,1
 59E6 11F0              breq L1138
 59E8           X634:
 59E8 0027              clr R16
 59EA 17C2              xjmp L1119
 59EC           L1138:
 59EC 2224              clr R2
 59EE 20924A00          sts _waitEffluent,R2
 59F2           L1136:
 59F2           ; 		
 59F2           ; 	switch(mainStep)
 59F2 40911600          lds R20,L1120
 59F6 5527              clr R21
 59F8 4030              cpi R20,0
 59FA 4507              cpc R20,R21
 59FC 09F4              brne X657
 59FE 2EC0              xjmp L1143
 5A00           X657:
 5A00           X635:
 5A00 4130              cpi R20,1
 5A02 E0E0              ldi R30,0
 5A04 5E07              cpc R21,R30
 5A06 09F4              brne X658
 5A08 49C0              xjmp L1144
 5A0A           X658:
 5A0A           X636:
 5A0A 4430              cpi R20,4
 5A0C E0E0              ldi R30,0
 5A0E 5E07              cpc R21,R30
 5A10 09F4              brne X659
 5A12 5AC0              xjmp L1145
 5A14           X659:
 5A14           X637:
 5A14 4530              cpi R20,5
 5A16 E0E0              ldi R30,0
 5A18 5E07              cpc R21,R30
 5A1A 09F4              brne X660
 5A1C 69C0              xjmp L1146
 5A1E           X660:
 5A1E           X638:
 5A1E 4630              cpi R20,6
 5A20 E0E0              ldi R30,0
 5A22 5E07              cpc R21,R30
 5A24 09F4              brne X661
 5A26 7CC0              xjmp L1147
 5A28           X661:
 5A28           X639:
 5A28 4730              cpi R20,7
 5A2A E0E0              ldi R30,0
 5A2C 5E07              cpc R21,R30
 5A2E 09F4              brne X662
 5A30 84C0              xjmp L1148
 5A32           X662:
 5A32           X640:
 5A32 4830              cpi R20,8
 5A34 E0E0              ldi R30,0
 5A36 5E07              cpc R21,R30
 5A38 09F4              brne X663
 5A3A F8C0              xjmp L1156
 5A3C           X663:
 5A3C           X641:
 5A3C 4930              cpi R20,9
 5A3E E0E0              ldi R30,0
 5A40 5E07              cpc R21,R30
 5A42 09F4              brne X664
 5A44 07C1              xjmp L1157
 5A46           X664:
 5A46           X642:
 5A46 4A30              cpi R20,10
 5A48 E0E0              ldi R30,0
 5A4A 5E07              cpc R21,R30
 5A4C 09F4              brne X665
 5A4E C5C1              xjmp L1174
 5A50           X665:
 5A50           X643:
 5A50 4B30              cpi R20,11
 5A52 E0E0              ldi R30,0
 5A54 5E07              cpc R21,R30
 5A56 09F4              brne X666
 5A58 CEC1              xjmp L1175
 5A5A           X666:
 5A5A           X644:
 5A5A DBC1              xjmp L1140
 5A5C           L1143:
 5A5C           ; 	{
 5A5C           ; 		case 0:		// 取样针高度回零
 5A5C           ; 			SetMotRunPam(MOT_SAMP_NEEDLE, 240, 20, CURRENT_SAMP_NEEDLE);
 5A5C 83E0              ldi R24,3
 5A5E 8A83              std y+2,R24
 5A60 84E1              ldi R24,20
 5A62 8883              std y+0,R24
 5A64 20EF              ldi R18,240
 5A66 03E0              ldi R16,3
 5A68 0E940000          xcall _SetMotRunPam
 5A6C           ;                       MotInitCheck(MOT_SAMP_NEEDLE);
 5A6C 03E0              ldi R16,3
 5A6E 0E940000          xcall _MotInitCheck
 5A72           ;                       // 读取取样臂位置
 5A72           ;                       NeedleOnMixCenterPos = GetNeedleOnMixCenterPos();
 5A72 0E940000          xcall _GetNeedleOnMixCenterPos
 5A76 5801              movw R10,R16
 5A78 B0923B00          sts _NeedleOnMixCenterPos+1,R11
 5A7C A0923A00          sts _NeedleOnMixCenterPos,R10
 5A80           ;                       waitMotSampNeedle = 1;
 5A80 81E0              ldi R24,1
 5A82 80934E00          sts _waitMotSampNeedle,R24
 5A86           ;                       SetEValve(EV_ALL, EV_CLOSE);
 5A86 2227              clr R18
 5A88 0027              clr R16
 5A8A 0E940000          xcall _SetEValve
 5A8E           ;                       mainStep = 1;
 5A8E 81E0              ldi R24,1
 5A90 80931600          sts L1120,R24
 5A94           ;               //      mainStep = 8;   // 关闭液面探测
 5A94           ;                       runNum = 5;
 5A94 85E0              ldi R24,5
 5A96 80935000          sts _runNum,R24
 5A9A           ;                       break;
 5A9A BEC1              xjmp L1141
 5A9C           L1144:
 5A9C           ; 		case 1:		// 取样针旋转
 5A9C           ; 			SetMotRunPam(MOT_SAMP_TRUN,240,10,CURRENT_SAMP_TRUN);
 5A9C 84E0              ldi R24,4
 5A9E 8A83              std y+2,R24
 5AA0 8AE0              ldi R24,10
 5AA2 8883              std y+0,R24
 5AA4 20EF              ldi R18,240
 5AA6 02E0              ldi R16,2
 5AA8 0E940000          xcall _SetMotRunPam
 5AAC           ;                       MotRunTo(MOT_SAMP_TRUN, NeedleOnMixCenterPos);
 5AAC 20913A00          lds R18,_NeedleOnMixCenterPos
 5AB0 30913B00          lds R19,_NeedleOnMixCenterPos+1
 5AB4 02E0              ldi R16,2
 5AB6 0E940000          xcall _MotRunTo
 5ABA           ;                       waitMotSampTurn = 1;
 5ABA 81E0              ldi R24,1
 5ABC 80934F00          sts _waitMotSampTurn,R24
 5AC0           ;                       mainStep = 4;
 5AC0 84E0              ldi R24,4
 5AC2 80931600          sts L1120,R24
 5AC6           ;                       break;
 5AC6 A8C1              xjmp L1141
 5AC8           L1145:
 5AC8           ; 		case 4:		// 取样针运行到稀释液口上方位置
 5AC8           ; 			ReadLiquidMonitorResult(1);
 5AC8 01E0              ldi R16,1
 5ACA 0E940000          xcall _ReadLiquidMonitorResult
 5ACE           ;                       ReadLiquidMonitorResult(2);
 5ACE 02E0              ldi R16,2
 5AD0 0E940000          xcall _ReadLiquidMonitorResult
 5AD4           ;                       _NeedleMotRunTo(_POS_MIX_TOP + 100, 240);
 5AD4 20EF              ldi R18,240
 5AD6 0CEC              ldi R16,460
 5AD8 11E0              ldi R17,1
 5ADA 77DC              xcall __NeedleMotRunTo
 5ADC           ;                       waitMotSampNeedle = 1;
 5ADC 81E0              ldi R24,1
 5ADE 80934E00          sts _waitMotSampNeedle,R24
 5AE2           ;                       mainStep = 5;
 5AE2 85E0              ldi R24,5
 5AE4 80931600          sts L1120,R24
 5AE8           ;                       detRetry = 0;
 5AE8 2224              clr R2
 5AEA 20922700          sts L1123,R2
 5AEE           ;                       break;
 5AEE 94C1              xjmp L1141
 5AF0           L1146:
 5AF0           ; 		case 5:	// 取样针空吸,将液路与针隔离
 5AF0           ; 			SetEValve(EV_ALL, EV_CLOSE);
 5AF0 2227              clr R18
 5AF2 0027              clr R16
 5AF4 0E940000          xcall _SetEValve
 5AF8           ;                       SetEValve(EV2, EV_OPEN);
 5AF8 21E0              ldi R18,1
 5AFA 02E0              ldi R16,2
 5AFC 0E940000          xcall _SetEValve
 5B00           ;                       _FluidMotRun(-1, 20);
 5B00 24E1              ldi R18,20
 5B02 0FEF              ldi R16,-1
 5B04 1FEF              ldi R17,-1
 5B06 CADB              xcall __FluidMotRun
 5B08           ;                       waitMotFluid = 1;
 5B08 81E0              ldi R24,1
 5B0A 80934C00          sts _waitMotFluid,R24
 5B0E           ;                       detRetry ++;
 5B0E 80912700          lds R24,L1123
 5B12 8F5F              subi R24,255    ; addi 1
 5B14 80932700          sts L1123,R24
 5B18           ;                       mainStep = 6;
 5B18 86E0              ldi R24,6
 5B1A 80931600          sts L1120,R24
 5B1E           ;                       break;
 5B1E 7CC1              xjmp L1141
 5B20           L1147:
 5B20           ; 		case 6:
 5B20           ; 			SetDelayTime(MOT_FLUID, 30);
 5B20 2EE1              ldi R18,30
 5B22 30E0              ldi R19,0
 5B24 0AE0              ldi R16,10
 5B26 0E940000          xcall _SetDelayTime
 5B2A           ;                       SetEValve(EV2, EV_CLOSE);
 5B2A 2227              clr R18
 5B2C 02E0              ldi R16,2
 5B2E 0E940000          xcall _SetEValve
 5B32           ;                       mainStep = 7;
 5B32 87E0              ldi R24,7
 5B34 80931600          sts L1120,R24
 5B38           ;                       break;
 5B38 6FC1              xjmp L1141
 5B3A           L1148:
 5B3A           ; 		case 7:		// 初始化液面探测
 5B3A           ; 			liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 5B3A 0027              clr R16
 5B3C 0E940000          xcall _getLiqDetADC
 5B40 5801              movw R10,R16
 5B42 B0925200          sts _liqDetBaseAdc+1,R11
 5B46 A0925100          sts _liqDetBaseAdc,R10
 5B4A           ;                       if(liqDetBaseAdc > 1015)
 5B4A 87EF              ldi R24,1015
 5B4C 93E0              ldi R25,3
 5B4E 8017              cp R24,R16
 5B50 9107              cpc R25,R17
 5B52 E0F4              brsh L1149
 5B54           X645:
 5B54           ; 			{
 5B54           ; 				SetBeepWarning();
 5B54 0E940000          xcall _SetBeepWarning
 5B58           ;                               MotInitCheck(MOT_SAMP_NEEDLE);
 5B58 03E0              ldi R16,3
 5B5A 0E940000          xcall _MotInitCheck
 5B5E           ;                               Uart0ReUnable;
 5B5E 8091C100          lds R24,193
 5B62 8F7E              andi R24,239
 5B64 8093C100          sts 193,R24
 5B68           ;                               uart_Printf("!2901 $%d\r\n", liqDetBaseAdc);            // 液体探测电极未连接, 请检查液体探测电极连接是否完好
 5B68 20915100          lds R18,_liqDetBaseAdc
 5B6C 30915200          lds R19,_liqDetBaseAdc+1
 5B70 00E0              ldi R16,<L1093
 5B72 10E0              ldi R17,>L1093
 5B74 0E940000          xcall _uart_Printf
 5B78           ;                               Uart0ReEnable;
 5B78 8091C100          lds R24,193
 5B7C 8061              ori R24,16
 5B7E 8093C100          sts 193,R24
 5B82           ;                               mainStep = 0;
 5B82 2224              clr R2
 5B84 20921600          sts L1120,R2
 5B88           ;                               return 0xff;
 5B88 0FEF              ldi R16,255
 5B8A 47C1              xjmp L1119
 5B8C           L1149:
 5B8C           ; 			}
 5B8C           ; 			//else if(liqDetBaseAdc < 400)
 5B8C           ; 			else if(liqDetBaseAdc < 200)
 5B8C 80915100          lds R24,_liqDetBaseAdc
 5B90 90915200          lds R25,_liqDetBaseAdc+1
 5B94 883C              cpi R24,200
 5B96 E0E0              ldi R30,0
 5B98 9E07              cpc R25,R30
 5B9A A8F5              brsh L1151
 5B9C           X646:
 5B9C           ; 			{
 5B9C           ; 				if(detRetry < 4)
 5B9C 80912700          lds R24,L1123
 5BA0 8430              cpi R24,4
 5BA2 C8F4              brsh L1153
 5BA4           X647:
 5BA4           ; 				{
 5BA4           ; 					SetEValve(EV1, EV_OPEN);
 5BA4 21E0              ldi R18,1
 5BA6 01E0              ldi R16,1
 5BA8 0E940000          xcall _SetEValve
 5BAC           ;                                       _FluidMotRun(-2, 20);
 5BAC 24E1              ldi R18,20
 5BAE 0EEF              ldi R16,-2
 5BB0 1FEF              ldi R17,-1
 5BB2 74DB              xcall __FluidMotRun
 5BB4           ;                                       SetEValve(EV3, EV_OPEN);
 5BB4 21E0              ldi R18,1
 5BB6 03E0              ldi R16,3
 5BB8 0E940000          xcall _SetEValve
 5BBC           ;                                       _EffluentMotRun(40, 160);       // 清洗头吸空
 5BBC 20EA              ldi R18,160
 5BBE 08E2              ldi R16,40
 5BC0 10E0              ldi R17,0
 5BC2 91DB              xcall __EffluentMotRun
 5BC4           ;                                       waitMotFluid = 1;
 5BC4 81E0              ldi R24,1
 5BC6 80934C00          sts _waitMotFluid,R24
 5BCA           ;                                       waitEffluent = 1;
 5BCA 80934A00          sts _waitEffluent,R24
 5BCE           ;                                       mainStep = 5;
 5BCE 85E0              ldi R24,5
 5BD0 80931600          sts L1120,R24
 5BD4           ;                                       break;
 5BD4 21C1              xjmp L1141
 5BD6           L1153:
 5BD6           ; 				}
 5BD6           ; 				else
 5BD6           ; 				{
 5BD6           ; 					SetBeepWarning();
 5BD6 0E940000          xcall _SetBeepWarning
 5BDA           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 5BDA 03E0              ldi R16,3
 5BDC 0E940000          xcall _MotInitCheck
 5BE0           ;                                       Uart0ReUnable;
 5BE0 8091C100          lds R24,193
 5BE4 8F7E              andi R24,239
 5BE6 8093C100          sts 193,R24
 5BEA           ;                                       uart_Printf("!2906\r\n");               // 在进行稀释液灌注时，液面探测自检出现异常     
 5BEA 00E0              ldi R16,<L1155
 5BEC 10E0              ldi R17,>L1155
 5BEE 0E940000          xcall _uart_Printf
 5BF2           ;                                       Uart0ReEnable;
 5BF2 8091C100          lds R24,193
 5BF6 8061              ori R24,16
 5BF8 8093C100          sts 193,R24
 5BFC           ;                                       mainStep = 0;
 5BFC 2224              clr R2
 5BFE 20921600          sts L1120,R2
 5C02           ;                                       return 0xff;    
 5C02 0FEF              ldi R16,255
 5C04 0AC1              xjmp L1119
 5C06           L1151:
 5C06           ; 				}
 5C06           ; 			}
 5C06           ; 			else
 5C06           ; 			{
 5C06           ; 				liqDetBaseAdc = getLiqDetADC(NeedleChannel);
 5C06 0027              clr R16
 5C08 0E940000          xcall _getLiqDetADC
 5C0C 5801              movw R10,R16
 5C0E B0925200          sts _liqDetBaseAdc+1,R11
 5C12 A0925100          sts _liqDetBaseAdc,R10
 5C16           ;                               SetEValve(EV_ALL, EV_CLOSE);
 5C16 2227              clr R18
 5C18 0027              clr R16
 5C1A 0E940000          xcall _SetEValve
 5C1E           ;                               detRetry = 0;
 5C1E 2224              clr R2
 5C20 20922700          sts L1123,R2
 5C24           ;                               mainStep = 8;
 5C24 88E0              ldi R24,8
 5C26 80931600          sts L1120,R24
 5C2A           ;                       }
 5C2A           ;                       /*
 5C2A           ;                       if(CheckLiqDetBase())
 5C2A           ;                       {
 5C2A           ;                               MotInitCheck(MOT_SAMP_NEEDLE);
 5C2A           ;                               mainStep = 0;
 5C2A           ;                               Uart0ReUnable;
 5C2A           ;                               uart_Printf("!2906\r\n");               // 在进行稀释液灌注时，液面探测自检出现异常
 5C2A           ;                               Uart0ReEnable;
 5C2A           ;                               return 0xff;    
 5C2A           ;                       }
 5C2A           ;                       */
 5C2A           ;                       break;
 5C2A F6C0              xjmp L1141
 5C2C           L1156:
 5C2C           ; 		case 8:		// 启动清洗液泵和废液泵
 5C2C           ; 			_FluidMotRun(100, 60);		// 最大灌注30mL液体，超出表示灌注失败，提示用户检查供液
 5C2C 2CE3              ldi R18,60
 5C2E 04E6              ldi R16,100
 5C30 10E0              ldi R17,0
 5C32 34DB              xcall __FluidMotRun
 5C34           ;                       _EffluentMotRun(105, 60);
 5C34 2CE3              ldi R18,60
 5C36 09E6              ldi R16,105
 5C38 10E0              ldi R17,0
 5C3A 55DB              xcall __EffluentMotRun
 5C3C           ;                       SetDelayTime(15, 60);           // 设置灌注延时量，跳过内部存在的量，防止外部管道液体未进入时就判断灌注结果
 5C3C 2CE3              ldi R18,60
 5C3E 30E0              ldi R19,0
 5C40 0FE0              ldi R16,15
 5C42 0E940000          xcall _SetDelayTime
 5C46           ;                       ReadLiquidMonitorResult(1);
 5C46 01E0              ldi R16,1
 5C48 0E940000          xcall _ReadLiquidMonitorResult
 5C4C           ;                       mainStep = 9;
 5C4C 89E0              ldi R24,9
 5C4E 80931600          sts L1120,R24
 5C52           ;                       break;
 5C52 E2C0              xjmp L1141
 5C54           L1157:
 5C54           ; 		case 9:		// 等待液路事件
 5C54           ; 			SetDelayTime(MOT_EFFLUENT, 3);
 5C54 23E0              ldi R18,3
 5C56 30E0              ldi R19,0
 5C58 0BE0              ldi R16,11
 5C5A 0E940000          xcall _SetDelayTime
 5C5E           ;                       ReadLiquidMonitorResult(1);
 5C5E 01E0              ldi R16,1
 5C60 0E940000          xcall _ReadLiquidMonitorResult
 5C64           ;                       if(GetMotState(MOT_EFFLUENT) != STA_SLAVE_FREE && GetMotState(MOT_FLUID) != STA_SLAVE_FREE) 
 5C64 0BE0              ldi R16,11
 5C66 0E940000          xcall _GetMotState
 5C6A 402F              mov R20,R16
 5C6C 0130              cpi R16,1
 5C6E 09F4              brne X667
 5C70 3DC0              xjmp L1158
 5C72           X667:
 5C72           X648:
 5C72 0AE0              ldi R16,10
 5C74 0E940000          xcall _GetMotState
 5C78 402F              mov R20,R16
 5C7A 0130              cpi R16,1
 5C7C B9F1              breq L1158
 5C7E           X649:
 5C7E           ; 			{
 5C7E           ; 				if(WaitDelayTime(15)!=0)
 5C7E 0FE0              ldi R16,15
 5C80 0E940000          xcall _WaitDelayTime
 5C84 A02E              mov R10,R16
 5C86 0023              tst R16
 5C88 91F0              breq L1160
 5C8A           X650:
 5C8A           ; 				{
 5C8A           ; 					ucTmp = GetLiquidMonitorState(1);
 5C8A 01E0              ldi R16,1
 5C8C 0E940000          xcall _GetLiquidMonitorState
 5C90 A02E              mov R10,R16
 5C92 A0922600          sts L1122,R10
 5C96           ;                                       if(ucTmp==INFO_LIQ_EMPTY || ucTmp==INFO_LIQ_BUBBLE)
 5C96 4A2D              mov R20,R10
 5C98 0E30              cpi R16,14
 5C9A 19F0              breq L1164
 5C9C           X651:
 5C9C 0031              cpi R16,16
 5C9E 09F0              breq X668
 5CA0 5BC0              xjmp L1159
 5CA2           X668:
 5CA2           X652:
 5CA2           L1164:
 5CA2           ; 					{
 5CA2           ; 						SetDelayTime(15, 60);	// 液路有空气，重新开始计时
 5CA2 2CE3              ldi R18,60
 5CA4 30E0              ldi R19,0
 5CA6 0FE0              ldi R16,15
 5CA8 0E940000          xcall _SetDelayTime
 5CAC           ;                                       }
 5CAC           ;                               }
 5CAC 55C0              xjmp L1159
 5CAE           L1160:
 5CAE           ; 				else
 5CAE           ; 				{
 5CAE           ; 					// 灌注完成
 5CAE           ; 					MotStop(MOT_FLUID);
 5CAE 0AE0              ldi R16,10
 5CB0 0E940000          xcall _MotStop
 5CB4           ;                                       MotStop(MOT_EFFLUENT);
 5CB4 0BE0              ldi R16,11
 5CB6 0E940000          xcall _MotStop
 5CBA           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 5CBA 03E0              ldi R16,3
 5CBC 0E940000          xcall _MotInitCheck
 5CC0           ;                                       SetBeepAck();
 5CC0 0E940000          xcall _SetBeepAck
 5CC4           ;                                       Uart0ReUnable;
 5CC4 8091C100          lds R24,193
 5CC8 8F7E              andi R24,239
 5CCA 8093C100          sts 193,R24
 5CCE           ;                                       uart_Printf("%s\r\n",strM2101);
 5CCE 20E0              ldi R18,<_strM2101
 5CD0 30E0              ldi R19,>_strM2101
 5CD2 00E0              ldi R16,<L88
 5CD4 10E0              ldi R17,>L88
 5CD6 0E940000          xcall _uart_Printf
 5CDA           ;                                       Uart0ReEnable;
 5CDA 8091C100          lds R24,193
 5CDE 8061              ori R24,16
 5CE0 8093C100          sts 193,R24
 5CE4           ;                                       mainStep = 10;
 5CE4 8AE0              ldi R24,10
 5CE6 80931600          sts L1120,R24
 5CEA           ;                               }
 5CEA           ;                       }
 5CEA 36C0              xjmp L1159
 5CEC           L1158:
 5CEC           ; 			else
 5CEC           ; 			{
 5CEC           ; 				if(runNum!=0)		// 因为稀释液泵流量小，需要最多灌注3遍
 5CEC 20905000          lds R2,_runNum
 5CF0 2220              tst R2
 5CF2 A1F0              breq L1165
 5CF4           X653:
 5CF4           ; 				{
 5CF4           ; 					MotStop(MOT_FLUID);
 5CF4 0AE0              ldi R16,10
 5CF6 0E940000          xcall _MotStop
 5CFA           ;                                       MotStop(MOT_EFFLUENT);
 5CFA 0BE0              ldi R16,11
 5CFC 0E940000          xcall _MotStop
 5D00           ;                                       SetDelayTime(MOT_DILUENT, 20);
 5D00 24E1              ldi R18,20
 5D02 30E0              ldi R19,0
 5D04 09E0              ldi R16,9
 5D06 0E940000          xcall _SetDelayTime
 5D0A           ;                                       mainStep = 8;
 5D0A 88E0              ldi R24,8
 5D0C 80931600          sts L1120,R24
 5D10           ;                                       runNum --;
 5D10 80915000          lds R24,_runNum
 5D14 8150              subi R24,1
 5D16 80935000          sts _runNum,R24
 5D1A           ;                                       break;
 5D1A 7EC0              xjmp L1141
 5D1C           L1165:
 5D1C           ; 				}
 5D1C           ; 				// 供液已经停止，灌注失败
 5D1C           ; 				MotStop(MOT_FLUID);
 5D1C 0AE0              ldi R16,10
 5D1E 0E940000          xcall _MotStop
 5D22           ;                               MotStop(MOT_EFFLUENT);
 5D22 0BE0              ldi R16,11
 5D24 0E940000          xcall _MotStop
 5D28           ;                               MotInitCheck(MOT_SAMP_NEEDLE);
 5D28 03E0              ldi R16,3
 5D2A 0E940000          xcall _MotInitCheck
 5D2E           ;                               SetBeepWarning();
 5D2E 0E940000          xcall _SetBeepWarning
 5D32           ;                               Uart0ReUnable;
 5D32 8091C100          lds R24,193
 5D36 8F7E              andi R24,239
 5D38 8093C100          sts 193,R24
 5D3C           ;                               uart_Printf("%s\r\n",strE3902); // 清洗液灌注失败， 请检查清洗液供给，如果供给正常则请重新调试清洗液传感器后重试灌注
 5D3C 20E0              ldi R18,<_strE3902
 5D3E 30E0              ldi R19,>_strE3902
 5D40 00E0              ldi R16,<L88
 5D42 10E0              ldi R17,>L88
 5D44 0E940000          xcall _uart_Printf
 5D48           ;                               Uart0ReEnable;
 5D48 8091C100          lds R24,193
 5D4C 8061              ori R24,16
 5D4E 8093C100          sts 193,R24
 5D52           ;                               mainStep = 11;
 5D52 8BE0              ldi R24,11
 5D54 80931600          sts L1120,R24
 5D58           ;                       }
 5D58           L1159:
 5D58           ; 			i = getLiqDetADC(NeedleChannel);
 5D58 0027              clr R16
 5D5A 0E940000          xcall _getLiqDetADC
 5D5E 5801              movw R10,R16
 5D60 B0922500          sts L1121+1,R11
 5D64 A0922400          sts L1121,R10
 5D68           ;                       if(i < liqDetBaseAdc)
 5D68 20905100          lds R2,_liqDetBaseAdc
 5D6C 30905200          lds R3,_liqDetBaseAdc+1
 5D70 2501              movw R4,R10
 5D72 0215              cp R16,R2
 5D74 1305              cpc R17,R3
 5D76 08F0              brlo X669
 5D78 4FC0              xjmp L1141
 5D7A           X669:
 5D7A           X654:
 5D7A           ; 			{
 5D7A           ; 				i = liqDetBaseAdc - i;
 5D7A 2101              movw R4,R2
 5D7C 401A              sub R4,R16
 5D7E 510A              sbc R5,R17
 5D80 50922500          sts L1121+1,R5
 5D84 40922400          sts L1121,R4
 5D88           ;                               //if(i > 300)
 5D88           ;                               if(i > 150)
 5D88 86E9              ldi R24,150
 5D8A 90E0              ldi R25,0
 5D8C 8415              cp R24,R4
 5D8E 9505              cpc R25,R5
 5D90 00F5              brsh L1169
 5D92           X655:
 5D92           ; 				{
 5D92           ; 					if(detRetry < 10)	// 重测计数
 5D92 80912700          lds R24,L1123
 5D96 8A30              cpi R24,10
 5D98 20F4              brsh L1171
 5D9A           X656:
 5D9A           ; 					{
 5D9A           ; 						detRetry ++;	
 5D9A 8F5F              subi R24,255    ; addi 1
 5D9C 80932700          sts L1123,R24
 5DA0           ;                                               break;  
 5DA0 3BC0              xjmp L1141
 5DA2           L1171:
 5DA2           ; 					}
 5DA2           ; 					// 探测到排液异常
 5DA2           ; 					MotStop(MOT_FLUID);
 5DA2 0AE0              ldi R16,10
 5DA4 0E940000          xcall _MotStop
 5DA8           ;                                       MotStop(MOT_EFFLUENT);
 5DA8 0BE0              ldi R16,11
 5DAA 0E940000          xcall _MotStop
 5DAE           ;                                       MotInitCheck(MOT_SAMP_NEEDLE);
 5DAE 03E0              ldi R16,3
 5DB0 0E940000          xcall _MotInitCheck
 5DB4           ;                                       SetBeepWarning();
 5DB4 0E940000          xcall _SetBeepWarning
 5DB8           ;                                       SetDelayTime(MOT_SAMP_NEEDLE, 5);
 5DB8 25E0              ldi R18,5
 5DBA 30E0              ldi R19,0
 5DBC 03E0              ldi R16,3
 5DBE 0E940000          xcall _SetDelayTime
 5DC2           ;                                       uart_Printf("!2907\r\n");       // 清洗液灌注过程中检测到混匀池中液体水位超高，请检查废液泵排液状态
 5DC2 00E0              ldi R16,<L1173
 5DC4 10E0              ldi R17,>L1173
 5DC6 0E940000          xcall _uart_Printf
 5DCA           ;                                       // 退出处理
 5DCA           ;                                       mainStep = 11;
 5DCA 8BE0              ldi R24,11
 5DCC 80931600          sts L1120,R24
 5DD0           ;                               }
 5DD0 23C0              xjmp L1141
 5DD2           L1169:
 5DD2           ; 				else
 5DD2           ; 					detRetry = 0;
 5DD2 2224              clr R2
 5DD4 20922700          sts L1123,R2
 5DD8           ;                       }
 5DD8           ;                       break;
 5DD8 1FC0              xjmp L1141
 5DDA           L1174:
 5DDA           ; 		case 10:		// 完成退出
 5DDA           ; 			//SetEValve(EV_ALL, EV_CLOSE);
 5DDA           ; 			_EffluentMotRun(20, 220);
 5DDA 2CED              ldi R18,220
 5DDC 04E1              ldi R16,20
 5DDE 10E0              ldi R17,0
 5DE0 82DA              xcall __EffluentMotRun
 5DE2           ;                       waitEffluent = 1;
 5DE2 81E0              ldi R24,1
 5DE4 80934A00          sts _waitEffluent,R24
 5DE8           ;                       waitMotSampNeedle = 1;
 5DE8 80934E00          sts _waitMotSampNeedle,R24
 5DEC           ;                       mainStep = 0;
 5DEC 2224              clr R2
 5DEE 20921600          sts L1120,R2
 5DF2           ;                       return 1;
 5DF2 01E0              ldi R16,1
 5DF4 12C0              xjmp L1119
 5DF6           L1175:
 5DF6           ; 			break;
 5DF6           ; 		case 11:		// 失败退出
 5DF6           ; 			_EffluentMotRun(20, 220);
 5DF6 2CED              ldi R18,220
 5DF8 04E1              ldi R16,20
 5DFA 10E0              ldi R17,0
 5DFC 74DA              xcall __EffluentMotRun
 5DFE           ;                       waitEffluent = 1;
 5DFE 81E0              ldi R24,1
 5E00 80934A00          sts _waitEffluent,R24
 5E04           ;                       waitMotSampNeedle = 1;
 5E04 80934E00          sts _waitMotSampNeedle,R24
 5E08           ;                       mainStep = 0;
 5E08 2224              clr R2
 5E0A 20921600          sts L1120,R2
 5E0E           ;                       return 0xff;
 5E0E 0FEF              ldi R16,255
 5E10 04C0              xjmp L1119
 5E12           L1140:
 5E12           ; 			break;
 5E12           ; 		default:
 5E12           ; 			mainStep = 0;
 5E12 2224              clr R2
 5E14 20921600          sts L1120,R2
 5E18           ;                       break;
 5E18           L1141:
 5E18           ; 		}
 5E18           ; 	return 0;
 5E18 0027              clr R16
 5E1A           L1119:
 5E1A                   .dbline 0 ; func end
 5E1A 2396              adiw R28,3
 5E1C 0C940000          xjmp pop_xgset300C
                        .area data(ram, con, rel)
 0017           L1177:
 0017                   .blkb 1
                        .area idata
 0017 00                .byte 0
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                ;          ucTmp -> R20
                        .even
 5E20           __ManualPrimingDiluent::
 5E20 0E940000          xcall push_xgset300C
 5E24           ; }
 5E24           ; 
 5E24           ; unsigned char _ManualPrimingDiluent(void)
 5E24           ; {
 5E24           ;       static unsigned char mainStep = 0;
 5E24           ;       unsigned char ucTmp;
 5E24           ;       
 5E24           ;       if(WaitDelayTime(MOT_EFFLUENT))         return 0;
 5E24 0BE0              ldi R16,11
 5E26 0E940000          xcall _WaitDelayTime
 5E2A 0023              tst R16
 5E2C 11F0              breq L1178
 5E2E           X670:
 5E2E 0027              clr R16
 5E30 D5C0              xjmp L1176
 5E32           L1178:
 5E32           ; 	if(WaitDelayTime(MOT_DILUENT))		return 0;
 5E32 09E0              ldi R16,9
 5E34 0E940000          xcall _WaitDelayTime
 5E38 0023              tst R16
 5E3A 11F0              breq L1180
 5E3C           X671:
 5E3C 0027              clr R16
 5E3E CEC0              xjmp L1176
 5E40           L1180:
 5E40           ; 	if(waitEffluent){if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitEffluent = 0;}
 5E40 20904A00          lds R2,_waitEffluent
 5E44 2220              tst R2
 5E46 59F0              breq L1182
 5E48           X672:
 5E48 0BE0              ldi R16,11
 5E4A 0E940000          xcall _GetMotState
 5E4E 402F              mov R20,R16
 5E50 0130              cpi R16,1
 5E52 11F0              breq L1184
 5E54           X673:
 5E54 0027              clr R16
 5E56 C2C0              xjmp L1176
 5E58           L1184:
 5E58 2224              clr R2
 5E5A 20924A00          sts _waitEffluent,R2
 5E5E           L1182:
 5E5E           ; 	
 5E5E           ; 	switch(mainStep)
 5E5E 40911700          lds R20,L1177
 5E62 5527              clr R21
 5E64 4030              cpi R20,0
 5E66 4507              cpc R20,R21
 5E68 99F0              breq L1189
 5E6A           X674:
 5E6A 4130              cpi R20,1
 5E6C E0E0              ldi R30,0
 5E6E 5E07              cpc R21,R30
 5E70 B1F0              breq L1190
 5E72           X675:
 5E72 4230              cpi R20,2
 5E74 E0E0              ldi R30,0
 5E76 5E07              cpc R21,R30
 5E78 39F1              breq L1191
 5E7A           X676:
 5E7A 4330              cpi R20,3
 5E7C E0E0              ldi R30,0
 5E7E 5E07              cpc R21,R30
 5E80 09F4              brne X685
 5E82 9CC0              xjmp L1201
 5E84           X685:
 5E84           X677:
 5E84 4430              cpi R20,4
 5E86 E0E0              ldi R30,0
 5E88 5E07              cpc R21,R30
 5E8A 09F4              brne X686
 5E8C A1C0              xjmp L1202
 5E8E           X686:
 5E8E           X678:
 5E8E A5C0              xjmp L1186
 5E90           L1189:
 5E90           ; 	{
 5E90           ; 		case 0:
 5E90           ; 			runNum = 5;
 5E90 85E0              ldi R24,5
 5E92 80935000          sts _runNum,R24
 5E96           ;                       mainStep = 1;
 5E96 81E0              ldi R24,1
 5E98 80931700          sts L1177,R24
 5E9C           ;                       break;
 5E9C 9EC0              xjmp L1187
 5E9E           L1190:
 5E9E           ; 		case 1:		// 启动稀释液泵和废液泵
 5E9E           ; 			SetEValve(EV_ALL, EV_CLOSE);
 5E9E 2227              clr R18
 5EA0 0027              clr R16
 5EA2 0E940000          xcall _SetEValve
 5EA6           ;               //      _DiluentMotRun(600, 120);               // 最大灌注50mL液体，超出表示灌注失败，提示用户检查供液
 5EA6           ;               //      _EffluentMotRun(1000, 140);
 5EA6           ;                       _DiluentMotRun(120, 120);               // 最大灌注50mL液体，超出表示灌注失败，提示用户检查供液
 5EA6 28E7              ldi R18,120
 5EA8 08E7              ldi R16,120
 5EAA 10E0              ldi R17,0
 5EAC 35DA              xcall __DiluentMotRun
 5EAE           ;                       _EffluentMotRun(200, 140);
 5EAE 2CE8              ldi R18,140
 5EB0 08EC              ldi R16,200
 5EB2 10E0              ldi R17,0
 5EB4 18DA              xcall __EffluentMotRun
 5EB6           ;                       SetDelayTime(15, 30);           // 设置连续供水3秒判断灌注成功
 5EB6 2EE1              ldi R18,30
 5EB8 30E0              ldi R19,0
 5EBA 0FE0              ldi R16,15
 5EBC 0E940000          xcall _SetDelayTime
 5EC0           ;                       mainStep = 2;
 5EC0 82E0              ldi R24,2
 5EC2 80931700          sts L1177,R24
 5EC6           ;                       break;
 5EC6 89C0              xjmp L1187
 5EC8           L1191:
 5EC8           ; 		case 2:		// 等待液路事件
 5EC8           ; 			SetDelayTime(MOT_EFFLUENT, 3);
 5EC8 23E0              ldi R18,3
 5ECA 30E0              ldi R19,0
 5ECC 0BE0              ldi R16,11
 5ECE 0E940000          xcall _SetDelayTime
 5ED2           ;                       ReadLiquidMonitorResult(0);
 5ED2 0027              clr R16
 5ED4 0E940000          xcall _ReadLiquidMonitorResult
 5ED8           ; 
 5ED8           ;                       if(GetMotState(MOT_DILUENT)!=STA_SLAVE_FREE && GetMotState(MOT_EFFLUENT) != STA_SLAVE_FREE)
 5ED8 09E0              ldi R16,9
 5EDA 0E940000          xcall _GetMotState
 5EDE 402F              mov R20,R16
 5EE0 0130              cpi R16,1
 5EE2 C1F1              breq L1192
 5EE4           X679:
 5EE4 0BE0              ldi R16,11
 5EE6 0E940000          xcall _GetMotState
 5EEA 402F              mov R20,R16
 5EEC 0130              cpi R16,1
 5EEE 91F1              breq L1192
 5EF0           X680:
 5EF0           ; 			{
 5EF0           ; 				if(WaitDelayTime(15) != 0)
 5EF0 0FE0              ldi R16,15
 5EF2 0E940000          xcall _WaitDelayTime
 5EF6 A02E              mov R10,R16
 5EF8 0023              tst R16
 5EFA 81F0              breq L1194
 5EFC           X681:
 5EFC           ; 				{
 5EFC           ; 					ucTmp = GetLiquidMonitorState(0);	// 读取0号液路
 5EFC 0027              clr R16
 5EFE 0E940000          xcall _GetLiquidMonitorState
 5F02 A02E              mov R10,R16
 5F04 4A2D              mov R20,R10
 5F06           ;                                       if(ucTmp==INFO_LIQ_EMPTY || ucTmp==INFO_LIQ_BUBBLE)
 5F06 0E30              cpi R16,14
 5F08 19F0              breq L1198
 5F0A           X682:
 5F0A 0031              cpi R16,16
 5F0C 09F0              breq X687
 5F0E 65C0              xjmp L1187
 5F10           X687:
 5F10           X683:
 5F10           L1198:
 5F10           ; 					{
 5F10           ; 						SetDelayTime(15, 30);	// 液路有空气，重新开始计时
 5F10 2EE1              ldi R18,30
 5F12 30E0              ldi R19,0
 5F14 0FE0              ldi R16,15
 5F16 0E940000          xcall _SetDelayTime
 5F1A           ;                                       }
 5F1A           ;                               }
 5F1A 5FC0              xjmp L1187
 5F1C           L1194:
 5F1C           ; 				else
 5F1C           ; 				{
 5F1C           ; 					// 灌注完成
 5F1C           ; 					MotStop(MOT_DILUENT);
 5F1C 09E0              ldi R16,9
 5F1E 0E940000          xcall _MotStop
 5F22           ;                                       MotStop(MOT_EFFLUENT);
 5F22 0BE0              ldi R16,11
 5F24 0E940000          xcall _MotStop
 5F28           ;                                       SetBeepAck();
 5F28 0E940000          xcall _SetBeepAck
 5F2C           ;                                       Uart0ReUnable;
 5F2C 8091C100          lds R24,193
 5F30 8F7E              andi R24,239
 5F32 8093C100          sts 193,R24
 5F36           ;                                       uart_Printf("%s\r\n",strM2102);
 5F36 20E0              ldi R18,<_strM2102
 5F38 30E0              ldi R19,>_strM2102
 5F3A 00E0              ldi R16,<L88
 5F3C 10E0              ldi R17,>L88
 5F3E 0E940000          xcall _uart_Printf
 5F42           ;                                       Uart0ReEnable;
 5F42 8091C100          lds R24,193
 5F46 8061              ori R24,16
 5F48 8093C100          sts 193,R24
 5F4C           ;                                       mainStep = 3;
 5F4C 83E0              ldi R24,3
 5F4E 80931700          sts L1177,R24
 5F52           ;                               }
 5F52           ;                       }
 5F52 43C0              xjmp L1187
 5F54           L1192:
 5F54           ; 			else
 5F54           ; 			{
 5F54           ; 				if(runNum!=0)		// 因为稀释液泵流量小，需要最多灌注3遍
 5F54 20905000          lds R2,_runNum
 5F58 2220              tst R2
 5F5A A1F0              breq L1199
 5F5C           X684:
 5F5C           ; 				{
 5F5C           ; 					MotStop(MOT_DILUENT);
 5F5C 09E0              ldi R16,9
 5F5E 0E940000          xcall _MotStop
 5F62           ;                                       MotStop(MOT_EFFLUENT);
 5F62 0BE0              ldi R16,11
 5F64 0E940000          xcall _MotStop
 5F68           ;                               //      _EffluentMotRun(5, 220);
 5F68           ;                                       SetDelayTime(MOT_DILUENT, 20);
 5F68 24E1              ldi R18,20
 5F6A 30E0              ldi R19,0
 5F6C 09E0              ldi R16,9
 5F6E 0E940000          xcall _SetDelayTime
 5F72           ;                                       mainStep = 1;
 5F72 81E0              ldi R24,1
 5F74 80931700          sts L1177,R24
 5F78           ;                                       runNum --;
 5F78 80915000          lds R24,_runNum
 5F7C 8150              subi R24,1
 5F7E 80935000          sts _runNum,R24
 5F82           ;                                       break;
 5F82 2BC0              xjmp L1187
 5F84           L1199:
 5F84           ; 				}
 5F84           ; 				// 供液已经停止，灌注失败
 5F84           ; 				MotStop(MOT_DILUENT);
 5F84 09E0              ldi R16,9
 5F86 0E940000          xcall _MotStop
 5F8A           ;                               MotStop(MOT_EFFLUENT);
 5F8A 0BE0              ldi R16,11
 5F8C 0E940000          xcall _MotStop
 5F90           ;                               //MotInitCheck(MOT_SAMP_NEEDLE);
 5F90           ;                               SetBeepWarning();
 5F90 0E940000          xcall _SetBeepWarning
 5F94           ;                               Uart0ReUnable;
 5F94 8091C100          lds R24,193
 5F98 8F7E              andi R24,239
 5F9A 8093C100          sts 193,R24
 5F9E           ; //                            uart_Printf("!2910\r\n");       // 稀释液灌注失败， 请检查稀释液供给，如果供给正常则请重新调试稀释液传感器后重试灌注
 5F9E           ;                               uart_Printf("%s\r\n",strE3912);
 5F9E 20E0              ldi R18,<_strE3912
 5FA0 30E0              ldi R19,>_strE3912
 5FA2 00E0              ldi R16,<L88
 5FA4 10E0              ldi R17,>L88
 5FA6 0E940000          xcall _uart_Printf
 5FAA           ;                               Uart0ReEnable;
 5FAA 8091C100          lds R24,193
 5FAE 8061              ori R24,16
 5FB0 8093C100          sts 193,R24
 5FB4           ;                               mainStep = 3;
 5FB4 83E0              ldi R24,3
 5FB6 80931700          sts L1177,R24
 5FBA           ;                       }
 5FBA           ;                       break;
 5FBA 0FC0              xjmp L1187
 5FBC           L1201:
 5FBC           ; 		case 3:		// 完成退出
 5FBC           ; 			_EffluentMotRun(20, 220);
 5FBC 2CED              ldi R18,220
 5FBE 04E1              ldi R16,20
 5FC0 10E0              ldi R17,0
 5FC2 91D9              xcall __EffluentMotRun
 5FC4           ;                       waitEffluent = 1;
 5FC4 81E0              ldi R24,1
 5FC6 80934A00          sts _waitEffluent,R24
 5FCA           ;                       mainStep = 4;
 5FCA 84E0              ldi R24,4
 5FCC 80931700          sts L1177,R24
 5FD0           L1202:
 5FD0           ; 		case 4:
 5FD0           ; 			mainStep = 0;
 5FD0 2224              clr R2
 5FD2 20921700          sts L1177,R2
 5FD6           ;                       return 1;
 5FD6 01E0              ldi R16,1
 5FD8 01C0              xjmp L1176
 5FDA           L1186:
 5FDA           L1187:
 5FDA           ; 	}
 5FDA           ; 	return 0;
 5FDA 0027              clr R16
 5FDC           L1176:
 5FDC                   .dbline 0 ; func end
 5FDC 0C940000          xjmp pop_xgset300C
                        .area data(ram, con, rel)
 0018           L1204:
 0018                   .blkb 1
                        .area idata
 0018 00                .byte 0
                        .area data(ram, con, rel)
                        .area bss(ram, con, rel)
 0028           L1205:
 0028                   .blkb 2
 002A           L1206:
 002A                   .blkb 1
 002B           L1207:
 002B                   .blkb 1
                        .area text(rom, con, rel)
                        .even
 5FE0           __ManualPrimingFluid::
 5FE0 0E940000          xcall push_xgset300C
 5FE4           ; }
 5FE4           ; 
 5FE4           ; unsigned char _ManualPrimingFluid(void)
 5FE4           ; {
 5FE4           ;       static unsigned char mainStep = 0;
 5FE4           ;       static unsigned int i;
 5FE4           ;       static unsigned char ucTmp;
 5FE4           ;       static unsigned char detRetry;
 5FE4           ;       
 5FE4           ;       if(WaitDelayTime(MOT_EFFLUENT))         return 0;
 5FE4 0BE0              ldi R16,11
 5FE6 0E940000          xcall _WaitDelayTime
 5FEA 0023              tst R16
 5FEC 11F0              breq L1208
 5FEE           X688:
 5FEE 0027              clr R16
 5FF0 D7C0              xjmp L1203
 5FF2           L1208:
 5FF2           ; 	if(WaitDelayTime(MOT_DILUENT))		return 0;
 5FF2 09E0              ldi R16,9
 5FF4 0E940000          xcall _WaitDelayTime
 5FF8 0023              tst R16
 5FFA 11F0              breq L1210
 5FFC           X689:
 5FFC 0027              clr R16
 5FFE D0C0              xjmp L1203
 6000           L1210:
 6000           ; 	if(waitEffluent){if(GetMotState(MOT_EFFLUENT)!=STA_SLAVE_FREE)		return 0;	waitEffluent = 0;}
 6000 20904A00          lds R2,_waitEffluent
 6004 2220              tst R2
 6006 59F0              breq L1212
 6008           X690:
 6008 0BE0              ldi R16,11
 600A 0E940000          xcall _GetMotState
 600E 402F              mov R20,R16
 6010 0130              cpi R16,1
 6012 11F0              breq L1214
 6014           X691:
 6014 0027              clr R16
 6016 C4C0              xjmp L1203
 6018           L1214:
 6018 2224              clr R2
 601A 20924A00          sts _waitEffluent,R2
 601E           L1212:
 601E           ; 	
 601E           ; 	switch(mainStep)
 601E 40911800          lds R20,L1204
 6022 5527              clr R21
 6024 4030              cpi R20,0
 6026 4507              cpc R20,R21
 6028 99F0              breq L1219
 602A           X692:
 602A 4130              cpi R20,1
 602C E0E0              ldi R30,0
 602E 5E07              cpc R21,R30
 6030 B1F0              breq L1220
 6032           X693:
 6032 4230              cpi R20,2
 6034 E0E0              ldi R30,0
 6036 5E07              cpc R21,R30
 6038 31F1              breq L1221
 603A           X694:
 603A 4330              cpi R20,3
 603C E0E0              ldi R30,0
 603E 5E07              cpc R21,R30
 6040 09F4              brne X703
 6042 9DC0              xjmp L1231
 6044           X703:
 6044           X695:
 6044 4430              cpi R20,4
 6046 E0E0              ldi R30,0
 6048 5E07              cpc R21,R30
 604A 09F4              brne X704
 604C A3C0              xjmp L1232
 604E           X704:
 604E           X696:
 604E A7C0              xjmp L1216
 6050           L1219:
 6050           ; 	{
 6050           ; 		case 0:
 6050           ; 			runNum = 5;
 6050 85E0              ldi R24,5
 6052 80935000          sts _runNum,R24
 6056           ;                       mainStep = 1;
 6056 81E0              ldi R24,1
 6058 80931800          sts L1204,R24
 605C           ;                       break;
 605C A0C0              xjmp L1217
 605E           L1220:
 605E           ; 		case 1:		// 启动清洗液泵和废液泵
 605E           ; 			_FluidMotRun(100, 60);		// 最大灌注30mL液体，超出表示灌注失败，提示用户检查供液
 605E 2CE3              ldi R18,60
 6060 04E6              ldi R16,100
 6062 10E0              ldi R17,0
 6064 1BD9              xcall __FluidMotRun
 6066           ;                       _EffluentMotRun(105, 60);
 6066 2CE3              ldi R18,60
 6068 09E6              ldi R16,105
 606A 10E0              ldi R17,0
 606C 3CD9              xcall __EffluentMotRun
 606E           ;                       SetDelayTime(15, 40);           // 设置连续供水3秒判断灌注成功
 606E 28E2              ldi R18,40
 6070 30E0              ldi R19,0
 6072 0FE0              ldi R16,15
 6074 0E940000          xcall _SetDelayTime
 6078           ;                       ReadLiquidMonitorResult(1);
 6078 01E0              ldi R16,1
 607A 0E940000          xcall _ReadLiquidMonitorResult
 607E           ;                       mainStep = 2;
 607E 82E0              ldi R24,2
 6080 80931800          sts L1204,R24
 6084           ;                       break;
 6084 8CC0              xjmp L1217
 6086           L1221:
 6086           ; 		case 2:		// 等待液路事件
 6086           ; 			SetDelayTime(MOT_EFFLUENT, 3);
 6086 23E0              ldi R18,3
 6088 30E0              ldi R19,0
 608A 0BE0              ldi R16,11
 608C 0E940000          xcall _SetDelayTime
 6090           ;                       ReadLiquidMonitorResult(1);
 6090 01E0              ldi R16,1
 6092 0E940000          xcall _ReadLiquidMonitorResult
 6096           ;                       if(GetMotState(MOT_EFFLUENT) != STA_SLAVE_FREE && GetMotState(MOT_FLUID) != STA_SLAVE_FREE) 
 6096 0BE0              ldi R16,11
 6098 0E940000          xcall _GetMotState
 609C 402F              mov R20,R16
 609E 0130              cpi R16,1
 60A0 D1F1              breq L1222
 60A2           X697:
 60A2 0AE0              ldi R16,10
 60A4 0E940000          xcall _GetMotState
 60A8 402F              mov R20,R16
 60AA 0130              cpi R16,1
 60AC A1F1              breq L1222
 60AE           X698:
 60AE           ; 			{
 60AE           ; 				if(WaitDelayTime(15)!=0)
 60AE 0FE0              ldi R16,15
 60B0 0E940000          xcall _WaitDelayTime
 60B4 A02E              mov R10,R16
 60B6 0023              tst R16
 60B8 91F0              breq L1224
 60BA           X699:
 60BA           ; 				{
 60BA           ; 					ucTmp = GetLiquidMonitorState(1);
 60BA 01E0              ldi R16,1
 60BC 0E940000          xcall _GetLiquidMonitorState
 60C0 A02E              mov R10,R16
 60C2 A0922A00          sts L1206,R10
 60C6           ;                                       if(ucTmp==INFO_LIQ_EMPTY || ucTmp==INFO_LIQ_BUBBLE)
 60C6 4A2D              mov R20,R10
 60C8 0E30              cpi R16,14
 60CA 19F0              breq L1228
 60CC           X700:
 60CC 0031              cpi R16,16
 60CE 09F0              breq X705
 60D0 66C0              xjmp L1217
 60D2           X705:
 60D2           X701:
 60D2           L1228:
 60D2           ; 					{
 60D2           ; 						SetDelayTime(15, 40);	// 液路有空气，重新开始计时
 60D2 28E2              ldi R18,40
 60D4 30E0              ldi R19,0
 60D6 0FE0              ldi R16,15
 60D8 0E940000          xcall _SetDelayTime
 60DC           ;                                       }
 60DC           ;                               }
 60DC 60C0              xjmp L1217
 60DE           L1224:
 60DE           ; 				else
 60DE           ; 				{
 60DE           ; 					// 灌注完成
 60DE           ; 					MotStop(MOT_FLUID);
 60DE 0AE0              ldi R16,10
 60E0 0E940000          xcall _MotStop
 60E4           ;                                       MotStop(MOT_EFFLUENT);
 60E4 0BE0              ldi R16,11
 60E6 0E940000          xcall _MotStop
 60EA           ;                                       //MotInitCheck(MOT_SAMP_NEEDLE);
 60EA           ;                                       SetBeepAck();
 60EA 0E940000          xcall _SetBeepAck
 60EE           ;                                       Uart0ReUnable;
 60EE 8091C100          lds R24,193
 60F2 8F7E              andi R24,239
 60F4 8093C100          sts 193,R24
 60F8           ;                                       uart_Printf("%s\r\n",strM2101);
 60F8 20E0              ldi R18,<_strM2101
 60FA 30E0              ldi R19,>_strM2101
 60FC 00E0              ldi R16,<L88
 60FE 10E0              ldi R17,>L88
 6100 0E940000          xcall _uart_Printf
 6104           ;                                       Uart0ReEnable;
 6104 8091C100          lds R24,193
 6108 8061              ori R24,16
 610A 8093C100          sts 193,R24
 610E           ;                                       mainStep = 3;
 610E 83E0              ldi R24,3
 6110 80931800          sts L1204,R24
 6114           ;                               }
 6114           ;                       }
 6114 44C0              xjmp L1217
 6116           L1222:
 6116           ; 			else
 6116           ; 			{
 6116           ; 				if(runNum!=0)		// 因为稀释液泵流量小，需要最多灌注3遍
 6116 20905000          lds R2,_runNum
 611A 2220              tst R2
 611C A1F0              breq L1229
 611E           X702:
 611E           ; 				{
 611E           ; 					MotStop(MOT_FLUID);
 611E 0AE0              ldi R16,10
 6120 0E940000          xcall _MotStop
 6124           ;                                       MotStop(MOT_EFFLUENT);
 6124 0BE0              ldi R16,11
 6126 0E940000          xcall _MotStop
 612A           ;                                       SetDelayTime(MOT_DILUENT, 20);
 612A 24E1              ldi R18,20
 612C 30E0              ldi R19,0
 612E 09E0              ldi R16,9
 6130 0E940000          xcall _SetDelayTime
 6134           ;                                       mainStep = 1;
 6134 81E0              ldi R24,1
 6136 80931800          sts L1204,R24
 613A           ;                                       runNum --;
 613A 80915000          lds R24,_runNum
 613E 8150              subi R24,1
 6140 80935000          sts _runNum,R24
 6144           ;                                       break;
 6144 2CC0              xjmp L1217
 6146           L1229:
 6146           ; 				}
 6146           ; 				// 供液已经停止，灌注失败
 6146           ; 				MotStop(MOT_FLUID);
 6146 0AE0              ldi R16,10
 6148 0E940000          xcall _MotStop
 614C           ;                               MotStop(MOT_EFFLUENT);
 614C 0BE0              ldi R16,11
 614E 0E940000          xcall _MotStop
 6152           ;                               SetBeepWarning();
 6152 0E940000          xcall _SetBeepWarning
 6156           ;                               Uart0ReUnable;
 6156 8091C100          lds R24,193
 615A 8F7E              andi R24,239
 615C 8093C100          sts 193,R24
 6160           ;                               uart_Printf("%s\r\n",strE3911); // 清洗液灌注失败， 请检查清洗液供给，如果供给正常则请重新调试清洗液传感器后重试灌注
 6160 20E0              ldi R18,<_strE3911
 6162 30E0              ldi R19,>_strE3911
 6164 00E0              ldi R16,<L88
 6166 10E0              ldi R17,>L88
 6168 0E940000          xcall _uart_Printf
 616C           ;                               Uart0ReEnable;
 616C 8091C100          lds R24,193
 6170 8061              ori R24,16
 6172 8093C100          sts 193,R24
 6176           ;                               mainStep = 3;
 6176 83E0              ldi R24,3
 6178 80931800          sts L1204,R24
 617C           ;                       }
 617C           ;                       break;
 617C 10C0              xjmp L1217
 617E           L1231:
 617E           ; 		case 3:		// 完成/失败退出
 617E           ; 			_EffluentMotRun(20, 220);
 617E 2CED              ldi R18,220
 6180 04E1              ldi R16,20
 6182 10E0              ldi R17,0
 6184 B0D8              xcall __EffluentMotRun
 6186           ;                       waitEffluent = 1;
 6186 81E0              ldi R24,1
 6188 80934A00          sts _waitEffluent,R24
 618C           ;                       mainStep = 4;
 618C 84E0              ldi R24,4
 618E 80931800          sts L1204,R24
 6192           ;                       break;
 6192 05C0              xjmp L1217
 6194           L1232:
 6194           ; 		case 4:
 6194           ; 			mainStep = 0;
 6194 2224              clr R2
 6196 20921800          sts L1204,R2
 619A           ;                       return 1;
 619A 01E0              ldi R16,1
 619C 01C0              xjmp L1203
 619E           L1216:
 619E           L1217:
 619E           ; 			break;
 619E           ; 		}
 619E           ; 	return 0;
 619E 0027              clr R16
 61A0           L1203:
 61A0                   .dbline 0 ; func end
 61A0 0C940000          xjmp pop_xgset300C
 61A4           ;              m -> R10
                        .even
 61A4           _SetCleanMode::
 61A4 AA92              st -y,R10
 61A6 A02E              mov R10,R16
 61A8 2297              sbiw R28,2
 61AA           ; }
 61AA           ; 
 61AA           ; 
 61AA           ; void SetCleanMode(unsigned char m)
 61AA           ; {
 61AA           ;       if(m > 2)
 61AA 82E0              ldi R24,2
 61AC 8A15              cp R24,R10
 61AE 08F4              brsh L1234
 61B0           X706:
 61B0           ; 		m = 0;
 61B0 AA24              clr R10
 61B2           L1234:
 61B2           ; 	if(CleanMode == 0)
 61B2 20900B00          lds R2,_CleanMode
 61B6 2220              tst R2
 61B8 B1F4              brne L1236
 61BA           X707:
 61BA           ; 	{
 61BA           ; 		CleanMode = m;
 61BA A0920B00          sts _CleanMode,R10
 61BE           ;               Uart0ReUnable;
 61BE 8091C100          lds R24,193
 61C2 8F7E              andi R24,239
 61C4 8093C100          sts 193,R24
 61C8           ;               uart_Printf("%s %4d\r\n",strM3156, CleanMode);
 61C8 2A2C              mov R2,R10
 61CA 3324              clr R3
 61CC 3982              std y+1,R3
 61CE 2882              std y+0,R2
 61D0 20E0              ldi R18,<_strM3156
 61D2 30E0              ldi R19,>_strM3156
 61D4 00E0              ldi R16,<L1238
 61D6 10E0              ldi R17,>L1238
 61D8 0E940000          xcall _uart_Printf
 61DC           ;               Uart0ReEnable;
 61DC 8091C100          lds R24,193
 61E0 8061              ori R24,16
 61E2 8093C100          sts 193,R24
 61E6           ;       }
 61E6           L1236:
 61E6           L1233:
 61E6                   .dbline 0 ; func end
 61E6 2296              adiw R28,2
 61E8 A990              ld R10,y+
 61EA 0895              ret
                        .area bss(ram, con, rel)
 002C           _DiluteProcess_mainStep:
 002C                   .blkb 1
 002D           _DiluteProcess_workStep:
 002D                   .blkb 1
 002E           __NewTestType:
 002E                   .blkb 1
 002F           __NewReadTime1:
 002F                   .blkb 2
 0031           __NewReadTime0:
 0031                   .blkb 2
 0033           __NewMultipNum::
 0033                   .blkb 1
 0034           __NewCardStoreNum::
 0034                   .blkb 1
 0035           __WaitStartKey:
 0035                   .blkb 1
 0036           _MixHeight:
 0036                   .blkb 2
 0038           _DropHeight:
 0038                   .blkb 2
 003A           _NeedleOnMixCenterPos:
 003A                   .blkb 2
 003C           _NeedleOnMixSidePos:
 003C                   .blkb 2
 003E           __SleepSwitch::
 003E                   .blkb 1
 003F           __SleepTime::
 003F                   .blkb 2
 0041           __MixtureMode::
 0041                   .blkb 1
 0042           __DropMode::
 0042                   .blkb 2
 0044           __SamplingVolume::
 0044                   .blkb 2
 0046           __DropVolumeFactor:
 0046                   .blkb 2
 0048           __DropVolume::
 0048                   .blkb 2
 004A           _waitEffluent:
 004A                   .blkb 1
 004B           _waitMotDiluent:
 004B                   .blkb 1
 004C           _waitMotFluid:
 004C                   .blkb 1
 004D           _waitMotSampPump:
 004D                   .blkb 1
 004E           _waitMotSampNeedle:
 004E                   .blkb 1
 004F           _waitMotSampTurn:
 004F                   .blkb 1
 0050           _runNum:
 0050                   .blkb 1
 0051           _liqDetBaseAdc:
 0051                   .blkb 2
 0053           _GetNewTestCard::
 0053                   .blkb 1
 0054           _CurInsertRingNum::
 0054                   .blkb 1
 0055           _NewTestInfo::
 0055                   .blkb 13
 0062           _JudgeFlag::
 0062                   .blkb 1
                        .area data(ram, con, rel)
 0019           L1238:
 0019                   .blkb 9
                        .area idata
 0019 2573202534640D0A00        .byte 37,'s,32,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 0022           L1173:
 0022                   .blkb 8
                        .area idata
 0022 21323930370D0A00  .byte 33,50,57,48,55,13,10,0
                        .area data(ram, con, rel)
 002A           L1155:
 002A                   .blkb 8
                        .area idata
 002A 21323930360D0A00  .byte 33,50,57,48,54,13,10,0
                        .area data(ram, con, rel)
 0032           L1107:
 0032                   .blkb 8
                        .area idata
 0032 21323931320D0A00  .byte 33,50,57,49,50,13,10,0
                        .area data(ram, con, rel)
 003A           L1098:
 003A                   .blkb 8
                        .area idata
 003A 21323931310D0A00  .byte 33,50,57,49,49,13,10,0
                        .area data(ram, con, rel)
 0042           L1093:
 0042                   .blkb 12
                        .area idata
 0042 2132393031202425640D0A00  .byte 33,50,57,48,49,32,36,37,'d,13,10,0
                        .area data(ram, con, rel)
 004E           L1033:
 004E                   .blkb 8
                        .area idata
 004E 21323535300D0A00  .byte 33,50,53,53,48,13,10,0
                        .area data(ram, con, rel)
 0056           L1001:
 0056                   .blkb 17
                        .area idata
 0056 2F2F2043616C696252657472793A0D0A  .byte 47,47,32,'C,'a,'l,'i,'b,'R,'e,'t,'r,'y,58,13,10
 0066 00                .byte 0
                        .area data(ram, con, rel)
 0067           L998:
 0067                   .blkb 18
                        .area idata
 0067 2F2F20466C6F774A756467653A25640D  .byte 47,47,32,'F,'l,'o,'w,'J,'u,'d,'g,'e,58,37,'d,13
 0077 0A00              .byte 10,0
                        .area data(ram, con, rel)
 0079           L995:
 0079                   .blkb 19
                        .area idata
 0079 2F2F2044696C757465466C6F773A2564  .byte 47,47,32,'D,'i,'l,'u,'t,'e,'F,'l,'o,'w,58,37,'d
 0089 0D0A00            .byte 13,10,0
                        .area data(ram, con, rel)
 008C           L987:
 008C                   .blkb 8
                        .area idata
 008C 21323533350D0A00  .byte 33,50,53,51,53,13,10,0
                        .area data(ram, con, rel)
 0094           L979:
 0094                   .blkb 8
                        .area idata
 0094 21323533330D0A00  .byte 33,50,53,51,51,13,10,0
                        .area data(ram, con, rel)
 009C           L963:
 009C                   .blkb 8
                        .area idata
 009C 21323533320D0A00  .byte 33,50,53,51,50,13,10,0
                        .area data(ram, con, rel)
 00A4           L958:
 00A4                   .blkb 8
                        .area idata
 00A4 21323533310D0A00  .byte 33,50,53,51,49,13,10,0
                        .area data(ram, con, rel)
 00AC           L916:
 00AC                   .blkb 9
                        .area idata
 00AC 2573202425640D0A00        .byte 37,'s,32,36,37,'d,13,10,0
                        .area data(ram, con, rel)
 00B5           L908:
 00B5                   .blkb 18
                        .area idata
 00B5 2132353134202425346420242534640D  .byte 33,50,53,49,52,32,36,37,52,'d,32,36,37,52,'d,13
 00C5 0A00              .byte 10,0
                        .area data(ram, con, rel)
 00C7           L890:
 00C7                   .blkb 8
                        .area idata
 00C7 21323531320D0A00  .byte 33,50,53,49,50,13,10,0
                        .area data(ram, con, rel)
 00CF           L887:
 00CF                   .blkb 8
                        .area idata
 00CF 21323531310D0A00  .byte 33,50,53,49,49,13,10,0
                        .area data(ram, con, rel)
 00D7           L835:
 00D7                   .blkb 8
                        .area idata
 00D7 21323530320D0A00  .byte 33,50,53,48,50,13,10,0
                        .area data(ram, con, rel)
 00DF           L698:
 00DF                   .blkb 27
                        .area idata
 00DF 24253464202425346420242534642024  .byte 36,37,52,'d,32,36,37,52,'d,32,36,37,52,'d,32,36
 00EF 25346420242534640D0A00    .byte 37,52,'d,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 00FA           L483:
 00FA                   .blkb 9
                        .area idata
 00FA 213339303320242000        .byte 33,51,57,48,51,32,36,32,0
                        .area data(ram, con, rel)
 0103           L464:
 0103                   .blkb 6
                        .area idata
 0103 2573200D0A00      .byte 37,'s,32,13,10,0
                        .area data(ram, con, rel)
 0109           L458:
 0109                   .blkb 9
                        .area idata
 0109 213339303120242000        .byte 33,51,57,48,49,32,36,32,0
                        .area data(ram, con, rel)
 0112           L393:
 0112                   .blkb 4
                        .area idata
 0112 20242000          .byte 32,36,32,0
                        .area data(ram, con, rel)
 0116           L211:
 0116                   .blkb 3
                        .area idata
 0116 0D0A00            .byte 13,10,0
                        .area data(ram, con, rel)
 0119           L209:
 0119                   .blkb 6
                        .area idata
 0119 257320242000      .byte 37,'s,32,36,32,0
                        .area data(ram, con, rel)
 011F           L195:
 011F                   .blkb 15
                        .area idata
 011F 2573202425346420242534640D0A00    .byte 37,'s,32,36,37,52,'d,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 012E           L191:
 012E                   .blkb 13
                        .area idata
 012E 213335323220242534640D0A00        .byte 33,51,53,50,50,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 013B           L187:
 013B                   .blkb 13
                        .area idata
 013B 213335323020242534640D0A00        .byte 33,51,53,50,48,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 0148           L181:
 0148                   .blkb 13
                        .area idata
 0148 213335323120242534640D0A00        .byte 33,51,53,50,49,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 0155           L164:
 0155                   .blkb 21
                        .area idata
 0155 2F2F204175746F546573744379633A20  .byte 47,47,32,'A,'u,'t,'o,'T,'e,'s,'t,'C,'y,'c,58,32
 0165 25640D0A00        .byte 37,'d,13,10,0
                        .area data(ram, con, rel)
 016A           L88:
 016A                   .blkb 5
                        .area idata
 016A 25730D0A00        .byte 37,'s,13,10,0
                        .area data(ram, con, rel)
 016F           L10:
 016F                   .blkb 10
                        .area idata
 016F 257320242534640D0A00      .byte 37,'s,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 0179           L6:
 0179                   .blkb 15
                        .area idata
 0179 2573202425326420242532640D0A00    .byte 37,'s,32,36,37,50,'d,32,36,37,50,'d,13,10,0
                        .area data(ram, con, rel)
                ; }
                ; 
                ; 
                ; /**************************************** File end *******************************************/
                ; 
