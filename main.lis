                        .module main.c
                        .area data(ram, con, rel)
 0000           _CardNoneUseful::
 0000                   .blkb 1
                        .area idata
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001           _workSwitch::
 0001                   .blkb 1
                        .area idata
 0001 01                .byte 1
                        .area data(ram, con, rel)
 0002           _EchoSW::
 0002                   .blkb 1
                        .area idata
 0002 01                .byte 1
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                ;              i -> y+2
                ;           type -> R10
                        .even
 0000           _ReStart::
 0000 AA92              st -y,R10
 0002 A02E              mov R10,R16
 0004 2397              sbiw R28,3
 0006           ; #include "B1404_LIB.h"
 0006           ; #include <iom1280v.h>
 0006           ; #include "Common.h"
 0006           ; #include <macros.h>
 0006           ; #include "eeprom.h"
 0006           ; 
 0006           ; 
 0006           ; unsigned char ControlModel;                                   // 0:正常， 1:超级终端调试
 0006           ; unsigned char WorkProcessStep;                                // 工作进程号
 0006           ; extern unsigned char CardStoreOpenLook;               // 片仓工作状态
 0006           ; extern unsigned char JumpMode;                                // 调整测试模式
 0006           ; 
 0006           ; 
 0006           ; //**************************************
 0006           ; unsigned char CardNoneUseful = 0;                     // 老化模式
 0006           ; unsigned char workSwitch = 1;                         // 停止工作开关
 0006           ; extern unsigned char CardStoreTestFlag;               // 取片测试模式
 0006           ; //**************************************
 0006           ; 
 0006           ; unsigned char primeProcessSW;         // 灌注开关，1:灌注稀释液； 2:灌注清洗液；3:测试模式下的液路自检
 0006           ; 
 0006           ; void init_devices(void);
 0006           ; void StartWork(void);
 0006           ; void MotorModelConfig(void);
 0006           ; void SetWorkStep(unsigned char n);
 0006           ; void CommandClear(void);
 0006           ; 
 0006           ; extern unsigned char GetNewTestCard;          // 取新的测试卡，0:无, 1:取插入卡, 2:取仓1卡, 3:取仓2卡, 4:取仓3卡, 5:取仓4卡, 6:取仓5卡， 255:取卡完成
 0006           ; extern unsigned char TurnPlateUsedLock;               // 转盘使用锁
 0006           ; extern unsigned char _LEDSTATE;                               // 指示灯状态锁定 0 红  1 绿
 0006           ; unsigned char EchoSW = 1;
 0006           ; 
 0006           ; unsigned char (*miantianSubFunction)(void);
 0006           ; unsigned int MaintainSubFunParam;
 0006           ; 
 0006           ; void ReStart(unsigned char type)
 0006           ; {
 0006           ;       unsigned char i;
 0006           ;       CLI();
 0006 F894              cli
 0008           ;       Uart0ReUnable;
 0008 8091C100          lds R24,193
 000C 8F7E              andi R24,239
 000E 8093C100          sts 193,R24
 0012           ;       uart_Printf("%s\r\n", strM0199);
 0012 20E0              ldi R18,<_strM0199
 0014 30E0              ldi R19,>_strM0199
 0016 00E0              ldi R16,<L2
 0018 10E0              ldi R17,>L2
 001A 0E940000          xcall _uart_Printf
 001E           ;       Uart0ReEnable;
 001E 8091C100          lds R24,193
 0022 8061              ori R24,16
 0024 8093C100          sts 193,R24
 0028           ;       if(type != 0)
 0028 AA20              tst R10
 002A 61F0              breq L3
 002C           X0:
 002C           ; 	{
 002C           ; 		// 设置下载程序模式标识
 002C           ; 		i = 1;
 002C 81E0              ldi R24,1
 002E 8A83              std y+2,R24
 0030           ;               EEPROM_WRITE(EEP_ADD_DOWNLOAD_FLAG, i);
 0030 9927              clr R25
 0032 9983              std y+1,R25
 0034 8883              std y+0,R24
 0036 9E01              movw R18,R28
 0038 2E5F              subi R18,254  ; offset = 2
 003A 3F4F              sbci R19,255
 003C 02E3              ldi R16,50
 003E 10E0              ldi R17,0
 0040 0E940000          xcall _EEPROMWriteBytes_extIO
 0044           ;       }
 0044           L3:
 0044           ; 	WDR (); //this prevents a timeout on enabling
 0044 A895              wdr
 0046           ;       WDTCSR |= (1<<WDCE) | (1<<WDE); //30-Oct-2006 Umesh 
 0046 80916000          lds R24,96
 004A 8861              ori R24,24
 004C 80936000          sts 96,R24
 0050           ;       WDTCSR = 0x0F; // 0x08 WATCHDOG ENABLED - dont forget to issue WDRs
 0050 8FE0              ldi R24,15
 0052 80936000          sts 96,R24
 0056           ;       SEI();
 0056 7894              sei
 0058           L1:
 0058                   .dbline 0 ; func end
 0058 2396              adiw R28,3
 005A A990              ld R10,y+
 005C 0895              ret
                        .area data(ram, con, rel)
 0003           _uart::
 0003                   .blkb 2
                        .area idata
 0003 2333              .byte 35,51
                        .area data(ram, con, rel)
 0005                   .blkb 2
                        .area idata
 0005 3030              .byte 48,48
                        .area data(ram, con, rel)
 0007                   .blkb 2
                        .area idata
 0007 3224              .byte 50,36
                        .area data(ram, con, rel)
 0009                   .blkb 2
                        .area idata
 0009 3320              .byte 51,32
                        .area data(ram, con, rel)
 000B                   .blkb 2
                        .area idata
 000B 4742              .byte 'G,'B
                        .area data(ram, con, rel)
                        .area bss(ram, con, rel)
 0000           L6:
 0000                   .blkb 1
 0001           L7:
 0001                   .blkb 1
 0002           L8:
 0002                   .blkb 1
 0003           L9:
 0003                   .blkb 1
 0004           L10:
 0004                   .blkb 1
 0005           L11:
 0005                   .blkb 1
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 0000           L308:
 0000 B305              .word `L164
 0002 DA05              .word `L177
 0004 E105              .word `L179
 0006 E805              .word `L181
 0008 EF05              .word `L183
 000A F605              .word `L185
 000C FD05              .word `L187
 000E 0406              .word `L189
 0010 0B06              .word `L191
 0012 1206              .word `L193
 0014 1906              .word `L195
 0016 2006              .word `L197
 0018 6006              .word `L209
 001A 6E06              .word `L213
 001C 7C06              .word `L217
 001E DA08              .word `L138
 0020 9406              .word `L219
 0022 DA08              .word `L138
 0024 DA08              .word `L138
 0026 DF06              .word `L234
 0028 E606              .word `L236
 002A ED06              .word `L238
 002C F406              .word `L240
 002E DA08              .word `L138
 0030 DA08              .word `L138
 0032 DA08              .word `L138
 0034 DA08              .word `L138
 0036 DA08              .word `L138
 0038 DA08              .word `L138
 003A FB06              .word `L242
                        .area text(rom, con, rel)
                        .area  func_lit(rom, con, rel)
 003C           L515:
 003C F40A              .word `L370
 003E 0E0E              .word `L351
 0040 FB0A              .word `L372
 0042 020B              .word `L374
 0044 090B              .word `L375
 0046 100B              .word `L376
 0048 170B              .word `L377
 004A 1E0B              .word `L378
 004C 2B0B              .word `L380
 004E 380B              .word `L382
 0050 7A0B              .word `L394
 0052 AC0B              .word `L398
 0054 BA0B              .word `L402
 0056 C80B              .word `L406
 0058 130C              .word `L420
 005A 1D0C              .word `L421
 005C 0E0E              .word `L351
 005E 0E0E              .word `L351
 0060 3E0C              .word `L423
 0062 450C              .word `L424
 0064 4C0C              .word `L425
 0066 530C              .word `L426
 0068 5A0C              .word `L427
 006A 610C              .word `L428
 006C 680C              .word `L429
 006E 0E0E              .word `L351
 0070 0E0E              .word `L351
 0072 6F0C              .word `L430
 0074 760C              .word `L431
 0076 7D0C              .word `L432
 0078 840C              .word `L433
 007A 8B0C              .word `L434
 007C 920C              .word `L435
 007E 9F0C              .word `L437
 0080 A60C              .word `L438
 0082 AD0C              .word `L439
 0084 0E0E              .word `L351
 0086 0E0E              .word `L351
 0088 0E0E              .word `L351
 008A 0E0E              .word `L351
 008C 0E0E              .word `L351
 008E 0E0E              .word `L351
 0090 0E0E              .word `L351
 0092 0E0E              .word `L351
 0094 0E0E              .word `L351
 0096 0E0E              .word `L351
 0098 0E0E              .word `L351
 009A 0E0E              .word `L351
 009C BB0C              .word `L441
 009E C80C              .word `L443
 00A0 D50C              .word `L445
 00A2 0E0E              .word `L351
 00A4 0E0E              .word `L351
 00A6 E20C              .word `L447
 00A8 ED0C              .word `L451
 00AA 0E0E              .word `L351
 00AC 0E0E              .word `L351
 00AE 0E0E              .word `L351
 00B0 F00C              .word `L452
 00B2 FF0C              .word `L456
 00B4 090D              .word `L458
 00B6 170D              .word `L462
 00B8 250D              .word `L466
 00BA 330D              .word `L470
 00BC 4B0D              .word `L478
 00BE 5E0D              .word `L484
 00C0 680D              .word `L486
 00C2 760D              .word `L490
 00C4 7C0D              .word `L491
 00C6 860D              .word `L493
 00C8 900D              .word `L495
 00CA 9A0D              .word `L497
 00CC A40D              .word `L499
 00CE BB0D              .word `L500
 00D0 D30D              .word `L501
 00D2 EB0D              .word `L502
 00D4 0E0E              .word `L351
 00D6 0E0E              .word `L351
 00D8 0E0E              .word `L351
 00DA 0E0E              .word `L351
 00DC 0E0E              .word `L351
 00DE 0E0E              .word `L351
 00E0 0E0E              .word `L351
 00E2 0E0E              .word `L351
 00E4 0E0E              .word `L351
 00E6 0E0E              .word `L351
 00E8 0E0E              .word `L351
 00EA 0E0E              .word `L351
 00EC 0E0E              .word `L351
 00EE 0E0E              .word `L351
 00F0 0E0E              .word `L351
 00F2 0E0E              .word `L351
 00F4 0E0E              .word `L351
 00F6 0E0E              .word `L351
 00F8 0E0E              .word `L351
 00FA 0E0E              .word `L351
 00FC 0E0E              .word `L351
 00FE B40C              .word `L440
                        .area text(rom, con, rel)
                ;         pFlash -> <dead>
                ;            dat -> <dead>
                ;             si -> R10
                ;           iPam -> R10,R11
                ;          iTmp1 -> R12,R13
                ;          iTmp0 -> R10,R11
                ;              i -> R20
                ;       workStep -> R10
                        .even
 005E           _main::
 005E 2697              sbiw R28,6
 0060           ; }
 0060           ; 
 0060           ; 
 0060           ; /*************************************************************************************************/
 0060           ; 
 0060           ; /******************************************* 主函数 **********************************************/
 0060           ; extern unsigned long SecondCount;
 0060           ; unsigned int cmd;
 0060           ; unsigned char uart[] = {'#','3','0','0','2','$','3',0x20,'G','B'};
 0060           ; void main(void)
 0060           ; {
 0060           ;       static unsigned char cmdState;
 0060           ;       static unsigned char taskSate;
 0060           ;       static unsigned char diluteProcessState;        // 稀释主程序执行状态
 0060           ;       static unsigned char GetNewPieceProcessState;//取片程序执行状态
 0060           ;       static unsigned char CardScanfSW;                       // 试剂片条码检测位置调节
 0060           ; //    static unsigned char workSwitch=1;                      // 停止工作开关
 0060           ;       static unsigned char dustbinOldState;
 0060           ; 
 0060           ;       int iPam;
 0060           ;       unsigned char dat, i;
 0060           ;       signed char si;
 0060           ;       unsigned int iTmp0, iTmp1;
 0060           ; 
 0060           ;       unsigned char workStep = 0;
 0060 AA24              clr R10
 0062           ;       _CONST char * pFlash;
 0062           ;       
 0062           ;       miantianSubFunction = 0;        
 0062 2224              clr R2
 0064 3324              clr R3
 0066 30920B00          sts _miantianSubFunction+1,R3
 006A 20920A00          sts _miantianSubFunction,R2
 006E           ; 
 006E           ;       DiluteProcDatInit();
 006E 0E940000          xcall _DiluteProcDatInit
 0072           ;       RingQueueDatInit();
 0072 0E940000          xcall _RingQueueDatInit
 0076           ;       TestQueueDatInit();
 0076 0E940000          xcall _TestQueueDatInit
 007A           ;       UnloadQueueDatInit();
 007A 0E940000          xcall _UnloadQueueDatInit
 007E           ;       InitCommandTransferData();
 007E 0E940000          xcall _InitCommandTransferData
 0082           ;       InitControlLayerData();
 0082 0E940000          xcall _InitControlLayerData
 0086           ;       init_devices();
 0086 0E940000          xcall _init_devices
 008A           ;       
 008A           ;       Uart0ReUnable;
 008A 8091C100          lds R24,193
 008E 8F7E              andi R24,239
 0090 8093C100          sts 193,R24
 0094           ;       uart_Printf("%s $%s\r\n", strM0100, strVersion);
 0094 80E0              ldi R24,<_strVersion
 0096 90E0              ldi R25,>_strVersion
 0098 9983              std y+1,R25
 009A 8883              std y+0,R24
 009C 20E0              ldi R18,<_strM0100
 009E 30E0              ldi R19,>_strM0100
 00A0 00E0              ldi R16,<L12
 00A2 10E0              ldi R17,>L12
 00A4 0E940000          xcall _uart_Printf
 00A8           ;       Uart0ReEnable;
 00A8 8091C100          lds R24,193
 00AC 8061              ori R24,16
 00AE 8093C100          sts 193,R24
 00B2           ;       
 00B2           ;       ControlModel = 1;
 00B2 81E0              ldi R24,1
 00B4 80930E00          sts _ControlModel,R24
 00B8           ;       SetCardTrolleyState(0);
 00B8 0027              clr R16
 00BA 0E940000          xcall _SetCardTrolleyState
 00BE           ;       SetBeepAck();
 00BE 0E940000          xcall _SetBeepAck
 00C2           ;       SetStateLedBusy();
 00C2 0E940000          xcall _SetStateLedBusy
 00C6           ;       WorkProcessStep = 255;
 00C6 8FEF              ldi R24,255
 00C8 80930D00          sts _WorkProcessStep,R24
 00CC 0C94520F          xjmp L14
 00D0           L13:
 00D0           ; 	// 进入工作循环
 00D0           ; 	while(1)
 00D0           ; 	{
 00D0           ; 		// 进程命令执行
 00D0           ; 		switch(WorkProcessStep)
 00D0 40910D00          lds R20,_WorkProcessStep
 00D4 5527              clr R21
 00D6 4030              cpi R20,0
 00D8 4507              cpc R20,R21
 00DA 09F4              brne X159
 00DC D3C0              xjmp L45
 00DE           X159:
 00DE           X1:
 00DE 4130              cpi R20,1
 00E0 E0E0              ldi R30,0
 00E2 5E07              cpc R21,R30
 00E4 09F4              brne X160
 00E6 DEC1              xjmp L80
 00E8           X160:
 00E8           X2:
 00E8 4230              cpi R20,2
 00EA E0E0              ldi R30,0
 00EC 5E07              cpc R21,R30
 00EE 09F4              brne X161
 00F0 C3C2              xjmp L107
 00F2           X161:
 00F2           X3:
 00F2 4330              cpi R20,3
 00F4 E0E0              ldi R30,0
 00F6 5E07              cpc R21,R30
 00F8 09F4              brne X162
 00FA AAC3              xjmp L134
 00FC           X162:
 00FC           X4:
 00FC 4430              cpi R20,4
 00FE E0E0              ldi R30,0
 0100 5E07              cpc R21,R30
 0102 11F4              brne X163
 0104 0C94E809          xjmp L345
 0108           X163:
 0108           X5:
 0108 4030              cpi R20,0
 010A E0E0              ldi R30,0
 010C 5E07              cpc R21,R30
 010E 14F4              brge X164
 0110 0C94050F          xjmp L17
 0114           X164:
 0114           X6:
 0114           L544:
 0114 4F3F              cpi R20,255
 0116 E0E0              ldi R30,0
 0118 5E07              cpc R21,R30
 011A 11F0              breq L19
 011C           X7:
 011C 0C94050F          xjmp L17
 0120           L19:
 0120           ; 		{
 0120           ; 		/**************** 空闲  *****************/
 0120           ; 			case 255:
 0120           ; 				if(ControlCmd.cmdState == 2)
 0120 80910000          lds R24,_ControlCmd
 0124 8230              cpi R24,2
 0126 11F0              breq X165
 0128 0C94050F          xjmp L17
 012C           X165:
 012C           X8:
 012C           ; 				{
 012C           ; 					cmdState = 0;
 012C 2224              clr R2
 012E 20920000          sts L6,R2
 0132           ;                                       Uart0ReUnable;
 0132 8091C100          lds R24,193
 0136 8F7E              andi R24,239
 0138 8093C100          sts 193,R24
 013C           ;                                       uart_Printf("#%4d CommandReceive $   0\r\n",ControlCmd.cmdIdx);
 013C 20910100          lds R18,_ControlCmd+1
 0140 30910200          lds R19,_ControlCmd+1+1
 0144 00E0              ldi R16,<L22
 0146 10E0              ldi R17,>L22
 0148 0E940000          xcall _uart_Printf
 014C           ;                                       Uart0ReEnable;
 014C 8091C100          lds R24,193
 0150 8061              ori R24,16
 0152 8093C100          sts 193,R24
 0156           ;                                       switch(ControlCmd.cmdIdx)
 0156 20900100          lds R2,_ControlCmd+1
 015A 30900200          lds R3,_ControlCmd+1+1
 015E 2220              tst R2
 0160 11F4              brne X9
 0162 3320              tst R3
 0164 B9F0              breq L27
 0166           X9:
 0166 C101              movw R24,R2
 0168 8130              cpi R24,1
 016A E0E0              ldi R30,0
 016C 9E07              cpc R25,R30
 016E 11F1              breq L31
 0170           X10:
 0170 8330              cpi R24,3
 0172 E0E0              ldi R30,0
 0174 9E07              cpc R25,R30
 0176 51F1              breq L32
 0178           X11:
 0178 8030              cpi R24,0
 017A E0E0              ldi R30,0
 017C 9E07              cpc R25,R30
 017E 0CF4              brge X166
 0180 3CC0              xjmp L24
 0182           X166:
 0182           X12:
 0182           L38:
 0182 80910100          lds R24,_ControlCmd+1
 0186 90910200          lds R25,_ControlCmd+1+1
 018A 8336              cpi R24,99
 018C E0E0              ldi R30,0
 018E 9E07              cpc R25,R30
 0190 71F1              breq L34
 0192           X13:
 0192 33C0              xjmp L24
 0194           L27:
 0194           ; 					{
 0194           ; 						case 0:		// 回显开关
 0194           ; 							if(ControlCmd.pam[0]==0)
 0194 20900300          lds R2,_ControlCmd+3
 0198 30900400          lds R3,_ControlCmd+3+1
 019C 2220              tst R2
 019E 31F4              brne L28
 01A0 3320              tst R3
 01A2 21F4              brne L28
 01A4           X14:
 01A4           ; 								EchoSW = 0;
 01A4 2224              clr R2
 01A6 20920200          sts _EchoSW,R2
 01AA 3BC0              xjmp L25
 01AC           L28:
 01AC           ; 							else
 01AC           ; 								EchoSW = 1;
 01AC 81E0              ldi R24,1
 01AE 80930200          sts _EchoSW,R24
 01B2           ;                                                       break;
 01B2 37C0              xjmp L25
 01B4           L31:
 01B4           ; 						case 1:		// #0001 启动工作
 01B4           ; 							StartWork();
 01B4 0E94F60F          xcall _StartWork
 01B8           ;                                                       SetWorkStep(0);         // 设置零工作状态
 01B8 0027              clr R16
 01BA 0E94560F          xcall _SetWorkStep
 01BE           ;                                                       GetStoreState(0);       // 初始化时读取片仓信息
 01BE 0027              clr R16
 01C0 0E940000          xcall _GetStoreState
 01C4           ;                                                       cmdState = 0;
 01C4 2224              clr R2
 01C6 20920000          sts L6,R2
 01CA           ;                                                       break;
 01CA 2BC0              xjmp L25
 01CC           L32:
 01CC           ; 						case 3:		// #0003 查询工作进程
 01CC           ; 							Uart0ReUnable;
 01CC 8091C100          lds R24,193
 01D0 8F7E              andi R24,239
 01D2 8093C100          sts 193,R24
 01D6           ;                                                       uart_Printf("%s $ 255 [Invalid]\r\n",strM0110);
 01D6 20E0              ldi R18,<_strM0110
 01D8 30E0              ldi R19,>_strM0110
 01DA 00E0              ldi R16,<L33
 01DC 10E0              ldi R17,>L33
 01DE 0E940000          xcall _uart_Printf
 01E2           ;                                                       Uart0ReEnable;
 01E2 8091C100          lds R24,193
 01E6 8061              ori R24,16
 01E8 8093C100          sts 193,R24
 01EC           ;                                                       break;
 01EC 1AC0              xjmp L25
 01EE           L34:
 01EE           ; 						case 99:	// 重启, 设置看门狗
 01EE           ; 							ReStart(ControlCmd.pam[0]);
 01EE 00910300          lds R16,_ControlCmd+3
 01F2 10910400          lds R17,_ControlCmd+3+1
 01F6 04DF              xcall _ReStart
 01F8           ;                                                       break;
 01F8 14C0              xjmp L25
 01FA           L24:
 01FA           ; 						default:
 01FA           ; 							SetBeepWarning();
 01FA 0E940000          xcall _SetBeepWarning
 01FE           ;                                                       Uart0ReUnable;
 01FE 8091C100          lds R24,193
 0202 8F7E              andi R24,239
 0204 8093C100          sts 193,R24
 0208           ;                                                       uart_Printf("#%d CommandUnknown $   2\r\n",ControlCmd.cmdIdx);
 0208 20910100          lds R18,_ControlCmd+1
 020C 30910200          lds R19,_ControlCmd+1+1
 0210 00E0              ldi R16,<L36
 0212 10E0              ldi R17,>L36
 0214 0E940000          xcall _uart_Printf
 0218           ;                                                       Uart0ReEnable;
 0218 8091C100          lds R24,193
 021C 8061              ori R24,16
 021E 8093C100          sts 193,R24
 0222           ;                                                       break;
 0222           L25:
 0222           ; 					}
 0222           ; 					if(cmdState)
 0222 20900000          lds R2,L6
 0226 2220              tst R2
 0228 A9F0              breq L39
 022A           X15:
 022A           ; 					{
 022A           ; 						SetBeepWarning();
 022A 0E940000          xcall _SetBeepWarning
 022E           ;                                               Uart0ReUnable;
 022E 8091C100          lds R24,193
 0232 8F7E              andi R24,239
 0234 8093C100          sts 193,R24
 0238           ;                                               uart_Printf("#%4d CommandError $   1\r\n",ControlCmd.cmdIdx);
 0238 20910100          lds R18,_ControlCmd+1
 023C 30910200          lds R19,_ControlCmd+1+1
 0240 00E0              ldi R16,<L41
 0242 10E0              ldi R17,>L41
 0244 0E940000          xcall _uart_Printf
 0248           ;                                               Uart0ReEnable;
 0248 8091C100          lds R24,193
 024C 8061              ori R24,16
 024E 8093C100          sts 193,R24
 0252           ;                                       }
 0252 14C0              xjmp L40
 0254           L39:
 0254           ; 					else
 0254           ; 					{
 0254           ; 						SetBeepAck();
 0254 0E940000          xcall _SetBeepAck
 0258           ;                                               Uart0ReUnable;
 0258 8091C100          lds R24,193
 025C 8F7E              andi R24,239
 025E 8093C100          sts 193,R24
 0262           ;                                               uart_Printf("#%4d CommandDone $   3\r\n",ControlCmd.cmdIdx);
 0262 20910100          lds R18,_ControlCmd+1
 0266 30910200          lds R19,_ControlCmd+1+1
 026A 00E0              ldi R16,<L43
 026C 10E0              ldi R17,>L43
 026E 0E940000          xcall _uart_Printf
 0272           ;                                               Uart0ReEnable;
 0272 8091C100          lds R24,193
 0276 8061              ori R24,16
 0278 8093C100          sts 193,R24
 027C           ;                                       }
 027C           L40:
 027C           ; 					CommandClear();
 027C 0E940000          xcall _CommandClear
 0280           ;                               }
 0280           ;                               break;
 0280 0C94050F          xjmp L17
 0284           L45:
 0284           ; 			case 0:	
 0284           ; 				if(ControlCmd.cmdState==2)
 0284 80910000          lds R24,_ControlCmd
 0288 8230              cpi R24,2
 028A 11F0              breq X167
 028C 0C94050F          xjmp L17
 0290           X167:
 0290           X16:
 0290           ; 				{
 0290           ; 					cmdState = 0;
 0290 2224              clr R2
 0292 20920000          sts L6,R2
 0296           ;                                       Uart0ReUnable;
 0296 8091C100          lds R24,193
 029A 8F7E              andi R24,239
 029C 8093C100          sts 193,R24
 02A0           ;                                       uart_Printf("#%4d CommandReceive $   0\r\n",ControlCmd.cmdIdx);
 02A0 20910100          lds R18,_ControlCmd+1
 02A4 30910200          lds R19,_ControlCmd+1+1
 02A8 00E0              ldi R16,<L22
 02AA 10E0              ldi R17,>L22
 02AC 0E940000          xcall _uart_Printf
 02B0           ;                                       Uart0ReEnable;
 02B0 8091C100          lds R24,193
 02B4 8061              ori R24,16
 02B6 8093C100          sts 193,R24
 02BA           ;                                       switch(ControlCmd.cmdIdx)
 02BA 20900100          lds R2,_ControlCmd+1
 02BE 30900200          lds R3,_ControlCmd+1+1
 02C2 2220              tst R2
 02C4 11F4              brne X17
 02C6 3320              tst R3
 02C8 49F1              breq L52
 02CA           X17:
 02CA C101              movw R24,R2
 02CC 8130              cpi R24,1
 02CE E0E0              ldi R30,0
 02D0 9E07              cpc R25,R30
 02D2 09F4              brne X168
 02D4 33C0              xjmp L56
 02D6           X168:
 02D6           X18:
 02D6 8230              cpi R24,2
 02D8 E0E0              ldi R30,0
 02DA 9E07              cpc R25,R30
 02DC 09F4              brne X169
 02DE 34C0              xjmp L57
 02E0           X169:
 02E0           X19:
 02E0 8330              cpi R24,3
 02E2 E0E0              ldi R30,0
 02E4 9E07              cpc R25,R30
 02E6 09F4              brne X170
 02E8 46C0              xjmp L64
 02EA           X170:
 02EA           X20:
 02EA 8A30              cpi R24,10
 02EC E0E0              ldi R30,0
 02EE 9E07              cpc R25,R30
 02F0 09F4              brne X171
 02F2 52C0              xjmp L66
 02F4           X171:
 02F4           X21:
 02F4 8B30              cpi R24,11
 02F6 E0E0              ldi R30,0
 02F8 9E07              cpc R25,R30
 02FA 09F4              brne X172
 02FC 69C0              xjmp L70
 02FE           X172:
 02FE           X22:
 02FE 8030              cpi R24,0
 0300 E0E0              ldi R30,0
 0302 9E07              cpc R25,R30
 0304 0CF4              brge X173
 0306 89C0              xjmp L49
 0308           X173:
 0308           X23:
 0308           L75:
 0308 80910100          lds R24,_ControlCmd+1
 030C 90910200          lds R25,_ControlCmd+1+1
 0310 8336              cpi R24,99
 0312 E0E0              ldi R30,0
 0314 9E07              cpc R25,R30
 0316 09F4              brne X174
 0318 7AC0              xjmp L72
 031A           X174:
 031A           X24:
 031A 7FC0              xjmp L49
 031C           L52:
 031C           ; 					{
 031C           ; 						case 0:		// 回显开关
 031C           ; 							if(ControlCmd.pam[0]==0)
 031C 20900300          lds R2,_ControlCmd+3
 0320 30900400          lds R3,_ControlCmd+3+1
 0324 2220              tst R2
 0326 31F4              brne L53
 0328 3320              tst R3
 032A 21F4              brne L53
 032C           X25:
 032C           ; 								EchoSW = 0;
 032C 2224              clr R2
 032E 20920200          sts _EchoSW,R2
 0332 87C0              xjmp L50
 0334           L53:
 0334           ; 							else
 0334           ; 								EchoSW = 1;
 0334 81E0              ldi R24,1
 0336 80930200          sts _EchoSW,R24
 033A           ;                                                       break;
 033A 83C0              xjmp L50
 033C           L56:
 033C           ; 						case 1:		// #0001 启动工作
 033C           ; 							StartWork();
 033C 0E94F60F          xcall _StartWork
 0340           ;                                                       cmdState = 0;
 0340 2224              clr R2
 0342 20920000          sts L6,R2
 0346           ;                                                       break;
 0346 7DC0              xjmp L50
 0348           L57:
 0348           ; 						case 2:		// #0002 设置工作进程
 0348           ; 							if(ControlCmd.pam[0] < 5 || ControlCmd.pam[0] == 9)
 0348 80910300          lds R24,_ControlCmd+3
 034C 90910400          lds R25,_ControlCmd+3+1
 0350 8530              cpi R24,5
 0352 E0E0              ldi R30,0
 0354 9E07              cpc R25,R30
 0356 20F0              brlo L62
 0358           X26:
 0358 8930              cpi R24,9
 035A E0E0              ldi R30,0
 035C 9E07              cpc R25,R30
 035E 39F4              brne L58
 0360           X27:
 0360           L62:
 0360           ; 							{
 0360           ; 								SetWorkStep(ControlCmd.pam[0]);
 0360 00910300          lds R16,_ControlCmd+3
 0364 10910400          lds R17,_ControlCmd+3+1
 0368 0E94560F          xcall _SetWorkStep
 036C           ;                                                       }
 036C 6AC0              xjmp L50
 036E           L58:
 036E           ; 							else
 036E           ; 								cmdState = 1;	// 设置参数错误
 036E 81E0              ldi R24,1
 0370 80930000          sts L6,R24
 0374           ;                                                       break;
 0374 66C0              xjmp L50
 0376           L64:
 0376           ; 						case 3:		// #0003 查询工作进程
 0376           ; 							Uart0ReUnable;
 0376 8091C100          lds R24,193
 037A 8F7E              andi R24,239
 037C 8093C100          sts 193,R24
 0380           ;                                                       uart_Printf("%s $   0 [Free]\r\n",strM0110);
 0380 20E0              ldi R18,<_strM0110
 0382 30E0              ldi R19,>_strM0110
 0384 00E0              ldi R16,<L65
 0386 10E0              ldi R17,>L65
 0388 0E940000          xcall _uart_Printf
 038C           ;                                                       Uart0ReEnable;
 038C 8091C100          lds R24,193
 0390 8061              ori R24,16
 0392 8093C100          sts 193,R24
 0396           ;                                                       break;
 0396 55C0              xjmp L50
 0398           L66:
 0398           ; 						case 10:	// #0010	开启片仓
 0398           ; 							if(CardStoreOpenLook == 0)
 0398 20900000          lds R2,_CardStoreOpenLook
 039C 2220              tst R2
 039E 39F4              brne L67
 03A0           X28:
 03A0           ; 								SetStoreDoorOpen(ControlCmd.pam[0]);
 03A0 00910300          lds R16,_ControlCmd+3
 03A4 10910400          lds R17,_ControlCmd+3+1
 03A8 0E940000          xcall _SetStoreDoorOpen
 03AC 4AC0              xjmp L50
 03AE           L67:
 03AE           ; 							else
 03AE           ; 							{
 03AE           ; 								Uart0ReUnable;
 03AE 8091C100          lds R24,193
 03B2 8F7E              andi R24,239
 03B4 8093C100          sts 193,R24
 03B8           ;                                                               uart_Printf("%s\r\n",strM0112);
 03B8 20E0              ldi R18,<_strM0112
 03BA 30E0              ldi R19,>_strM0112
 03BC 00E0              ldi R16,<L2
 03BE 10E0              ldi R17,>L2
 03C0 0E940000          xcall _uart_Printf
 03C4           ;                                                               Uart0ReEnable;
 03C4 8091C100          lds R24,193
 03C8 8061              ori R24,16
 03CA 8093C100          sts 193,R24
 03CE           ;                                                       }
 03CE           ;                                                       break;
 03CE 39C0              xjmp L50
 03D0           L70:
 03D0           ; 						case 11:	// #0011	读取片仓温湿度
 03D0           ; 							Uart0ReUnable;
 03D0 8091C100          lds R24,193
 03D4 8F7E              andi R24,239
 03D6 8093C100          sts 193,R24
 03DA           ;                                                       uart_Printf("%s $%4d $%4d\r\n", strM0111, GetStoreHumi(), GetStoreTemp());
 03DA 0E940000          xcall _GetStoreHumi
 03DE A02E              mov R10,R16
 03E0 0E940000          xcall _GetStoreTemp
 03E4 C02E              mov R12,R16
 03E6 2C2C              mov R2,R12
 03E8 3324              clr R3
 03EA 3B82              std y+3,R3
 03EC 2A82              std y+2,R2
 03EE 2A2C              mov R2,R10
 03F0 3324              clr R3
 03F2 3982              std y+1,R3
 03F4 2882              std y+0,R2
 03F6 20E0              ldi R18,<_strM0111
 03F8 30E0              ldi R19,>_strM0111
 03FA 00E0              ldi R16,<L71
 03FC 10E0              ldi R17,>L71
 03FE 0E940000          xcall _uart_Printf
 0402           ;                                                       Uart0ReEnable;
 0402 8091C100          lds R24,193
 0406 8061              ori R24,16
 0408 8093C100          sts 193,R24
 040C           ;                                                       break;
 040C 1AC0              xjmp L50
 040E           L72:
 040E           ; 						case 99:	// 重起, 设置看门狗
 040E           ; 							ReStart(ControlCmd.pam[0]);
 040E 00910300          lds R16,_ControlCmd+3
 0412 10910400          lds R17,_ControlCmd+3+1
 0416 F4DD              xcall _ReStart
 0418           ;                                                       break;
 0418 14C0              xjmp L50
 041A           L49:
 041A           ; 						default:
 041A           ; 							SetBeepWarning();
 041A 0E940000          xcall _SetBeepWarning
 041E           ;                                                       Uart0ReUnable;
 041E 8091C100          lds R24,193
 0422 8F7E              andi R24,239
 0424 8093C100          sts 193,R24
 0428           ;                                                       uart_Printf("#%d CommandUnknown $   2\r\n",ControlCmd.cmdIdx);
 0428 20910100          lds R18,_ControlCmd+1
 042C 30910200          lds R19,_ControlCmd+1+1
 0430 00E0              ldi R16,<L36
 0432 10E0              ldi R17,>L36
 0434 0E940000          xcall _uart_Printf
 0438           ;                                                       Uart0ReEnable;
 0438 8091C100          lds R24,193
 043C 8061              ori R24,16
 043E 8093C100          sts 193,R24
 0442           ;                                                       break;
 0442           L50:
 0442           ; 						}
 0442           ; 					if(cmdState)
 0442 20900000          lds R2,L6
 0446 2220              tst R2
 0448 A9F0              breq L76
 044A           X29:
 044A           ; 					{
 044A           ; 						SetBeepWarning();
 044A 0E940000          xcall _SetBeepWarning
 044E           ;                                               Uart0ReUnable;
 044E 8091C100          lds R24,193
 0452 8F7E              andi R24,239
 0454 8093C100          sts 193,R24
 0458           ;                                               uart_Printf("#%4d CommandError $   1\r\n",ControlCmd.cmdIdx);
 0458 20910100          lds R18,_ControlCmd+1
 045C 30910200          lds R19,_ControlCmd+1+1
 0460 00E0              ldi R16,<L41
 0462 10E0              ldi R17,>L41
 0464 0E940000          xcall _uart_Printf
 0468           ;                                               Uart0ReEnable;
 0468 8091C100          lds R24,193
 046C 8061              ori R24,16
 046E 8093C100          sts 193,R24
 0472           ;                                       }
 0472 14C0              xjmp L77
 0474           L76:
 0474           ; 					else
 0474           ; 					{
 0474           ; 						SetBeepAck();
 0474 0E940000          xcall _SetBeepAck
 0478           ;                                               Uart0ReUnable;
 0478 8091C100          lds R24,193
 047C 8F7E              andi R24,239
 047E 8093C100          sts 193,R24
 0482           ;                                               uart_Printf("#%4d CommandDone $   3\r\n",ControlCmd.cmdIdx);
 0482 20910100          lds R18,_ControlCmd+1
 0486 30910200          lds R19,_ControlCmd+1+1
 048A 00E0              ldi R16,<L43
 048C 10E0              ldi R17,>L43
 048E 0E940000          xcall _uart_Printf
 0492           ;                                               Uart0ReEnable;
 0492 8091C100          lds R24,193
 0496 8061              ori R24,16
 0498 8093C100          sts 193,R24
 049C           ;                                       }
 049C           L77:
 049C           ; 				//	if(ControlCmd.cmdIdx)
 049C           ; 						CommandClear();
 049C 0E940000          xcall _CommandClear
 04A0           ;                                       }
 04A0           ;                               break;
 04A0 0C94050F          xjmp L17
 04A4           L80:
 04A4           ; 		/************** 机械自检  ***************/
 04A4           ; 			case 1:		
 04A4           ; 				if(ControlCmd.cmdState==2)
 04A4 80910000          lds R24,_ControlCmd
 04A8 8230              cpi R24,2
 04AA 09F0              breq X175
 04AC D3C0              xjmp L81
 04AE           X175:
 04AE           X30:
 04AE           ; 				{
 04AE           ; 					cmdState = 0;
 04AE 2224              clr R2
 04B0 20920000          sts L6,R2
 04B4           ;                                       Uart0ReUnable;
 04B4 8091C100          lds R24,193
 04B8 8F7E              andi R24,239
 04BA 8093C100          sts 193,R24
 04BE           ;                                       uart_Printf("#%4d CommandReceive $   0\r\n",ControlCmd.cmdIdx);
 04BE 20910100          lds R18,_ControlCmd+1
 04C2 30910200          lds R19,_ControlCmd+1+1
 04C6 00E0              ldi R16,<L22
 04C8 10E0              ldi R17,>L22
 04CA 0E940000          xcall _uart_Printf
 04CE           ;                                       Uart0ReEnable;
 04CE 8091C100          lds R24,193
 04D2 8061              ori R24,16
 04D4 8093C100          sts 193,R24
 04D8           ;                                       switch(ControlCmd.cmdIdx)
 04D8 40910100          lds R20,_ControlCmd+1
 04DC 50910200          lds R21,_ControlCmd+1+1
 04E0 4130              cpi R20,1
 04E2 E0E0              ldi R30,0
 04E4 5E07              cpc R21,R30
 04E6 B9F0              breq L87
 04E8           X31:
 04E8 4330              cpi R20,3
 04EA E0E0              ldi R30,0
 04EC 5E07              cpc R21,R30
 04EE 41F1              breq L89
 04F0           X32:
 04F0 4530              cpi R20,5
 04F2 E0E0              ldi R30,0
 04F4 5E07              cpc R21,R30
 04F6 A9F1              breq L91
 04F8           X33:
 04F8 4130              cpi R20,1
 04FA E0E0              ldi R30,0
 04FC 5E07              cpc R21,R30
 04FE 0CF4              brge X176
 0500 66C0              xjmp L84
 0502           X176:
 0502           X34:
 0502           L98:
 0502 80910100          lds R24,_ControlCmd+1
 0506 90910200          lds R25,_ControlCmd+1+1
 050A 8336              cpi R24,99
 050C E0E0              ldi R30,0
 050E 9E07              cpc R25,R30
 0510 09F4              brne X177
 0512 57C0              xjmp L95
 0514           X177:
 0514           X35:
 0514 5CC0              xjmp L84
 0516           L87:
 0516           ; 					{
 0516           ; 						case 1:		// #0001 查询当前软件版本号
 0516           ; 							Uart0ReUnable;
 0516 8091C100          lds R24,193
 051A 8F7E              andi R24,239
 051C 8093C100          sts 193,R24
 0520           ;                                                       uart_Printf("%s $%s [MechineCheck]\r\n", strM0100, strVersion);
 0520 80E0              ldi R24,<_strVersion
 0522 90E0              ldi R25,>_strVersion
 0524 9983              std y+1,R25
 0526 8883              std y+0,R24
 0528 20E0              ldi R18,<_strM0100
 052A 30E0              ldi R19,>_strM0100
 052C 00E0              ldi R16,<L88
 052E 10E0              ldi R17,>L88
 0530 0E940000          xcall _uart_Printf
 0534           ;                                                       Uart0ReEnable;
 0534 8091C100          lds R24,193
 0538 8061              ori R24,16
 053A 8093C100          sts 193,R24
 053E           ;                                                       break;
 053E 5BC0              xjmp L85
 0540           L89:
 0540           ; 						case 3:		// #0003 查询工作进程
 0540           ; 							Uart0ReUnable;
 0540 8091C100          lds R24,193
 0544 8F7E              andi R24,239
 0546 8093C100          sts 193,R24
 054A           ;                                                       uart_Printf("%s $   1 [MechineCheck]\r\n",strM0110);
 054A 20E0              ldi R18,<_strM0110
 054C 30E0              ldi R19,>_strM0110
 054E 00E0              ldi R16,<L90
 0550 10E0              ldi R17,>L90
 0552 0E940000          xcall _uart_Printf
 0556           ;                                                       Uart0ReEnable;
 0556 8091C100          lds R24,193
 055A 8061              ori R24,16
 055C 8093C100          sts 193,R24
 0560           ;                                                       break;
 0560 4AC0              xjmp L85
 0562           L91:
 0562           ; 						case 5:
 0562           ; 							if(ControlCmd.pam[0] == 0)
 0562 20900300          lds R2,_ControlCmd+3
 0566 30900400          lds R3,_ControlCmd+3+1
 056A 2220              tst R2
 056C B1F4              brne L92
 056E 3320              tst R3
 0570 A1F4              brne L92
 0572           X36:
 0572           ; 							{
 0572           ; 								workSwitch = 1;
 0572 81E0              ldi R24,1
 0574 80930100          sts _workSwitch,R24
 0578           ;                                                               Uart0ReUnable;
 0578 8091C100          lds R24,193
 057C 8F7E              andi R24,239
 057E 8093C100          sts 193,R24
 0582           ;                                                               uart_Printf("%s\r\n",strM0105);
 0582 20E0              ldi R18,<_strM0105
 0584 30E0              ldi R19,>_strM0105
 0586 00E0              ldi R16,<L2
 0588 10E0              ldi R17,>L2
 058A 0E940000          xcall _uart_Printf
 058E           ;                                                               Uart0ReEnable;
 058E 8091C100          lds R24,193
 0592 8061              ori R24,16
 0594 8093C100          sts 193,R24
 0598           ;                                                       }
 0598 2EC0              xjmp L85
 059A           L92:
 059A           ; 							else
 059A           ; 							{
 059A           ; 								workSwitch = 0;
 059A 2224              clr R2
 059C 20920100          sts _workSwitch,R2
 05A0           ;                                                               Uart0ReUnable;
 05A0 8091C100          lds R24,193
 05A4 8F7E              andi R24,239
 05A6 8093C100          sts 193,R24
 05AA           ;                                                               uart_Printf("%s\r\n",strM0106);
 05AA 20E0              ldi R18,<_strM0106
 05AC 30E0              ldi R19,>_strM0106
 05AE 00E0              ldi R16,<L2
 05B0 10E0              ldi R17,>L2
 05B2 0E940000          xcall _uart_Printf
 05B6           ;                                                               Uart0ReEnable;
 05B6 8091C100          lds R24,193
 05BA 8061              ori R24,16
 05BC 8093C100          sts 193,R24
 05C0           ;                                                       }
 05C0           ;                                                       break;
 05C0 1AC0              xjmp L85
 05C2           L95:
 05C2           ; 						case 99:	// 重启, 设置看门狗
 05C2           ; 							ReStart(ControlCmd.pam[0]);
 05C2 00910300          lds R16,_ControlCmd+3
 05C6 10910400          lds R17,_ControlCmd+3+1
 05CA 1ADD              xcall _ReStart
 05CC           ;                                                       break;
 05CC 14C0              xjmp L85
 05CE           L84:
 05CE           ; 						default:
 05CE           ; 							SetBeepWarning();
 05CE 0E940000          xcall _SetBeepWarning
 05D2           ;                                                       Uart0ReUnable;
 05D2 8091C100          lds R24,193
 05D6 8F7E              andi R24,239
 05D8 8093C100          sts 193,R24
 05DC           ;                                                       uart_Printf("#%d CommandUnknown $   2\r\n",ControlCmd.cmdIdx);
 05DC 20910100          lds R18,_ControlCmd+1
 05E0 30910200          lds R19,_ControlCmd+1+1
 05E4 00E0              ldi R16,<L36
 05E6 10E0              ldi R17,>L36
 05E8 0E940000          xcall _uart_Printf
 05EC           ;                                                       Uart0ReEnable;
 05EC 8091C100          lds R24,193
 05F0 8061              ori R24,16
 05F2 8093C100          sts 193,R24
 05F6           ;                                                       break;
 05F6           L85:
 05F6           ; 						}
 05F6           ; 					if(cmdState){
 05F6 20900000          lds R2,L6
 05FA 2220              tst R2
 05FC A9F0              breq L99
 05FE           X37:
 05FE           ; 						SetBeepWarning();
 05FE 0E940000          xcall _SetBeepWarning
 0602           ;                                               Uart0ReUnable;
 0602 8091C100          lds R24,193
 0606 8F7E              andi R24,239
 0608 8093C100          sts 193,R24
 060C           ;                                               uart_Printf("#%4d CommandError $   1\r\n",ControlCmd.cmdIdx);
 060C 20910100          lds R18,_ControlCmd+1
 0610 30910200          lds R19,_ControlCmd+1+1
 0614 00E0              ldi R16,<L41
 0616 10E0              ldi R17,>L41
 0618 0E940000          xcall _uart_Printf
 061C           ;                                               Uart0ReEnable;
 061C 8091C100          lds R24,193
 0620 8061              ori R24,16
 0622 8093C100          sts 193,R24
 0626           ;                                               }
 0626 14C0              xjmp L100
 0628           L99:
 0628           ; 					else{
 0628           ; 						SetBeepAck();
 0628 0E940000          xcall _SetBeepAck
 062C           ;                                               Uart0ReUnable;
 062C 8091C100          lds R24,193
 0630 8F7E              andi R24,239
 0632 8093C100          sts 193,R24
 0636           ;                                               uart_Printf("#%4d CommandDone $   3\r\n",ControlCmd.cmdIdx);
 0636 20910100          lds R18,_ControlCmd+1
 063A 30910200          lds R19,_ControlCmd+1+1
 063E 00E0              ldi R16,<L43
 0640 10E0              ldi R17,>L43
 0642 0E940000          xcall _uart_Printf
 0646           ;                                               Uart0ReEnable;
 0646 8091C100          lds R24,193
 064A 8061              ori R24,16
 064C 8093C100          sts 193,R24
 0650           ;                                               }
 0650           L100:
 0650           ; 				//	if(ControlCmd.cmdIdx)
 0650           ; 						CommandClear();
 0650 0E940000          xcall _CommandClear
 0654           ;                                       }
 0654           L81:
 0654           ; 				if(workSwitch)
 0654 20900100          lds R2,_workSwitch
 0658 2220              tst R2
 065A 11F4              brne X178
 065C 0C94050F          xjmp L17
 0660           X178:
 0660           X38:
 0660           ; 				{
 0660           ; 					if(MachinePositionInit() == 1)
 0660 0E940000          xcall _MachinePositionInit
 0664 402F              mov R20,R16
 0666 0130              cpi R16,1
 0668 11F0              breq X179
 066A 0C94050F          xjmp L17
 066E           X179:
 066E           X39:
 066E           ; 					{
 066E           ; 						SetWorkStep(0);
 066E 0027              clr R16
 0670 0E94560F          xcall _SetWorkStep
 0674           ;                                       }
 0674           ;                               }
 0674           ;                               break;
 0674 0C94050F          xjmp L17
 0678           L107:
 0678           ; 		/*************** 液路自检 ***************/
 0678           ; 			case 2:		
 0678           ; 				if(ControlCmd.cmdState==2)
 0678 80910000          lds R24,_ControlCmd
 067C 8230              cpi R24,2
 067E 09F0              breq X180
 0680 D3C0              xjmp L108
 0682           X180:
 0682           X40:
 0682           ; 				{
 0682           ; 					cmdState = 0;
 0682 2224              clr R2
 0684 20920000          sts L6,R2
 0688           ;                                       Uart0ReUnable;
 0688 8091C100          lds R24,193
 068C 8F7E              andi R24,239
 068E 8093C100          sts 193,R24
 0692           ;                                       uart_Printf("#%4d CommandReceive $   0\r\n",ControlCmd.cmdIdx);
 0692 20910100          lds R18,_ControlCmd+1
 0696 30910200          lds R19,_ControlCmd+1+1
 069A 00E0              ldi R16,<L22
 069C 10E0              ldi R17,>L22
 069E 0E940000          xcall _uart_Printf
 06A2           ;                                       Uart0ReEnable;
 06A2 8091C100          lds R24,193
 06A6 8061              ori R24,16
 06A8 8093C100          sts 193,R24
 06AC           ;                                       switch(ControlCmd.cmdIdx)
 06AC 40910100          lds R20,_ControlCmd+1
 06B0 50910200          lds R21,_ControlCmd+1+1
 06B4 4130              cpi R20,1
 06B6 E0E0              ldi R30,0
 06B8 5E07              cpc R21,R30
 06BA B9F0              breq L114
 06BC           X41:
 06BC 4330              cpi R20,3
 06BE E0E0              ldi R30,0
 06C0 5E07              cpc R21,R30
 06C2 41F1              breq L116
 06C4           X42:
 06C4 4530              cpi R20,5
 06C6 E0E0              ldi R30,0
 06C8 5E07              cpc R21,R30
 06CA A9F1              breq L118
 06CC           X43:
 06CC 4130              cpi R20,1
 06CE E0E0              ldi R30,0
 06D0 5E07              cpc R21,R30
 06D2 0CF4              brge X181
 06D4 66C0              xjmp L111
 06D6           X181:
 06D6           X44:
 06D6           L125:
 06D6 80910100          lds R24,_ControlCmd+1
 06DA 90910200          lds R25,_ControlCmd+1+1
 06DE 8336              cpi R24,99
 06E0 E0E0              ldi R30,0
 06E2 9E07              cpc R25,R30
 06E4 09F4              brne X182
 06E6 57C0              xjmp L122
 06E8           X182:
 06E8           X45:
 06E8 5CC0              xjmp L111
 06EA           L114:
 06EA           ; 					{
 06EA           ; 						case 1:		// #0001 查询当前软件版本号
 06EA           ; 							Uart0ReUnable;
 06EA 8091C100          lds R24,193
 06EE 8F7E              andi R24,239
 06F0 8093C100          sts 193,R24
 06F4           ;                                                       uart_Printf("%s $%s [LiquidCheck]\r\n", strM0100, strVersion);
 06F4 80E0              ldi R24,<_strVersion
 06F6 90E0              ldi R25,>_strVersion
 06F8 9983              std y+1,R25
 06FA 8883              std y+0,R24
 06FC 20E0              ldi R18,<_strM0100
 06FE 30E0              ldi R19,>_strM0100
 0700 00E0              ldi R16,<L115
 0702 10E0              ldi R17,>L115
 0704 0E940000          xcall _uart_Printf
 0708           ;                                                       Uart0ReEnable;
 0708 8091C100          lds R24,193
 070C 8061              ori R24,16
 070E 8093C100          sts 193,R24
 0712           ;                                                       break;
 0712 5BC0              xjmp L112
 0714           L116:
 0714           ; 						case 3:		// #0003 查询工作进程
 0714           ; 							Uart0ReUnable;
 0714 8091C100          lds R24,193
 0718 8F7E              andi R24,239
 071A 8093C100          sts 193,R24
 071E           ;                                                       uart_Printf("%s $   2 [LiquidCheck]\r\n",strM0110);
 071E 20E0              ldi R18,<_strM0110
 0720 30E0              ldi R19,>_strM0110
 0722 00E0              ldi R16,<L117
 0724 10E0              ldi R17,>L117
 0726 0E940000          xcall _uart_Printf
 072A           ;                                                       Uart0ReEnable;
 072A 8091C100          lds R24,193
 072E 8061              ori R24,16
 0730 8093C100          sts 193,R24
 0734           ;                                                       break;
 0734 4AC0              xjmp L112
 0736           L118:
 0736           ; 						case 5:
 0736           ; 							if(ControlCmd.pam[0] == 0)
 0736 20900300          lds R2,_ControlCmd+3
 073A 30900400          lds R3,_ControlCmd+3+1
 073E 2220              tst R2
 0740 B1F4              brne L119
 0742 3320              tst R3
 0744 A1F4              brne L119
 0746           X46:
 0746           ; 							{
 0746           ; 								workSwitch = 1;
 0746 81E0              ldi R24,1
 0748 80930100          sts _workSwitch,R24
 074C           ;                                                               Uart0ReUnable;
 074C 8091C100          lds R24,193
 0750 8F7E              andi R24,239
 0752 8093C100          sts 193,R24
 0756           ;                                                               uart_Printf("%s\r\n",strM0105);
 0756 20E0              ldi R18,<_strM0105
 0758 30E0              ldi R19,>_strM0105
 075A 00E0              ldi R16,<L2
 075C 10E0              ldi R17,>L2
 075E 0E940000          xcall _uart_Printf
 0762           ;                                                               Uart0ReEnable;
 0762 8091C100          lds R24,193
 0766 8061              ori R24,16
 0768 8093C100          sts 193,R24
 076C           ;                                                       }
 076C 2EC0              xjmp L112
 076E           L119:
 076E           ; 							else
 076E           ; 							{
 076E           ; 								workSwitch = 0;
 076E 2224              clr R2
 0770 20920100          sts _workSwitch,R2
 0774           ;                                                               Uart0ReUnable;
 0774 8091C100          lds R24,193
 0778 8F7E              andi R24,239
 077A 8093C100          sts 193,R24
 077E           ;                                                               uart_Printf("%s\r\n",strM0106);
 077E 20E0              ldi R18,<_strM0106
 0780 30E0              ldi R19,>_strM0106
 0782 00E0              ldi R16,<L2
 0784 10E0              ldi R17,>L2
 0786 0E940000          xcall _uart_Printf
 078A           ;                                                               Uart0ReEnable;
 078A 8091C100          lds R24,193
 078E 8061              ori R24,16
 0790 8093C100          sts 193,R24
 0794           ;                                                       }
 0794           ;                                                       break;
 0794 1AC0              xjmp L112
 0796           L122:
 0796           ; 						case 99:	// 重起, 设置看门狗
 0796           ; 							ReStart(ControlCmd.pam[0]);
 0796 00910300          lds R16,_ControlCmd+3
 079A 10910400          lds R17,_ControlCmd+3+1
 079E 30DC              xcall _ReStart
 07A0           ;                                                       break;
 07A0 14C0              xjmp L112
 07A2           L111:
 07A2           ; 						default:
 07A2           ; 							SetBeepWarning();
 07A2 0E940000          xcall _SetBeepWarning
 07A6           ;                                                       Uart0ReUnable;
 07A6 8091C100          lds R24,193
 07AA 8F7E              andi R24,239
 07AC 8093C100          sts 193,R24
 07B0           ;                                                       uart_Printf("#%d CommandUnknown $   2\r\n",ControlCmd.cmdIdx);
 07B0 20910100          lds R18,_ControlCmd+1
 07B4 30910200          lds R19,_ControlCmd+1+1
 07B8 00E0              ldi R16,<L36
 07BA 10E0              ldi R17,>L36
 07BC 0E940000          xcall _uart_Printf
 07C0           ;                                                       Uart0ReEnable;
 07C0 8091C100          lds R24,193
 07C4 8061              ori R24,16
 07C6 8093C100          sts 193,R24
 07CA           ;                                                       break;
 07CA           L112:
 07CA           ; 						}
 07CA           ; 					if(cmdState){
 07CA 20900000          lds R2,L6
 07CE 2220              tst R2
 07D0 A9F0              breq L126
 07D2           X47:
 07D2           ; 						SetBeepWarning();
 07D2 0E940000          xcall _SetBeepWarning
 07D6           ;                                               Uart0ReUnable;
 07D6 8091C100          lds R24,193
 07DA 8F7E              andi R24,239
 07DC 8093C100          sts 193,R24
 07E0           ;                                               uart_Printf("#%4d CommandError $   1\r\n",ControlCmd.cmdIdx);
 07E0 20910100          lds R18,_ControlCmd+1
 07E4 30910200          lds R19,_ControlCmd+1+1
 07E8 00E0              ldi R16,<L41
 07EA 10E0              ldi R17,>L41
 07EC 0E940000          xcall _uart_Printf
 07F0           ;                                               Uart0ReEnable;
 07F0 8091C100          lds R24,193
 07F4 8061              ori R24,16
 07F6 8093C100          sts 193,R24
 07FA           ;                                               }
 07FA 14C0              xjmp L127
 07FC           L126:
 07FC           ; 					else{
 07FC           ; 						SetBeepAck();
 07FC 0E940000          xcall _SetBeepAck
 0800           ;                                               Uart0ReUnable;
 0800 8091C100          lds R24,193
 0804 8F7E              andi R24,239
 0806 8093C100          sts 193,R24
 080A           ;                                               uart_Printf("#%4d CommandDone $   3\r\n",ControlCmd.cmdIdx);
 080A 20910100          lds R18,_ControlCmd+1
 080E 30910200          lds R19,_ControlCmd+1+1
 0812 00E0              ldi R16,<L43
 0814 10E0              ldi R17,>L43
 0816 0E940000          xcall _uart_Printf
 081A           ;                                               Uart0ReEnable;
 081A 8091C100          lds R24,193
 081E 8061              ori R24,16
 0820 8093C100          sts 193,R24
 0824           ;                                               }
 0824           L127:
 0824           ; 				//	if(ControlCmd.cmdIdx)
 0824           ; 						CommandClear();
 0824 0E940000          xcall _CommandClear
 0828           ;                                       }
 0828           L108:
 0828           ; 				if(workSwitch)
 0828 20900100          lds R2,_workSwitch
 082C 2220              tst R2
 082E 11F4              brne X183
 0830 0C94050F          xjmp L17
 0834           X183:
 0834           X48:
 0834           ; 				{
 0834           ; 					if(DiluteStartCheck(0) == 1)	// 函数返回1表示处理完毕
 0834 0027              clr R16
 0836 1127              clr R17
 0838 0E940000          xcall _DiluteStartCheck
 083C 402F              mov R20,R16
 083E 0130              cpi R16,1
 0840 11F0              breq X184
 0842 0C94050F          xjmp L17
 0846           X184:
 0846           X49:
 0846           ; 					{
 0846           ; 						SetWorkStep(0);
 0846 0027              clr R16
 0848 0E94560F          xcall _SetWorkStep
 084C           ;                                       }
 084C           ;                               }
 084C           ;                               break;
 084C 0C94050F          xjmp L17
 0850           L134:
 0850           ; 		/************ 正常测试 *************/
 0850           ; 			case 3:		
 0850           ; 				if(ControlCmd.cmdState==2)
 0850 80910000          lds R24,_ControlCmd
 0854 8230              cpi R24,2
 0856 09F0              breq X185
 0858 F0C4              xjmp L135
 085A           X185:
 085A           X50:
 085A           ; 				{
 085A           ; 					cmdState = 0;
 085A 2224              clr R2
 085C 20920000          sts L6,R2
 0860           ;                                       Uart0ReUnable;
 0860 8091C100          lds R24,193
 0864 8F7E              andi R24,239
 0866 8093C100          sts 193,R24
 086A           ;                                       uart_Printf("#%4d CommandReceive $   0\r\n",ControlCmd.cmdIdx);
 086A 20910100          lds R18,_ControlCmd+1
 086E 30910200          lds R19,_ControlCmd+1+1
 0872 00E0              ldi R16,<L22
 0874 10E0              ldi R17,>L22
 0876 0E940000          xcall _uart_Printf
 087A           ;                                       Uart0ReEnable;
 087A 8091C100          lds R24,193
 087E 8061              ori R24,16
 0880 8093C100          sts 193,R24
 0884           ;                                       switch(ControlCmd.cmdIdx)
 0884 40910100          lds R20,_ControlCmd+1
 0888 50910200          lds R21,_ControlCmd+1+1
 088C 4A3E              cpi R20,234
 088E EBE0              ldi R30,11
 0890 5E07              cpc R21,R30
 0892 09F4              brne X186
 0894 B7C2              xjmp L244
 0896           X186:
 0896           X51:
 0896 4B3E              cpi R20,235
 0898 EBE0              ldi R30,11
 089A 5E07              cpc R21,R30
 089C 09F4              brne X187
 089E B5C2              xjmp L245
 08A0           X187:
 08A0           X52:
 08A0 4D3E              cpi R20,237
 08A2 EBE0              ldi R30,11
 08A4 5E07              cpc R21,R30
 08A6 09F4              brne X188
 08A8 B3C2              xjmp L246
 08AA           X188:
 08AA           X53:
 08AA 4E3E              cpi R20,238
 08AC EBE0              ldi R30,11
 08AE 5E07              cpc R21,R30
 08B0 09F4              brne X189
 08B2 E7C2              xjmp L252
 08B4           X189:
 08B4           X54:
 08B4 4F3E              cpi R20,239
 08B6 EBE0              ldi R30,11
 08B8 5E07              cpc R21,R30
 08BA 09F4              brne X190
 08BC E5C2              xjmp L253
 08BE           X190:
 08BE           X55:
 08BE 403F              cpi R20,240
 08C0 EBE0              ldi R30,11
 08C2 5E07              cpc R21,R30
 08C4 09F4              brne X191
 08C6 E7C2              xjmp L255
 08C8           X191:
 08C8           X56:
 08C8 443F              cpi R20,244
 08CA EBE0              ldi R30,11
 08CC 5E07              cpc R21,R30
 08CE 09F4              brne X192
 08D0 E5C2              xjmp L256
 08D2           X192:
 08D2           X57:
 08D2 453F              cpi R20,245
 08D4 EBE0              ldi R30,11
 08D6 5E07              cpc R21,R30
 08D8 09F4              brne X193
 08DA 50C3              xjmp L268
 08DC           X193:
 08DC           X58:
 08DC 85EF              ldi R24,3061
 08DE 9BE0              ldi R25,11
 08E0 8417              cp R24,R20
 08E2 9507              cpc R25,R21
 08E4 0CF4              brge X194
 08E6 48C0              xjmp L305
 08E8           X194:
 08E8           X59:
 08E8           L304:
 08E8 40910100          lds R20,_ControlCmd+1
 08EC 50910200          lds R21,_ControlCmd+1+1
 08F0 4336              cpi R20,99
 08F2 E0E0              ldi R30,0
 08F4 5E07              cpc R21,R30
 08F6 09F4              brne X195
 08F8 30C1              xjmp L162
 08FA           X195:
 08FA           X60:
 08FA 83E6              ldi R24,99
 08FC 90E0              ldi R25,0
 08FE 8417              cp R24,R20
 0900 9507              cpc R25,R21
 0902 F4F0              brlt L307
 0904           X61:
 0904           L306:
 0904 40910100          lds R20,_ControlCmd+1
 0908 50910200          lds R21,_ControlCmd+1+1
 090C 4130              cpi R20,1
 090E E0E0              ldi R30,0
 0910 5E07              cpc R21,R30
 0912 09F4              brne X196
 0914 58C0              xjmp L141
 0916           X196:
 0916           X62:
 0916 4330              cpi R20,3
 0918 E0E0              ldi R30,0
 091A 5E07              cpc R21,R30
 091C 09F4              brne X197
 091E 68C0              xjmp L143
 0920           X197:
 0920           X63:
 0920 4430              cpi R20,4
 0922 E0E0              ldi R30,0
 0924 5E07              cpc R21,R30
 0926 09F4              brne X198
 0928 ACC0              xjmp L151
 092A           X198:
 092A           X64:
 092A 4530              cpi R20,5
 092C E0E0              ldi R30,0
 092E 5E07              cpc R21,R30
 0930 09F4              brne X199
 0932 C1C0              xjmp L154
 0934           X199:
 0934           X65:
 0934 4A30              cpi R20,10
 0936 E0E0              ldi R30,0
 0938 5E07              cpc R21,R30
 093A 09F4              brne X200
 093C F2C0              xjmp L158
 093E           X200:
 093E           X66:
 093E 3AC4              xjmp L138
 0940           L307:
 0940 40910100          lds R20,_ControlCmd+1
 0944 50910200          lds R21,_ControlCmd+1+1
 0948 493B              cpi R20,185
 094A EBE0              ldi R30,11
 094C 5E07              cpc R21,R30
 094E 0CF4              brge X201
 0950 31C4              xjmp L138
 0952           X201:
 0952           X67:
 0952 86ED              ldi R24,3030
 0954 9BE0              ldi R25,11
 0956 8417              cp R24,R20
 0958 9507              cpc R25,R21
 095A 0CF4              brge X202
 095C 2BC4              xjmp L138
 095E           X202:
 095E           X68:
 095E 80E0              ldi R24,<L308
 0960 90E0              ldi R25,>L308
 0962 FA01              movw R30,R20
 0964 E95B              subi R30,185
 0966 FB40              sbci R31,11
 0968 EE0F              lsl R30
 096A FF1F              rol R31
 096C E80F              add R30,R24
 096E F91F              adc R31,R25
 0970 2790              elpm R2,Z+
 0972 3690              elpm R3,Z
 0974 F101              movw R30,R2
 0976 0994               ijmp
 0978           L305:
 0978 40910100          lds R20,_ControlCmd+1
 097C 50910200          lds R21,_ControlCmd+1+1
 0980 4A3F              cpi R20,250
 0982 ECE0              ldi R30,12
 0984 5E07              cpc R21,R30
 0986 09F4              brne X203
 0988 7BC3              xjmp L285
 098A           X203:
 098A           X69:
 098A 8AEF              ldi R24,3322
 098C 9CE0              ldi R25,12
 098E 8417              cp R24,R20
 0990 9507              cpc R25,R21
 0992 7CF0              brlt L310
 0994           X70:
 0994           L309:
 0994 40910100          lds R20,_ControlCmd+1
 0998 50910200          lds R21,_ControlCmd+1+1
 099C 4332              cpi R20,35
 099E ECE0              ldi R30,12
 09A0 5E07              cpc R21,R30
 09A2 09F4              brne X204
 09A4 5BC3              xjmp L279
 09A6           X204:
 09A6           X71:
 09A6 4432              cpi R20,36
 09A8 ECE0              ldi R30,12
 09AA 5E07              cpc R21,R30
 09AC 09F4              brne X205
 09AE 5DC3              xjmp L281
 09B0           X205:
 09B0           X72:
 09B0 01C4              xjmp L138
 09B2           L310:
 09B2 80910100          lds R24,_ControlCmd+1
 09B6 90910200          lds R25,_ControlCmd+1+1
 09BA 8530              cpi R24,5
 09BC EDE0              ldi R30,13
 09BE 9E07              cpc R25,R30
 09C0 09F4              brne X206
 09C2 CEC3              xjmp L297
 09C4           X206:
 09C4           X73:
 09C4 F7C3              xjmp L138
 09C6           L141:
 09C6           ; 					{
 09C6           ; 						case 1:		// #0001 查询当前软件版本号
 09C6           ; 							Uart0ReUnable;
 09C6 8091C100          lds R24,193
 09CA 8F7E              andi R24,239
 09CC 8093C100          sts 193,R24
 09D0           ;                                                       uart_Printf("%s $%s [Test/Sleep]\r\n", strM0100, strVersion);
 09D0 80E0              ldi R24,<_strVersion
 09D2 90E0              ldi R25,>_strVersion
 09D4 9983              std y+1,R25
 09D6 8883              std y+0,R24
 09D8 20E0              ldi R18,<_strM0100
 09DA 30E0              ldi R19,>_strM0100
 09DC 00E0              ldi R16,<L142
 09DE 10E0              ldi R17,>L142
 09E0 0E940000          xcall _uart_Printf
 09E4           ;                                                       Uart0ReEnable;
 09E4 8091C100          lds R24,193
 09E8 8061              ori R24,16
 09EA 8093C100          sts 193,R24
 09EE           ;                                                       break;
 09EE F6C3              xjmp L139
 09F0           L143:
 09F0           ; 						case 3:		// #0003 查询工作进程
 09F0           ; 							Uart0ReUnable;
 09F0 8091C100          lds R24,193
 09F4 8F7E              andi R24,239
 09F6 8093C100          sts 193,R24
 09FA           ;                                                       if(JumpMode == 2)
 09FA 80910000          lds R24,_JumpMode
 09FE 8230              cpi R24,2
 0A00 39F4              brne L144
 0A02           X74:
 0A02           ; 								uart_Printf("%s $   5 [Sleep]\r\n",strM0110);
 0A02 20E0              ldi R18,<_strM0110
 0A04 30E0              ldi R19,>_strM0110
 0A06 00E0              ldi R16,<L146
 0A08 10E0              ldi R17,>L146
 0A0A 0E940000          xcall _uart_Printf
 0A0E 06C0              xjmp L145
 0A10           L144:
 0A10           ; 							else
 0A10           ; 								uart_Printf("%s $   3 [Test]\r\n",strM0110);
 0A10 20E0              ldi R18,<_strM0110
 0A12 30E0              ldi R19,>_strM0110
 0A14 00E0              ldi R16,<L147
 0A16 10E0              ldi R17,>L147
 0A18 0E940000          xcall _uart_Printf
 0A1C           L145:
 0A1C           ; 							Uart0ReEnable;
 0A1C 8091C100          lds R24,193
 0A20 8061              ori R24,16
 0A22 8093C100          sts 193,R24
 0A26           ;                                                       if(taskSate >= 2)
 0A26 80910100          lds R24,L7
 0A2A 8230              cpi R24,2
 0A2C 88F0              brlo L148
 0A2E           X75:
 0A2E           ; 							{
 0A2E           ; 								Uart0ReUnable;
 0A2E 8091C100          lds R24,193
 0A32 8F7E              andi R24,239
 0A34 8093C100          sts 193,R24
 0A38           ;                                                               uart_Printf("%s $   0 [Free]\r\n",strM3120);
 0A38 20E0              ldi R18,<_strM3120
 0A3A 30E0              ldi R19,>_strM3120
 0A3C 00E0              ldi R16,<L65
 0A3E 10E0              ldi R17,>L65
 0A40 0E940000          xcall _uart_Printf
 0A44           ;                                                               Uart0ReEnable;
 0A44 8091C100          lds R24,193
 0A48 8061              ori R24,16
 0A4A 8093C100          sts 193,R24
 0A4E           ;                                                       }
 0A4E C6C3              xjmp L139
 0A50           L148:
 0A50           ; 							else
 0A50           ; 							{
 0A50           ; 								Uart0ReUnable;
 0A50 8091C100          lds R24,193
 0A54 8F7E              andi R24,239
 0A56 8093C100          sts 193,R24
 0A5A           ;                                                               uart_Printf("%s $   1 [Busy]\r\n",strM3120);
 0A5A 20E0              ldi R18,<_strM3120
 0A5C 30E0              ldi R19,>_strM3120
 0A5E 00E0              ldi R16,<L150
 0A60 10E0              ldi R17,>L150
 0A62 0E940000          xcall _uart_Printf
 0A66           ;                                                               //DiluteProcess 函数
 0A66           ;                                                               printf_DiluteProcess_StepState();
 0A66 0E940000          xcall _printf_DiluteProcess_StepState
 0A6A           ;                                                               //CardStoreProcess 函数
 0A6A           ;                                                               printf_CardstoreProcess_StepState();
 0A6A 0E940000          xcall _printf_CardstoreProcess_StepState
 0A6E           ;                                                               //TestQueueProcess 函数
 0A6E           ;                                                               printf_TestProcess_StepState();
 0A6E 0E940000          xcall _printf_TestProcess_StepState
 0A72           ;                                                               //UnLoadProcess 函数
 0A72           ;                                                               printf_UnloadProcess_StepState();
 0A72 0E940000          xcall _printf_UnloadProcess_StepState
 0A76           ;                                                               Uart0ReEnable;
 0A76 8091C100          lds R24,193
 0A7A 8061              ori R24,16
 0A7C 8093C100          sts 193,R24
 0A80           ;                                                       }
 0A80           ;                                                       break;
 0A80 ADC3              xjmp L139
 0A82           L151:
 0A82           ; 						case 4:	// 测试退出
 0A82           ; 							if(taskSate >= 2)
 0A82 80910100          lds R24,L7
 0A86 8230              cpi R24,2
 0A88 28F0              brlo L152
 0A8A           X76:
 0A8A           ; 							{
 0A8A           ; 								SetDiluentQuit();
 0A8A 0E940000          xcall _SetDiluentQuit
 0A8E           ;                                                               SetStateLedBusy();
 0A8E 0E940000          xcall _SetStateLedBusy
 0A92           ;                                                       }
 0A92 A4C3              xjmp L139
 0A94           L152:
 0A94           ; 							else
 0A94           ; 							{
 0A94           ; 								Uart0ReUnable;
 0A94 8091C100          lds R24,193
 0A98 8F7E              andi R24,239
 0A9A 8093C100          sts 193,R24
 0A9E           ;                                                               uart_Printf("%s $   1 [Busy]\r\n",strM3120);
 0A9E 20E0              ldi R18,<_strM3120
 0AA0 30E0              ldi R19,>_strM3120
 0AA2 00E0              ldi R16,<L150
 0AA4 10E0              ldi R17,>L150
 0AA6 0E940000          xcall _uart_Printf
 0AAA           ;                                                               Uart0ReEnable;
 0AAA 8091C100          lds R24,193
 0AAE 8061              ori R24,16
 0AB0 8093C100          sts 193,R24
 0AB4           ;                                                       }
 0AB4           ;                                                       break;
 0AB4 93C3              xjmp L139
 0AB6           L154:
 0AB6           ; 						case 5:	// 整机暂停
 0AB6           ; 							if(ControlCmd.pam[0] == 0)
 0AB6 20900300          lds R2,_ControlCmd+3
 0ABA 30900400          lds R3,_ControlCmd+3+1
 0ABE 2220              tst R2
 0AC0 D1F4              brne L155
 0AC2 3320              tst R3
 0AC4 C1F4              brne L155
 0AC6           X77:
 0AC6           ; 							{
 0AC6           ; 								workSwitch = 1;
 0AC6 81E0              ldi R24,1
 0AC8 80930100          sts _workSwitch,R24
 0ACC           ;                                                               clearstopFlag();
 0ACC 0E940000          xcall _clearstopFlag
 0AD0           ;                                                               Uart0ReUnable;
 0AD0 8091C100          lds R24,193
 0AD4 8F7E              andi R24,239
 0AD6 8093C100          sts 193,R24
 0ADA           ;                                                               uart_Printf("%s\r\n",strM0105);
 0ADA 20E0              ldi R18,<_strM0105
 0ADC 30E0              ldi R19,>_strM0105
 0ADE 00E0              ldi R16,<L2
 0AE0 10E0              ldi R17,>L2
 0AE2 0E940000          xcall _uart_Printf
 0AE6           ;                                                               Uart0ReEnable;
 0AE6 8091C100          lds R24,193
 0AEA 8061              ori R24,16
 0AEC 8093C100          sts 193,R24
 0AF0           ;                                                               SetStateLedFree();
 0AF0 0E940000          xcall _SetStateLedFree
 0AF4           ;                                                       }
 0AF4 73C3              xjmp L139
 0AF6           L155:
 0AF6           ; 							else
 0AF6           ; 							{
 0AF6           ; 								workSwitch = 0;
 0AF6 2224              clr R2
 0AF8 20920100          sts _workSwitch,R2
 0AFC           ;                                                               Uart0ReUnable;
 0AFC 8091C100          lds R24,193
 0B00 8F7E              andi R24,239
 0B02 8093C100          sts 193,R24
 0B06           ;                                                               uart_Printf("%s\r\n",strM0106);
 0B06 20E0              ldi R18,<_strM0106
 0B08 30E0              ldi R19,>_strM0106
 0B0A 00E0              ldi R16,<L2
 0B0C 10E0              ldi R17,>L2
 0B0E 0E940000          xcall _uart_Printf
 0B12           ;                                                               Uart0ReEnable;
 0B12 8091C100          lds R24,193
 0B16 8061              ori R24,16
 0B18 8093C100          sts 193,R24
 0B1C           ;                                                               SetStateLedBusy();
 0B1C 0E940000          xcall _SetStateLedBusy
 0B20           ;                                                       }
 0B20           ;                                                       break;
 0B20 5DC3              xjmp L139
 0B22           L158:
 0B22           ; 						case 10:	// 开启片仓
 0B22           ; 							if(CardStoreOpenLook == 0)
 0B22 20900000          lds R2,_CardStoreOpenLook
 0B26 2220              tst R2
 0B28 39F4              brne L159
 0B2A           X78:
 0B2A           ; 								SetStoreDoorOpen(ControlCmd.pam[0]);
 0B2A 00910300          lds R16,_ControlCmd+3
 0B2E 10910400          lds R17,_ControlCmd+3+1
 0B32 0E940000          xcall _SetStoreDoorOpen
 0B36 52C3              xjmp L139
 0B38           L159:
 0B38           ; 							else
 0B38           ; 							{
 0B38           ; 								Uart0ReUnable;
 0B38 8091C100          lds R24,193
 0B3C 8F7E              andi R24,239
 0B3E 8093C100          sts 193,R24
 0B42           ;                                                               uart_Printf("%s\r\n",strM0112);
 0B42 20E0              ldi R18,<_strM0112
 0B44 30E0              ldi R19,>_strM0112
 0B46 00E0              ldi R16,<L2
 0B48 10E0              ldi R17,>L2
 0B4A 0E940000          xcall _uart_Printf
 0B4E           ;                                                               Uart0ReEnable;
 0B4E 8091C100          lds R24,193
 0B52 8061              ori R24,16
 0B54 8093C100          sts 193,R24
 0B58           ;                                                       }
 0B58           ;                                                       break;
 0B58 41C3              xjmp L139
 0B5A           L162:
 0B5A           ; 						case 99:	// 重启, 设置看门狗
 0B5A           ; 							ReStart(ControlCmd.pam[0]);
 0B5A 00910300          lds R16,_ControlCmd+3
 0B5E 10910400          lds R17,_ControlCmd+3+1
 0B62 4EDA              xcall _ReStart
 0B64           ;                                                       break;
 0B64 3BC3              xjmp L139
 0B66           L164:
 0B66           ; 						case 3001:	// #3001 设置测试参数
 0B66           ; 							if(ControlCmd.pamLen>=4)
 0B66 80911700          lds R24,_ControlCmd+23
 0B6A 8430              cpi R24,4
 0B6C F8F0              brlo L165
 0B6E           X79:
 0B6E           ; 							{
 0B6E           ; 								SetDiluentRatio((unsigned char)ControlCmd.pam[0]);
 0B6E 00910300          lds R16,_ControlCmd+3
 0B72 10910400          lds R17,_ControlCmd+3+1
 0B76 0E940000          xcall _SetDiluentRatio
 0B7A           ;                                                               SetWorkStoreNum((unsigned char)ControlCmd.pam[1]);
 0B7A 00910500          lds R16,_ControlCmd+3+2
 0B7E 10910600          lds R17,_ControlCmd+3+2+1
 0B82 0E940000          xcall _SetWorkStoreNum
 0B86           ;                                                               SetReadMolule(ControlCmd.pam[2]);
 0B86 00910700          lds R16,_ControlCmd+3+4
 0B8A 10910800          lds R17,_ControlCmd+3+4+1
 0B8E 0E940000          xcall _SetReadMolule
 0B92           ;                                                               SetReadTime0(ControlCmd.pam[3]);
 0B92 00910900          lds R16,_ControlCmd+3+6
 0B96 10910A00          lds R17,_ControlCmd+3+6+1
 0B9A 0E940000          xcall _SetReadTime0
 0B9E           ;                                                               SetReadTime1(ControlCmd.pam[4]);
 0B9E 00910B00          lds R16,_ControlCmd+3+8
 0BA2 10910C00          lds R17,_ControlCmd+3+8+1
 0BA6 0E940000          xcall _SetReadTime1
 0BAA           ;                                                       }
 0BAA 18C3              xjmp L139
 0BAC           L165:
 0BAC           ; 							else
 0BAC           ; 								cmdState =  1;
 0BAC 81E0              ldi R24,1
 0BAE 80930000          sts L6,R24
 0BB2           ;                                                       break;
 0BB2 14C3              xjmp L139
 0BB4           L177:
 0BB4           ; 						case 3002:	// #3002 设置片仓号
 0BB4           ; 							SetWorkStoreNum(ControlCmd.pam[0]);
 0BB4 00910300          lds R16,_ControlCmd+3
 0BB8 10910400          lds R17,_ControlCmd+3+1
 0BBC 0E940000          xcall _SetWorkStoreNum
 0BC0           ;                                                       break;
 0BC0 0DC3              xjmp L139
 0BC2           L179:
 0BC2           ; 						case 3003:	// #3003 设置稀释比例
 0BC2           ; 							SetDiluentRatio(ControlCmd.pam[0]);
 0BC2 00910300          lds R16,_ControlCmd+3
 0BC6 10910400          lds R17,_ControlCmd+3+1
 0BCA 0E940000          xcall _SetDiluentRatio
 0BCE           ;                                                       break;
 0BCE 06C3              xjmp L139
 0BD0           L181:
 0BD0           ; 						case 3004:	// #3004 设置第一读数时间
 0BD0           ; 							SetReadTime0(ControlCmd.pam[0]);
 0BD0 00910300          lds R16,_ControlCmd+3
 0BD4 10910400          lds R17,_ControlCmd+3+1
 0BD8 0E940000          xcall _SetReadTime0
 0BDC           ;                                                       break;
 0BDC FFC2              xjmp L139
 0BDE           L183:
 0BDE           ; 						case 3005:	// #3005 设置第二读数时间
 0BDE           ; 							SetReadTime1(ControlCmd.pam[0]);
 0BDE 00910300          lds R16,_ControlCmd+3
 0BE2 10910400          lds R17,_ControlCmd+3+1
 0BE6 0E940000          xcall _SetReadTime1
 0BEA           ;                                                       break;
 0BEA F8C2              xjmp L139
 0BEC           L185:
 0BEC           ; 						case 3006:	// 设置读数模块
 0BEC           ; 							SetReadMolule(ControlCmd.pam[0]);
 0BEC 00910300          lds R16,_ControlCmd+3
 0BF0 10910400          lds R17,_ControlCmd+3+1
 0BF4 0E940000          xcall _SetReadMolule
 0BF8           ;                                                       break;
 0BF8 F1C2              xjmp L139
 0BFA           L187:
 0BFA           ; 						case 3007:	// 设置滴液量
 0BFA           ; 							SetDropVolume(ControlCmd.pam[0]);
 0BFA 00910300          lds R16,_ControlCmd+3
 0BFE 10910400          lds R17,_ControlCmd+3+1
 0C02 0E940000          xcall _SetDropVolume
 0C06           ;                                                       break;
 0C06 EAC2              xjmp L139
 0C08           L189:
 0C08           ; 						case 3008:	// 设置滴样模式
 0C08           ; 							SetDropMode(ControlCmd.pam[0]);
 0C08 00910300          lds R16,_ControlCmd+3
 0C0C 10910400          lds R17,_ControlCmd+3+1
 0C10 0E940000          xcall _SetDropMode
 0C14           ;                                                       break;
 0C14 E3C2              xjmp L139
 0C16           L191:
 0C16           ; 						case 3009:	// 设置抽打混匀次数
 0C16           ; 							SetReMixNum(ControlCmd.pam[0]);
 0C16 00910300          lds R16,_ControlCmd+3
 0C1A 10910400          lds R17,_ControlCmd+3+1
 0C1E 0E940000          xcall _SetReMixNum
 0C22           ;                                                       break;
 0C22 DCC2              xjmp L139
 0C24           L193:
 0C24           ; 						case 3010:	// 设置自动连续测试
 0C24           ; 							SetAutoTestCycle(ControlCmd.pam[0]);
 0C24 00910300          lds R16,_ControlCmd+3
 0C28 10910400          lds R17,_ControlCmd+3+1
 0C2C 0E940000          xcall _SetAutoTestCycle
 0C30           ;                                                       break;
 0C30 D5C2              xjmp L139
 0C32           L195:
 0C32           ; 						case 3011:	// 获取片仓状态信息
 0C32           ; 							ReportCardStoreState(ControlCmd.pam[0]);
 0C32 00910300          lds R16,_ControlCmd+3
 0C36 10910400          lds R17,_ControlCmd+3+1
 0C3A 0E940000          xcall _ReportCardStoreState
 0C3E           ;                                                       break;
 0C3E CEC2              xjmp L139
 0C40           L197:
 0C40           ; 						case 3012:	// SetLampLum
 0C40           ; 							if(ControlCmd.pam[0] == 0)
 0C40 20900300          lds R2,_ControlCmd+3
 0C44 30900400          lds R3,_ControlCmd+3+1
 0C48 2220              tst R2
 0C4A 99F4              brne L198
 0C4C 3320              tst R3
 0C4E 89F4              brne L198
 0C50           X80:
 0C50           ; 							{
 0C50           ; 								iTmp0 = AdjustTestLamp(0, ControlCmd.pam[1]);
 0C50 20910500          lds R18,_ControlCmd+3+2
 0C54 30910600          lds R19,_ControlCmd+3+2+1
 0C58 0027              clr R16
 0C5A 0E940000          xcall _AdjustTestLamp
 0C5E 5801              movw R10,R16
 0C60           ;                                                               iTmp1 = AdjustTestLamp(1, ControlCmd.pam[2]);
 0C60 20910700          lds R18,_ControlCmd+3+4
 0C64 30910800          lds R19,_ControlCmd+3+4+1
 0C68 01E0              ldi R16,1
 0C6A 0E940000          xcall _AdjustTestLamp
 0C6E 6801              movw R12,R16
 0C70           ;                                                       }
 0C70 12C0              xjmp L199
 0C72           L198:
 0C72           ; 							else
 0C72           ; 							{
 0C72           ; 								iTmp0 = AdjustTestLamp(2, ControlCmd.pam[1]);
 0C72 20910500          lds R18,_ControlCmd+3+2
 0C76 30910600          lds R19,_ControlCmd+3+2+1
 0C7A 02E0              ldi R16,2
 0C7C 0E940000          xcall _AdjustTestLamp
 0C80 7801              movw R14,R16
 0C82 5701              movw R10,R14
 0C84           ;                                                               iTmp1 = AdjustTestLamp(3, ControlCmd.pam[2]);
 0C84 20910700          lds R18,_ControlCmd+3+4
 0C88 30910800          lds R19,_ControlCmd+3+4+1
 0C8C 03E0              ldi R16,3
 0C8E 0E940000          xcall _AdjustTestLamp
 0C92 7801              movw R14,R16
 0C94 6701              movw R12,R14
 0C96           ;                                                       }
 0C96           L199:
 0C96           ; 							Uart0ReUnable;
 0C96 8091C100          lds R24,193
 0C9A 8F7E              andi R24,239
 0C9C 8093C100          sts 193,R24
 0CA0           ;                                                       uart_Printf("%s $%4d $%4d\r\n", strM4114, iTmp0, iTmp1);
 0CA0 DB82              std y+3,R13
 0CA2 CA82              std y+2,R12
 0CA4 B982              std y+1,R11
 0CA6 A882              std y+0,R10
 0CA8 20E0              ldi R18,<_strM4114
 0CAA 30E0              ldi R19,>_strM4114
 0CAC 00E0              ldi R16,<L71
 0CAE 10E0              ldi R17,>L71
 0CB0 0E940000          xcall _uart_Printf
 0CB4           ;                                                       Uart0ReEnable;
 0CB4 8091C100          lds R24,193
 0CB8 8061              ori R24,16
 0CBA 8093C100          sts 193,R24
 0CBE           ;                                                       break;
 0CBE 8EC2              xjmp L139
 0CC0           L209:
 0CC0           ; 						case 3013:		// TurnOnLamp
 0CC0           ; 							if(ControlCmd.pam[0] == 0)
 0CC0 20900300          lds R2,_ControlCmd+3
 0CC4 30900400          lds R3,_ControlCmd+3+1
 0CC8 2220              tst R2
 0CCA 29F4              brne L210
 0CCC 3320              tst R3
 0CCE 19F4              brne L210
 0CD0           X81:
 0CD0           ; 								TestALampOpen();
 0CD0 0E940000          xcall _TestALampOpen
 0CD4 83C2              xjmp L139
 0CD6           L210:
 0CD6           ; 							else	
 0CD6           ; 								TestBLampOpen();
 0CD6 0E940000          xcall _TestBLampOpen
 0CDA           ;                                                       break;
 0CDA 80C2              xjmp L139
 0CDC           L213:
 0CDC           ; 						case 3014:		// TurnOffLamp
 0CDC           ; 							if(ControlCmd.pam[0] == 0)
 0CDC 20900300          lds R2,_ControlCmd+3
 0CE0 30900400          lds R3,_ControlCmd+3+1
 0CE4 2220              tst R2
 0CE6 29F4              brne L214
 0CE8 3320              tst R3
 0CEA 19F4              brne L214
 0CEC           X82:
 0CEC           ; 								TestALampClose();
 0CEC 0E940000          xcall _TestALampClose
 0CF0 75C2              xjmp L139
 0CF2           L214:
 0CF2           ; 							else	
 0CF2           ; 								TestBLampClose();
 0CF2 0E940000          xcall _TestBLampClose
 0CF6           ;                                                       break;
 0CF6 72C2              xjmp L139
 0CF8           L217:
 0CF8           ; 						case 3015:
 0CF8           ; 							Uart0ReUnable;
 0CF8 8091C100          lds R24,193
 0CFC 8F7E              andi R24,239
 0CFE 8093C100          sts 193,R24
 0D02           ;                                                       uart_Printf("%s $%4d\r\n",strM3137, GetWorkStoreNum());
 0D02 0E940000          xcall _GetWorkStoreNum
 0D06 E02E              mov R14,R16
 0D08 2E2C              mov R2,R14
 0D0A 3324              clr R3
 0D0C 3982              std y+1,R3
 0D0E 2882              std y+0,R2
 0D10 20E0              ldi R18,<_strM3137
 0D12 30E0              ldi R19,>_strM3137
 0D14 00E0              ldi R16,<L218
 0D16 10E0              ldi R17,>L218
 0D18 0E940000          xcall _uart_Printf
 0D1C           ;                                                       Uart0ReEnable;
 0D1C 8091C100          lds R24,193
 0D20 8061              ori R24,16
 0D22 8093C100          sts 193,R24
 0D26           ;                                                       break;
 0D26 5AC2              xjmp L139
 0D28           L219:
 0D28           ; 						//case 3016:	// 设置条码扫描
 0D28           ; 						//	SetCardScanf(ControlCmd.pam[0]);
 0D28           ; 						//	break;
 0D28           ; 						case 3017:	// 设置稀释参数和4015指令一样
 0D28           ; 							iTmp0 = CalculateCalStandCoeff(ControlCmd.pam[0],ControlCmd.pam[1]);
 0D28 20910500          lds R18,_ControlCmd+3+2
 0D2C 30910600          lds R19,_ControlCmd+3+2+1
 0D30 00910300          lds R16,_ControlCmd+3
 0D34 10910400          lds R17,_ControlCmd+3+1
 0D38 0E940000          xcall _CalculateCalStandCoeff
 0D3C 7801              movw R14,R16
 0D3E 5701              movw R10,R14
 0D40           ;                                                       iTmp1 = Save_DiluentCalChart(ControlCmd.pam[0]);
 0D40 00910300          lds R16,_ControlCmd+3
 0D44 10910400          lds R17,_ControlCmd+3+1
 0D48 0E940000          xcall _Save_DiluentCalChart
 0D4C 7801              movw R14,R16
 0D4E 6701              movw R12,R14
 0D50           ;                                                       if(ControlCmd.pam[0] == 0)
 0D50 20900300          lds R2,_ControlCmd+3
 0D54 30900400          lds R3,_ControlCmd+3+1
 0D58 2220              tst R2
 0D5A 49F4              brne L224
 0D5C 3320              tst R3
 0D5E 39F4              brne L224
 0D60           X83:
 0D60           ; 								ControlCmd.pam[0] = 9;
 0D60 89E0              ldi R24,9
 0D62 90E0              ldi R25,0
 0D64 90930400          sts _ControlCmd+3+1,R25
 0D68 80930300          sts _ControlCmd+3,R24
 0D6C 0DC0              xjmp L225
 0D6E           L224:
 0D6E           ; 							else if(ControlCmd.pam[0] > 13)
 0D6E 8DE0              ldi R24,13
 0D70 90E0              ldi R25,0
 0D72 20900300          lds R2,_ControlCmd+3
 0D76 30900400          lds R3,_ControlCmd+3+1
 0D7A 8215              cp R24,R2
 0D7C 9305              cpc R25,R3
 0D7E 20F4              brsh L228
 0D80           X84:
 0D80           ; 								ControlCmd.pam[0] = 13;
 0D80 90930400          sts _ControlCmd+3+1,R25
 0D84 80930300          sts _ControlCmd+3,R24
 0D88           L228:
 0D88           L225:
 0D88           ; 							Uart0ReUnable;
 0D88 8091C100          lds R24,193
 0D8C 8F7E              andi R24,239
 0D8E 8093C100          sts 193,R24
 0D92           ;                                                       uart_Printf("%s $%4d $%4d $%4d\r\n", strM4117, ControlCmd.pam[0],iTmp0,iTmp1);
 0D92 DD82              std y+5,R13
 0D94 CC82              std y+4,R12
 0D96 BB82              std y+3,R11
 0D98 AA82              std y+2,R10
 0D9A 20900300          lds R2,_ControlCmd+3
 0D9E 30900400          lds R3,_ControlCmd+3+1
 0DA2 3982              std y+1,R3
 0DA4 2882              std y+0,R2
 0DA6 20E0              ldi R18,<_strM4117
 0DA8 30E0              ldi R19,>_strM4117
 0DAA 00E0              ldi R16,<L232
 0DAC 10E0              ldi R17,>L232
 0DAE 0E940000          xcall _uart_Printf
 0DB2           ;                                                       Uart0ReEnable;
 0DB2 8091C100          lds R24,193
 0DB6 8061              ori R24,16
 0DB8 8093C100          sts 193,R24
 0DBC           ;                                                       break;
 0DBC 0FC2              xjmp L139
 0DBE           L234:
 0DBE           ; 						//case 3018:  // 设置重复条码扫描
 0DBE           ; 						//	SetReCardScanf(1);
 0DBE           ; 						//	break;
 0DBE           ; 						//case 3019:  // 条码扫描位置调整
 0DBE           ; 						//	if(GetNewPieceProcessState == 1)
 0DBE           ; 						//	{
 0DBE           ; 						//		iPam = SetCardScanfPos((signed char)ControlCmd.pam[0]);
 0DBE           ; 						//		Uart0ReUnable;
 0DBE           ; 						//		uart_Printf("%s $%4d\r\n",strM3124, iPam);
 0DBE           ; 						//		Uart0ReEnable;
 0DBE           ; 						//		CardScanfSW = 1;
 0DBE           ; 						//	}
 0DBE           ; 						//	else
 0DBE           ; 						//	{
 0DBE           ; 						//		Uart0ReUnable;
 0DBE           ; 						//		uart_Printf("%s $1\r\n",strM3120);
 0DBE           ; 						//		Uart0ReEnable;
 0DBE           ; 						//	}
 0DBE           ; 						//	break;
 0DBE           ; 						case 3020:
 0DBE           ; 							SetTestDebugMode(ControlCmd.pam[0]);
 0DBE 00910300          lds R16,_ControlCmd+3
 0DC2 10910400          lds R17,_ControlCmd+3+1
 0DC6 0E940000          xcall _SetTestDebugMode
 0DCA           ;                                                       break;
 0DCA 08C2              xjmp L139
 0DCC           L236:
 0DCC           ; 						case 3021:	// 设置取片测试模式
 0DCC           ; 							SetGetCardTestMode(ControlCmd.pam[0]);
 0DCC 00910300          lds R16,_ControlCmd+3
 0DD0 10910400          lds R17,_ControlCmd+3+1
 0DD4 0E940000          xcall _SetGetCardTestMode
 0DD8           ;                                                       break;
 0DD8 01C2              xjmp L139
 0DDA           L238:
 0DDA           ; 						case 3022:	// 设置1:1模式下,是否需要进行抽打混匀
 0DDA           ; 							SetMixtureMode(ControlCmd.pam[0]);
 0DDA 00910300          lds R16,_ControlCmd+3
 0DDE 10910400          lds R17,_ControlCmd+3+1
 0DE2 0E940000          xcall _SetMixtureMode
 0DE6           ;                                                       break;
 0DE6 FAC1              xjmp L139
 0DE8           L240:
 0DE8           ; 						case 3023:	// 设置多排模式下,废片盒无效
 0DE8           ; 							SetWasteCardState(ControlCmd.pam[0]);
 0DE8 00910300          lds R16,_ControlCmd+3
 0DEC 10910400          lds R17,_ControlCmd+3+1
 0DF0 0E940000          xcall _SetWasteCardState
 0DF4           ;                                                       break;
 0DF4 F3C1              xjmp L139
 0DF6           L242:
 0DF6           ; #ifdef Puncture
 0DF6           ; 						case 3024:	// 设置是否需要穿刺
 0DF6           ; 							SetPunctureState(ControlCmd.pam[0]);
 0DF6           ; 							break;
 0DF6           ; #endif
 0DF6           ; 
 0DF6           ; 						case 3030:
 0DF6           ; 							// 设置吸样量
 0DF6           ; 							SetSamplingVolume(ControlCmd.pam[0]);
 0DF6 00910300          lds R16,_ControlCmd+3
 0DFA 10910400          lds R17,_ControlCmd+3+1
 0DFE 0E940000          xcall _SetSamplingVolume
 0E02           ;                                                       break;
 0E02 ECC1              xjmp L139
 0E04           L244:
 0E04           ; 						case 3050:		// 休眠
 0E04           ; 							TestSleep();
 0E04 0E940000          xcall _TestSleep
 0E08           ;                                                       break;
 0E08 E9C1              xjmp L139
 0E0A           L245:
 0E0A           ; 						case 3051:		// 恢复
 0E0A           ; 							TestStartup();
 0E0A 0E940000          xcall _TestStartup
 0E0E           ;                                                       break;
 0E0E E6C1              xjmp L139
 0E10           L246:
 0E10           ; 					//	case 3052:		// 设置休眠时间
 0E10           ; 					//		SetSleepTime(ControlCmd.pam[0]);
 0E10           ; 					//		break;
 0E10           ; 						case 3053:		// 设置取样功能开关
 0E10           ; 							if(ControlCmd.pam[0])
 0E10 20900300          lds R2,_ControlCmd+3
 0E14 30900400          lds R3,_ControlCmd+3+1
 0E18 2220              tst R2
 0E1A 11F4              brne X85
 0E1C 3320              tst R3
 0E1E B1F0              breq L247
 0E20           X85:
 0E20           ; 							{
 0E20           ; 								SamplingSwitch(0);
 0E20 0027              clr R16
 0E22 0E940000          xcall _SamplingSwitch
 0E26           ;                                                               SetStateLedBusy();      // 锁定仪器,无论之前是否为红，都设为红
 0E26 0E940000          xcall _SetStateLedBusy
 0E2A           ;                                                               
 0E2A           ;                                                               Uart0ReUnable;
 0E2A 8091C100          lds R24,193
 0E2E 8F7E              andi R24,239
 0E30 8093C100          sts 193,R24
 0E34           ;                                                               uart_Printf("%s\r\n",strM3153);
 0E34 20E0              ldi R18,<_strM3153
 0E36 30E0              ldi R19,>_strM3153
 0E38 00E0              ldi R16,<L2
 0E3A 10E0              ldi R17,>L2
 0E3C 0E940000          xcall _uart_Printf
 0E40           ;                                                               Uart0ReEnable;
 0E40 8091C100          lds R24,193
 0E44 8061              ori R24,16
 0E46 8093C100          sts 193,R24
 0E4A           ;                                                       }
 0E4A C8C1              xjmp L139
 0E4C           L247:
 0E4C           ; 							else
 0E4C           ; 							{
 0E4C           ; 								Uart0ReUnable;
 0E4C 8091C100          lds R24,193
 0E50 8F7E              andi R24,239
 0E52 8093C100          sts 193,R24
 0E56           ;                                                               uart_Printf("%s\r\n",strM3154);
 0E56 20E0              ldi R18,<_strM3154
 0E58 30E0              ldi R19,>_strM3154
 0E5A 00E0              ldi R16,<L2
 0E5C 10E0              ldi R17,>L2
 0E5E 0E940000          xcall _uart_Printf
 0E62           ;                                                               Uart0ReEnable;
 0E62 8091C100          lds R24,193
 0E66 8061              ori R24,16
 0E68 8093C100          sts 193,R24
 0E6C           ;                                                               SamplingSwitch(1);
 0E6C 01E0              ldi R16,1
 0E6E 0E940000          xcall _SamplingSwitch
 0E72           ;                                                               if(_LEDSTATE == 1)              // 锁定前灯是绿的
 0E72 80910000          lds R24,__LEDSTATE
 0E76 8130              cpi R24,1
 0E78 09F0              breq X207
 0E7A B0C1              xjmp L139
 0E7C           X207:
 0E7C           X86:
 0E7C           ; 								{
 0E7C           ; 									SetStateLedFree();
 0E7C 0E940000          xcall _SetStateLedFree
 0E80           ;                                                               }
 0E80           ;                                                       }
 0E80           ;                                                       break;
 0E80 ADC1              xjmp L139
 0E82           L252:
 0E82           ; 						case 3054:	// 设置当前测试重测标识
 0E82           ; 							SetReReadFlag(); 
 0E82 0E940000          xcall _SetReReadFlag
 0E86           ; 
 0E86           ;                                                       break;
 0E86 AAC1              xjmp L139
 0E88           L253:
 0E88           ; 						case 3055:	// 设置清洗模式
 0E88           ; 							SetCleanMode(ControlCmd.pam[0]);
 0E88 00910300          lds R16,_ControlCmd+3
 0E8C 10910400          lds R17,_ControlCmd+3+1
 0E90 0E940000          xcall _SetCleanMode
 0E94           ;                                                       break;
 0E94 A3C1              xjmp L139
 0E96           L255:
 0E96           ; 						case 3056:	// 设置读取结束应答信号
 0E96           ; 							SetReadCloseAnswer();	
 0E96 0E940000          xcall _SetReadCloseAnswer
 0E9A           ;                                                       break;
 0E9A A0C1              xjmp L139
 0E9C           L256:
 0E9C           ; 						case 3060:		// 手动灌注稀释液
 0E9C           ; 							if(diluteProcessState == 1) 
 0E9C 80910200          lds R24,L8
 0EA0 8130              cpi R24,1
 0EA2 09F0              breq X208
 0EA4 5AC0              xjmp L257
 0EA6           X208:
 0EA6           X87:
 0EA6           ; 							{
 0EA6           ; 								if(primeProcessSW == 0)
 0EA6 20900C00          lds R2,_primeProcessSW
 0EAA 2220              tst R2
 0EAC B1F4              brne L259
 0EAE           X88:
 0EAE           ; 								{
 0EAE           ; 									Uart0ReUnable;
 0EAE 8091C100          lds R24,193
 0EB2 8F7E              andi R24,239
 0EB4 8093C100          sts 193,R24
 0EB8           ;                                                                       uart_Printf("%s\r\n",strM3160);
 0EB8 20E0              ldi R18,<_strM3160
 0EBA 30E0              ldi R19,>_strM3160
 0EBC 00E0              ldi R16,<L2
 0EBE 10E0              ldi R17,>L2
 0EC0 0E940000          xcall _uart_Printf
 0EC4           ;                                                                       Uart0ReEnable;
 0EC4 8091C100          lds R24,193
 0EC8 8061              ori R24,16
 0ECA 8093C100          sts 193,R24
 0ECE           ;                                                                       SetStateLedBusy();
 0ECE 0E940000          xcall _SetStateLedBusy
 0ED2           ;                                                                       primeProcessSW = 1;
 0ED2 81E0              ldi R24,1
 0ED4 80930C00          sts _primeProcessSW,R24
 0ED8           ;                                                               }
 0ED8 81C1              xjmp L139
 0EDA           L259:
 0EDA           ; 								else if(primeProcessSW == 1)
 0EDA 80910C00          lds R24,_primeProcessSW
 0EDE 8130              cpi R24,1
 0EE0 89F4              brne L261
 0EE2           X89:
 0EE2           ; 								{
 0EE2           ; 									Uart0ReUnable;
 0EE2 8091C100          lds R24,193
 0EE6 8F7E              andi R24,239
 0EE8 8093C100          sts 193,R24
 0EEC           ;                                                                       uart_Printf("%s\r\n",strM3171);
 0EEC 20E0              ldi R18,<_strM3171
 0EEE 30E0              ldi R19,>_strM3171
 0EF0 00E0              ldi R16,<L2
 0EF2 10E0              ldi R17,>L2
 0EF4 0E940000          xcall _uart_Printf
 0EF8           ;                                                                       Uart0ReEnable;
 0EF8 8091C100          lds R24,193
 0EFC 8061              ori R24,16
 0EFE 8093C100          sts 193,R24
 0F02           ;                                                               }
 0F02 6CC1              xjmp L139
 0F04           L261:
 0F04           ; 								else if(primeProcessSW == 2)
 0F04 80910C00          lds R24,_primeProcessSW
 0F08 8230              cpi R24,2
 0F0A 89F4              brne L263
 0F0C           X90:
 0F0C           ; 								{
 0F0C           ; 									Uart0ReUnable;
 0F0C 8091C100          lds R24,193
 0F10 8F7E              andi R24,239
 0F12 8093C100          sts 193,R24
 0F16           ;                                                                       uart_Printf("%s\r\n",strM3172);
 0F16 20E0              ldi R18,<_strM3172
 0F18 30E0              ldi R19,>_strM3172
 0F1A 00E0              ldi R16,<L2
 0F1C 10E0              ldi R17,>L2
 0F1E 0E940000          xcall _uart_Printf
 0F22           ;                                                                       Uart0ReEnable;
 0F22 8091C100          lds R24,193
 0F26 8061              ori R24,16
 0F28 8093C100          sts 193,R24
 0F2C           ;                                                               }
 0F2C 57C1              xjmp L139
 0F2E           L263:
 0F2E           ; 								else if(primeProcessSW == 3)
 0F2E 80910C00          lds R24,_primeProcessSW
 0F32 8330              cpi R24,3
 0F34 09F0              breq X209
 0F36 52C1              xjmp L139
 0F38           X209:
 0F38           X91:
 0F38           ; 								{
 0F38           ; 									Uart0ReUnable;
 0F38 8091C100          lds R24,193
 0F3C 8F7E              andi R24,239
 0F3E 8093C100          sts 193,R24
 0F42           ;                                                                       uart_Printf("%s\r\n",strM3173);
 0F42 20E0              ldi R18,<_strM3173
 0F44 30E0              ldi R19,>_strM3173
 0F46 00E0              ldi R16,<L2
 0F48 10E0              ldi R17,>L2
 0F4A 0E940000          xcall _uart_Printf
 0F4E           ;                                                                       Uart0ReEnable;
 0F4E 8091C100          lds R24,193
 0F52 8061              ori R24,16
 0F54 8093C100          sts 193,R24
 0F58           ;                                                               }
 0F58           ;                                                       }
 0F58 41C1              xjmp L139
 0F5A           L257:
 0F5A           ; 							else
 0F5A           ; 							{
 0F5A           ; 								Uart0ReUnable;
 0F5A 8091C100          lds R24,193
 0F5E 8F7E              andi R24,239
 0F60 8093C100          sts 193,R24
 0F64           ;                                                               uart_Printf("%s $1\r\n",strM3120);
 0F64 20E0              ldi R18,<_strM3120
 0F66 30E0              ldi R19,>_strM3120
 0F68 00E0              ldi R16,<L267
 0F6A 10E0              ldi R17,>L267
 0F6C 0E940000          xcall _uart_Printf
 0F70           ;                                                               Uart0ReEnable;
 0F70 8091C100          lds R24,193
 0F74 8061              ori R24,16
 0F76 8093C100          sts 193,R24
 0F7A           ;                                                       }
 0F7A           ;                                                       break;
 0F7A 30C1              xjmp L139
 0F7C           L268:
 0F7C           ; 						case 3061:		// 手动灌注清洗液
 0F7C           ; 							if(diluteProcessState == 1) 
 0F7C 80910200          lds R24,L8
 0F80 8130              cpi R24,1
 0F82 09F0              breq X210
 0F84 5AC0              xjmp L269
 0F86           X210:
 0F86           X92:
 0F86           ; 							{
 0F86           ; 								if(primeProcessSW == 0)
 0F86 20900C00          lds R2,_primeProcessSW
 0F8A 2220              tst R2
 0F8C B1F4              brne L271
 0F8E           X93:
 0F8E           ; 								{
 0F8E           ; 									Uart0ReUnable;
 0F8E 8091C100          lds R24,193
 0F92 8F7E              andi R24,239
 0F94 8093C100          sts 193,R24
 0F98           ;                                                                       uart_Printf("%s\r\n",strM3161);
 0F98 20E0              ldi R18,<_strM3161
 0F9A 30E0              ldi R19,>_strM3161
 0F9C 00E0              ldi R16,<L2
 0F9E 10E0              ldi R17,>L2
 0FA0 0E940000          xcall _uart_Printf
 0FA4           ;                                                                       Uart0ReEnable;
 0FA4 8091C100          lds R24,193
 0FA8 8061              ori R24,16
 0FAA 8093C100          sts 193,R24
 0FAE           ;                                                                       SetStateLedBusy();
 0FAE 0E940000          xcall _SetStateLedBusy
 0FB2           ;                                                                       primeProcessSW = 2;
 0FB2 82E0              ldi R24,2
 0FB4 80930C00          sts _primeProcessSW,R24
 0FB8           ;                                                               }
 0FB8 11C1              xjmp L139
 0FBA           L271:
 0FBA           ; 								else if(primeProcessSW == 1)
 0FBA 80910C00          lds R24,_primeProcessSW
 0FBE 8130              cpi R24,1
 0FC0 89F4              brne L273
 0FC2           X94:
 0FC2           ; 								{
 0FC2           ; 									Uart0ReUnable;
 0FC2 8091C100          lds R24,193
 0FC6 8F7E              andi R24,239
 0FC8 8093C100          sts 193,R24
 0FCC           ;                                                                       uart_Printf("%s\r\n",strM3171);
 0FCC 20E0              ldi R18,<_strM3171
 0FCE 30E0              ldi R19,>_strM3171
 0FD0 00E0              ldi R16,<L2
 0FD2 10E0              ldi R17,>L2
 0FD4 0E940000          xcall _uart_Printf
 0FD8           ;                                                                       Uart0ReEnable;
 0FD8 8091C100          lds R24,193
 0FDC 8061              ori R24,16
 0FDE 8093C100          sts 193,R24
 0FE2           ;                                                               }
 0FE2 FCC0              xjmp L139
 0FE4           L273:
 0FE4           ; 								else if(primeProcessSW == 2)
 0FE4 80910C00          lds R24,_primeProcessSW
 0FE8 8230              cpi R24,2
 0FEA 89F4              brne L275
 0FEC           X95:
 0FEC           ; 								{
 0FEC           ; 									Uart0ReUnable;
 0FEC 8091C100          lds R24,193
 0FF0 8F7E              andi R24,239
 0FF2 8093C100          sts 193,R24
 0FF6           ;                                                                       uart_Printf("%s\r\n",strM3172);
 0FF6 20E0              ldi R18,<_strM3172
 0FF8 30E0              ldi R19,>_strM3172
 0FFA 00E0              ldi R16,<L2
 0FFC 10E0              ldi R17,>L2
 0FFE 0E940000          xcall _uart_Printf
 1002           ;                                                                       Uart0ReEnable;
 1002 8091C100          lds R24,193
 1006 8061              ori R24,16
 1008 8093C100          sts 193,R24
 100C           ;                                                               }
 100C E7C0              xjmp L139
 100E           L275:
 100E           ; 								else if(primeProcessSW == 3)
 100E 80910C00          lds R24,_primeProcessSW
 1012 8330              cpi R24,3
 1014 09F0              breq X211
 1016 E2C0              xjmp L139
 1018           X211:
 1018           X96:
 1018           ; 								{
 1018           ; 									Uart0ReUnable;
 1018 8091C100          lds R24,193
 101C 8F7E              andi R24,239
 101E 8093C100          sts 193,R24
 1022           ;                                                                       uart_Printf("%s\r\n",strM3173);
 1022 20E0              ldi R18,<_strM3173
 1024 30E0              ldi R19,>_strM3173
 1026 00E0              ldi R16,<L2
 1028 10E0              ldi R17,>L2
 102A 0E940000          xcall _uart_Printf
 102E           ;                                                                       Uart0ReEnable;
 102E 8091C100          lds R24,193
 1032 8061              ori R24,16
 1034 8093C100          sts 193,R24
 1038           ;                                                               }
 1038           ;                                                       }
 1038 D1C0              xjmp L139
 103A           L269:
 103A           ; 							else
 103A           ; 							{
 103A           ; 								Uart0ReUnable;
 103A 8091C100          lds R24,193
 103E 8F7E              andi R24,239
 1040 8093C100          sts 193,R24
 1044           ;                                                               uart_Printf("%s $1\r\n",strM3120);
 1044 20E0              ldi R18,<_strM3120
 1046 30E0              ldi R19,>_strM3120
 1048 00E0              ldi R16,<L267
 104A 10E0              ldi R17,>L267
 104C 0E940000          xcall _uart_Printf
 1050           ;                                                               Uart0ReEnable;
 1050 8091C100          lds R24,193
 1054 8061              ori R24,16
 1056 8093C100          sts 193,R24
 105A           ;                                                       }
 105A           ;                                                       break;
 105A C0C0              xjmp L139
 105C           L279:
 105C           ; 						case 3107:		// 滴样量调节因子设定
 105C           ; 							//si = SetDropVolumeFactor((signed char)ControlCmd.pam[0]);
 105C           ; 							SetDropVolumeFactor((signed int)ControlCmd.pam[0]);
 105C 00910300          lds R16,_ControlCmd+3
 1060 10910400          lds R17,_ControlCmd+3+1
 1064 0E940000          xcall _SetDropVolumeFactor
 1068           ;                                                       //Uart0ReUnable;
 1068           ;                                                       //uart_Printf("%s $%4d\r\n", strM3218, si);
 1068           ;                                                       //Uart0ReEnable;
 1068           ;                                                       break;
 1068 B9C0              xjmp L139
 106A           L281:
 106A           ; 						case 3108:
 106A           ; 							GetMotorMonitorState(ControlCmd.pam[0],ControlCmd.pam[1]);
 106A 20910500          lds R18,_ControlCmd+3+2
 106E 30910600          lds R19,_ControlCmd+3+2+1
 1072 00910300          lds R16,_ControlCmd+3
 1076 10910400          lds R17,_ControlCmd+3+1
 107A 0E940000          xcall _GetMotorMonitorState
 107E           ;                                                       break;
 107E AEC0              xjmp L139
 1080           L285:
 1080           ; 						case 3322:
 1080           ; 							if(diluteProcessState == 1) 
 1080 80910200          lds R24,L8
 1084 8130              cpi R24,1
 1086 09F0              breq X212
 1088 5AC0              xjmp L286
 108A           X212:
 108A           X97:
 108A           ; 							{
 108A           ; 								if(primeProcessSW == 0)
 108A 20900C00          lds R2,_primeProcessSW
 108E 2220              tst R2
 1090 B1F4              brne L288
 1092           X98:
 1092           ; 								{
 1092           ; 									Uart0ReUnable;
 1092 8091C100          lds R24,193
 1096 8F7E              andi R24,239
 1098 8093C100          sts 193,R24
 109C           ;                                                                       uart_Printf("%s $ 3 [LiquidCheck] $ 3322\r\n",strM0110);
 109C 20E0              ldi R18,<_strM0110
 109E 30E0              ldi R19,>_strM0110
 10A0 00E0              ldi R16,<L290
 10A2 10E0              ldi R17,>L290
 10A4 0E940000          xcall _uart_Printf
 10A8           ;                                                                       Uart0ReEnable;
 10A8 8091C100          lds R24,193
 10AC 8061              ori R24,16
 10AE 8093C100          sts 193,R24
 10B2           ;                                                                       SetStateLedBusy();
 10B2 0E940000          xcall _SetStateLedBusy
 10B6           ;                                                                       primeProcessSW = 3;
 10B6 83E0              ldi R24,3
 10B8 80930C00          sts _primeProcessSW,R24
 10BC           ;                                                               }
 10BC 8FC0              xjmp L139
 10BE           L288:
 10BE           ; 								else if(primeProcessSW == 1)
 10BE 80910C00          lds R24,_primeProcessSW
 10C2 8130              cpi R24,1
 10C4 89F4              brne L291
 10C6           X99:
 10C6           ; 								{
 10C6           ; 									Uart0ReUnable;
 10C6 8091C100          lds R24,193
 10CA 8F7E              andi R24,239
 10CC 8093C100          sts 193,R24
 10D0           ;                                                                       uart_Printf("%s\r\n",strM3171);
 10D0 20E0              ldi R18,<_strM3171
 10D2 30E0              ldi R19,>_strM3171
 10D4 00E0              ldi R16,<L2
 10D6 10E0              ldi R17,>L2
 10D8 0E940000          xcall _uart_Printf
 10DC           ;                                                                       Uart0ReEnable;
 10DC 8091C100          lds R24,193
 10E0 8061              ori R24,16
 10E2 8093C100          sts 193,R24
 10E6           ;                                                               }
 10E6 7AC0              xjmp L139
 10E8           L291:
 10E8           ; 								else if(primeProcessSW == 2)
 10E8 80910C00          lds R24,_primeProcessSW
 10EC 8230              cpi R24,2
 10EE 89F4              brne L293
 10F0           X100:
 10F0           ; 								{
 10F0           ; 									Uart0ReUnable;
 10F0 8091C100          lds R24,193
 10F4 8F7E              andi R24,239
 10F6 8093C100          sts 193,R24
 10FA           ;                                                                       uart_Printf("%s\r\n",strM3172);
 10FA 20E0              ldi R18,<_strM3172
 10FC 30E0              ldi R19,>_strM3172
 10FE 00E0              ldi R16,<L2
 1100 10E0              ldi R17,>L2
 1102 0E940000          xcall _uart_Printf
 1106           ;                                                                       Uart0ReEnable;
 1106 8091C100          lds R24,193
 110A 8061              ori R24,16
 110C 8093C100          sts 193,R24
 1110           ;                                                               }
 1110 65C0              xjmp L139
 1112           L293:
 1112           ; 								else if(primeProcessSW == 3)
 1112 80910C00          lds R24,_primeProcessSW
 1116 8330              cpi R24,3
 1118 09F0              breq X213
 111A 60C0              xjmp L139
 111C           X213:
 111C           X101:
 111C           ; 								{
 111C           ; 									Uart0ReUnable;
 111C 8091C100          lds R24,193
 1120 8F7E              andi R24,239
 1122 8093C100          sts 193,R24
 1126           ;                                                                       uart_Printf("%s\r\n",strM3173);
 1126 20E0              ldi R18,<_strM3173
 1128 30E0              ldi R19,>_strM3173
 112A 00E0              ldi R16,<L2
 112C 10E0              ldi R17,>L2
 112E 0E940000          xcall _uart_Printf
 1132           ;                                                                       Uart0ReEnable;
 1132 8091C100          lds R24,193
 1136 8061              ori R24,16
 1138 8093C100          sts 193,R24
 113C           ;                                                               }
 113C           ;                                                       }
 113C 4FC0              xjmp L139
 113E           L286:
 113E           ; 							else 
 113E           ; 							{
 113E           ; 								Uart0ReUnable;
 113E 8091C100          lds R24,193
 1142 8F7E              andi R24,239
 1144 8093C100          sts 193,R24
 1148           ;                                                               uart_Printf("%s $1\r\n",strM3120);
 1148 20E0              ldi R18,<_strM3120
 114A 30E0              ldi R19,>_strM3120
 114C 00E0              ldi R16,<L267
 114E 10E0              ldi R17,>L267
 1150 0E940000          xcall _uart_Printf
 1154           ;                                                               Uart0ReEnable;
 1154 8091C100          lds R24,193
 1158 8061              ori R24,16
 115A 8093C100          sts 193,R24
 115E           ;                                                       }
 115E           ;                                                       break;
 115E 3EC0              xjmp L139
 1160           L297:
 1160           ; 						case 3333:
 1160           ; 							if(CardStoreTestFlag == 1)		
 1160 80910000          lds R24,_CardStoreTestFlag
 1164 8130              cpi R24,1
 1166 09F4              brne L298
 1168           X102:
 1168           ; 								break;
 1168 39C0              xjmp L139
 116A           L298:
 116A           ; 							if(ControlCmd.pam[0] == 0)
 116A 20900300          lds R2,_ControlCmd+3
 116E 30900400          lds R3,_ControlCmd+3+1
 1172 2220              tst R2
 1174 31F4              brne L300
 1176 3320              tst R3
 1178 21F4              brne L300
 117A           X103:
 117A           ; 								CardNoneUseful = 0;
 117A 2224              clr R2
 117C 20920000          sts _CardNoneUseful,R2
 1180 03C0              xjmp L301
 1182           L300:
 1182           ; 							else
 1182           ; 							{	
 1182           ; 								CardNoneUseful = 1;
 1182 81E0              ldi R24,1
 1184 80930000          sts _CardNoneUseful,R24
 1188           ;                                                       //      TestALampClose();
 1188           ;                                                       //      TestBLampClose();
 1188           ;                                                       }
 1188           L301:
 1188           ; 							Uart0ReUnable;
 1188 8091C100          lds R24,193
 118C 8F7E              andi R24,239
 118E 8093C100          sts 193,R24
 1192           ;                                                       uart_Printf("%s $%4d\r\n", strM3333, CardNoneUseful);
 1192 20900000          lds R2,_CardNoneUseful
 1196 3324              clr R3
 1198 3982              std y+1,R3
 119A 2882              std y+0,R2
 119C 20E0              ldi R18,<_strM3333
 119E 30E0              ldi R19,>_strM3333
 11A0 00E0              ldi R16,<L218
 11A2 10E0              ldi R17,>L218
 11A4 0E940000          xcall _uart_Printf
 11A8           ;                                                       Uart0ReEnable;
 11A8 8091C100          lds R24,193
 11AC 8061              ori R24,16
 11AE 8093C100          sts 193,R24
 11B2           ;                                                       break;
 11B2 14C0              xjmp L139
 11B4           L138:
 11B4           ; 						//*******************************************************
 11B4           ; 						default:
 11B4           ; 							SetBeepWarning();
 11B4 0E940000          xcall _SetBeepWarning
 11B8           ;                                                       Uart0ReUnable;
 11B8 8091C100          lds R24,193
 11BC 8F7E              andi R24,239
 11BE 8093C100          sts 193,R24
 11C2           ;                                                       uart_Printf("#%d CommandUnknown $   2\r\n",ControlCmd.cmdIdx);
 11C2 20910100          lds R18,_ControlCmd+1
 11C6 30910200          lds R19,_ControlCmd+1+1
 11CA 00E0              ldi R16,<L36
 11CC 10E0              ldi R17,>L36
 11CE 0E940000          xcall _uart_Printf
 11D2           ;                                                       Uart0ReEnable;
 11D2 8091C100          lds R24,193
 11D6 8061              ori R24,16
 11D8 8093C100          sts 193,R24
 11DC           ;                                                       break;
 11DC           L139:
 11DC           ; 						}
 11DC           ; 					if(cmdState)
 11DC 20900000          lds R2,L6
 11E0 2220              tst R2
 11E2 A9F0              breq L311
 11E4           X104:
 11E4           ; 					{
 11E4           ; 						SetBeepWarning();
 11E4 0E940000          xcall _SetBeepWarning
 11E8           ;                                               Uart0ReUnable;
 11E8 8091C100          lds R24,193
 11EC 8F7E              andi R24,239
 11EE 8093C100          sts 193,R24
 11F2           ;                                               uart_Printf("#%4d CommandError $   1\r\n",ControlCmd.cmdIdx);
 11F2 20910100          lds R18,_ControlCmd+1
 11F6 30910200          lds R19,_ControlCmd+1+1
 11FA 00E0              ldi R16,<L41
 11FC 10E0              ldi R17,>L41
 11FE 0E940000          xcall _uart_Printf
 1202           ;                                               Uart0ReEnable;
 1202 8091C100          lds R24,193
 1206 8061              ori R24,16
 1208 8093C100          sts 193,R24
 120C           ;                                       }
 120C 14C0              xjmp L312
 120E           L311:
 120E           ; 					else
 120E           ; 					{
 120E           ; 						SetBeepAck();
 120E 0E940000          xcall _SetBeepAck
 1212           ;                                               Uart0ReUnable;
 1212 8091C100          lds R24,193
 1216 8F7E              andi R24,239
 1218 8093C100          sts 193,R24
 121C           ;                                               uart_Printf("#%4d CommandDone $   3\r\n",ControlCmd.cmdIdx);
 121C 20910100          lds R18,_ControlCmd+1
 1220 30910200          lds R19,_ControlCmd+1+1
 1224 00E0              ldi R16,<L43
 1226 10E0              ldi R17,>L43
 1228 0E940000          xcall _uart_Printf
 122C           ;                                               Uart0ReEnable;
 122C 8091C100          lds R24,193
 1230 8061              ori R24,16
 1232 8093C100          sts 193,R24
 1236           ;                                       }
 1236           L312:
 1236           ; 				//	if(ControlCmd.cmdIdx)
 1236           ; 						CommandClear();
 1236 0E940000          xcall _CommandClear
 123A           ;                               }
 123A           L135:
 123A           ; 				if(workSwitch)
 123A 20900100          lds R2,_workSwitch
 123E 2220              tst R2
 1240 09F4              brne X214
 1242 E3C5              xjmp L17
 1244           X214:
 1244           X105:
 1244           ; 				{
 1244           ; 					taskSate = 0;
 1244 2224              clr R2
 1246 20920100          sts L7,R2
 124A           ;                                       if(primeProcessSW == 0)
 124A 20900C00          lds R2,_primeProcessSW
 124E 2220              tst R2
 1250 69F4              brne L317
 1252           X106:
 1252           ; 					{
 1252           ; 						diluteProcessState = DiluteProcess(0);
 1252 0027              clr R16
 1254 1127              clr R17
 1256 0E940000          xcall _DiluteProcess
 125A E02E              mov R14,R16
 125C E0920200          sts L8,R14
 1260           ;                                               taskSate += diluteProcessState;
 1260 30900100          lds R3,L7
 1264 300E              add R3,R16
 1266 30920100          sts L7,R3
 126A           ;                                       }
 126A 77C0              xjmp L318
 126C           L317:
 126C           ; 					else
 126C           ; 					{
 126C           ; 						if(primeProcessSW == 1)
 126C 80910C00          lds R24,_primeProcessSW
 1270 8130              cpi R24,1
 1272 11F5              brne L319
 1274           X107:
 1274           ; 						{
 1274           ; 							i = _ManualPrimingDiluent();
 1274 0E940000          xcall __ManualPrimingDiluent
 1278 E02E              mov R14,R16
 127A 4E2D              mov R20,R14
 127C           ;                                                       if(i == 1)
 127C 0130              cpi R16,1
 127E 09F0              breq X215
 1280 6CC0              xjmp L320
 1282           X215:
 1282           X108:
 1282           ; 							{
 1282           ; 								primeProcessSW = 0;
 1282 2224              clr R2
 1284 20920C00          sts _primeProcessSW,R2
 1288           ;                                                               Uart0ReUnable;
 1288 8091C100          lds R24,193
 128C 8F7E              andi R24,239
 128E 8093C100          sts 193,R24
 1292           ;                                                               uart_Printf("%s\r\n",strM3162);
 1292 20E0              ldi R18,<_strM3162
 1294 30E0              ldi R19,>_strM3162
 1296 00E0              ldi R16,<L2
 1298 10E0              ldi R17,>L2
 129A 0E940000          xcall _uart_Printf
 129E           ;                                                               Uart0ReEnable;
 129E 8091C100          lds R24,193
 12A2 8061              ori R24,16
 12A4 8093C100          sts 193,R24
 12A8           ;                                                               if(JumpMode != 2)
 12A8 80910000          lds R24,_JumpMode
 12AC 8230              cpi R24,2
 12AE 09F4              brne X216
 12B0 54C0              xjmp L320
 12B2           X216:
 12B2           X109:
 12B2           ; 									SetStateLedFree();
 12B2 0E940000          xcall _SetStateLedFree
 12B6           ;                                                       }
 12B6           ;                                               }
 12B6 51C0              xjmp L320
 12B8           L319:
 12B8           ; 						else if(primeProcessSW == 2)
 12B8 80910C00          lds R24,_primeProcessSW
 12BC 8230              cpi R24,2
 12BE 09F5              brne L325
 12C0           X110:
 12C0           ; 						{
 12C0           ; 							i = _ManualPrimingFluid();
 12C0 0E940000          xcall __ManualPrimingFluid
 12C4 E02E              mov R14,R16
 12C6 4E2D              mov R20,R14
 12C8           ;                                                       if(i == 1)
 12C8 0130              cpi R16,1
 12CA 09F0              breq X217
 12CC 46C0              xjmp L326
 12CE           X217:
 12CE           X111:
 12CE           ; 							{
 12CE           ; 								primeProcessSW = 0;
 12CE 2224              clr R2
 12D0 20920C00          sts _primeProcessSW,R2
 12D4           ;                                                               Uart0ReUnable;
 12D4 8091C100          lds R24,193
 12D8 8F7E              andi R24,239
 12DA 8093C100          sts 193,R24
 12DE           ;                                                               uart_Printf("%s\r\n",strM3163);
 12DE 20E0              ldi R18,<_strM3163
 12E0 30E0              ldi R19,>_strM3163
 12E2 00E0              ldi R16,<L2
 12E4 10E0              ldi R17,>L2
 12E6 0E940000          xcall _uart_Printf
 12EA           ;                                                               Uart0ReEnable;
 12EA 8091C100          lds R24,193
 12EE 8061              ori R24,16
 12F0 8093C100          sts 193,R24
 12F4           ;                                                               if(JumpMode != 2)
 12F4 80910000          lds R24,_JumpMode
 12F8 8230              cpi R24,2
 12FA 79F1              breq L326
 12FC           X112:
 12FC           ; 									SetStateLedFree();
 12FC 0E940000          xcall _SetStateLedFree
 1300           ;                                                       }
 1300           ;                                               }
 1300 2CC0              xjmp L326
 1302           L325:
 1302           ; 						else if(primeProcessSW == 3)
 1302 80910C00          lds R24,_primeProcessSW
 1306 8330              cpi R24,3
 1308 41F5              brne L331
 130A           X113:
 130A           ; 						{
 130A           ; 							i = DiluteStartCheck(0);// 函数返回1表示处理完毕
 130A 0027              clr R16
 130C 1127              clr R17
 130E 0E940000          xcall _DiluteStartCheck
 1312 E02E              mov R14,R16
 1314 4E2D              mov R20,R14
 1316           ;                                                       if(i == 1)
 1316 0130              cpi R16,1
 1318 01F5              brne L333
 131A           X114:
 131A           ; 							{
 131A           ; 								primeProcessSW = 0;
 131A 2224              clr R2
 131C 20920C00          sts _primeProcessSW,R2
 1320           ;                                                               if(JumpMode == 2)       // 如果是休眠模式下的3322
 1320 80910000          lds R24,_JumpMode
 1324 8230              cpi R24,2
 1326 21F4              brne L335
 1328           X115:
 1328           ; 									JumpMode = 3;
 1328 83E0              ldi R24,3
 132A 80930000          sts _JumpMode,R24
 132E 03C0              xjmp L336
 1330           L335:
 1330           ; 								else
 1330           ; 									JumpMode = 0;
 1330 2224              clr R2
 1332 20920000          sts _JumpMode,R2
 1336           L336:
 1336           ; 								Uart0ReUnable;
 1336 8091C100          lds R24,193
 133A 8F7E              andi R24,239
 133C 8093C100          sts 193,R24
 1340           ;                                                               uart_Printf("%s [Test] $ 3322\r\n",strM2120);
 1340 20E0              ldi R18,<_strM2120
 1342 30E0              ldi R19,>_strM2120
 1344 00E0              ldi R16,<L337
 1346 10E0              ldi R17,>L337
 1348 0E940000          xcall _uart_Printf
 134C           ;                                                               Uart0ReEnable;
 134C 8091C100          lds R24,193
 1350 8061              ori R24,16
 1352 8093C100          sts 193,R24
 1356           ;                                                               SetStateLedFree();
 1356 0E940000          xcall _SetStateLedFree
 135A           ;                                                       }
 135A           L333:
 135A           ; 						}
 135A           L331:
 135A           L326:
 135A           L320:
 135A           ; 					}
 135A           L318:
 135A           ; 					if(CardScanfSW == 0)
 135A 20900400          lds R2,L10
 135E 2220              tst R2
 1360 41F4              brne L338
 1362           X116:
 1362           ; 					{
 1362           ; 						GetNewPieceProcessState = GetNewPieceFromStoreProcess(0);
 1362 0027              clr R16
 1364 1127              clr R17
 1366 0E940000          xcall _GetNewPieceFromStoreProcess
 136A E02E              mov R14,R16
 136C E0920300          sts L9,R14
 1370           ;                                       }
 1370 1AC0              xjmp L339
 1372           L338:
 1372           ; 					else
 1372           ; 					{
 1372           ; 						if(1 == CardScanfPosCheck())
 1372 0E940000          xcall _CardScanfPosCheck
 1376 B801              movw R22,R16
 1378 0130              cpi R16,1
 137A E0E0              ldi R30,0
 137C 1E07              cpc R17,R30
 137E 99F4              brne L340
 1380           X117:
 1380           ; 						{
 1380           ; 							CardScanfSW = 0;
 1380 2224              clr R2
 1382 20920400          sts L10,R2
 1386           ;                                                       Uart0ReUnable;
 1386 8091C100          lds R24,193
 138A 8F7E              andi R24,239
 138C 8093C100          sts 193,R24
 1390           ;                                                       uart_Printf("%sDone\r\n",strM3124);
 1390 20E0              ldi R18,<_strM3124
 1392 30E0              ldi R19,>_strM3124
 1394 00E0              ldi R16,<L342
 1396 10E0              ldi R17,>L342
 1398 0E940000          xcall _uart_Printf
 139C           ;                                                       Uart0ReEnable;
 139C 8091C100          lds R24,193
 13A0 8061              ori R24,16
 13A2 8093C100          sts 193,R24
 13A6           ;                                               }
 13A6           L340:
 13A6           ; 					}
 13A6           L339:
 13A6           ; 					TestAQueueProcess();
 13A6 0E940000          xcall _TestAQueueProcess
 13AA           ;                                       TestBQueueProcess();
 13AA 0E940000          xcall _TestBQueueProcess
 13AE           ;                                       taskSate += UnloadQueueProcess();
 13AE 0E940000          xcall _UnloadQueueProcess
 13B2 7801              movw R14,R16
 13B4 20900100          lds R2,L7
 13B8 3324              clr R3
 13BA 200E              add R2,R16
 13BC 311E              adc R3,R17
 13BE 20920100          sts L7,R2
 13C2           ;                                       if(taskSate > 2)
 13C2 82E0              ldi R24,2
 13C4 8215              cp R24,R2
 13C6 08F0              brlo X218
 13C8 20C5              xjmp L17
 13CA           X218:
 13CA           X118:
 13CA           ; 						SetWorkStep(0);
 13CA 0027              clr R16
 13CC 6FD5              xcall _SetWorkStep
 13CE           ;                               }
 13CE           ;                               break;
 13CE 1DC5              xjmp L17
 13D0           L345:
 13D0           ; 		/************ 调试维护 **************/
 13D0           ; 			case 4:		
 13D0           ; 				if(ControlCmd.cmdState==2)
 13D0 80910000          lds R24,_ControlCmd
 13D4 8230              cpi R24,2
 13D6 09F0              breq X219
 13D8 E3C4              xjmp L346
 13DA           X219:
 13DA           X119:
 13DA           ; 				{
 13DA           ; 					cmdState = 0;
 13DA 2224              clr R2
 13DC 20920000          sts L6,R2
 13E0           ;                                       Uart0ReUnable;
 13E0 8091C100          lds R24,193
 13E4 8F7E              andi R24,239
 13E6 8093C100          sts 193,R24
 13EA           ;                                       uart_Printf("#%4d CommandReceive $   0\r\n",ControlCmd.cmdIdx);
 13EA 20910100          lds R18,_ControlCmd+1
 13EE 30910200          lds R19,_ControlCmd+1+1
 13F2 00E0              ldi R16,<L22
 13F4 10E0              ldi R17,>L22
 13F6 0E940000          xcall _uart_Printf
 13FA           ;                                       Uart0ReEnable;
 13FA 8091C100          lds R24,193
 13FE 8061              ori R24,16
 1400 8093C100          sts 193,R24
 1404           ;                                       if(miantianSubFunction == 0)
 1404 20900A00          lds R2,_miantianSubFunction
 1408 30900B00          lds R3,_miantianSubFunction+1
 140C 2220              tst R2
 140E 09F0              breq X220
 1410 1AC4              xjmp L349
 1412           X220:
 1412 3320              tst R3
 1414 09F0              breq X221
 1416 17C4              xjmp L349
 1418           X221:
 1418           X120:
 1418           ; 					{
 1418           ; 						// 空闲状态下接收命令
 1418           ; 						switch(ControlCmd.cmdIdx)
 1418 60910100          lds R22,_ControlCmd+1
 141C 70910200          lds R23,_ControlCmd+1+1
 1420 6336              cpi R22,99
 1422 E0E0              ldi R30,0
 1424 7E07              cpc R23,R30
 1426 09F4              brne X222
 1428 D8C0              xjmp L368
 142A           X222:
 142A           X121:
 142A 83E6              ldi R24,99
 142C 90E0              ldi R25,0
 142E 8617              cp R24,R22
 1430 9707              cpc R25,R23
 1432 1CF1              brlt L514
 1434           X122:
 1434           L513:
 1434 60910100          lds R22,_ControlCmd+1
 1438 70910200          lds R23,_ControlCmd+1+1
 143C 6130              cpi R22,1
 143E E0E0              ldi R30,0
 1440 7E07              cpc R23,R30
 1442 09F4              brne X223
 1444 36C0              xjmp L354
 1446           X223:
 1446           X123:
 1446 6330              cpi R22,3
 1448 E0E0              ldi R30,0
 144A 7E07              cpc R23,R30
 144C 09F4              brne X224
 144E 46C0              xjmp L356
 1450           X224:
 1450           X124:
 1450 6430              cpi R22,4
 1452 E0E0              ldi R30,0
 1454 7E07              cpc R23,R30
 1456 09F4              brne X225
 1458 52C0              xjmp L358
 145A           X225:
 145A           X125:
 145A 6530              cpi R22,5
 145C E0E0              ldi R30,0
 145E 7E07              cpc R23,R30
 1460 09F4              brne X226
 1462 50C0              xjmp L359
 1464           X226:
 1464           X126:
 1464 6A30              cpi R22,10
 1466 E0E0              ldi R30,0
 1468 7E07              cpc R23,R30
 146A 09F4              brne X227
 146C 7BC0              xjmp L363
 146E           X227:
 146E           X127:
 146E 6B30              cpi R22,11
 1470 E0E0              ldi R30,0
 1472 7E07              cpc R23,R30
 1474 09F4              brne X228
 1476 92C0              xjmp L367
 1478           X228:
 1478           X128:
 1478 D1C3              xjmp L351
 147A           L514:
 147A 60910100          lds R22,_ControlCmd+1
 147E 70910200          lds R23,_ControlCmd+1+1
 1482 623A              cpi R22,162
 1484 EFE0              ldi R30,15
 1486 7E07              cpc R23,R30
 1488 0CF4              brge X229
 148A C8C3              xjmp L351
 148C           X229:
 148C           X129:
 148C 83E0              ldi R24,4099
 148E 90E1              ldi R25,16
 1490 8617              cp R24,R22
 1492 9707              cpc R25,R23
 1494 0CF4              brge X230
 1496 C2C3              xjmp L351
 1498           X230:
 1498           X130:
 1498 80E0              ldi R24,<L515
 149A 90E0              ldi R25,>L515
 149C FB01              movw R30,R22
 149E E25A              subi R30,162
 14A0 FF40              sbci R31,15
 14A2 EE0F              lsl R30
 14A4 FF1F              rol R31
 14A6 E80F              add R30,R24
 14A8 F91F              adc R31,R25
 14AA 2790              elpm R2,Z+
 14AC 3690              elpm R3,Z
 14AE F101              movw R30,R2
 14B0 0994               ijmp
 14B2           L354:
 14B2           ; 						{
 14B2           ; 							case 1:		// #0001 查询当前软件版本号
 14B2           ; 								Uart0ReUnable;
 14B2 8091C100          lds R24,193
 14B6 8F7E              andi R24,239
 14B8 8093C100          sts 193,R24
 14BC           ;                                                               uart_Printf("%s $%s [Maintain]\r\n", strM0100, strVersion);
 14BC 80E0              ldi R24,<_strVersion
 14BE 90E0              ldi R25,>_strVersion
 14C0 9983              std y+1,R25
 14C2 8883              std y+0,R24
 14C4 20E0              ldi R18,<_strM0100
 14C6 30E0              ldi R19,>_strM0100
 14C8 00E0              ldi R16,<L355
 14CA 10E0              ldi R17,>L355
 14CC 0E940000          xcall _uart_Printf
 14D0           ;                                                               Uart0ReEnable;
 14D0 8091C100          lds R24,193
 14D4 8061              ori R24,16
 14D6 8093C100          sts 193,R24
 14DA           ;                                                               break;
 14DA 33C4              xjmp L350
 14DC           L356:
 14DC           ; 							case 3:		// #0003 查询工作进程
 14DC           ; 								Uart0ReUnable;
 14DC 8091C100          lds R24,193
 14E0 8F7E              andi R24,239
 14E2 8093C100          sts 193,R24
 14E6           ;                                                               uart_Printf("%s $   4 [Maintain]\r\n",strM0110);
 14E6 20E0              ldi R18,<_strM0110
 14E8 30E0              ldi R19,>_strM0110
 14EA 00E0              ldi R16,<L357
 14EC 10E0              ldi R17,>L357
 14EE 0E940000          xcall _uart_Printf
 14F2           ;                                                               Uart0ReEnable;
 14F2 8091C100          lds R24,193
 14F6 8061              ori R24,16
 14F8 8093C100          sts 193,R24
 14FC           ;                                                               break;
 14FC 22C4              xjmp L350
 14FE           L358:
 14FE           ; 							case 4:	// quit
 14FE           ; 								SetWorkStep(0);
 14FE 0027              clr R16
 1500 D5D4              xcall _SetWorkStep
 1502           ;                                                               break;
 1502 1FC4              xjmp L350
 1504           L359:
 1504           ; 							case 5:
 1504           ; 								if(ControlCmd.pam[0] == 0)
 1504 20900300          lds R2,_ControlCmd+3
 1508 30900400          lds R3,_ControlCmd+3+1
 150C 2220              tst R2
 150E B1F4              brne L360
 1510 3320              tst R3
 1512 A1F4              brne L360
 1514           X131:
 1514           ; 								{
 1514           ; 									workSwitch = 1;
 1514 81E0              ldi R24,1
 1516 80930100          sts _workSwitch,R24
 151A           ;                                                                       Uart0ReUnable;
 151A 8091C100          lds R24,193
 151E 8F7E              andi R24,239
 1520 8093C100          sts 193,R24
 1524           ;                                                                       uart_Printf("%s\r\n",strM0105);
 1524 20E0              ldi R18,<_strM0105
 1526 30E0              ldi R19,>_strM0105
 1528 00E0              ldi R16,<L2
 152A 10E0              ldi R17,>L2
 152C 0E940000          xcall _uart_Printf
 1530           ;                                                                       Uart0ReEnable;
 1530 8091C100          lds R24,193
 1534 8061              ori R24,16
 1536 8093C100          sts 193,R24
 153A           ;                                                               }
 153A 03C4              xjmp L350
 153C           L360:
 153C           ; 								else
 153C           ; 								{
 153C           ; 									workSwitch = 0;
 153C 2224              clr R2
 153E 20920100          sts _workSwitch,R2
 1542           ;                                                                       Uart0ReUnable;
 1542 8091C100          lds R24,193
 1546 8F7E              andi R24,239
 1548 8093C100          sts 193,R24
 154C           ;                                                                       uart_Printf("%s\r\n",strM0106);
 154C 20E0              ldi R18,<_strM0106
 154E 30E0              ldi R19,>_strM0106
 1550 00E0              ldi R16,<L2
 1552 10E0              ldi R17,>L2
 1554 0E940000          xcall _uart_Printf
 1558           ;                                                                       Uart0ReEnable;
 1558 8091C100          lds R24,193
 155C 8061              ori R24,16
 155E 8093C100          sts 193,R24
 1562           ;                                                               }
 1562           ;                                                               break;
 1562 EFC3              xjmp L350
 1564           L363:
 1564           ; 							case 10:	// #0010	开启片仓
 1564           ; 								if(CardStoreOpenLook == 0)
 1564 20900000          lds R2,_CardStoreOpenLook
 1568 2220              tst R2
 156A 39F4              brne L364
 156C           X132:
 156C           ; 									SetStoreDoorOpen(ControlCmd.pam[0]);
 156C 00910300          lds R16,_ControlCmd+3
 1570 10910400          lds R17,_ControlCmd+3+1
 1574 0E940000          xcall _SetStoreDoorOpen
 1578 05C0              xjmp L365
 157A           L364:
 157A           ; 							else
 157A           ; 								Uart0ReUnable;
 157A 8091C100          lds R24,193
 157E 8F7E              andi R24,239
 1580 8093C100          sts 193,R24
 1584           L365:
 1584           ; 								uart_Printf("%s\r\n",strM0112);
 1584 20E0              ldi R18,<_strM0112
 1586 30E0              ldi R19,>_strM0112
 1588 00E0              ldi R16,<L2
 158A 10E0              ldi R17,>L2
 158C 0E940000          xcall _uart_Printf
 1590           ;                                                               Uart0ReEnable;
 1590 8091C100          lds R24,193
 1594 8061              ori R24,16
 1596 8093C100          sts 193,R24
 159A           ;                                                               break;
 159A D3C3              xjmp L350
 159C           L367:
 159C           ; 							case 11:	// #0011	读取片仓温湿度
 159C           ; 								Uart0ReUnable;
 159C 8091C100          lds R24,193
 15A0 8F7E              andi R24,239
 15A2 8093C100          sts 193,R24
 15A6           ;                                                               uart_Printf("%s $%4d $%4d\r\n",strM0111, GetStoreHumi(), GetStoreTemp());
 15A6 0E940000          xcall _GetStoreHumi
 15AA E02E              mov R14,R16
 15AC 0E940000          xcall _GetStoreTemp
 15B0 602F              mov R22,R16
 15B2 262E              mov R2,R22
 15B4 3324              clr R3
 15B6 3B82              std y+3,R3
 15B8 2A82              std y+2,R2
 15BA 2E2C              mov R2,R14
 15BC 3324              clr R3
 15BE 3982              std y+1,R3
 15C0 2882              std y+0,R2
 15C2 20E0              ldi R18,<_strM0111
 15C4 30E0              ldi R19,>_strM0111
 15C6 00E0              ldi R16,<L71
 15C8 10E0              ldi R17,>L71
 15CA 0E940000          xcall _uart_Printf
 15CE           ;                                                               Uart0ReEnable;
 15CE 8091C100          lds R24,193
 15D2 8061              ori R24,16
 15D4 8093C100          sts 193,R24
 15D8           ;                                                               break;
 15D8 B4C3              xjmp L350
 15DA           L368:
 15DA           ; 							case 99:	// 重起, 设置看门狗
 15DA           ; 								ReStart(ControlCmd.pam[0]);	break;
 15DA 00910300          lds R16,_ControlCmd+3
 15DE 10910400          lds R17,_ControlCmd+3+1
 15E2 0E940000          xcall _ReStart
 15E6 ADC3              xjmp L350
 15E8           L370:
 15E8           ; 							case 4002:	// 取样针在混匀池右边沿位置调整
 15E8           ; 								SetNeedleOnMixPosFactor((signed int)ControlCmd.pam[0]);break;
 15E8 00910300          lds R16,_ControlCmd+3
 15EC 10910400          lds R17,_ControlCmd+3+1
 15F0 0E940000          xcall _SetNeedleOnMixPosFactor
 15F4 A6C3              xjmp L350
 15F6           L372:
 15F6           ; 							case 4004:	// 滴样高度调整
 15F6           ; 								SetDropHeightFactor((signed int)ControlCmd.pam[0]);		break;
 15F6 00910300          lds R16,_ControlCmd+3
 15FA 10910400          lds R17,_ControlCmd+3+1
 15FE 0E940000          xcall _SetDropHeightFactor
 1602 9FC3              xjmp L350
 1604           L374:
 1604           ; 							case 4005:	miantianSubFunction = CardLoadStartAdjust;		break;
 1604 80E0              ldi R24,<PL_CardLoadStartAdjust
 1606 90E0              ldi R25,>PL_CardLoadStartAdjust
 1608 90930B00          sts _miantianSubFunction+1,R25
 160C 80930A00          sts _miantianSubFunction,R24
 1610 98C3              xjmp L350
 1612           L375:
 1612           ; 							case 4006:	miantianSubFunction = CardLoadEndAdjust;		break;
 1612 80E0              ldi R24,<PL_CardLoadEndAdjust
 1614 90E0              ldi R25,>PL_CardLoadEndAdjust
 1616 90930B00          sts _miantianSubFunction+1,R25
 161A 80930A00          sts _miantianSubFunction,R24
 161E 91C3              xjmp L350
 1620           L376:
 1620           ; 							case 4007:	miantianSubFunction = CardUnloadStartAdjust;	break;
 1620 80E0              ldi R24,<PL_CardUnloadStartAdjust
 1622 90E0              ldi R25,>PL_CardUnloadStartAdjust
 1624 90930B00          sts _miantianSubFunction+1,R25
 1628 80930A00          sts _miantianSubFunction,R24
 162C 8AC3              xjmp L350
 162E           L377:
 162E           ; 							case 4008:	miantianSubFunction = CardUnloadEndAdjust;		break;
 162E 80E0              ldi R24,<PL_CardUnloadEndAdjust
 1630 90E0              ldi R25,>PL_CardUnloadEndAdjust
 1632 90930B00          sts _miantianSubFunction+1,R25
 1636 80930A00          sts _miantianSubFunction,R24
 163A 83C3              xjmp L350
 163C           L378:
 163C           ; 							case 4009:
 163C           ; 								SetLiquidPhotoAdjustNum(ControlCmd.pam[0]);
 163C 00910300          lds R16,_ControlCmd+3
 1640 10910400          lds R17,_ControlCmd+3+1
 1644 0E940000          xcall _SetLiquidPhotoAdjustNum
 1648           ;                                                               miantianSubFunction = LiquidPhotoAdjust;
 1648 80E0              ldi R24,<PL_LiquidPhotoAdjust
 164A 90E0              ldi R25,>PL_LiquidPhotoAdjust
 164C 90930B00          sts _miantianSubFunction+1,R25
 1650 80930A00          sts _miantianSubFunction,R24
 1654           ;                                                               break;
 1654 76C3              xjmp L350
 1656           L380:
 1656           ; 							case 4010:
 1656           ; 								SetCardStorePhotoAdjustNum(ControlCmd.pam[0]);
 1656 00910300          lds R16,_ControlCmd+3
 165A 10910400          lds R17,_ControlCmd+3+1
 165E 0E940000          xcall _SetCardStorePhotoAdjustNum
 1662           ;                                                               miantianSubFunction = CardStorePhotoAdjust;
 1662 80E0              ldi R24,<PL_CardStorePhotoAdjust
 1664 90E0              ldi R25,>PL_CardStorePhotoAdjust
 1666 90930B00          sts _miantianSubFunction+1,R25
 166A 80930A00          sts _miantianSubFunction,R24
 166E           ;                                                               break;
 166E 69C3              xjmp L350
 1670           L382:
 1670           ; 							case 4011:		// SetLampLum
 1670           ; 								if(ControlCmd.pam[0] == 0)
 1670 20900300          lds R2,_ControlCmd+3
 1674 30900400          lds R3,_ControlCmd+3+1
 1678 2220              tst R2
 167A A9F4              brne L383
 167C 3320              tst R3
 167E 99F4              brne L383
 1680           X133:
 1680           ; 								{
 1680           ; 									iTmp0 = AdjustTestLamp(0, ControlCmd.pam[1]);
 1680 20910500          lds R18,_ControlCmd+3+2
 1684 30910600          lds R19,_ControlCmd+3+2+1
 1688 0027              clr R16
 168A 0E940000          xcall _AdjustTestLamp
 168E 7801              movw R14,R16
 1690 5701              movw R10,R14
 1692           ;                                                                       iTmp1 = AdjustTestLamp(1, ControlCmd.pam[2]);
 1692 20910700          lds R18,_ControlCmd+3+4
 1696 30910800          lds R19,_ControlCmd+3+4+1
 169A 01E0              ldi R16,1
 169C 0E940000          xcall _AdjustTestLamp
 16A0 7801              movw R14,R16
 16A2 6701              movw R12,R14
 16A4           ;                                                               }
 16A4 12C0              xjmp L384
 16A6           L383:
 16A6           ; 								else
 16A6           ; 								{
 16A6           ; 									iTmp0 = AdjustTestLamp(2, ControlCmd.pam[1]);
 16A6 20910500          lds R18,_ControlCmd+3+2
 16AA 30910600          lds R19,_ControlCmd+3+2+1
 16AE 02E0              ldi R16,2
 16B0 0E940000          xcall _AdjustTestLamp
 16B4 7801              movw R14,R16
 16B6 5701              movw R10,R14
 16B8           ;                                                                       iTmp1 = AdjustTestLamp(3, ControlCmd.pam[2]);
 16B8 20910700          lds R18,_ControlCmd+3+4
 16BC 30910800          lds R19,_ControlCmd+3+4+1
 16C0 03E0              ldi R16,3
 16C2 0E940000          xcall _AdjustTestLamp
 16C6 7801              movw R14,R16
 16C8 6701              movw R12,R14
 16CA           ;                                                               }
 16CA           L384:
 16CA           ; 								Uart0ReUnable;
 16CA 8091C100          lds R24,193
 16CE 8F7E              andi R24,239
 16D0 8093C100          sts 193,R24
 16D4           ;                                                               uart_Printf("%s $%4d $%4d\r\n", strM4114, iTmp0, iTmp1);
 16D4 DB82              std y+3,R13
 16D6 CA82              std y+2,R12
 16D8 B982              std y+1,R11
 16DA A882              std y+0,R10
 16DC 20E0              ldi R18,<_strM4114
 16DE 30E0              ldi R19,>_strM4114
 16E0 00E0              ldi R16,<L71
 16E2 10E0              ldi R17,>L71
 16E4 0E940000          xcall _uart_Printf
 16E8           ;                                                               Uart0ReEnable;
 16E8 8091C100          lds R24,193
 16EC 8061              ori R24,16
 16EE 8093C100          sts 193,R24
 16F2           ;                                                               break;
 16F2 27C3              xjmp L350
 16F4           L394:
 16F4           ; 							case 4012:		// GetLampLum
 16F4           ; 								if(ControlCmd.pam[0] == 0)
 16F4 20900300          lds R2,_ControlCmd+3
 16F8 30900400          lds R3,_ControlCmd+3+1
 16FC 2220              tst R2
 16FE 69F4              brne L395
 1700 3320              tst R3
 1702 59F4              brne L395
 1704           X134:
 1704           ; 								{
 1704           ; 									iTmp0 = ReadTestLampPWM(0);
 1704 0027              clr R16
 1706 0E940000          xcall _ReadTestLampPWM
 170A 7801              movw R14,R16
 170C 5701              movw R10,R14
 170E           ;                                                                       iTmp1 = ReadTestLampPWM(1);
 170E 01E0              ldi R16,1
 1710 0E940000          xcall _ReadTestLampPWM
 1714 7801              movw R14,R16
 1716 6701              movw R12,R14
 1718           ;                                                               }
 1718 0AC0              xjmp L396
 171A           L395:
 171A           ; 								else
 171A           ; 								{
 171A           ; 									iTmp0 = ReadTestLampPWM(2);
 171A 02E0              ldi R16,2
 171C 0E940000          xcall _ReadTestLampPWM
 1720 7801              movw R14,R16
 1722 5701              movw R10,R14
 1724           ;                                                                       iTmp1 = ReadTestLampPWM(3);
 1724 03E0              ldi R16,3
 1726 0E940000          xcall _ReadTestLampPWM
 172A 7801              movw R14,R16
 172C 6701              movw R12,R14
 172E           ;                                                               }
 172E           L396:
 172E           ; 								Uart0ReUnable;
 172E 8091C100          lds R24,193
 1732 8F7E              andi R24,239
 1734 8093C100          sts 193,R24
 1738           ;                                                               uart_Printf("%s $%4d $%4d\r\n", strM4114, iTmp0, iTmp1);
 1738 DB82              std y+3,R13
 173A CA82              std y+2,R12
 173C B982              std y+1,R11
 173E A882              std y+0,R10
 1740 20E0              ldi R18,<_strM4114
 1742 30E0              ldi R19,>_strM4114
 1744 00E0              ldi R16,<L71
 1746 10E0              ldi R17,>L71
 1748 0E940000          xcall _uart_Printf
 174C           ;                                                               Uart0ReEnable;
 174C 8091C100          lds R24,193
 1750 8061              ori R24,16
 1752 8093C100          sts 193,R24
 1756           ;                                                               break;
 1756 F5C2              xjmp L350
 1758           L398:
 1758           ; 							case 4013:		// TurnOnLamp
 1758           ; 								if(ControlCmd.pam[0] == 0)
 1758 20900300          lds R2,_ControlCmd+3
 175C 30900400          lds R3,_ControlCmd+3+1
 1760 2220              tst R2
 1762 29F4              brne L399
 1764 3320              tst R3
 1766 19F4              brne L399
 1768           X135:
 1768           ; 									TestALampOpen();
 1768 0E940000          xcall _TestALampOpen
 176C EAC2              xjmp L350
 176E           L399:
 176E           ; 								else	
 176E           ; 									TestBLampOpen();
 176E 0E940000          xcall _TestBLampOpen
 1772           ;                                                               break;
 1772 E7C2              xjmp L350
 1774           L402:
 1774           ; 							case 4014:		// TurnOffLamp
 1774           ; 								if(ControlCmd.pam[0] == 0)
 1774 20900300          lds R2,_ControlCmd+3
 1778 30900400          lds R3,_ControlCmd+3+1
 177C 2220              tst R2
 177E 29F4              brne L403
 1780 3320              tst R3
 1782 19F4              brne L403
 1784           X136:
 1784           ; 									TestALampClose();
 1784 0E940000          xcall _TestALampClose
 1788 DCC2              xjmp L350
 178A           L403:
 178A           ; 								else	
 178A           ; 									TestBLampClose();
 178A 0E940000          xcall _TestBLampClose
 178E           ;                                                               break;
 178E D9C2              xjmp L350
 1790           L406:
 1790           ; 							case 4015:
 1790           ; 								iTmp0 = CalculateCalStandCoeff(ControlCmd.pam[0],ControlCmd.pam[1]);
 1790 20910500          lds R18,_ControlCmd+3+2
 1794 30910600          lds R19,_ControlCmd+3+2+1
 1798 00910300          lds R16,_ControlCmd+3
 179C 10910400          lds R17,_ControlCmd+3+1
 17A0 0E940000          xcall _CalculateCalStandCoeff
 17A4 7801              movw R14,R16
 17A6 5701              movw R10,R14
 17A8           ;                                                               iTmp1 = Save_DiluentCalChart(ControlCmd.pam[0]);
 17A8 00910300          lds R16,_ControlCmd+3
 17AC 10910400          lds R17,_ControlCmd+3+1
 17B0 0E940000          xcall _Save_DiluentCalChart
 17B4 7801              movw R14,R16
 17B6 6701              movw R12,R14
 17B8           ;                                                               if(ControlCmd.pam[0] == 0)
 17B8 20900300          lds R2,_ControlCmd+3
 17BC 30900400          lds R3,_ControlCmd+3+1
 17C0 2220              tst R2
 17C2 49F4              brne L411
 17C4 3320              tst R3
 17C6 39F4              brne L411
 17C8           X137:
 17C8           ; 									ControlCmd.pam[0] = 9;
 17C8 89E0              ldi R24,9
 17CA 90E0              ldi R25,0
 17CC 90930400          sts _ControlCmd+3+1,R25
 17D0 80930300          sts _ControlCmd+3,R24
 17D4 0DC0              xjmp L412
 17D6           L411:
 17D6           ; 								else if(ControlCmd.pam[0] > 13)
 17D6 8DE0              ldi R24,13
 17D8 90E0              ldi R25,0
 17DA 20900300          lds R2,_ControlCmd+3
 17DE 30900400          lds R3,_ControlCmd+3+1
 17E2 8215              cp R24,R2
 17E4 9305              cpc R25,R3
 17E6 20F4              brsh L415
 17E8           X138:
 17E8           ; 									ControlCmd.pam[0] = 13;
 17E8 90930400          sts _ControlCmd+3+1,R25
 17EC 80930300          sts _ControlCmd+3,R24
 17F0           L415:
 17F0           L412:
 17F0           ; 								Uart0ReUnable;
 17F0 8091C100          lds R24,193
 17F4 8F7E              andi R24,239
 17F6 8093C100          sts 193,R24
 17FA           ;                                                               uart_Printf("%s $%4d $%4d $%4d\r\n", strM4117, ControlCmd.pam[0],iTmp0,iTmp1);
 17FA DD82              std y+5,R13
 17FC CC82              std y+4,R12
 17FE BB82              std y+3,R11
 1800 AA82              std y+2,R10
 1802 20900300          lds R2,_ControlCmd+3
 1806 30900400          lds R3,_ControlCmd+3+1
 180A 3982              std y+1,R3
 180C 2882              std y+0,R2
 180E 20E0              ldi R18,<_strM4117
 1810 30E0              ldi R19,>_strM4117
 1812 00E0              ldi R16,<L232
 1814 10E0              ldi R17,>L232
 1816 0E940000          xcall _uart_Printf
 181A           ;                                                               Uart0ReEnable;
 181A 8091C100          lds R24,193
 181E 8061              ori R24,16
 1820 8093C100          sts 193,R24
 1824           ;                                                               break;
 1824 8EC2              xjmp L350
 1826           L420:
 1826           ; 							case 4016:
 1826           ; 								miantianSubFunction = DiluentQuantifyTest;
 1826 80E0              ldi R24,<PL_DiluentQuantifyTest
 1828 90E0              ldi R25,>PL_DiluentQuantifyTest
 182A 90930B00          sts _miantianSubFunction+1,R25
 182E 80930A00          sts _miantianSubFunction,R24
 1832           ;                                                               SetDiluentQuantifyVolume(40);
 1832 08E2              ldi R16,40
 1834 0E940000          xcall _SetDiluentQuantifyVolume
 1838           ;                                                               break;
 1838 84C2              xjmp L350
 183A           L421:
 183A           ; 							case 4017:	// 抽打混匀高度调整
 183A           ; 								si = SetMixHeight((signed char)ControlCmd.pam[0]);
 183A 00910300          lds R16,_ControlCmd+3
 183E 10910400          lds R17,_ControlCmd+3+1
 1842 1127              clr R17
 1844 07FD              sbrc R16,7
 1846 1095              com R17
 1848 0E940000          xcall _SetMixHeight
 184C 5801              movw R10,R16
 184E           ;                                                               Uart0ReUnable;
 184E 8091C100          lds R24,193
 1852 8F7E              andi R24,239
 1854 8093C100          sts 193,R24
 1858           ;                                                               uart_Printf("%s $%4d\r\n",strM4118, si);
 1858 2A2C              mov R2,R10
 185A 3324              clr R3
 185C 27FC              sbrc R2,7
 185E 3094              com R3
 1860 3982              std y+1,R3
 1862 2882              std y+0,R2
 1864 20E0              ldi R18,<_strM4118
 1866 30E0              ldi R19,>_strM4118
 1868 00E0              ldi R16,<L218
 186A 10E0              ldi R17,>L218
 186C 0E940000          xcall _uart_Printf
 1870           ;                                                               Uart0ReEnable;
 1870 8091C100          lds R24,193
 1874 8061              ori R24,16
 1876 8093C100          sts 193,R24
 187A           ;                                                               break;
 187A 63C2              xjmp L350
 187C           L423:
 187C           ; 							// 
 187C           ; 							case 4020:	miantianSubFunction = TurnPlateCheck;		break;
 187C 80E0              ldi R24,<PL_TurnPlateCheck
 187E 90E0              ldi R25,>PL_TurnPlateCheck
 1880 90930B00          sts _miantianSubFunction+1,R25
 1884 80930A00          sts _miantianSubFunction,R24
 1888 5CC2              xjmp L350
 188A           L424:
 188A           ; 							case 4021:	miantianSubFunction = NeedleTurnCheck;		break;
 188A 80E0              ldi R24,<PL_NeedleTurnCheck
 188C 90E0              ldi R25,>PL_NeedleTurnCheck
 188E 90930B00          sts _miantianSubFunction+1,R25
 1892 80930A00          sts _miantianSubFunction,R24
 1896 55C2              xjmp L350
 1898           L425:
 1898           ; 							case 4022:	miantianSubFunction = NeedleUpdownCheck;	break;
 1898 80E0              ldi R24,<PL_NeedleUpdownCheck
 189A 90E0              ldi R25,>PL_NeedleUpdownCheck
 189C 90930B00          sts _miantianSubFunction+1,R25
 18A0 80930A00          sts _miantianSubFunction,R24
 18A4 4EC2              xjmp L350
 18A6           L426:
 18A6           ; 							case 4023:	miantianSubFunction = CardStoreMoveCheck;	break;
 18A6 80E0              ldi R24,<PL_CardStoreMoveCheck
 18A8 90E0              ldi R25,>PL_CardStoreMoveCheck
 18AA 90930B00          sts _miantianSubFunction+1,R25
 18AE 80930A00          sts _miantianSubFunction,R24
 18B2 47C2              xjmp L350
 18B4           L427:
 18B4           ; 							case 4024:	miantianSubFunction = CardTakeHookCheck;	break;
 18B4 80E0              ldi R24,<PL_CardTakeHookCheck
 18B6 90E0              ldi R25,>PL_CardTakeHookCheck
 18B8 90930B00          sts _miantianSubFunction+1,R25
 18BC 80930A00          sts _miantianSubFunction,R24
 18C0 40C2              xjmp L350
 18C2           L428:
 18C2           ; 							case 4025:	miantianSubFunction = CardLoadCheck;		break;
 18C2 80E0              ldi R24,<PL_CardLoadCheck
 18C4 90E0              ldi R25,>PL_CardLoadCheck
 18C6 90930B00          sts _miantianSubFunction+1,R25
 18CA 80930A00          sts _miantianSubFunction,R24
 18CE 39C2              xjmp L350
 18D0           L429:
 18D0           ; 							case 4026:	miantianSubFunction = CardUnloadCheck;		break;
 18D0 80E0              ldi R24,<PL_CardUnloadCheck
 18D2 90E0              ldi R25,>PL_CardUnloadCheck
 18D4 90930B00          sts _miantianSubFunction+1,R25
 18D8 80930A00          sts _miantianSubFunction,R24
 18DC 32C2              xjmp L350
 18DE           L430:
 18DE           ; 							case 4029:	miantianSubFunction = DiluentPumpCheck;		break;
 18DE 80E0              ldi R24,<PL_DiluentPumpCheck
 18E0 90E0              ldi R25,>PL_DiluentPumpCheck
 18E2 90930B00          sts _miantianSubFunction+1,R25
 18E6 80930A00          sts _miantianSubFunction,R24
 18EA 2BC2              xjmp L350
 18EC           L431:
 18EC           ; 							case 4030:	miantianSubFunction = LeanerPumpCheck;		break;
 18EC 80E0              ldi R24,<PL_LeanerPumpCheck
 18EE 90E0              ldi R25,>PL_LeanerPumpCheck
 18F0 90930B00          sts _miantianSubFunction+1,R25
 18F4 80930A00          sts _miantianSubFunction,R24
 18F8 24C2              xjmp L350
 18FA           L432:
 18FA           ; 							case 4031:	miantianSubFunction = EffluentPumpCheck;	break;
 18FA 80E0              ldi R24,<PL_EffluentPumpCheck
 18FC 90E0              ldi R25,>PL_EffluentPumpCheck
 18FE 90930B00          sts _miantianSubFunction+1,R25
 1902 80930A00          sts _miantianSubFunction,R24
 1906 1DC2              xjmp L350
 1908           L433:
 1908           ; 							case 4032:	miantianSubFunction = SamplingSyringCheck;	break;
 1908 80E0              ldi R24,<PL_SamplingSyringCheck
 190A 90E0              ldi R25,>PL_SamplingSyringCheck
 190C 90930B00          sts _miantianSubFunction+1,R25
 1910 80930A00          sts _miantianSubFunction,R24
 1914 16C2              xjmp L350
 1916           L434:
 1916           ; 							case 4033:
 1916           ; 							//	SetLiquidPhotoAdjustNum(HTCmdBuf.pam[0]);
 1916           ; 								miantianSubFunction = LiquidPhotoCheck;
 1916 80E0              ldi R24,<PL_LiquidPhotoCheck
 1918 90E0              ldi R25,>PL_LiquidPhotoCheck
 191A 90930B00          sts _miantianSubFunction+1,R25
 191E 80930A00          sts _miantianSubFunction,R24
 1922           ;                                                               break;
 1922 0FC2              xjmp L350
 1924           L435:
 1924           ; 							case 4034:
 1924           ; 								SetCardStorePhotoAdjustNum(ControlCmd.pam[0]);
 1924 00910300          lds R16,_ControlCmd+3
 1928 10910400          lds R17,_ControlCmd+3+1
 192C 0E940000          xcall _SetCardStorePhotoAdjustNum
 1930           ;                                                               miantianSubFunction = CardStorePhotoCheck;
 1930 80E0              ldi R24,<PL_CardStorePhotoCheck
 1932 90E0              ldi R25,>PL_CardStorePhotoCheck
 1934 90930B00          sts _miantianSubFunction+1,R25
 1938 80930A00          sts _miantianSubFunction,R24
 193C           ;                                                               break;
 193C 02C2              xjmp L350
 193E           L437:
 193E           ; 							case 4035:	miantianSubFunction = NeedleOnMixSideCheck;	break;
 193E 80E0              ldi R24,<PL_NeedleOnMixSideCheck
 1940 90E0              ldi R25,>PL_NeedleOnMixSideCheck
 1942 90930B00          sts _miantianSubFunction+1,R25
 1946 80930A00          sts _miantianSubFunction,R24
 194A FBC1              xjmp L350
 194C           L438:
 194C           ; 							case 4036:	miantianSubFunction = DropHeightCheck;	break;
 194C 80E0              ldi R24,<PL_DropHeightCheck
 194E 90E0              ldi R25,>PL_DropHeightCheck
 1950 90930B00          sts _miantianSubFunction+1,R25
 1954 80930A00          sts _miantianSubFunction,R24
 1958 F4C1              xjmp L350
 195A           L439:
 195A           ; 							case 4037:	miantianSubFunction = MixHeightCheck;	break;
 195A 80E0              ldi R24,<PL_MixHeightCheck
 195C 90E0              ldi R25,>PL_MixHeightCheck
 195E 90930B00          sts _miantianSubFunction+1,R25
 1962 80930A00          sts _miantianSubFunction,R24
 1966 EDC1              xjmp L350
 1968           L440:
 1968           ; 							case 4099:	miantianSubFunction = GetStoreProcess;break;
 1968 80E0              ldi R24,<PL_GetStoreProcess
 196A 90E0              ldi R25,>PL_GetStoreProcess
 196C 90930B00          sts _miantianSubFunction+1,R25
 1970 80930A00          sts _miantianSubFunction,R24
 1974 E6C1              xjmp L350
 1976           L441:
 1976           ; 							
 1976           ; 							case 4050:
 1976           ; 								miantianSubFunction = DiluentQuantifyTest;
 1976 80E0              ldi R24,<PL_DiluentQuantifyTest
 1978 90E0              ldi R25,>PL_DiluentQuantifyTest
 197A 90930B00          sts _miantianSubFunction+1,R25
 197E 80930A00          sts _miantianSubFunction,R24
 1982           ;                                                               SetDiluentQuantifyVolume(ControlCmd.pam[0]);
 1982 00910300          lds R16,_ControlCmd+3
 1986 10910400          lds R17,_ControlCmd+3+1
 198A 0E940000          xcall _SetDiluentQuantifyVolume
 198E           ;                                                               break;
 198E D9C1              xjmp L350
 1990           L443:
 1990           ; 							case 4051:
 1990           ; 								miantianSubFunction = LeanerQuantifyTest;
 1990 80E0              ldi R24,<PL_LeanerQuantifyTest
 1992 90E0              ldi R25,>PL_LeanerQuantifyTest
 1994 90930B00          sts _miantianSubFunction+1,R25
 1998 80930A00          sts _miantianSubFunction,R24
 199C           ;                                                               SetLeanerQuantifyVolume(ControlCmd.pam[0]);
 199C 00910300          lds R16,_ControlCmd+3
 19A0 10910400          lds R17,_ControlCmd+3+1
 19A4 0E940000          xcall _SetLeanerQuantifyVolume
 19A8           ;                                                               break;
 19A8 CCC1              xjmp L350
 19AA           L445:
 19AA           ; 							case 4052:
 19AA           ; 								miantianSubFunction = SampQuantifyTest;
 19AA 80E0              ldi R24,<PL_SampQuantifyTest
 19AC 90E0              ldi R25,>PL_SampQuantifyTest
 19AE 90930B00          sts _miantianSubFunction+1,R25
 19B2 80930A00          sts _miantianSubFunction,R24
 19B6           ;                                                               SetSampQuantifyVolume(ControlCmd.pam[0]);
 19B6 00910300          lds R16,_ControlCmd+3
 19BA 10910400          lds R17,_ControlCmd+3+1
 19BE 0E940000          xcall _SetSampQuantifyVolume
 19C2           ;                                                               break;
 19C2 BFC1              xjmp L350
 19C4           L447:
 19C4           ; 							case 4055:	// 上传传感器状态信息
 19C4           ; 								UpLoadingModuleSensorState((unsigned char)ControlCmd.pam[0], (unsigned char)ControlCmd.pam[1]);
 19C4 20910500          lds R18,_ControlCmd+3+2
 19C8 30910600          lds R19,_ControlCmd+3+2+1
 19CC 00910300          lds R16,_ControlCmd+3
 19D0 10910400          lds R17,_ControlCmd+3+1
 19D4 0E940000          xcall _UpLoadingModuleSensorState
 19D8           ;                                                               break;
 19D8 B4C1              xjmp L350
 19DA           L451:
 19DA           ; 							case 4056:	// 上传所有传感器状态信息
 19DA           ; 								UpLoadingAllSensorState();
 19DA 0E940000          xcall _UpLoadingAllSensorState
 19DE           ;                                                               break;
 19DE B1C1              xjmp L350
 19E0           L452:
 19E0           ; 							// 基本命令
 19E0           ; 							case 4060:		// 预定义位置设置
 19E0           ; 								cmdState =  MotAdjustPosition((unsigned char)ControlCmd.pam[0], (unsigned char)ControlCmd.pam[1]);
 19E0 20910500          lds R18,_ControlCmd+3+2
 19E4 30910600          lds R19,_ControlCmd+3+2+1
 19E8 3327              clr R19
 19EA 00910300          lds R16,_ControlCmd+3
 19EE 10910400          lds R17,_ControlCmd+3+1
 19F2 0E940000          xcall _MotAdjustPosition
 19F6 A02E              mov R10,R16
 19F8 A0920000          sts L6,R10
 19FC           ;                                                               break;
 19FC A2C1              xjmp L350
 19FE           L456:
 19FE           ; 							case 4061:		// 起始位检测
 19FE           ; 								cmdState =  MotInitCheck((unsigned char)ControlCmd.pam[0]);
 19FE 00910300          lds R16,_ControlCmd+3
 1A02 10910400          lds R17,_ControlCmd+3+1
 1A06 0E940000          xcall _MotInitCheck
 1A0A A02E              mov R10,R16
 1A0C A0920000          sts L6,R10
 1A10           ;                                                               break;
 1A10 98C1              xjmp L350
 1A12           L458:
 1A12           ; 							case 4062:		// 电机运行
 1A12           ; 								cmdState =  MotRun((unsigned char)ControlCmd.pam[0], ControlCmd.pam[1]);
 1A12 20910500          lds R18,_ControlCmd+3+2
 1A16 30910600          lds R19,_ControlCmd+3+2+1
 1A1A 00910300          lds R16,_ControlCmd+3
 1A1E 10910400          lds R17,_ControlCmd+3+1
 1A22 0E940000          xcall _MotRun
 1A26 A02E              mov R10,R16
 1A28 A0920000          sts L6,R10
 1A2C           ;                                                               break;
 1A2C 8AC1              xjmp L350
 1A2E           L462:
 1A2E           ; 							case 4063:		// 电机运行到
 1A2E           ; 								cmdState =  MotRunTo((unsigned char)ControlCmd.pam[0], ControlCmd.pam[1]);
 1A2E 20910500          lds R18,_ControlCmd+3+2
 1A32 30910600          lds R19,_ControlCmd+3+2+1
 1A36 00910300          lds R16,_ControlCmd+3
 1A3A 10910400          lds R17,_ControlCmd+3+1
 1A3E 0E940000          xcall _MotRunTo
 1A42 A02E              mov R10,R16
 1A44 A0920000          sts L6,R10
 1A48           ;                                                               break;
 1A48 7CC1              xjmp L350
 1A4A           L466:
 1A4A           ; 							case 4064:		// 电机运行指定位置
 1A4A           ; 								cmdState =  MotRunToSite((unsigned char)ControlCmd.pam[0], (unsigned char)ControlCmd.pam[1]);
 1A4A 20910500          lds R18,_ControlCmd+3+2
 1A4E 30910600          lds R19,_ControlCmd+3+2+1
 1A52 00910300          lds R16,_ControlCmd+3
 1A56 10910400          lds R17,_ControlCmd+3+1
 1A5A 0E940000          xcall _MotRunToSite
 1A5E A02E              mov R10,R16
 1A60 A0920000          sts L6,R10
 1A64           ;                                                               break;
 1A64 6EC1              xjmp L350
 1A66           L470:
 1A66           ; 							case 4065:		// 设置运行时参数
 1A66           ; 								cmdState =  SetMotRunPam((unsigned char)ControlCmd.pam[0], (unsigned char)ControlCmd.pam[1], (unsigned char)ControlCmd.pam[2],(unsigned char)ControlCmd.pam[3]);
 1A66 20900900          lds R2,_ControlCmd+3+6
 1A6A 30900A00          lds R3,_ControlCmd+3+6+1
 1A6E 2A82              std y+2,R2
 1A70 20900700          lds R2,_ControlCmd+3+4
 1A74 30900800          lds R3,_ControlCmd+3+4+1
 1A78 2882              std y+0,R2
 1A7A 20910500          lds R18,_ControlCmd+3+2
 1A7E 30910600          lds R19,_ControlCmd+3+2+1
 1A82 00910300          lds R16,_ControlCmd+3
 1A86 10910400          lds R17,_ControlCmd+3+1
 1A8A 0E940000          xcall _SetMotRunPam
 1A8E A02E              mov R10,R16
 1A90 A0920000          sts L6,R10
 1A94           ;                                                               break;
 1A94 56C1              xjmp L350
 1A96           L478:
 1A96           ; 							case 4066:		// 设置基本参数
 1A96           ; 								cmdState =  MotSetPam((unsigned char)ControlCmd.pam[0], (unsigned char)ControlCmd.pam[1], (unsigned char)ControlCmd.pam[2]);
 1A96 20900700          lds R2,_ControlCmd+3+4
 1A9A 30900800          lds R3,_ControlCmd+3+4+1
 1A9E 2882              std y+0,R2
 1AA0 20910500          lds R18,_ControlCmd+3+2
 1AA4 30910600          lds R19,_ControlCmd+3+2+1
 1AA8 00910300          lds R16,_ControlCmd+3
 1AAC 10910400          lds R17,_ControlCmd+3+1
 1AB0 0E940000          xcall _MotSetPam
 1AB4 A02E              mov R10,R16
 1AB6 A0920000          sts L6,R10
 1ABA           ;                                                               break;
 1ABA 43C1              xjmp L350
 1ABC           L484:
 1ABC           ; 							case 4067:	// 设置从机地址
 1ABC           ; 								cmdState =  SlaveSetAddress((unsigned char)ControlCmd.pam[0]);
 1ABC 00910300          lds R16,_ControlCmd+3
 1AC0 10910400          lds R17,_ControlCmd+3+1
 1AC4 0E940000          xcall _SlaveSetAddress
 1AC8 A02E              mov R10,R16
 1ACA A0920000          sts L6,R10
 1ACE           ;                                                               break;
 1ACE 39C1              xjmp L350
 1AD0           L486:
 1AD0           ; 							/****************************** 液路控制 ******************************/	
 1AD0           ; 							case 4068:	// 设置电磁阀
 1AD0           ; 								cmdState =  SetEValve((unsigned char)ControlCmd.pam[0], (unsigned char)ControlCmd.pam[1]);
 1AD0 20910500          lds R18,_ControlCmd+3+2
 1AD4 30910600          lds R19,_ControlCmd+3+2+1
 1AD8 00910300          lds R16,_ControlCmd+3
 1ADC 10910400          lds R17,_ControlCmd+3+1
 1AE0 0E940000          xcall _SetEValve
 1AE4 A02E              mov R10,R16
 1AE6 A0920000          sts L6,R10
 1AEA           ;                                                               break;
 1AEA 2BC1              xjmp L350
 1AEC           L490:
 1AEC           ; 							case 4069:	// Get photo info
 1AEC           ; 								cmdState =  GetLiquidPhotoInfo();
 1AEC 0E940000          xcall _GetLiquidPhotoInfo
 1AF0 A02E              mov R10,R16
 1AF2 A0920000          sts L6,R10
 1AF6           ;                                                               break;
 1AF6 25C1              xjmp L350
 1AF8           L491:
 1AF8           ; 							case 4070:	// Liquid photo adjust
 1AF8           ; 								cmdState =  SetLiquidPhotoAdjust((unsigned char)ControlCmd.pam[0]);
 1AF8 00910300          lds R16,_ControlCmd+3
 1AFC 10910400          lds R17,_ControlCmd+3+1
 1B00 0E940000          xcall _SetLiquidPhotoAdjust
 1B04 A02E              mov R10,R16
 1B06 A0920000          sts L6,R10
 1B0A           ;                                                               break;
 1B0A 1BC1              xjmp L350
 1B0C           L493:
 1B0C           ; 								/**************************** 片仓控制 *********************************/	
 1B0C           ; 							case 4071:	// 获取片仓状态信息
 1B0C           ; 								cmdState =  GetStoreState((unsigned char)ControlCmd.pam[0]);
 1B0C 00910300          lds R16,_ControlCmd+3
 1B10 10910400          lds R17,_ControlCmd+3+1
 1B14 0E940000          xcall _GetStoreState
 1B18 A02E              mov R10,R16
 1B1A A0920000          sts L6,R10
 1B1E           ;                                                               break;
 1B1E 11C1              xjmp L350
 1B20           L495:
 1B20           ; 							case 4072:	// 设置片仓校准
 1B20           ; 								cmdState =  SetStoreCAL((unsigned char)ControlCmd.pam[0]);
 1B20 00910300          lds R16,_ControlCmd+3
 1B24 10910400          lds R17,_ControlCmd+3+1
 1B28 0E940000          xcall _SetStoreCAL
 1B2C A02E              mov R10,R16
 1B2E A0920000          sts L6,R10
 1B32           ;                                                               break;
 1B32 07C1              xjmp L350
 1B34           L497:
 1B34           ; 							case 4073:	// 获取片仓光电接收管信号值
 1B34           ; 								cmdState =  GetStorePhoVol((unsigned char)ControlCmd.pam[0]);
 1B34 00910300          lds R16,_ControlCmd+3
 1B38 10910400          lds R17,_ControlCmd+3+1
 1B3C 0E940000          xcall _GetStorePhoVol
 1B40 A02E              mov R10,R16
 1B42 A0920000          sts L6,R10
 1B46           ;                                                               break;
 1B46 FDC0              xjmp L350
 1B48           L499:
 1B48           ; 							case 4074:	// 获取液体探测信号值
 1B48           ; 								iPam = getLiqDetADC(NeedleChannel);
 1B48 0027              clr R16
 1B4A 0E940000          xcall _getLiqDetADC
 1B4E 5801              movw R10,R16
 1B50           ;                                                               Uart0ReUnable;
 1B50 8091C100          lds R24,193
 1B54 8F7E              andi R24,239
 1B56 8093C100          sts 193,R24
 1B5A           ;                                                               uart_Printf("%s $%4d\r\n",strM4174, iPam);
 1B5A B982              std y+1,R11
 1B5C A882              std y+0,R10
 1B5E 20E0              ldi R18,<_strM4174
 1B60 30E0              ldi R19,>_strM4174
 1B62 00E0              ldi R16,<L218
 1B64 10E0              ldi R17,>L218
 1B66 0E940000          xcall _uart_Printf
 1B6A           ;                                                               Uart0ReEnable;
 1B6A 8091C100          lds R24,193
 1B6E 8061              ori R24,16
 1B70 8093C100          sts 193,R24
 1B74           ;                                                               break;
 1B74 E6C0              xjmp L350
 1B76           L500:
 1B76           ; 							case 4075:
 1B76           ; 								iPam = getLiqDetADC(LoadChannel);
 1B76 01E0              ldi R16,1
 1B78 0E940000          xcall _getLiqDetADC
 1B7C 6801              movw R12,R16
 1B7E 5601              movw R10,R12
 1B80           ;                                                               Uart0ReUnable;
 1B80 8091C100          lds R24,193
 1B84 8F7E              andi R24,239
 1B86 8093C100          sts 193,R24
 1B8A           ;                                                               uart_Printf("%s $%4d\r\n",strM4175, iPam);
 1B8A B982              std y+1,R11
 1B8C A882              std y+0,R10
 1B8E 20E0              ldi R18,<_strM4175
 1B90 30E0              ldi R19,>_strM4175
 1B92 00E0              ldi R16,<L218
 1B94 10E0              ldi R17,>L218
 1B96 0E940000          xcall _uart_Printf
 1B9A           ;                                                               Uart0ReEnable;
 1B9A 8091C100          lds R24,193
 1B9E 8061              ori R24,16
 1BA0 8093C100          sts 193,R24
 1BA4           ;                                                               break;
 1BA4 CEC0              xjmp L350
 1BA6           L501:
 1BA6           ; 							case 4076:
 1BA6           ; 								iPam = getLiqDetADC(UnloadChannel);
 1BA6 02E0              ldi R16,2
 1BA8 0E940000          xcall _getLiqDetADC
 1BAC 6801              movw R12,R16
 1BAE 5601              movw R10,R12
 1BB0           ;                                                               Uart0ReUnable;
 1BB0 8091C100          lds R24,193
 1BB4 8F7E              andi R24,239
 1BB6 8093C100          sts 193,R24
 1BBA           ;                                                               uart_Printf("%s $%4d\r\n",strM4176, iPam);
 1BBA B982              std y+1,R11
 1BBC A882              std y+0,R10
 1BBE 20E0              ldi R18,<_strM4176
 1BC0 30E0              ldi R19,>_strM4176
 1BC2 00E0              ldi R16,<L218
 1BC4 10E0              ldi R17,>L218
 1BC6 0E940000          xcall _uart_Printf
 1BCA           ;                                                               Uart0ReEnable;
 1BCA 8091C100          lds R24,193
 1BCE 8061              ori R24,16
 1BD0 8093C100          sts 193,R24
 1BD4           ;                                                               break;
 1BD4 B6C0              xjmp L350
 1BD6           L502:
 1BD6           ; 							case 4077:
 1BD6           ; 								if(ControlCmd.pam[0] > 12)
 1BD6 8CE0              ldi R24,12
 1BD8 90E0              ldi R25,0
 1BDA 20900300          lds R2,_ControlCmd+3
 1BDE 30900400          lds R3,_ControlCmd+3+1
 1BE2 8215              cp R24,R2
 1BE4 9305              cpc R25,R3
 1BE6 28F4              brsh L503
 1BE8           X139:
 1BE8           ; 									ControlCmd.pam[0] = 12;
 1BE8 90930400          sts _ControlCmd+3+1,R25
 1BEC 80930300          sts _ControlCmd+3,R24
 1BF0 0EC0              xjmp L504
 1BF2           L503:
 1BF2           ; 								else if(ControlCmd.pam[0] < 1)
 1BF2 80910300          lds R24,_ControlCmd+3
 1BF6 90910400          lds R25,_ControlCmd+3+1
 1BFA 8130              cpi R24,1
 1BFC E0E0              ldi R30,0
 1BFE 9E07              cpc R25,R30
 1C00 30F4              brsh L507
 1C02           X140:
 1C02           ; 									ControlCmd.pam[0] = 1;
 1C02 81E0              ldi R24,1
 1C04 90E0              ldi R25,0
 1C06 90930400          sts _ControlCmd+3+1,R25
 1C0A 80930300          sts _ControlCmd+3,R24
 1C0E           L507:
 1C0E           L504:
 1C0E           ; 								MotStop(ControlCmd.pam[0]);
 1C0E 00910300          lds R16,_ControlCmd+3
 1C12 10910400          lds R17,_ControlCmd+3+1
 1C16 0E940000          xcall _MotStop
 1C1A           ;                                                               break;
 1C1A 93C0              xjmp L350
 1C1C           L351:
 1C1C           ; 							default:
 1C1C           ; 								SetBeepWarning();
 1C1C 0E940000          xcall _SetBeepWarning
 1C20           ;                                                               Uart0ReUnable;
 1C20 8091C100          lds R24,193
 1C24 8F7E              andi R24,239
 1C26 8093C100          sts 193,R24
 1C2A           ;                                                               uart_Printf("#%d CommandUnknown $   2\r\n",ControlCmd.cmdIdx);
 1C2A 20910100          lds R18,_ControlCmd+1
 1C2E 30910200          lds R19,_ControlCmd+1+1
 1C32 00E0              ldi R16,<L36
 1C34 10E0              ldi R17,>L36
 1C36 0E940000          xcall _uart_Printf
 1C3A           ;                                                               Uart0ReEnable;
 1C3A 8091C100          lds R24,193
 1C3E 8061              ori R24,16
 1C40 8093C100          sts 193,R24
 1C44           ;                                                               break;  
 1C44           ;                                                       }
 1C44           ;                                               }
 1C44 7EC0              xjmp L350
 1C46           L349:
 1C46           ; 					else	// 工作状态下接收命令
 1C46           ; 					{
 1C46           ; 						switch(ControlCmd.cmdIdx)
 1C46 60910100          lds R22,_ControlCmd+1
 1C4A 70910200          lds R23,_ControlCmd+1+1
 1C4E 6330              cpi R22,3
 1C50 E0E0              ldi R30,0
 1C52 7E07              cpc R23,R30
 1C54 B9F0              breq L519
 1C56           X141:
 1C56 6430              cpi R22,4
 1C58 E0E0              ldi R30,0
 1C5A 7E07              cpc R23,R30
 1C5C 21F1              breq L520
 1C5E           X142:
 1C5E 6530              cpi R22,5
 1C60 E0E0              ldi R30,0
 1C62 7E07              cpc R23,R30
 1C64 19F1              breq L521
 1C66           X143:
 1C66 6330              cpi R22,3
 1C68 E0E0              ldi R30,0
 1C6A 7E07              cpc R23,R30
 1C6C 0CF4              brge X231
 1C6E 55C0              xjmp L516
 1C70           X231:
 1C70           X144:
 1C70           L528:
 1C70 80910100          lds R24,_ControlCmd+1
 1C74 90910200          lds R25,_ControlCmd+1+1
 1C78 8336              cpi R24,99
 1C7A E0E0              ldi R30,0
 1C7C 9E07              cpc R25,R30
 1C7E 09F4              brne X232
 1C80 45C0              xjmp L525
 1C82           X232:
 1C82           X145:
 1C82 4BC0              xjmp L516
 1C84           L519:
 1C84           ; 						{
 1C84           ; 							case 3:		// #0003 查询工作进程
 1C84           ; 								Uart0ReUnable;
 1C84 8091C100          lds R24,193
 1C88 8F7E              andi R24,239
 1C8A 8093C100          sts 193,R24
 1C8E           ;                                                               uart_Printf("%s $   4 [Maintain]\r\n",strM0110);
 1C8E 20E0              ldi R18,<_strM0110
 1C90 30E0              ldi R19,>_strM0110
 1C92 00E0              ldi R16,<L357
 1C94 10E0              ldi R17,>L357
 1C96 0E940000          xcall _uart_Printf
 1C9A           ;                                                               Uart0ReEnable;
 1C9A 8091C100          lds R24,193
 1C9E 8061              ori R24,16
 1CA0 8093C100          sts 193,R24
 1CA4           ;                                                               break;
 1CA4 4EC0              xjmp L517
 1CA6           L520:
 1CA6           ; 							case 4:	// quit
 1CA6           ; 								SetMaintianSubfunctionQuitFlag();
 1CA6 0E940000          xcall _SetMaintianSubfunctionQuitFlag
 1CAA           ;                                                               break;
 1CAA 4BC0              xjmp L517
 1CAC           L521:
 1CAC           ; 							case 5:
 1CAC           ; 								if(ControlCmd.pam[0] == 0)
 1CAC 20900300          lds R2,_ControlCmd+3
 1CB0 30900400          lds R3,_ControlCmd+3+1
 1CB4 2220              tst R2
 1CB6 B1F4              brne L522
 1CB8 3320              tst R3
 1CBA A1F4              brne L522
 1CBC           X146:
 1CBC           ; 								{
 1CBC           ; 									workSwitch = 1;
 1CBC 81E0              ldi R24,1
 1CBE 80930100          sts _workSwitch,R24
 1CC2           ;                                                                       Uart0ReUnable;
 1CC2 8091C100          lds R24,193
 1CC6 8F7E              andi R24,239
 1CC8 8093C100          sts 193,R24
 1CCC           ;                                                                       uart_Printf("%s\r\n",strM0105);
 1CCC 20E0              ldi R18,<_strM0105
 1CCE 30E0              ldi R19,>_strM0105
 1CD0 00E0              ldi R16,<L2
 1CD2 10E0              ldi R17,>L2
 1CD4 0E940000          xcall _uart_Printf
 1CD8           ;                                                                       Uart0ReEnable;
 1CD8 8091C100          lds R24,193
 1CDC 8061              ori R24,16
 1CDE 8093C100          sts 193,R24
 1CE2           ;                                                               }
 1CE2 2FC0              xjmp L517
 1CE4           L522:
 1CE4           ; 								else
 1CE4           ; 								{
 1CE4           ; 									workSwitch = 0;
 1CE4 2224              clr R2
 1CE6 20920100          sts _workSwitch,R2
 1CEA           ;                                                                       Uart0ReUnable;
 1CEA 8091C100          lds R24,193
 1CEE 8F7E              andi R24,239
 1CF0 8093C100          sts 193,R24
 1CF4           ;                                                                       uart_Printf("%s\r\n",strM0106);
 1CF4 20E0              ldi R18,<_strM0106
 1CF6 30E0              ldi R19,>_strM0106
 1CF8 00E0              ldi R16,<L2
 1CFA 10E0              ldi R17,>L2
 1CFC 0E940000          xcall _uart_Printf
 1D00           ;                                                                       Uart0ReEnable;
 1D00 8091C100          lds R24,193
 1D04 8061              ori R24,16
 1D06 8093C100          sts 193,R24
 1D0A           ;                                                               }
 1D0A           ;                                                               break;
 1D0A 1BC0              xjmp L517
 1D0C           L525:
 1D0C           ; 							case 99:	// 重起, 设置看门狗
 1D0C           ; 								ReStart(ControlCmd.pam[0]);
 1D0C 00910300          lds R16,_ControlCmd+3
 1D10 10910400          lds R17,_ControlCmd+3+1
 1D14 0E940000          xcall _ReStart
 1D18           ;                                                               break;
 1D18 14C0              xjmp L517
 1D1A           L516:
 1D1A           ; 							default:
 1D1A           ; 								SetBeepWarning();
 1D1A 0E940000          xcall _SetBeepWarning
 1D1E           ;                                                               Uart0ReUnable;
 1D1E 8091C100          lds R24,193
 1D22 8F7E              andi R24,239
 1D24 8093C100          sts 193,R24
 1D28           ;                                                               uart_Printf("#%d CommandUnknown $   2\r\n",ControlCmd.cmdIdx);
 1D28 20910100          lds R18,_ControlCmd+1
 1D2C 30910200          lds R19,_ControlCmd+1+1
 1D30 00E0              ldi R16,<L36
 1D32 10E0              ldi R17,>L36
 1D34 0E940000          xcall _uart_Printf
 1D38           ;                                                               Uart0ReEnable;
 1D38 8091C100          lds R24,193
 1D3C 8061              ori R24,16
 1D3E 8093C100          sts 193,R24
 1D42           ;                                                               break;  
 1D42           L517:
 1D42           ; 						}
 1D42           ; 					}
 1D42           L350:
 1D42           ; 					if(cmdState)
 1D42 20900000          lds R2,L6
 1D46 2220              tst R2
 1D48 A9F0              breq L529
 1D4A           X147:
 1D4A           ; 					{
 1D4A           ; 						SetBeepWarning();
 1D4A 0E940000          xcall _SetBeepWarning
 1D4E           ;                                               Uart0ReUnable;
 1D4E 8091C100          lds R24,193
 1D52 8F7E              andi R24,239
 1D54 8093C100          sts 193,R24
 1D58           ;                                               uart_Printf("#%4d CommandError $   1\r\n",ControlCmd.cmdIdx);
 1D58 20910100          lds R18,_ControlCmd+1
 1D5C 30910200          lds R19,_ControlCmd+1+1
 1D60 00E0              ldi R16,<L41
 1D62 10E0              ldi R17,>L41
 1D64 0E940000          xcall _uart_Printf
 1D68           ;                                               Uart0ReEnable;
 1D68 8091C100          lds R24,193
 1D6C 8061              ori R24,16
 1D6E 8093C100          sts 193,R24
 1D72           ;                                       }
 1D72 14C0              xjmp L530
 1D74           L529:
 1D74           ; 					else
 1D74           ; 					{
 1D74           ; 						SetBeepAck();
 1D74 0E940000          xcall _SetBeepAck
 1D78           ;                                               Uart0ReUnable;
 1D78 8091C100          lds R24,193
 1D7C 8F7E              andi R24,239
 1D7E 8093C100          sts 193,R24
 1D82           ;                                               uart_Printf("#%4d CommandDone $   3\r\n",ControlCmd.cmdIdx);
 1D82 20910100          lds R18,_ControlCmd+1
 1D86 30910200          lds R19,_ControlCmd+1+1
 1D8A 00E0              ldi R16,<L43
 1D8C 10E0              ldi R17,>L43
 1D8E 0E940000          xcall _uart_Printf
 1D92           ;                                               Uart0ReEnable;
 1D92 8091C100          lds R24,193
 1D96 8061              ori R24,16
 1D98 8093C100          sts 193,R24
 1D9C           ;                                       }
 1D9C           L530:
 1D9C           ; 				//	if(ControlCmd.cmdIdx)
 1D9C           ; 						CommandClear();
 1D9C 0E940000          xcall _CommandClear
 1DA0           ;                               }
 1DA0           L346:
 1DA0           ; 				if(workSwitch)
 1DA0 20900100          lds R2,_workSwitch
 1DA4 2220              tst R2
 1DA6 89F1              breq L17
 1DA8           X148:
 1DA8           ; 				{
 1DA8           ; 					if(miantianSubFunction)	// 调用子功能函数，直到函数返回1终止
 1DA8 20900A00          lds R2,_miantianSubFunction
 1DAC 30900B00          lds R3,_miantianSubFunction+1
 1DB0 2220              tst R2
 1DB2 11F4              brne X149
 1DB4 3320              tst R3
 1DB6 49F1              breq L17
 1DB8           X149:
 1DB8           ; 					{
 1DB8           ; 						if(ControlCmd.pamLen != 0)
 1DB8 20901700          lds R2,_ControlCmd+23
 1DBC 2220              tst R2
 1DBE 79F0              breq L537
 1DC0           X150:
 1DC0           ; 						{
 1DC0           ; 							MaintainSubFunParam = ControlCmd.pam[0];
 1DC0 20900300          lds R2,_ControlCmd+3
 1DC4 30900400          lds R3,_ControlCmd+3+1
 1DC8 30920900          sts _MaintainSubFunParam+1,R3
 1DCC 20920800          sts _MaintainSubFunParam,R2
 1DD0           ;                                                       ControlCmd.pam[0] = 0;
 1DD0 2224              clr R2
 1DD2 3324              clr R3
 1DD4 30920400          sts _ControlCmd+3+1,R3
 1DD8 20920300          sts _ControlCmd+3,R2
 1DDC           ;                                               }
 1DDC 06C0              xjmp L538
 1DDE           L537:
 1DDE           ; 						else
 1DDE           ; 							MaintainSubFunParam = 0;
 1DDE 2224              clr R2
 1DE0 3324              clr R3
 1DE2 30920900          sts _MaintainSubFunParam+1,R3
 1DE6 20920800          sts _MaintainSubFunParam,R2
 1DEA           L538:
 1DEA           ; 						i = miantianSubFunction();
 1DEA E0910A00          lds R30,_miantianSubFunction
 1DEE F0910B00          lds R31,_miantianSubFunction+1
 1DF2 0E940000          xcall xicallx
 1DF6 A02E              mov R10,R16
 1DF8 4A2D              mov R20,R10
 1DFA           ;                                               if(i==1)
 1DFA 0130              cpi R16,1
 1DFC 31F4              brne L17
 1DFE           X151:
 1DFE           ; 						{
 1DFE           ; 							miantianSubFunction = 0;
 1DFE 2224              clr R2
 1E00 3324              clr R3
 1E02 30920B00          sts _miantianSubFunction+1,R3
 1E06 20920A00          sts _miantianSubFunction,R2
 1E0A           ;                                               }
 1E0A           ;                                       }
 1E0A           ;                               }
 1E0A           ;                               break;
 1E0A           ;                       default:
 1E0A           ;                               break;
 1E0A           L17:
 1E0A           ; 		}
 1E0A           ; 		
 1E0A           ; 		// 废片仓功能开启
 1E0A           ; 		if(GetwasteCardState() == 0)
 1E0A 0E940000          xcall _GetwasteCardState
 1E0E A02E              mov R10,R16
 1E10 0023              tst R16
 1E12 09F0              breq X233
 1E14 47C0              xjmp L545
 1E16           X233:
 1E16           X152:
 1E16           ; 		{
 1E16           ; 			// 废片仓开关监测
 1E16           ; 			if((PINK & 0x02) == 0)
 1E16 20900601          lds R2,262
 1E1A 21FC              sbrc R2,1
 1E1C 23C0              rjmp L547
 1E1E           X153:
 1E1E           ; 			{
 1E1E           ; 				if(dustbinOldState > 0)
 1E1E 80E0              ldi R24,0
 1E20 20900500          lds R2,L11
 1E24 8215              cp R24,R2
 1E26 20F4              brsh L549
 1E28           X154:
 1E28           ; 					dustbinOldState --;
 1E28 822D              mov R24,R2
 1E2A 8150              subi R24,1
 1E2C 80930500          sts L11,R24
 1E30           L549:
 1E30           ; 				if(dustbinOldState == 2)
 1E30 80910500          lds R24,L11
 1E34 8230              cpi R24,2
 1E36 B1F5              brne L548
 1E38           X155:
 1E38           ; 				{
 1E38           ; 					Uart0ReUnable;
 1E38 8091C100          lds R24,193
 1E3C 8F7E              andi R24,239
 1E3E 8093C100          sts 193,R24
 1E42           ;                                       uart_Printf("%s $%4d\r\n",strM0200 , dustbinOldState);
 1E42 20900500          lds R2,L11
 1E46 3324              clr R3
 1E48 3982              std y+1,R3
 1E4A 2882              std y+0,R2
 1E4C 20E0              ldi R18,<_strM0200
 1E4E 30E0              ldi R19,>_strM0200
 1E50 00E0              ldi R16,<L218
 1E52 10E0              ldi R17,>L218
 1E54 0E940000          xcall _uart_Printf
 1E58           ;                                       Uart0ReEnable;
 1E58 8091C100          lds R24,193
 1E5C 8061              ori R24,16
 1E5E 8093C100          sts 193,R24
 1E62           ;                               }
 1E62           ;                       }
 1E62 20C0              xjmp L548
 1E64           L547:
 1E64           ; 			else		// 废片仓关闭
 1E64           ; 			{
 1E64           ; 				if(dustbinOldState < 255)
 1E64 80910500          lds R24,L11
 1E68 8F3F              cpi R24,255
 1E6A 18F4              brsh L553
 1E6C           X156:
 1E6C           ; 					dustbinOldState ++;
 1E6C 8F5F              subi R24,255    ; addi 1
 1E6E 80930500          sts L11,R24
 1E72           L553:
 1E72           ; 				if(dustbinOldState == 253)
 1E72 80910500          lds R24,L11
 1E76 8D3F              cpi R24,253
 1E78 A9F4              brne L555
 1E7A           X157:
 1E7A           ; 				{
 1E7A           ; 					Uart0ReUnable;
 1E7A 8091C100          lds R24,193
 1E7E 8F7E              andi R24,239
 1E80 8093C100          sts 193,R24
 1E84           ;                                       uart_Printf("%s $%4d\r\n",strM0200 , dustbinOldState);
 1E84 20900500          lds R2,L11
 1E88 3324              clr R3
 1E8A 3982              std y+1,R3
 1E8C 2882              std y+0,R2
 1E8E 20E0              ldi R18,<_strM0200
 1E90 30E0              ldi R19,>_strM0200
 1E92 00E0              ldi R16,<L218
 1E94 10E0              ldi R17,>L218
 1E96 0E940000          xcall _uart_Printf
 1E9A           ;                                       Uart0ReEnable;
 1E9A 8091C100          lds R24,193
 1E9E 8061              ori R24,16
 1EA0 8093C100          sts 193,R24
 1EA4           ;                               }
 1EA4           L555:
 1EA4           ; 			}
 1EA4           L548:
 1EA4           ; 		}
 1EA4           L545:
 1EA4           ; 	}
 1EA4           L14:
 1EA4 0C946800          xjmp L13
 1EA8           X158:
 1EA8           L5:
 1EA8                   .dbline 0 ; func end
 1EA8 2696              adiw R28,6
 1EAA 0895              ret
 1EAC           ;              n -> R20
                        .even
 1EAC           _SetWorkStep::
 1EAC 4A93              st -y,R20
 1EAE 5A93              st -y,R21
 1EB0 402F              mov R20,R16
 1EB2           ; }
 1EB2           ; 
 1EB2           ; void SetWorkStep(unsigned char n)
 1EB2           ; {
 1EB2           ;       if(n > 4 && n != 9)
 1EB2 84E0              ldi R24,4
 1EB4 8417              cp R24,R20
 1EB6 18F4              brsh L558
 1EB8           X234:
 1EB8 4930              cpi R20,9
 1EBA 09F0              breq L558
 1EBC           X235:
 1EBC           ; 		n = 0;
 1EBC 4427              clr R20
 1EBE           L558:
 1EBE           ; 	if(n != WorkProcessStep)
 1EBE 20900D00          lds R2,_WorkProcessStep
 1EC2 4215              cp R20,R2
 1EC4 09F4              brne X243
 1EC6 8FC0              xjmp L560
 1EC8           X243:
 1EC8           X236:
 1EC8           ; 	{
 1EC8           ; 		WorkProcessStep = n;
 1EC8 40930D00          sts _WorkProcessStep,R20
 1ECC           ;               switch(WorkProcessStep)
 1ECC 5527              clr R21
 1ECE 4030              cpi R20,0
 1ED0 4507              cpc R20,R21
 1ED2 C1F0              breq L565
 1ED4           X237:
 1ED4 4130              cpi R20,1
 1ED6 E0E0              ldi R30,0
 1ED8 5E07              cpc R21,R30
 1EDA 29F1              breq L566
 1EDC           X238:
 1EDC 4230              cpi R20,2
 1EDE E0E0              ldi R30,0
 1EE0 5E07              cpc R21,R30
 1EE2 91F1              breq L567
 1EE4           X239:
 1EE4 4330              cpi R20,3
 1EE6 E0E0              ldi R30,0
 1EE8 5E07              cpc R21,R30
 1EEA 09F4              brne X244
 1EEC 3EC0              xjmp L568
 1EEE           X244:
 1EEE           X240:
 1EEE 4430              cpi R20,4
 1EF0 E0E0              ldi R30,0
 1EF2 5E07              cpc R21,R30
 1EF4 09F4              brne X245
 1EF6 4DC0              xjmp L569
 1EF8           X245:
 1EF8           X241:
 1EF8 4930              cpi R20,9
 1EFA E0E0              ldi R30,0
 1EFC 5E07              cpc R21,R30
 1EFE 09F4              brne X246
 1F00 59C0              xjmp L570
 1F02           X246:
 1F02           X242:
 1F02 71C0              xjmp L562
 1F04           L565:
 1F04           ; 		{
 1F04           ; 			case 0:	Uart0ReUnable;uart_Printf("%s $   0 [Free]\r\n",strM0110);Uart0ReEnable;
 1F04 8091C100          lds R24,193
 1F08 8F7E              andi R24,239
 1F0A 8093C100          sts 193,R24
 1F0E 20E0              ldi R18,<_strM0110
 1F10 30E0              ldi R19,>_strM0110
 1F12 00E0              ldi R16,<L65
 1F14 10E0              ldi R17,>L65
 1F16 0E940000          xcall _uart_Printf
 1F1A 8091C100          lds R24,193
 1F1E 8061              ori R24,16
 1F20 8093C100          sts 193,R24
 1F24           ;                               break;
 1F24 60C0              xjmp L563
 1F26           L566:
 1F26           ; 			case 1:	Uart0ReUnable;uart_Printf("%s $   1 [MechineCheck]\r\n",strM0110);Uart0ReEnable;
 1F26 8091C100          lds R24,193
 1F2A 8F7E              andi R24,239
 1F2C 8093C100          sts 193,R24
 1F30 20E0              ldi R18,<_strM0110
 1F32 30E0              ldi R19,>_strM0110
 1F34 00E0              ldi R16,<L90
 1F36 10E0              ldi R17,>L90
 1F38 0E940000          xcall _uart_Printf
 1F3C 8091C100          lds R24,193
 1F40 8061              ori R24,16
 1F42 8093C100          sts 193,R24
 1F46           ;                               break;
 1F46 4FC0              xjmp L563
 1F48           L567:
 1F48           ; 			case 2:	Uart0ReUnable;uart_Printf("%s $   2 [LiquidCheck]\r\n",strM0110);Uart0ReEnable;
 1F48 8091C100          lds R24,193
 1F4C 8F7E              andi R24,239
 1F4E 8093C100          sts 193,R24
 1F52 20E0              ldi R18,<_strM0110
 1F54 30E0              ldi R19,>_strM0110
 1F56 00E0              ldi R16,<L117
 1F58 10E0              ldi R17,>L117
 1F5A 0E940000          xcall _uart_Printf
 1F5E 8091C100          lds R24,193
 1F62 8061              ori R24,16
 1F64 8093C100          sts 193,R24
 1F68           ;                               break;
 1F68 3EC0              xjmp L563
 1F6A           L568:
 1F6A           ; 			case 3:	GetStoreState(0);	Uart0ReUnable;uart_Printf("%s $   3 [Test]\r\n",strM0110);Uart0ReEnable;
 1F6A 0027              clr R16
 1F6C 0E940000          xcall _GetStoreState
 1F70 8091C100          lds R24,193
 1F74 8F7E              andi R24,239
 1F76 8093C100          sts 193,R24
 1F7A 20E0              ldi R18,<_strM0110
 1F7C 30E0              ldi R19,>_strM0110
 1F7E 00E0              ldi R16,<L147
 1F80 10E0              ldi R17,>L147
 1F82 0E940000          xcall _uart_Printf
 1F86 8091C100          lds R24,193
 1F8A 8061              ori R24,16
 1F8C 8093C100          sts 193,R24
 1F90           ;                               break;
 1F90 2AC0              xjmp L563
 1F92           L569:
 1F92           ; 			case 4:	Uart0ReUnable;uart_Printf("%s $   4 [Maintain]\r\n",strM0110);Uart0ReEnable;
 1F92 8091C100          lds R24,193
 1F96 8F7E              andi R24,239
 1F98 8093C100          sts 193,R24
 1F9C 20E0              ldi R18,<_strM0110
 1F9E 30E0              ldi R19,>_strM0110
 1FA0 00E0              ldi R16,<L357
 1FA2 10E0              ldi R17,>L357
 1FA4 0E940000          xcall _uart_Printf
 1FA8 8091C100          lds R24,193
 1FAC 8061              ori R24,16
 1FAE 8093C100          sts 193,R24
 1FB2           ;                               break;
 1FB2 19C0              xjmp L563
 1FB4           L570:
 1FB4           ; 			case 9:	JumpMode = 1;GetStoreState(0);	WorkProcessStep = 3; Uart0ReUnable;uart_Printf("%s $   3 [Test]\r\n",strM0110);Uart0ReEnable;
 1FB4 81E0              ldi R24,1
 1FB6 80930000          sts _JumpMode,R24
 1FBA 0027              clr R16
 1FBC 0E940000          xcall _GetStoreState
 1FC0 83E0              ldi R24,3
 1FC2 80930D00          sts _WorkProcessStep,R24
 1FC6 8091C100          lds R24,193
 1FCA 8F7E              andi R24,239
 1FCC 8093C100          sts 193,R24
 1FD0 20E0              ldi R18,<_strM0110
 1FD2 30E0              ldi R19,>_strM0110
 1FD4 00E0              ldi R16,<L147
 1FD6 10E0              ldi R17,>L147
 1FD8 0E940000          xcall _uart_Printf
 1FDC 8091C100          lds R24,193
 1FE0 8061              ori R24,16
 1FE2 8093C100          sts 193,R24
 1FE6           ;                               break;
 1FE6           L562:
 1FE6           L563:
 1FE6           ; 		}
 1FE6           ; 	}
 1FE6           L560:
 1FE6           L557:
 1FE6                   .dbline 0 ; func end
 1FE6 5991              ld R21,y+
 1FE8 4991              ld R20,y+
 1FEA 0895              ret
                        .even
 1FEC           _StartWork::
 1FEC 2297              sbiw R28,2
 1FEE           ; }
 1FEE           ; 
 1FEE           ; 
 1FEE           ; /*************************************************************************************************/
 1FEE           ; 
 1FEE           ; /*************************************************************************************************/
 1FEE           ; void StartWork(void)
 1FEE           ; {
 1FEE           ;       CLI();
 1FEE F894              cli
 1FF0           ; 
 1FF0           ;       // 初始化应用层数据
 1FF0           ;       DiluteProcDatInit();
 1FF0 0E940000          xcall _DiluteProcDatInit
 1FF4           ;       RingQueueDatInit();
 1FF4 0E940000          xcall _RingQueueDatInit
 1FF8           ;       TestQueueDatInit();
 1FF8 0E940000          xcall _TestQueueDatInit
 1FFC           ;       UnloadQueueDatInit();
 1FFC 0E940000          xcall _UnloadQueueDatInit
 2000           ;       
 2000           ;       InitControlLayerData();
 2000 0E940000          xcall _InitControlLayerData
 2004           ;       InitCommandTransferData();
 2004 0E940000          xcall _InitCommandTransferData
 2008           ; 
 2008           ; //    RegisterSlave(COMMON_ADDRESS);
 2008           ;       RegisterSlave(MOT_TURN_PLATE);
 2008 01E0              ldi R16,1
 200A 0E940000          xcall _RegisterSlave
 200E           ;       RegisterSlave(MOT_SAMP_TRUN);
 200E 02E0              ldi R16,2
 2010 0E940000          xcall _RegisterSlave
 2014           ;       RegisterSlave(MOT_SAMP_NEEDLE);
 2014 03E0              ldi R16,3
 2016 0E940000          xcall _RegisterSlave
 201A           ;       RegisterSlave(MOT_CARD_LOAD);
 201A 04E0              ldi R16,4
 201C 0E940000          xcall _RegisterSlave
 2020           ;       RegisterSlave(MOT_CARD_UNLOAD);
 2020 05E0              ldi R16,5
 2022 0E940000          xcall _RegisterSlave
 2026           ;       RegisterSlave(MOT_STORE_CARD_MOVE);
 2026 08E0              ldi R16,8
 2028 0E940000          xcall _RegisterSlave
 202C           ;       RegisterSlave(MOT_DILUENT);
 202C 09E0              ldi R16,9
 202E 0E940000          xcall _RegisterSlave
 2032           ;       RegisterSlave(MOT_FLUID);
 2032 0AE0              ldi R16,10
 2034 0E940000          xcall _RegisterSlave
 2038           ;       RegisterSlave(MOT_EFFLUENT);
 2038 0BE0              ldi R16,11
 203A 0E940000          xcall _RegisterSlave
 203E           ;       RegisterSlave(MOT_SAMP_PUMP);
 203E 0CE0              ldi R16,12
 2040 0E940000          xcall _RegisterSlave
 2044           ;       RegisterSlave(LIQUID_CONTROL);
 2044 0DE0              ldi R16,13
 2046 0E940000          xcall _RegisterSlave
 204A           ;       RegisterSlave(STORE_MONITOR);
 204A 0EE0              ldi R16,14
 204C 0E940000          xcall _RegisterSlave
 2050           ; 
 2050           ;       StartCommandTransfer();
 2050 0E940000          xcall _StartCommandTransfer
 2054           ;       SEI();
 2054 7894              sei
 2056           ; 
 2056           ;       //MotorModelConfig();
 2056           ;       Uart0ReUnable;
 2056 8091C100          lds R24,193
 205A 8F7E              andi R24,239
 205C 8093C100          sts 193,R24
 2060           ;       uart_Printf("%s $%s\r\n", strM0101, strVersion);
 2060 80E0              ldi R24,<_strVersion
 2062 90E0              ldi R25,>_strVersion
 2064 9983              std y+1,R25
 2066 8883              std y+0,R24
 2068 20E0              ldi R18,<_strM0101
 206A 30E0              ldi R19,>_strM0101
 206C 00E0              ldi R16,<L12
 206E 10E0              ldi R17,>L12
 2070 0E940000          xcall _uart_Printf
 2074           ;       uart_Printf("%s\r\n", strM0103);
 2074 20E0              ldi R18,<_strM0103
 2076 30E0              ldi R19,>_strM0103
 2078 00E0              ldi R16,<L2
 207A 10E0              ldi R17,>L2
 207C 0E940000          xcall _uart_Printf
 2080           ;       uart_Printf("%s\r\n", strM0104);
 2080 20E0              ldi R18,<_strM0104
 2082 30E0              ldi R19,>_strM0104
 2084 00E0              ldi R16,<L2
 2086 10E0              ldi R17,>L2
 2088 0E940000          xcall _uart_Printf
 208C           ;       Uart0ReEnable;
 208C 8091C100          lds R24,193
 2090 8061              ori R24,16
 2092 8093C100          sts 193,R24
 2096           L571:
 2096                   .dbline 0 ; func end
 2096 2296              adiw R28,2
 2098 0895              ret
                        .even
 209A           _MotorModelConfig::
 209A 2397              sbiw R28,3
 209C           ;       
 209C           ; }
 209C           ; 
 209C           ; void MotorModelConfig(void)
 209C           ; {
 209C           ;       // 设置基本参数
 209C           ;       /*      参数0：bit[7]停止锁开关
 209C           ;               bit[6:5]运行方式,[00]直线复式,[01]圆周循环式
 209C           ;               Bit[4:3]限位传感器类型，[00]无传感器，[01]槽型光耦，[10]微动开关；
 209C           ;               Bit[2:1]零位传感器类型，[00]无传感器，[01]槽型光耦，[10]微动开关；
 209C           ;               Bit[0]正反转设置，[0]正转，[1]反转；
 209C           ;               参数1：圆周等分数。
 209C           ;       */
 209C           ;       SetMotRunPam(MOT_TURN_PLATE,120,10,CURRENT_TURN_PLATE);
 209C 81E0              ldi R24,1
 209E 8A83              std y+2,R24
 20A0 8AE0              ldi R24,10
 20A2 8883              std y+0,R24
 20A4 28E7              ldi R18,120
 20A6 01E0              ldi R16,1
 20A8 0E940000          xcall _SetMotRunPam
 20AC           ;       SetMotRunPam(MOT_SAMP_TRUN,50,40,CURRENT_SAMP_TRUN);
 20AC 84E0              ldi R24,4
 20AE 8A83              std y+2,R24
 20B0 88E2              ldi R24,40
 20B2 8883              std y+0,R24
 20B4 22E3              ldi R18,50
 20B6 02E0              ldi R16,2
 20B8 0E940000          xcall _SetMotRunPam
 20BC           ;       SetMotRunPam(MOT_SAMP_NEEDLE,200,10,CURRENT_SAMP_NEEDLE);
 20BC 83E0              ldi R24,3
 20BE 8A83              std y+2,R24
 20C0 8AE0              ldi R24,10
 20C2 8883              std y+0,R24
 20C4 28EC              ldi R18,200
 20C6 03E0              ldi R16,3
 20C8 0E940000          xcall _SetMotRunPam
 20CC           ;       SetMotRunPam(MOT_CARD_LOAD,160,20,CURRENT_CARD_LOAD);
 20CC 84E0              ldi R24,4
 20CE 8A83              std y+2,R24
 20D0 84E1              ldi R24,20
 20D2 8883              std y+0,R24
 20D4 20EA              ldi R18,160
 20D6 04E0              ldi R16,4
 20D8 0E940000          xcall _SetMotRunPam
 20DC           ;       SetMotRunPam(MOT_CARD_UNLOAD,160,20,CURRENT_CARD_UNLOAD);
 20DC 84E0              ldi R24,4
 20DE 8A83              std y+2,R24
 20E0 84E1              ldi R24,20
 20E2 8883              std y+0,R24
 20E4 20EA              ldi R18,160
 20E6 05E0              ldi R16,5
 20E8 0E940000          xcall _SetMotRunPam
 20EC           ;       SetMotRunPam(MOT_STORE_CARD_MOVE,32,10,CURRENT_STORE_MOVE);
 20EC 8AE0              ldi R24,10
 20EE 8A83              std y+2,R24
 20F0 8883              std y+0,R24
 20F2 20E2              ldi R18,32
 20F4 08E0              ldi R16,8
 20F6 0E940000          xcall _SetMotRunPam
 20FA           ;       SetMotRunPam(MOT_DILUENT,200,20,CURRENT_DILUENT);
 20FA 84E0              ldi R24,4
 20FC 8A83              std y+2,R24
 20FE 84E1              ldi R24,20
 2100 8883              std y+0,R24
 2102 28EC              ldi R18,200
 2104 09E0              ldi R16,9
 2106 0E940000          xcall _SetMotRunPam
 210A           ;       SetMotRunPam(MOT_FLUID,128,60,CURRENT_FLUID);
 210A 84E0              ldi R24,4
 210C 8A83              std y+2,R24
 210E 8CE3              ldi R24,60
 2110 8883              std y+0,R24
 2112 20E8              ldi R18,128
 2114 0AE0              ldi R16,10
 2116 0E940000          xcall _SetMotRunPam
 211A           ;       SetMotRunPam(MOT_EFFLUENT,128,60,CURRENT_EFFLUENT);
 211A 84E0              ldi R24,4
 211C 8A83              std y+2,R24
 211E 8CE3              ldi R24,60
 2120 8883              std y+0,R24
 2122 20E8              ldi R18,128
 2124 0BE0              ldi R16,11
 2126 0E940000          xcall _SetMotRunPam
 212A           ;       SetMotRunPam(MOT_SAMP_PUMP,64,60,CURRENT_SAMP_PUMP);
 212A 86E0              ldi R24,6
 212C 8A83              std y+2,R24
 212E 8CE3              ldi R24,60
 2130 8883              std y+0,R24
 2132 20E4              ldi R18,64
 2134 0CE0              ldi R16,12
 2136 0E940000          xcall _SetMotRunPam
 213A           L572:
 213A                   .dbline 0 ; func end
 213A 2396              adiw R28,3
 213C 0895              ret
                        .area bss(ram, con, rel)
 0006           _cmd::
 0006                   .blkb 2
 0008           _MaintainSubFunParam::
 0008                   .blkb 2
 000A           _miantianSubFunction::
 000A                   .blkb 2
 000C           _primeProcessSW::
 000C                   .blkb 1
 000D           _WorkProcessStep::
 000D                   .blkb 1
 000E           _ControlModel::
 000E                   .blkb 1
                        .area data(ram, con, rel)
 000D           L357:
 000D                   .blkb 22
                        .area idata
 000D 2573202420202034205B4D61696E7461  .byte 37,'s,32,36,32,32,32,52,32,91,'M,'a,'i,'n,'t,'a
 001D 696E5D0D0A00      .byte 'i,'n,93,13,10,0
                        .area data(ram, con, rel)
 0023           L355:
 0023                   .blkb 20
                        .area idata
 0023 257320242573205B4D61696E7461696E  .byte 37,'s,32,36,37,'s,32,91,'M,'a,'i,'n,'t,'a,'i,'n
 0033 5D0D0A00          .byte 93,13,10,0
                        .area data(ram, con, rel)
 0037           L342:
 0037                   .blkb 9
                        .area idata
 0037 2573446F6E650D0A00        .byte 37,'s,'D,'o,'n,'e,13,10,0
                        .area data(ram, con, rel)
 0040           L337:
 0040                   .blkb 19
                        .area idata
 0040 2573205B546573745D20242033333232  .byte 37,'s,32,91,'T,'e,'s,'t,93,32,36,32,51,51,50,50
 0050 0D0A00            .byte 13,10,0
                        .area data(ram, con, rel)
 0053           L290:
 0053                   .blkb 30
                        .area idata
 0053 257320242033205B4C69717569644368  .byte 37,'s,32,36,32,51,32,91,'L,'i,'q,'u,'i,'d,'C,'h
 0063 65636B5D202420333332320D0A00      .byte 'e,'c,'k,93,32,36,32,51,51,50,50,13,10,0
                        .area data(ram, con, rel)
 0071           L267:
 0071                   .blkb 8
                        .area idata
 0071 25732024310D0A00  .byte 37,'s,32,36,49,13,10,0
                        .area data(ram, con, rel)
 0079           L232:
 0079                   .blkb 20
                        .area idata
 0079 25732024253464202425346420242534  .byte 37,'s,32,36,37,52,'d,32,36,37,52,'d,32,36,37,52
 0089 640D0A00          .byte 'd,13,10,0
                        .area data(ram, con, rel)
 008D           L218:
 008D                   .blkb 10
                        .area idata
 008D 257320242534640D0A00      .byte 37,'s,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 0097           L150:
 0097                   .blkb 18
                        .area idata
 0097 2573202420202031205B427573795D0D  .byte 37,'s,32,36,32,32,32,49,32,91,'B,'u,'s,'y,93,13
 00A7 0A00              .byte 10,0
                        .area data(ram, con, rel)
 00A9           L147:
 00A9                   .blkb 18
                        .area idata
 00A9 2573202420202033205B546573745D0D  .byte 37,'s,32,36,32,32,32,51,32,91,'T,'e,'s,'t,93,13
 00B9 0A00              .byte 10,0
                        .area data(ram, con, rel)
 00BB           L146:
 00BB                   .blkb 19
                        .area idata
 00BB 2573202420202035205B536C6565705D  .byte 37,'s,32,36,32,32,32,53,32,91,'S,'l,'e,'e,'p,93
 00CB 0D0A00            .byte 13,10,0
                        .area data(ram, con, rel)
 00CE           L142:
 00CE                   .blkb 22
                        .area idata
 00CE 257320242573205B546573742F536C65  .byte 37,'s,32,36,37,'s,32,91,'T,'e,'s,'t,47,'S,'l,'e
 00DE 65705D0D0A00      .byte 'e,'p,93,13,10,0
                        .area data(ram, con, rel)
 00E4           L117:
 00E4                   .blkb 25
                        .area idata
 00E4 2573202420202032205B4C6971756964  .byte 37,'s,32,36,32,32,32,50,32,91,'L,'i,'q,'u,'i,'d
 00F4 436865636B5D0D0A00        .byte 'C,'h,'e,'c,'k,93,13,10,0
                        .area data(ram, con, rel)
 00FD           L115:
 00FD                   .blkb 23
                        .area idata
 00FD 257320242573205B4C69717569644368  .byte 37,'s,32,36,37,'s,32,91,'L,'i,'q,'u,'i,'d,'C,'h
 010D 65636B5D0D0A00    .byte 'e,'c,'k,93,13,10,0
                        .area data(ram, con, rel)
 0114           L90:
 0114                   .blkb 26
                        .area idata
 0114 2573202420202031205B4D656368696E  .byte 37,'s,32,36,32,32,32,49,32,91,'M,'e,'c,'h,'i,'n
 0124 65436865636B5D0D0A00      .byte 'e,'C,'h,'e,'c,'k,93,13,10,0
                        .area data(ram, con, rel)
 012E           L88:
 012E                   .blkb 24
                        .area idata
 012E 257320242573205B4D656368696E6543  .byte 37,'s,32,36,37,'s,32,91,'M,'e,'c,'h,'i,'n,'e,'C
 013E 6865636B5D0D0A00  .byte 'h,'e,'c,'k,93,13,10,0
                        .area data(ram, con, rel)
 0146           L71:
 0146                   .blkb 15
                        .area idata
 0146 2573202425346420242534640D0A00    .byte 37,'s,32,36,37,52,'d,32,36,37,52,'d,13,10,0
                        .area data(ram, con, rel)
 0155           L65:
 0155                   .blkb 18
                        .area idata
 0155 2573202420202030205B467265655D0D  .byte 37,'s,32,36,32,32,32,48,32,91,'F,'r,'e,'e,93,13
 0165 0A00              .byte 10,0
                        .area data(ram, con, rel)
 0167           L43:
 0167                   .blkb 25
                        .area idata
 0167 2325346420436F6D6D616E64446F6E65  .byte 35,37,52,'d,32,'C,'o,'m,'m,'a,'n,'d,'D,'o,'n,'e
 0177 2024202020330D0A00        .byte 32,36,32,32,32,51,13,10,0
                        .area data(ram, con, rel)
 0180           L41:
 0180                   .blkb 26
                        .area idata
 0180 2325346420436F6D6D616E644572726F  .byte 35,37,52,'d,32,'C,'o,'m,'m,'a,'n,'d,'E,'r,'r,'o
 0190 722024202020310D0A00      .byte 'r,32,36,32,32,32,49,13,10,0
                        .area data(ram, con, rel)
 019A           L36:
 019A                   .blkb 27
                        .area idata
 019A 23256420436F6D6D616E64556E6B6E6F  .byte 35,37,'d,32,'C,'o,'m,'m,'a,'n,'d,'U,'n,'k,'n,'o
 01AA 776E2024202020320D0A00    .byte 'w,'n,32,36,32,32,32,50,13,10,0
                        .area data(ram, con, rel)
 01B5           L33:
 01B5                   .blkb 21
                        .area idata
 01B5 2573202420323535205B496E76616C69  .byte 37,'s,32,36,32,50,53,53,32,91,'I,'n,'v,'a,'l,'i
 01C5 645D0D0A00        .byte 'd,93,13,10,0
                        .area data(ram, con, rel)
 01CA           L22:
 01CA                   .blkb 28
                        .area idata
 01CA 2325346420436F6D6D616E6452656365  .byte 35,37,52,'d,32,'C,'o,'m,'m,'a,'n,'d,'R,'e,'c,'e
 01DA 6976652024202020300D0A00  .byte 'i,'v,'e,32,36,32,32,32,48,13,10,0
                        .area data(ram, con, rel)
 01E6           L12:
 01E6                   .blkb 9
                        .area idata
 01E6 2573202425730D0A00        .byte 37,'s,32,36,37,'s,13,10,0
                        .area data(ram, con, rel)
 01EF           L2:
 01EF                   .blkb 5
                        .area idata
 01EF 25730D0A00        .byte 37,'s,13,10,0
                        .area data(ram, con, rel)
                ; 
                ; }
                ; 
                ; 
                ; /********************************************* File end **********************************************/
                ; 
                        .area  func_lit
 0100 0000      PL_SampQuantifyTest:    .word `_SampQuantifyTest
 0102 0000      PL_LeanerQuantifyTest:  .word `_LeanerQuantifyTest
 0104 0000      PL_GetStoreProcess:     .word `_GetStoreProcess
 0106 0000      PL_MixHeightCheck:      .word `_MixHeightCheck
 0108 0000      PL_DropHeightCheck:     .word `_DropHeightCheck
 010A 0000      PL_NeedleOnMixSideCheck:        .word `_NeedleOnMixSideCheck
 010C 0000      PL_CardStorePhotoCheck: .word `_CardStorePhotoCheck
 010E 0000      PL_LiquidPhotoCheck:    .word `_LiquidPhotoCheck
 0110 0000      PL_SamplingSyringCheck: .word `_SamplingSyringCheck
 0112 0000      PL_EffluentPumpCheck:   .word `_EffluentPumpCheck
 0114 0000      PL_LeanerPumpCheck:     .word `_LeanerPumpCheck
 0116 0000      PL_DiluentPumpCheck:    .word `_DiluentPumpCheck
 0118 0000      PL_CardUnloadCheck:     .word `_CardUnloadCheck
 011A 0000      PL_CardLoadCheck:       .word `_CardLoadCheck
 011C 0000      PL_CardTakeHookCheck:   .word `_CardTakeHookCheck
 011E 0000      PL_CardStoreMoveCheck:  .word `_CardStoreMoveCheck
 0120 0000      PL_NeedleUpdownCheck:   .word `_NeedleUpdownCheck
 0122 0000      PL_NeedleTurnCheck:     .word `_NeedleTurnCheck
 0124 0000      PL_TurnPlateCheck:      .word `_TurnPlateCheck
 0126 0000      PL_DiluentQuantifyTest: .word `_DiluentQuantifyTest
 0128 0000      PL_CardStorePhotoAdjust:        .word `_CardStorePhotoAdjust
 012A 0000      PL_LiquidPhotoAdjust:   .word `_LiquidPhotoAdjust
 012C 0000      PL_CardUnloadEndAdjust: .word `_CardUnloadEndAdjust
 012E 0000      PL_CardUnloadStartAdjust:       .word `_CardUnloadStartAdjust
 0130 0000      PL_CardLoadEndAdjust:   .word `_CardLoadEndAdjust
 0132 0000      PL_CardLoadStartAdjust: .word `_CardLoadStartAdjust
