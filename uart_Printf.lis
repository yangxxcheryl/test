                        .module uart_Printf.c
                        .area text(rom, con, rel)
                ;              a -> y+0
                ;              p -> R10,R11
                ;          count -> R20
                ;              c -> R10
                        .even
 0000           _PutRepChar:
 0000 0E940000          xcall push_xgset300C
 0004 422F              mov R20,R18
 0006 A02E              mov R10,R16
 0008 2197              sbiw R28,1
 000A           ; /**************************************************
 000A           ; 
 000A           ; ***************************************************/
 000A           ; // File name: "uart_Printf.c"
 000A           ; /*************************************
 000A           ;  Editor: lihanyang
 000A           ;  Date:2010-2-10
 000A           ; *************************************/
 000A           ; 
 000A           ; #include      "B1404_LIB.h"
 000A           ; #include    <string.h>
 000A           ; 
 000A           ; #define vaStart(list, param) list = (char*)((int)&param + sizeof(param))
 000A           ; #define vaArg(list, type) ((type *)(list += sizeof(type)))[-1]
 000A           ; 
 000A           ; static void  PutRepChar(char c, unsigned char count)
 000A           ; {
 000A           ;       unsigned char  a;
 000A           ;       unsigned char * p;
 000A           ;       a  = (unsigned char)c;
 000A A882              std y+0,R10
 000C           ;       p = &a;
 000C CE01              movw R24,R28
 000E 5C01              movw R10,R24
 0010 05C0              xjmp L3
 0012           L2:
 0012           ;     while (count--)
 0012           ; 		uart0SendData(p, 1);
 0012 21E0              ldi R18,1
 0014 30E0              ldi R19,0
 0016 8501              movw R16,R10
 0018 0E940000          xcall _uart0SendData
 001C           L3:
 001C 242E              mov R2,R20
 001E 3324              clr R3
 0020 4150              subi R20,1
 0022 2220              tst R2
 0024 B1F7              brne L2
 0026           X0:
 0026           L1:
 0026                   .dbline 0 ; func end
 0026 2196              adiw R28,1
 0028 0C940000          xjmp pop_xgset300C
 002C           ;              p -> R10,R11
 002C           ;          index -> R20
 002C           ;              s -> R12,R13
                        .even
 002C           _PutStringReverse:
 002C 0E940000          xcall push_xgset303C
 0030 422F              mov R20,R18
 0032 6801              movw R12,R16
 0034           ; }
 0034           ; 
 0034           ; static void  PutStringReverse(char *s, unsigned char index)
 0034           ; {
 0034           ;       unsigned char * p;
 0034           ;       p = (unsigned char *)s;
 0034 5601              movw R10,R12
 0036 08C0              xjmp L7
 0038           L6:
 0038           ;     while ((index--) > 0)
 0038           ; 		uart0SendData(p+index, 1);
 0038 21E0              ldi R18,1
 003A 30E0              ldi R19,0
 003C 042F              mov R16,R20
 003E 1127              clr R17
 0040 0A0D              add R16,R10
 0042 1B1D              adc R17,R11
 0044 0E940000          xcall _uart0SendData
 0048           L7:
 0048 242E              mov R2,R20
 004A 3324              clr R3
 004C 4150              subi R20,1
 004E 80E0              ldi R24,0
 0050 8215              cp R24,R2
 0052 90F3              brlo L6
 0054           X1:
 0054           L5:
 0054                   .dbline 0 ; func end
 0054 0C940000          xjmp pop_xgset303C
 0058           ;       negative -> R14
 0058           ;           left -> R10
 0058           ;         buffer -> y+0
 0058           ;             bi -> y+40
 0058           ;          digit -> R12,R13
 0058           ;         uvalue -> R22,R23
 0058           ;           fill -> y+55
 0058           ;          width -> y+53
 0058           ;          radix -> y+51
 0058           ;          value -> R20,R21
                        .even
 0058           _PutNumber:
 0058 3A93              st -y,r19
 005A 2A93              st -y,r18
 005C 0E940000          xcall push_xgsetF0FC
 0060 A801              movw R20,R16
 0062 A997              sbiw R28,41
 0064           ; }
 0064           ; 
 0064           ; static void  PutNumber(int value, signed char radix, unsigned char width, char fill)
 0064           ; {
 0064           ;     char    buffer[40];
 0064           ;     unsigned char     bi = 0;
 0064 0024              clr R0
 0066 08A6              std y+40,R0
 0068           ;     unsigned int  uvalue;
 0068           ;     unsigned short  digit;
 0068           ;     unsigned char  left = 0;
 0068 AA24              clr R10
 006A           ;     unsigned char  negative = 0;
 006A EE24              clr R14
 006C           ; 
 006C           ;     if (fill == 0)
 006C 0FA8              ldd R0,y+55
 006E 0020              tst R0
 0070 11F4              brne L10
 0072           X2:
 0072           ;         fill = ' ';
 0072 80E2              ldi R24,32
 0074 8FAB              std y+55,R24
 0076           L10:
 0076           ; 
 0076           ;     if (width < 0)
 0076 8DA9              ldd R24,y+53
 0078 8030              cpi R24,0
 007A 28F4              brsh L12
 007C           X3:
 007C           ;     {
 007C           ;         width = -width;
 007C 082E              mov R0,R24
 007E 0194              neg R0
 0080 0DAA              std y+53,R0
 0082           ;         left = 1;
 0082 AA24              clr R10
 0084 A394              inc R10
 0086           ;     }
 0086           L12:
 0086           ; 
 0086           ;     if (width < 0 || width > 80)
 0086 8DA9              ldd R24,y+53
 0088 8030              cpi R24,0
 008A 20F0              brlo L16
 008C           X4:
 008C 80E5              ldi R24,80
 008E 0DA8              ldd R0,y+53
 0090 8015              cp R24,R0
 0092 10F4              brsh L14
 0094           X5:
 0094           L16:
 0094           ;         width = 0;
 0094 0024              clr R0
 0096 0DAA              std y+53,R0
 0098           L14:
 0098           ; 
 0098           ;     if (radix < 0)
 0098 8BA9              ldd R24,y+51
 009A 8030              cpi R24,0
 009C 6CF4              brge L17
 009E           X6:
 009E           ;     {
 009E           ;         radix = -radix;
 009E 082E              mov R0,R24
 00A0 0194              neg R0
 00A2 0BAA              std y+51,R0
 00A4           ;         if (value < 0)
 00A4 4030              cpi R20,0
 00A6 E0E0              ldi R30,0
 00A8 5E07              cpc R21,R30
 00AA 34F4              brge L19
 00AC           X7:
 00AC           ;         {
 00AC           ;             negative = 1;
 00AC EE24              clr R14
 00AE E394              inc R14
 00B0           ;             value = -value;
 00B0 4095              com R20
 00B2 5095              com R21
 00B4 4F5F              subi R20,0xFF
 00B6 5F4F              sbci R21,0xFF
 00B8           ;         }
 00B8           L19:
 00B8           ;     }
 00B8           L17:
 00B8           ; 
 00B8           ;     uvalue = value;
 00B8 BA01              movw R22,R20
 00BA           L21:
 00BA           ; 
 00BA           ;     do
 00BA           ;     {
 00BA           ;         if (radix != 16)
 00BA 8BA9              ldd R24,y+51
 00BC 8031              cpi R24,16
 00BE 89F0              breq L24
 00C0           X8:
 00C0           ;         {
 00C0           ;             digit = uvalue % radix;
 00C0 282F              mov R18,R24
 00C2 3327              clr R19
 00C4 27FD              sbrc R18,7
 00C6 3095              com R19
 00C8 8B01              movw R16,R22
 00CA 0E940000          xcall mod16u
 00CE 6801              movw R12,R16
 00D0           ;             uvalue = uvalue / radix;
 00D0 2BA9              ldd R18,y+51
 00D2 3327              clr R19
 00D4 27FD              sbrc R18,7
 00D6 3095              com R19
 00D8 8B01              movw R16,R22
 00DA 0E940000          xcall div16u
 00DE B801              movw R22,R16
 00E0           ;         }
 00E0 0CC0              xjmp L25
 00E2           L24:
 00E2           ;         else
 00E2           ;         {
 00E2           ;             digit = uvalue & 0xf;
 00E2 CB01              movw R24,R22
 00E4 8F70              andi R24,15
 00E6 9070              andi R25,0
 00E8 6C01              movw R12,R24
 00EA           ;             uvalue = uvalue >> 4;
 00EA 7695              lsr R23
 00EC 6795              ror R22
 00EE 7695              lsr R23
 00F0 6795              ror R22
 00F2 7695              lsr R23
 00F4 6795              ror R22
 00F6 7695              lsr R23
 00F8 6795              ror R22
 00FA           ;         }
 00FA           L25:
 00FA           ;         buffer[bi] = digit + ((digit <= 9) ? '0' : ('A' - 10));
 00FA 89E0              ldi R24,9
 00FC 90E0              ldi R25,0
 00FE 8C15              cp R24,R12
 0100 9D05              cpc R25,R13
 0102 18F0              brlo L26
 0104           X9:
 0104 40E3              ldi R20,48
 0106 50E0              ldi R21,0
 0108 02C0              xjmp L27
 010A           L26:
 010A 47E3              ldi R20,55
 010C 50E0              ldi R21,0
 010E           L27:
 010E 1601              movw R2,R12
 0110 240E              add R2,R20
 0112 351E              adc R3,R21
 0114 CE01              movw R24,R28
 0116 E8A5              ldd R30,y+40
 0118 FF27              clr R31
 011A E80F              add R30,R24
 011C F91F              adc R31,R25
 011E 2082              std z+0,R2
 0120           ;         bi++;
 0120 08A4              ldd R0,y+40
 0122 0394              inc R0
 0124 08A6              std y+40,R0
 0126           ;               /*
 0126           ;         if (uvalue != 0)
 0126           ;         {
 0126           ;             if ((radix == 10) // Ç§Î»·û
 0126           ;                 && ((bi == 3) || (bi == 7) || (bi == 11) | (bi == 15)))
 0126           ;             {
 0126           ;                 buffer[bi++] = ',';
 0126           ;             }
 0126           ;         }*/
 0126           ;     }
 0126           L22:
 0126           ;     while (uvalue != 0);
 0126 6030              cpi R22,0
 0128 6707              cpc R22,R23
 012A 09F0              breq X15
 012C C6CF              xjmp L21
 012E           X15:
 012E           X10:
 012E           ; 
 012E           ;     if (negative)
 012E EE20              tst R14
 0130 51F0              breq L28
 0132           X11:
 0132           ;     {
 0132           ;         buffer[bi] = '-';
 0132 CE01              movw R24,R28
 0134 E8A5              ldd R30,y+40
 0136 FF27              clr R31
 0138 E80F              add R30,R24
 013A F91F              adc R31,R25
 013C 8DE2              ldi R24,45
 013E 8083              std z+0,R24
 0140           ;         bi += 1;
 0140 08A4              ldd R0,y+40
 0142 0394              inc R0
 0144 08A6              std y+40,R0
 0146           ;     }
 0146           L28:
 0146           ; 
 0146           ;     if (width <= bi)
 0146 28A4              ldd R2,y+40
 0148 3324              clr R3
 014A 4DA8              ldd R4,y+53
 014C 5524              clr R5
 014E 2414              cp R2,R4
 0150 3504              cpc R3,R5
 0152 24F0              brlt L30
 0154           X12:
 0154           ;         PutStringReverse(buffer, bi);
 0154 222D              mov R18,R2
 0156 8E01              movw R16,R28
 0158 69DF              xcall _PutStringReverse
 015A 11C0              xjmp L31
 015C           L30:
 015C           ;     else
 015C           ;     {
 015C           ;         width -= bi;
 015C 0DA8              ldd R0,y+53
 015E 08A5              ldd R16,y+40
 0160 001A              sub R0,R16
 0162 0DAA              std y+53,R0
 0164           ;         if (!left)
 0164 AA20              tst R10
 0166 19F4              brne L32
 0168           X13:
 0168           ;             PutRepChar(fill, width);
 0168 202D              mov R18,R0
 016A 0FA9              ldd R16,y+55
 016C 49DF              xcall _PutRepChar
 016E           L32:
 016E           ;         PutStringReverse(buffer, bi);
 016E 28A5              ldd R18,y+40
 0170 8E01              movw R16,R28
 0172 5CDF              xcall _PutStringReverse
 0174           ;         if (left)
 0174 AA20              tst R10
 0176 19F0              breq L34
 0178           X14:
 0178           ;             PutRepChar(fill, width);
 0178 2DA9              ldd R18,y+53
 017A 0FA9              ldd R16,y+55
 017C 41DF              xcall _PutRepChar
 017E           L34:
 017E           ;     }
 017E           L31:
 017E           L9:
 017E                   .dbline 0 ; func end
 017E A996              adiw R28,41
 0180 0E940000          xcall pop_xgsetF0FC
 0184 2296              adiw R28,2
 0186 0895              ret
 0188           ;             uc -> y+3
 0188           ;           fill -> R14
 0188           ;       leftjust -> R20
 0188           ;     fieldwidth -> y+4
 0188           ;          radix -> R10
 0188           ;              c -> R22
 0188           ;              a -> y+17
 0188           ;              f -> y+15
                        .even
 0188           _FormatItem:
 0188 0E940000          xcall push_arg4
 018C 0E940000          xcall push_xgsetF0FC
 0190 2597              sbiw R28,5
 0192           ; }
 0192           ; 
 0192           ; static char  *FormatItem(char *f,  int a)
 0192           ; {
 0192           ;     char   c;
 0192           ;       unsigned char uc;
 0192           ;     signed char    fieldwidth = 0;
 0192 0024              clr R0
 0194 0C82              std y+4,R0
 0196           ;     signed char    leftjust = 0;
 0196 4427              clr R20
 0198           ;     signed char    radix = 0;
 0198 AA24              clr R10
 019A           ;     char   fill = ' ';
 019A 80E2              ldi R24,32
 019C E82E              mov R14,R24
 019E           ; 
 019E           ;     if (*f == '0')
 019E EF85              ldd R30,y+15
 01A0 F889              ldd R31,y+16
 01A2 8081              ldd R24,z+0
 01A4 8033              cpi R24,48
 01A6 09F0              breq X40
 01A8 BDC0              xjmp L40
 01AA           X40:
 01AA           X16:
 01AA           ;         fill = '0';
 01AA 80E3              ldi R24,48
 01AC E82E              mov R14,R24
 01AE BAC0              xjmp L40
 01B0           L39:
 01B0           ; 
 01B0           ;     while ((c = *f++) != 0)
 01B0           ;     {
 01B0           ;         if (c >= '0' && c <= '9')
 01B0 6033              cpi R22,48
 01B2 60F0              brlo L42
 01B4           X17:
 01B4 89E3              ldi R24,57
 01B6 8617              cp R24,R22
 01B8 48F0              brlo L42
 01BA           X18:
 01BA           ;         {
 01BA           ;             fieldwidth = (fieldwidth * 10) + (c - '0');
 01BA 0AE0              ldi R16,10
 01BC 1C81              ldd R17,y+4
 01BE 0102              muls R16,R17
 01C0 202C              mov R2,R0
 01C2 862F              mov R24,R22
 01C4 8053              subi R24,48
 01C6 280E              add R2,R24
 01C8 2C82              std y+4,R2
 01CA           ;         }
 01CA A9C0              xjmp L43
 01CC           L42:
 01CC           ;         else
 01CC           ;             switch (c)
 01CC C62E              mov R12,R22
 01CE DD24              clr R13
 01D0 C601              movw R24,R12
 01D2 8835              cpi R24,88
 01D4 E0E0              ldi R30,0
 01D6 9E07              cpc R25,R30
 01D8 09F4              brne X41
 01DA 99C0              xjmp L62
 01DC           X41:
 01DC           X19:
 01DC 88E5              ldi R24,88
 01DE 8C15              cp R24,R12
 01E0 9D05              cpc R25,R13
 01E2 C4F0              brlt L65
 01E4           X20:
 01E4           L64:
 01E4 C601              movw R24,R12
 01E6 8532              cpi R24,37
 01E8 E0E0              ldi R30,0
 01EA 9E07              cpc R25,R30
 01EC 09F4              brne X42
 01EE 4DC0              xjmp L48
 01F0           X42:
 01F0           X21:
 01F0 85E2              ldi R24,37
 01F2 90E0              ldi R25,0
 01F4 8C15              cp R24,R12
 01F6 9D05              cpc R25,R13
 01F8 34F0              brlt L67
 01FA           X22:
 01FA           L66:
 01FA CC20              tst R12
 01FC 19F4              brne X23
 01FE DD20              tst R13
 0200 09F4              brne X43
 0202 3BC0              xjmp L47
 0204           X43:
 0204           X23:
 0204 8AC0              xjmp L44
 0206           L67:
 0206 C601              movw R24,R12
 0208 8D32              cpi R24,45
 020A E0E0              ldi R30,0
 020C 9E07              cpc R25,R30
 020E 09F4              brne X44
 0210 45C0              xjmp L50
 0212           X44:
 0212           X24:
 0212 83C0              xjmp L44
 0214           L65:
 0214 C601              movw R24,R12
 0216 8936              cpi R24,105
 0218 E0E0              ldi R30,0
 021A 9E07              cpc R25,R30
 021C 09F4              brne X45
 021E 6EC0              xjmp L59
 0220           X45:
 0220           X25:
 0220 89E6              ldi R24,105
 0222 90E0              ldi R25,0
 0224 8C15              cp R24,R12
 0226 9D05              cpc R25,R13
 0228 64F0              brlt L69
 022A           X26:
 022A           L68:
 022A C601              movw R24,R12
 022C 8336              cpi R24,99
 022E E0E0              ldi R30,0
 0230 9E07              cpc R25,R30
 0232 09F4              brne X46
 0234 35C0              xjmp L51
 0236           X46:
 0236           X27:
 0236 8436              cpi R24,100
 0238 E0E0              ldi R30,0
 023A 9E07              cpc R25,R30
 023C 09F4              brne X47
 023E 5EC0              xjmp L59
 0240           X47:
 0240           X28:
 0240 6CC0              xjmp L44
 0242           L69:
 0242 C601              movw R24,R12
 0244 8F36              cpi R24,111
 0246 E0E0              ldi R30,0
 0248 9E07              cpc R25,R30
 024A 09F4              brne X48
 024C 63C0              xjmp L63
 024E           X48:
 024E           X29:
 024E 8F36              cpi R24,111
 0250 E0E0              ldi R30,0
 0252 9E07              cpc R25,R30
 0254 0CF4              brge X49
 0256 61C0              xjmp L44
 0258           X49:
 0258           X30:
 0258           L70:
 0258 C601              movw R24,R12
 025A 8337              cpi R24,115
 025C E0E0              ldi R30,0
 025E 9E07              cpc R25,R30
 0260 09F4              brne X50
 0262 45C0              xjmp L58
 0264           X50:
 0264           X31:
 0264 8537              cpi R24,117
 0266 E0E0              ldi R30,0
 0268 9E07              cpc R25,R30
 026A 09F4              brne X51
 026C 4AC0              xjmp L60
 026E           X51:
 026E           X32:
 026E 8837              cpi R24,120
 0270 E0E0              ldi R30,0
 0272 9E07              cpc R25,R30
 0274 09F4              brne X52
 0276 48C0              xjmp L61
 0278           X52:
 0278           X33:
 0278 50C0              xjmp L44
 027A           L47:
 027A           ;             {
 027A           ;                 case '\000':
 027A           ;                     return (--f);
 027A 8F85              ldd R24,y+15
 027C 9889              ldd R25,y+16
 027E 0197              sbiw R24,1
 0280 1C01              movw R2,R24
 0282 388A              std y+16,R3
 0284 2F86              std y+15,R2
 0286 8C01              movw R16,R24
 0288 64C0              xjmp L36
 028A           L48:
 028A           ;                 case '%':
 028A           ; 					uart0SendData("%", 1);
 028A 21E0              ldi R18,1
 028C 30E0              ldi R19,0
 028E 00E0              ldi R16,<L49
 0290 10E0              ldi R17,>L49
 0292 0E940000          xcall _uart0SendData
 0296           ;                     return (f);
 0296 0F85              ldd R16,y+15
 0298 1889              ldd R17,y+16
 029A 5BC0              xjmp L36
 029C           L50:
 029C           ;                 case '-':
 029C           ;                     leftjust = 1;
 029C 41E0              ldi R20,1
 029E           ;                     break;
 029E 3FC0              xjmp L45
 02A0           L51:
 02A0           ;                 case 'c':
 02A0           ;                     {
 02A0           ;                         if (leftjust){
 02A0 4423              tst R20
 02A2 61F0              breq L52
 02A4           X34:
 02A4           ; 							uc = (unsigned char)(a & 0x7f);
 02A4 8989              ldd R24,y+17
 02A6 9A89              ldd R25,y+18
 02A8 8F77              andi R24,127
 02AA 9070              andi R25,0
 02AC 8B83              std y+3,R24
 02AE           ;                                                       uart0SendData(&uc, 1);
 02AE 21E0              ldi R18,1
 02B0 30E0              ldi R19,0
 02B2 8E01              movw R16,R28
 02B4 0D5F              subi R16,253  ; offset = 3
 02B6 1F4F              sbci R17,255
 02B8 0E940000          xcall _uart0SendData
 02BC           ;                               }
 02BC           L52:
 02BC           ; 
 02BC           ;                         if (fieldwidth > 0)
 02BC 2224              clr R2
 02BE 0C80              ldd R0,y+4
 02C0 2014              cp R2,R0
 02C2 24F4              brge L54
 02C4           X35:
 02C4           ;                             PutRepChar(fill, fieldwidth - 1);
 02C4 202D              mov R18,R0
 02C6 2150              subi R18,1
 02C8 0E2D              mov R16,R14
 02CA 9ADE              xcall _PutRepChar
 02CC           L54:
 02CC           ; 
 02CC           ;                         if (!leftjust){
 02CC 4423              tst R20
 02CE 61F4              brne L56
 02D0           X36:
 02D0           ; 							uc = (unsigned char)(a & 0x7f);
 02D0 8989              ldd R24,y+17
 02D2 9A89              ldd R25,y+18
 02D4 8F77              andi R24,127
 02D6 9070              andi R25,0
 02D8 8B83              std y+3,R24
 02DA           ;                                                       uart0SendData(&uc, 1);
 02DA 21E0              ldi R18,1
 02DC 30E0              ldi R19,0
 02DE 8E01              movw R16,R28
 02E0 0D5F              subi R16,253  ; offset = 3
 02E2 1F4F              sbci R17,255
 02E4 0E940000          xcall _uart0SendData
 02E8           ;                               }
 02E8           L56:
 02E8           ;                         return (f);
 02E8 0F85              ldd R16,y+15
 02EA 1889              ldd R17,y+16
 02EC 32C0              xjmp L36
 02EE           L58:
 02EE           ;                     }
 02EE           ;                 case 's':
 02EE           ; 				/*	if (leftjust)
 02EE           ; 						uart0SendData((unsigned char *)a, strlen((char *)a));
 02EE           ; 					if (fieldwidth > strlen((char *)a))
 02EE           ; 						PutRepChar(fill,  fieldwidth - strlen((char *)a));
 02EE           ; 					if (!leftjust)
 02EE           ; 						uart0SendData((unsigned char *)a, strlen((char *)a));
 02EE           ; 				*/
 02EE           ; 					uart0SendString((_CONST unsigned char *)a);
 02EE 0989              ldd R16,y+17
 02F0 1A89              ldd R17,y+18
 02F2 0E940000          xcall _uart0SendString
 02F6           ;                                       return (f);
 02F6 0F85              ldd R16,y+15
 02F8 1889              ldd R17,y+16
 02FA 2BC0              xjmp L36
 02FC           L59:
 02FC           ;                 case 'd':
 02FC           ;                 case 'i':
 02FC           ;                     radix = -10;
 02FC 86EF              ldi R24,246
 02FE A82E              mov R10,R24
 0300           ;                     break;
 0300 0EC0              xjmp L45
 0302           L60:
 0302           ;                 case 'u':
 0302           ;                     radix = 10;
 0302 8AE0              ldi R24,10
 0304 A82E              mov R10,R24
 0306           ;                     break;
 0306 0BC0              xjmp L45
 0308           L61:
 0308           ;                 case 'x':
 0308           ;                     radix = 16;
 0308 80E1              ldi R24,16
 030A A82E              mov R10,R24
 030C           ;                     break;
 030C 08C0              xjmp L45
 030E           L62:
 030E           ;                 case 'X':
 030E           ;                     radix = 16;
 030E 80E1              ldi R24,16
 0310 A82E              mov R10,R24
 0312           ;                     break;
 0312 05C0              xjmp L45
 0314           L63:
 0314           ;                 case 'o':
 0314           ;                     radix = 8;
 0314 88E0              ldi R24,8
 0316 A82E              mov R10,R24
 0318           ;                     break;
 0318 02C0              xjmp L45
 031A           L44:
 031A           ;                 default:
 031A           ;                     radix = 3;
 031A 83E0              ldi R24,3
 031C A82E              mov R10,R24
 031E           ;                     break;      /* unknown switch! */
 031E           L45:
 031E           L43:
 031E           ;             }
 031E           ;         if (radix)
 031E AA20              tst R10
 0320 09F0              breq L71
 0322           X37:
 0322           ;             break;
 0322 09C0              xjmp L41
 0324           L71:
 0324           ;     }
 0324           L40:
 0324 EF85              ldd R30,y+15
 0326 F889              ldd R31,y+16
 0328 2190              ld R2,Z+
 032A F88B              std y+16,R31
 032C EF87              std y+15,R30
 032E 622D              mov R22,R2
 0330 6623              tst R22
 0332 09F0              breq X53
 0334 3DCF              xjmp L39
 0336           X53:
 0336           X38:
 0336           L41:
 0336           ; 
 0336           ;     if (leftjust)
 0336 4423              tst R20
 0338 19F0              breq L73
 033A           X39:
 033A           ;         fieldwidth = -fieldwidth;
 033A 0C80              ldd R0,y+4
 033C 0194              neg R0
 033E 0C82              std y+4,R0
 0340           L73:
 0340           ; 
 0340           ;     PutNumber(a, radix, fieldwidth, fill);
 0340 EA82              std y+2,R14
 0342 0C80              ldd R0,y+4
 0344 0882              std y+0,R0
 0346 2A2D              mov R18,R10
 0348 0989              ldd R16,y+17
 034A 1A89              ldd R17,y+18
 034C 85DE              xcall _PutNumber
 034E           ; 
 034E           ;     return (f);
 034E 0F85              ldd R16,y+15
 0350 1889              ldd R17,y+16
 0352           L36:
 0352                   .dbline 0 ; func end
 0352 2596              adiw R28,5
 0354 0E940000          xcall pop_xgsetF0FC
 0358 2496              adiw R28,4
 035A 0895              ret
 035C           ;              c -> <dead>
 035C           ;           argP -> R20,R21
 035C           ;              p -> R10,R11
 035C           ;              f -> y+4
                        .even
 035C           _uart_Printf::
 035C 0E940000          xcall push_arg4
 0360 0E940000          xcall push_xgset300C
 0364           ; }
 0364           ; 
 0364           ; void  uart_Printf(char *f, ...) /* variable arguments */
 0364           ; {
 0364           ;     char  *argP;
 0364           ;       unsigned char *p;
 0364           ;       char c;
 0364           ;       //c = 0x02;
 0364           ;       //uart0SendData(&c, 1);
 0364           ;     vaStart(argP, f);       /* point at the end of the format string */
 0364 AE01              movw R20,R28
 0366 4C5F              subi R20,252  ; offset = 4
 0368 5F4F              sbci R21,255
 036A 4E5F              subi R20,254  ; offset = 2
 036C 5F4F              sbci R21,255
 036E 20C0              xjmp L77
 0370           L76:
 0370           ;     while (*f)
 0370           ;     {                       /* this works because args are all ints */
 0370           ;         if (*f == '%')
 0370 EC81              ldd R30,y+4
 0372 FD81              ldd R31,y+5
 0374 8081              ldd R24,z+0
 0376 8532              cpi R24,37
 0378 79F4              brne L79
 037A           X54:
 037A           ;             f = FormatItem(f + 1, vaArg(argP, int));
 037A CA01              movw R24,R20
 037C 0296              adiw R24,2
 037E AC01              movw R20,R24
 0380 FC01              movw R30,R24
 0382 3297              sbiw R30,2
 0384 2081              ldd R18,z+0
 0386 3181              ldd R19,z+1
 0388 0C81              ldd R16,y+4
 038A 1D81              ldd R17,y+5
 038C 0F5F              subi R16,255  ; offset = 1
 038E 1F4F              sbci R17,255
 0390 FBDE              xcall _FormatItem
 0392 1D83              std y+5,R17
 0394 0C83              std y+4,R16
 0396 0CC0              xjmp L80
 0398           L79:
 0398           ; 
 0398           ;         else{
 0398           ; 		//	if(*f == '\n'){
 0398           ; 		//		uart0SendData("\r", 1);
 0398           ; 		//		}
 0398           ; 			p = (unsigned char *)f;
 0398 AC80              ldd R10,y+4
 039A BD80              ldd R11,y+5
 039C           ;                       uart0SendData(p, 1);
 039C 21E0              ldi R18,1
 039E 30E0              ldi R19,0
 03A0 8501              movw R16,R10
 03A2 0E940000          xcall _uart0SendData
 03A6           ;                       f ++;
 03A6 8C81              ldd R24,y+4
 03A8 9D81              ldd R25,y+5
 03AA 0196              adiw R24,1
 03AC 9D83              std y+5,R25
 03AE 8C83              std y+4,R24
 03B0           ;               }
 03B0           L80:
 03B0           ;     }
 03B0           L77:
 03B0 EC81              ldd R30,y+4
 03B2 FD81              ldd R31,y+5
 03B4 2080              ldd R2,z+0
 03B6 2220              tst R2
 03B8 D9F6              brne L76
 03BA           X55:
 03BA           L75:
 03BA                   .dbline 0 ; func end
 03BA 0E940000          xcall pop_xgset300C
 03BE 2496              adiw R28,4
 03C0 0895              ret
 03C2           ;            Num -> y+0
                        .even
 03C2           _uart0SendInt::
 03C2 0E940000          xcall push_arg4
 03C6           ;       //c = 0x03;             
 03C6           ;       //uart0SendData(&c, 1);
 03C6           ; }
 03C6           ; 
 03C6           ; void uart0SendInt(unsigned long Num)
 03C6           ; {
 03C6           ;   if(Num < 10)
 03C6 8AE0              ldi R24,10
 03C8 90E0              ldi R25,0
 03CA A0E0              ldi R26,0
 03CC B0E0              ldi R27,0
 03CE 2880              ldd R2,y+0
 03D0 3980              ldd R3,y+1
 03D2 4A80              ldd R4,y+2
 03D4 5B80              ldd R5,y+3
 03D6 2816              cp R2,R24
 03D8 3906              cpc R3,R25
 03DA 4A06              cpc R4,R26
 03DC 5B06              cpc R5,R27
 03DE 60F4              brsh L82
 03E0           X56:
 03E0           ;   {
 03E0           ;     uart0SendChar(Num + '0');
 03E0 80E3              ldi R24,48
 03E2 90E0              ldi R25,0
 03E4 A0E0              ldi R26,0
 03E6 B0E0              ldi R27,0
 03E8 280E              add R2,R24
 03EA 391E              adc R3,R25
 03EC 4A1E              adc R4,R26
 03EE 5B1E              adc R5,R27
 03F0 022D              mov R16,R2
 03F2 0E940000          xcall _uart0SendChar
 03F6           ;   }
 03F6 1EC0              xjmp L83
 03F8           L82:
 03F8           ;   else
 03F8           ;   {
 03F8           ;     uart0SendInt(Num / 10);
 03F8 8AE0              ldi R24,10
 03FA 90E0              ldi R25,0
 03FC A0E0              ldi R26,0
 03FE B0E0              ldi R27,0
 0400 0881              ldd R16,y+0
 0402 1981              ldd R17,y+1
 0404 2A81              ldd R18,y+2
 0406 3B81              ldd R19,y+3
 0408 BA93              st -y,R27
 040A AA93              st -y,R26
 040C 9A93              st -y,R25
 040E 8A93              st -y,R24
 0410 0E940000          xcall div32u
 0414 D6DF              xcall _uart0SendInt
 0416           ;     uart0SendInt(Num % 10);
 0416 8AE0              ldi R24,10
 0418 90E0              ldi R25,0
 041A A0E0              ldi R26,0
 041C B0E0              ldi R27,0
 041E 0881              ldd R16,y+0
 0420 1981              ldd R17,y+1
 0422 2A81              ldd R18,y+2
 0424 3B81              ldd R19,y+3
 0426 BA93              st -y,R27
 0428 AA93              st -y,R26
 042A 9A93              st -y,R25
 042C 8A93              st -y,R24
 042E 0E940000          xcall mod32u
 0432 C7DF              xcall _uart0SendInt
 0434           ;   }
 0434           L83:
 0434           L81:
 0434                   .dbline 0 ; func end
 0434 2496              adiw R28,4
 0436 0895              ret
                        .area data(ram, con, rel)
 0000           L49:
 0000                   .blkb 2
                        .area idata
 0000 2500              .byte 37,0
                        .area data(ram, con, rel)
                ; }
                ; 
                ; /*********************** File end *************************/
                ; 
