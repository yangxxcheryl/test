                        .module CommandString.c
                        .area text(rom, con, rel)
                ;          pChar -> R16,R17
                ;              i -> R18
                        .even
 0000           _CommandClear::
 0000           ; 
 0000           ; /*
 0000           ; 1.命令字符串定义
 0000           ; 2.终端输入命令解析提取
 0000           ; */
 0000           ; /*
 0000           ; 输入:void CommandExplain(unsigned char c)	在串口输入中断中调用
 0000           ; 输出:CONTROL_CMD ControlCmd					任务调度中读取并处理
 0000           ; */
 0000           ; 
 0000           ; #include "Common.h"
 0000           ; /*
 0000           ; typedef struct _HT_COMMAND_STRING{
 0000           ; 	_CONST char * pChar;
 0000           ; 	_CONST unsigned int indx;
 0000           ; }HTCMD_STR;
 0000           ; 
 0000           ; typedef struct _HTCOMMAND_BUF{
 0000           ; 	unsigned char itemPnt;			// 当前条目指针
 0000           ; 	unsigned char charPnt;			// 当前条目字符指针
 0000           ; 	unsigned char cmdStr[35];		// 命令字符串
 0000           ; 	unsigned char pamStr[6][10];	// 参数
 0000           ; }HTCOMMAND_BUF;
 0000           ; */
 0000           ; typedef struct _UICOMMAND_BUF{
 0000           ; 	unsigned char itemPnt;			// 当前接收的项目号
 0000           ; 	unsigned char charPnt;			// 接收指针
 0000           ; 	unsigned char cmdStr[10];		// 命令名称字符串
 0000           ; }UICOMMAND_BUF;
 0000           ; /*
 0000           ; // 启动
 0000           ; _CONST char CStr0000[] 		= "echo";		// 回显开关
 0000           ; _CONST HTCMD_STR HTCmd0000 	= {CStr0000, 0};
 0000           ; _CONST char CStr0001[] 		= "startrap01";		// 启动仪器
 0000           ; _CONST HTCMD_STR HTCmd0001 	= {CStr0001, 1};
 0000           ; _CONST char CStr0002[] 		= "setwork";		// 设置工作进程
 0000           ; _CONST HTCMD_STR HTCmd0002 	= {CStr0002, 2};
 0000           ; _CONST char CStr0003[] 		= "askwork";		// 询问当前工作进程
 0000           ; _CONST HTCMD_STR HTCmd0003 	= {CStr0003, 3};
 0000           ; _CONST char CStr0004[] 		= "quit";		// 退出当前工作进程
 0000           ; _CONST HTCMD_STR HTCmd0004 	= {CStr0004, 4};
 0000           ; _CONST char CStr0005[] 		= "suspend";				// 	暂停工作开关
 0000           ; _CONST HTCMD_STR HTCmd0005 	= {CStr0005, 5};
 0000           ; _CONST char CStr0010[] 		= "storedooropen";		// 开启片仓
 0000           ; _CONST HTCMD_STR HTCmd0010 	= {CStr0010, 10};
 0000           ; _CONST char CStr0011[] 		= "getstorehumiture";	// 读取片仓温湿度
 0000           ; _CONST HTCMD_STR HTCmd0011 	= {CStr0011, 11};
 0000           ; _CONST char CStr0099[] 		= "restart";	// 重起
 0000           ; _CONST HTCMD_STR HTCmd0099 	= {CStr0099, 99};
 0000           ; 
 0000           ; _CONST HTCMD_STR * CmdString0[] = {
 0000           ; 	&HTCmd0000, &HTCmd0001, &HTCmd0002, &HTCmd0003, &HTCmd0004, &HTCmd0005, &HTCmd0010, &HTCmd0011, &HTCmd0099, 0
 0000           ; };
 0000           ; // 机械自检
 0000           ; _CONST HTCMD_STR * CmdString1[] = {
 0000           ; 	&HTCmd0003, &HTCmd0004, &HTCmd0005, &HTCmd0099, 0
 0000           ; };
 0000           ; // 液路自检
 0000           ; _CONST HTCMD_STR * CmdString2[] = {
 0000           ; 	&HTCmd0003, &HTCmd0004, &HTCmd0005, &HTCmd0099, 0
 0000           ; };
 0000           ; // 测试
 0000           ; _CONST char CStr3001[] 		= "settestparamter";	// 设置测试参数
 0000           ; _CONST HTCMD_STR HTCmd3001 	= {CStr3001, 3001};
 0000           ; _CONST char CStr3002[] 		= "setworkstore";		// 设置当前取片卡仓号
 0000           ; _CONST HTCMD_STR HTCmd3002 	= {CStr3002, 3002};
 0000           ; _CONST char CStr3003[] 		= "setdiluteratio";		// 设置稀释比例
 0000           ; _CONST HTCMD_STR HTCmd3003 	= {CStr3003, 3003};
 0000           ; _CONST char CStr3004[] 		= "setreadtime1";		// 设置读数时间1
 0000           ; _CONST HTCMD_STR HTCmd3004 	= {CStr3004, 3004};
 0000           ; _CONST char CStr3005[] 		= "setreadtime2";		// 设置读数时间2
 0000           ; _CONST HTCMD_STR HTCmd3005 	= {CStr3005, 3005};
 0000           ; _CONST char CStr3006[] 		= "setreadmodule";		// 设置读数模块
 0000           ; _CONST HTCMD_STR HTCmd3006 	= {CStr3006, 3006};
 0000           ; _CONST char CStr3007[] 		= "setdropvolume";		// 设置滴液容量
 0000           ; _CONST HTCMD_STR HTCmd3007 	= {CStr3007, 3007};
 0000           ; _CONST char CStr3010[] 		= "setautotest";		// 设置连续测试周期
 0000           ; _CONST HTCMD_STR HTCmd3010 	= {CStr3010, 3010};
 0000           ; _CONST char CStr3011[] 		= "askstorestate";		// 查询片仓状态
 0000           ; _CONST HTCMD_STR HTCmd3011 	= {CStr3011, 3011};
 0000           ; _CONST char CStr3012[] 		= "setlamplum";	// 
 0000           ; _CONST HTCMD_STR HTCmd3012 	= {CStr3012, 3012};
 0000           ; _CONST char CStr3013[] 		= "turnonlamp";			// 开启测试光源
 0000           ; _CONST HTCMD_STR HTCmd3013 	= {CStr3013, 3013};
 0000           ; _CONST char CStr3014[] 		= "turnofflamp";		// 关闭测试光源
 0000           ; _CONST HTCMD_STR HTCmd3014 	= {CStr3014, 3014};
 0000           ; _CONST char CStr3015[] 		= "getworkstore";		// 获取当前工作仓号
 0000           ; _CONST HTCMD_STR HTCmd3015 	= {CStr3015, 3015};
 0000           ; _CONST char CStr3020[] 		= "setdebugmode";		// 	设置测试状态下的调试模式，0:正常，1:混匀液测量
 0000           ; _CONST HTCMD_STR HTCmd3020 	= {CStr3020, 3020};
 0000           ; 
 0000           ; _CONST char CStr3050[] 		= "sleep";				// 	进入休眠
 0000           ; _CONST HTCMD_STR HTCmd3050 	= {CStr3050, 3050};
 0000           ; _CONST char CStr3051[] 		= "startup";			// 	恢复测试
 0000           ; _CONST HTCMD_STR HTCmd3051 	= {CStr3051, 3051};
 0000           ; _CONST char CStr3052[] 		= "setsleeptime";		// 	设置休眠时间
 0000           ; _CONST HTCMD_STR HTCmd3052 	= {CStr3052, 3052};
 0000           ; _CONST char CStr3053[] 		= "samplingsw";			// 	取样功能开关
 0000           ; _CONST HTCMD_STR HTCmd3053 	= {CStr3053, 3053};
 0000           ; _CONST char CStr3054[] 		= "rereadtest";			// 	重新读取测试卡
 0000           ; _CONST HTCMD_STR HTCmd3054 	= {CStr3054, 3054};
 0000           ; _CONST char CStr3055[] 		= "setcleanmode";		// 	设置清洗模式
 0000           ; _CONST HTCMD_STR HTCmd3055 	= {CStr3055, 3055};
 0000           ; _CONST char CStr3056[] 		= "setreadclose";		// 	设置读数结束
 0000           ; _CONST HTCMD_STR HTCmd3056 	= {CStr3056, 3056};
 0000           ; 
 0000           ; _CONST char CStr3060[] 		= "manualprimedil";		// 	手动灌注稀释液
 0000           ; _CONST HTCMD_STR HTCmd3060 	= {CStr3060, 3060};
 0000           ; _CONST char CStr3061[] 		= "manualprimeflu";		// 	手动灌注清洗液
 0000           ; _CONST HTCMD_STR HTCmd3061 	= {CStr3061, 3061};
 0000           ; 
 0000           ; //_CONST char CStr3090[] 		= "quit";			// 测试退出
 0000           ; //_CONST HTCMD_STR HTCmd3090 	= {CStr3090, 3090};
 0000           ; 
 0000           ; _CONST HTCMD_STR * CmdString3[] = {
 0000           ; 	 &HTCmd0003, &HTCmd0004, &HTCmd0005, &HTCmd0010, &HTCmd0011, &HTCmd0099, 
 0000           ; 	 &HTCmd3001, &HTCmd3002, &HTCmd3003, &HTCmd3004, &HTCmd3005, &HTCmd3006, &HTCmd3007, 
 0000           ; 	 &HTCmd3010, &HTCmd3011, &HTCmd3012, 
 0000           ; 	 &HTCmd3013, &HTCmd3014, &HTCmd3015, &HTCmd3020, 
 0000           ; 	 &HTCmd3050, &HTCmd3051, &HTCmd3052, &HTCmd3053, &HTCmd3054, &HTCmd3055, &HTCmd3056,
 0000           ; 	 &HTCmd3060, &HTCmd3061, 0
 0000           ; };
 0000           ; // 维护
 0000           ; 	// 位置调试命令
 0000           ; _CONST char CStr4002[] 		= "setneedleonmixpos";		// 取样针位置在混匀池边沿位置调整
 0000           ; _CONST HTCMD_STR HTCmd4002 	= {CStr4002, 4002};
 0000           ; _CONST char CStr4004[] 		= "setdropheight";		// 取样针高度调整
 0000           ; _CONST HTCMD_STR HTCmd4004 	= {CStr4004, 4004};
 0000           ; _CONST char CStr4005[] 		= "cardloadstartadjust";	// 装片小车起始位调整
 0000           ; _CONST HTCMD_STR HTCmd4005 	= {CStr4005, 4005};
 0000           ; _CONST char CStr4006[] 		= "cardloadendadjust";		// 装片小车终止位调整
 0000           ; _CONST HTCMD_STR HTCmd4006 	= {CStr4006, 4006};
 0000           ; _CONST char CStr4007[] 		= "cardunloadstartadjust";	// 卸片小车起始位调整
 0000           ; _CONST HTCMD_STR HTCmd4007 	= {CStr4007, 4007};
 0000           ; _CONST char CStr4008[] 		= "cardunloadendadjust";	// 卸片小车终止位调整
 0000           ; _CONST HTCMD_STR HTCmd4008 	= {CStr4008, 4008};
 0000           ; _CONST char CStr4009[] 		= "liquidphotoadjust";	// 
 0000           ; _CONST HTCMD_STR HTCmd4009 	= {CStr4009, 4009};
 0000           ; _CONST char CStr4010[] 		= "cardstorephotoadjust";	// 
 0000           ; _CONST HTCMD_STR HTCmd4010 	= {CStr4010, 4010};
 0000           ; // 测试灯源控制
 0000           ; _CONST char CStr4011[] 		= "setlamplum";	// 
 0000           ; _CONST HTCMD_STR HTCmd4011 	= {CStr4011, 4011};
 0000           ; _CONST char CStr4012[] 		= "getlamplum";	// 
 0000           ; _CONST HTCMD_STR HTCmd4012 	= {CStr4012, 4012};
 0000           ; _CONST char CStr4013[] 		= "turnonlamp";	// 
 0000           ; _CONST HTCMD_STR HTCmd4013 	= {CStr4013, 4013};
 0000           ; _CONST char CStr4014[] 		= "turnofflamp";	// 
 0000           ; _CONST HTCMD_STR HTCmd4014 	= {CStr4014, 4014};
 0000           ; 
 0000           ; _CONST char CStr4015[] 		= "calibvalue";		// 		仪器校准
 0000           ; _CONST HTCMD_STR HTCmd4015 	= {CStr4015, 4015};
 0000           ; _CONST char CStr4016[] 		= "calibtest";		// 		仪器校准运行, 称量流量
 0000           ; _CONST HTCMD_STR HTCmd4016 	= {CStr4016, 4016};
 0000           ; 	// 机械测试命令
 0000           ; _CONST char CStr4020[] 		= "turnplatecheck";		// 转盘测试
 0000           ; _CONST HTCMD_STR HTCmd4020 	= {CStr4020, 4020};
 0000           ; _CONST char CStr4021[] 		= "needleturncheck";	// 取样臂旋转测试
 0000           ; _CONST HTCMD_STR HTCmd4021 	= {CStr4021, 4021};
 0000           ; _CONST char CStr4022[] 		= "needleupdowncheck";	// 取样针上下运行测试
 0000           ; _CONST HTCMD_STR HTCmd4022 	= {CStr4022, 4022};
 0000           ; _CONST char CStr4023[] 		= "cardstoremovecheck";	// 片仓小车移动测试
 0000           ; _CONST HTCMD_STR HTCmd4023 	= {CStr4023, 4023};
 0000           ; _CONST char CStr4024[] 		= "cardtakehookcheck";		// 卡片钩测试
 0000           ; _CONST HTCMD_STR HTCmd4024 	= {CStr4024, 4024};
 0000           ; _CONST char CStr4025[] 		= "cardloadcheck";		// 卡片装载小车测试
 0000           ; _CONST HTCMD_STR HTCmd4025 	= {CStr4025, 4025};
 0000           ; _CONST char CStr4026[] 		= "cardunloadcheck";	// 卡片卸载小车测试
 0000           ; _CONST HTCMD_STR HTCmd4026 	= {CStr4026, 4026};
 0000           ; _CONST char CStr4029[] 		= "diluentpumpcheck";	// 稀释液泵测试
 0000           ; _CONST HTCMD_STR HTCmd4029 	= {CStr4029, 4029};
 0000           ; _CONST char CStr4030[] 		= "leanerpumpcheck";	// 清洗液泵测试
 0000           ; _CONST HTCMD_STR HTCmd4030 	= {CStr4030, 4030};
 0000           ; _CONST char CStr4031[] 		= "effluentpumpcheck";	// 废液泵测试
 0000           ; _CONST HTCMD_STR HTCmd4031 	= {CStr4031, 4031};
 0000           ; _CONST char CStr4032[] 		= "sampsyringecheck";	// 取样注射器测试
 0000           ; _CONST HTCMD_STR HTCmd4032 	= {CStr4032, 4032};
 0000           ; 
 0000           ; _CONST char CStr4033[] 		= "liquidphotocheck";	// 
 0000           ; _CONST HTCMD_STR HTCmd4033 	= {CStr4033, 4033};
 0000           ; _CONST char CStr4034[] 		= "cardstorephotocheck";	// 
 0000           ; _CONST HTCMD_STR HTCmd4034 	= {CStr4034, 4034};
 0000           ; 
 0000           ; _CONST char CStr4035[] 		= "needleonmixsidecheck";	// 
 0000           ; _CONST HTCMD_STR HTCmd4035 	= {CStr4035, 4035};
 0000           ; _CONST char CStr4036[] 		= "dropheightcheck";	// 
 0000           ; _CONST HTCMD_STR HTCmd4036 	= {CStr4036, 4036};
 0000           ; 
 0000           ; _CONST char CStr4050[] 		= "diluentquantifytest";	// 稀释液定量测试
 0000           ; _CONST HTCMD_STR HTCmd4050 	= {CStr4050, 4050};
 0000           ; _CONST char CStr4051[] 		= "leanerquantifytest";		// 清洗液泵定量测试
 0000           ; _CONST HTCMD_STR HTCmd4051 	= {CStr4051, 4051};
 0000           ; _CONST char CStr4052[] 		= "sampquantifytest";		// 取样注射器定量测试
 0000           ; _CONST HTCMD_STR HTCmd4052 	= {CStr4052, 4052};
 0000           ; _CONST char CStr4055[] 		= "getsensor";		// 获取电机光藕状态
 0000           ; _CONST HTCMD_STR HTCmd4055 	= {CStr4055, 4055};
 0000           ; _CONST char CStr4056[] 		= "getallsensor";		// 获取电机光藕状态
 0000           ; _CONST HTCMD_STR HTCmd4056 	= {CStr4056, 4056};
 0000           ; 
 0000           ; 	// 基本命令
 0000           ; _CONST char CStr4060[] 		= "motsetposition";		// 设置电机位置
 0000           ; _CONST HTCMD_STR HTCmd4060 	= {CStr4060, 4060};
 0000           ; _CONST char CStr4061[] 		= "motinitcheck";		// 电机位置初始化
 0000           ; _CONST HTCMD_STR HTCmd4061 	= {CStr4061, 4061};
 0000           ; _CONST char CStr4062[] 		= "motrun";				// 电机运行
 0000           ; _CONST HTCMD_STR HTCmd4062 	= {CStr4062, 4062};
 0000           ; _CONST char CStr4063[] 		= "motrunto";			// 电机运行到
 0000           ; _CONST HTCMD_STR HTCmd4063 	= {CStr4063, 4063};
 0000           ; _CONST char CStr4064[] 		= "motruntosite";		// 电机运行到指定位置
 0000           ; _CONST HTCMD_STR HTCmd4064 	= {CStr4064, 4064};
 0000           ; _CONST char CStr4065[] 		= "setmotparamter";		// 设置电机运行参数
 0000           ; _CONST HTCMD_STR HTCmd4065 	= {CStr4065, 4065};
 0000           ; _CONST char CStr4066[] 		= "setmotbaseparamter";		// 设置电机基本参数
 0000           ; _CONST HTCMD_STR HTCmd4066 	= {CStr4066, 4066};
 0000           ; _CONST char CStr4067[] 		= "setaddress";			// 设置模块地址
 0000           ; _CONST HTCMD_STR HTCmd4067 	= {CStr4067, 4067};
 0000           ; _CONST char CStr4068[] 		= "setevalve";			// 设置电磁阀
 0000           ; _CONST HTCMD_STR HTCmd4068 	= {CStr4068, 4068};
 0000           ; _CONST char CStr4069[] 		= "getliquidphosignal";	// 获取液路光耦信号
 0000           ; _CONST HTCMD_STR HTCmd4069 	= {CStr4069, 4069};
 0000           ; _CONST char CStr4070[] 		= "liquidphoadjust";	// 液路光耦校准
 0000           ; _CONST HTCMD_STR HTCmd4070 	= {CStr4070, 4070};
 0000           ; _CONST char CStr4071[] 		= "getstorestate";		// 获取片仓状态
 0000           ; _CONST HTCMD_STR HTCmd4071 	= {CStr4071, 4071};
 0000           ; _CONST char CStr4072[] 		= "cardstorecal";		// 片仓光耦调整
 0000           ; _CONST HTCMD_STR HTCmd4072 	= {CStr4072, 4072};
 0000           ; _CONST char CStr4073[] 		= "getstorephosignal";	// 获取片仓光耦信号
 0000           ; _CONST HTCMD_STR HTCmd4073 	= {CStr4073, 4073};
 0000           ; _CONST char CStr4074[] 		= "getliquiddetsignal";	// 获取液路探测信号
 0000           ; _CONST HTCMD_STR HTCmd4074 	= {CStr4074, 4074};
 0000           ; 
 0000           ; //_CONST char CStr4090[] 		= "quit";	// 子功能退出
 0000           ; //_CONST HTCMD_STR HTCmd4090 	= {CStr4090, 4090};
 0000           ; 
 0000           ; 
 0000           ; _CONST HTCMD_STR * CmdString4[] = {
 0000           ;  	&HTCmd0003, &HTCmd0004, &HTCmd0005, &HTCmd0010, &HTCmd0011, &HTCmd0099, 
 0000           ; 	&HTCmd4002, &HTCmd4004, &HTCmd4005, &HTCmd4006, &HTCmd4007, &HTCmd4008, &HTCmd4009, &HTCmd4010,
 0000           ; 	&HTCmd4011, &HTCmd4012, &HTCmd4013, &HTCmd4014, &HTCmd4015, &HTCmd4016,
 0000           ; 	&HTCmd4020, &HTCmd4021, &HTCmd4022, &HTCmd4023, &HTCmd4024, &HTCmd4025, &HTCmd4026, &HTCmd4029, 
 0000           ; 	&HTCmd4030, &HTCmd4031, &HTCmd4032, &HTCmd4033, &HTCmd4034, &HTCmd4035, &HTCmd4036, 
 0000           ; 	&HTCmd4050, &HTCmd4051, &HTCmd4052, &HTCmd4055, &HTCmd4056,
 0000           ; 	&HTCmd4060, &HTCmd4061, &HTCmd4062, &HTCmd4063, &HTCmd4064, &HTCmd4065, &HTCmd4066, &HTCmd4067, &HTCmd4068, &HTCmd4069, 
 0000           ; 	&HTCmd4070, &HTCmd4071, &HTCmd4072, &HTCmd4073, &HTCmd4074, 0
 0000           ; };
 0000           ; */
 0000           ; UICOMMAND_BUF UICmdBuf;
 0000           ; //HTCOMMAND_BUF HTCmdBuf;
 0000           ; 
 0000           ; extern unsigned char WorkProcessStep;		// 工作进程号
 0000           ; extern unsigned char EchoSW;
 0000           ; 
 0000           ; CONTROL_CMD ControlCmd;		// 存放解析好的命令, 调用模块直接读取此结构信息, 读取结束后将信息清除
 0000           ; /*
 0000           ; unsigned char HTCommandStrMatch(void){
 0000           ; 	// 命令字符串匹配
 0000           ; 	unsigned char i;
 0000           ; 	_CONST HTCMD_STR ** CmdString;
 0000           ; 
 0000           ; 	switch(WorkProcessStep){
 0000           ; 		case 0:
 0000           ; 		case 255:
 0000           ; 			i = 0;
 0000           ; 			while(CmdString0[i]){
 0000           ; 				if(StringMatching(CmdString0[i]->pChar, HTCmdBuf.cmdStr)){
 0000           ; 					ControlCmd.cmdIdx = CmdString0[i]->indx;		// 匹配成功，保存命令索引
 0000           ; 					return 1;
 0000           ; 					}
 0000           ; 				else
 0000           ; 					i++;
 0000           ; 				}
 0000           ; 			break;
 0000           ; 		case 1:
 0000           ; 			i = 0;
 0000           ; 			while(CmdString1[i]){
 0000           ; 				if(StringMatching(CmdString0[i]->pChar, HTCmdBuf.cmdStr)){
 0000           ; 					ControlCmd.cmdIdx = CmdString0[i]->indx;		// 匹配成功，保存命令索引
 0000           ; 					return 1;
 0000           ; 					}
 0000           ; 				else
 0000           ; 					i++;
 0000           ; 				}
 0000           ; 			break;
 0000           ; 		case 2:
 0000           ; 			i = 0;
 0000           ; 			while(CmdString2[i]){
 0000           ; 				if(StringMatching(CmdString0[i]->pChar, HTCmdBuf.cmdStr)){
 0000           ; 					ControlCmd.cmdIdx = CmdString0[i]->indx;		// 匹配成功，保存命令索引
 0000           ; 					return 1;
 0000           ; 					}
 0000           ; 				else
 0000           ; 					i++;
 0000           ; 				}
 0000           ; 			break;
 0000           ; 		case 3:
 0000           ; 			i = 0;
 0000           ; 			while(CmdString3[i]){
 0000           ; 				if(StringMatching(CmdString3[i]->pChar, HTCmdBuf.cmdStr)){
 0000           ; 					ControlCmd.cmdIdx = CmdString3[i]->indx;		// 匹配成功，保存命令索引
 0000           ; 					return 1;
 0000           ; 					}
 0000           ; 				else
 0000           ; 					i++;
 0000           ; 				}
 0000           ; 			break;
 0000           ; 		case 4:
 0000           ; 			i = 0;
 0000           ; 			while(CmdString4[i]){
 0000           ; 				if(StringMatching(CmdString4[i]->pChar, HTCmdBuf.cmdStr)){
 0000           ; 					ControlCmd.cmdIdx = CmdString4[i]->indx;		// 匹配成功，保存命令索引
 0000           ; 					return 1;
 0000           ; 					}
 0000           ; 				else
 0000           ; 					i++;
 0000           ; 				}
 0000           ; 			break;
 0000           ; 		default:
 0000           ; 			i = 0;
 0000           ; 			while(CmdString0[i]){
 0000           ; 				if(StringMatching(CmdString0[i]->pChar, HTCmdBuf.cmdStr)){
 0000           ; 					ControlCmd.cmdIdx = CmdString0[i]->indx;		// 匹配成功，保存命令索引
 0000           ; 					return 1;
 0000           ; 					}
 0000           ; 				else
 0000           ; 					i++;
 0000           ; 				}
 0000           ; 			break;
 0000           ; 		}
 0000           ; 	return 0;
 0000           ; }
 0000           ; 
 0000           ; unsigned char HTCommandPammterConvert(void){
 0000           ; 	// 命令参数转换
 0000           ; 	unsigned char i;
 0000           ; 	i = HTCmdBuf.itemPnt;
 0000           ; 	if(i==0)
 0000           ; 		return 0;
 0000           ; 	ControlCmd.pam[i-1] = StringToInt(HTCmdBuf.pamStr[i-1]);
 0000           ; 	return 1;
 0000           ; }
 0000           ; void CommandClear(void){
 0000           ; 	unsigned char i;
 0000           ; 	unsigned char * pChar;
 0000           ; 	pChar = (unsigned char *)(&HTCmdBuf);
 0000           ; 	for(i=0; i<sizeof(HTCOMMAND_BUF); i++){
 0000           ; 		*pChar = 0;
 0000           ; 		pChar ++;
 0000           ; 		}
 0000           ; 	pChar = (unsigned char *)(&ControlCmd);
 0000           ; 	for(i=0; i<sizeof(CONTROL_CMD); i++){
 0000           ; 		*pChar = 0;
 0000           ; 		pChar ++;
 0000           ; 		}
 0000           ; }
 0000           ; 
 0000           ; unsigned char HTCommandExplain(unsigned char c)
 0000           ; {
 0000           ; 	// 超级终端命令解释,接收并回显正确的字符
 0000           ; 	unsigned char i;
 0000           ; 	unsigned char * pChar;
 0000           ; 	if(ControlCmd.cmdState == 2)
 0000           ; 		return 0;
 0000           ; 	if(ControlCmd.cmdState == 0){	
 0000           ; 		CommandClear();
 0000           ; 		}
 0000           ; 	// 字符接收和处理
 0000           ; 	switch(HTCmdBuf.itemPnt)		// 根据参数接收进度做不同处理
 0000           ; 	{
 0000           ; 		case 0:		// 当前接收命令字符串
 0000           ; 			if(c>='A' && c<='Z')
 0000           ; 				c += 0x20;
 0000           ; 			if((c>='a' && c<='z') || (c>='0' && c<='9'))	// 命令字符接收
 0000           ; 			{
 0000           ; 				ControlCmd.cmdState = 1;
 0000           ; 				if(HTCmdBuf.charPnt < 33)
 0000           ; 				{
 0000           ; 					HTCmdBuf.cmdStr[HTCmdBuf.charPnt] = c;
 0000           ; 					HTCmdBuf.charPnt ++;
 0000           ; 					uart0SendChar(c);
 0000           ; 				}
 0000           ; 			}
 0000           ; 			else if(c == ':')		// 命令字符串结束
 0000           ; 			{
 0000           ; 				HTCmdBuf.cmdStr[HTCmdBuf.charPnt] = 0;		// 字符串结束标识
 0000           ; 				HTCmdBuf.charPnt = 0;
 0000           ; 				HTCmdBuf.itemPnt = 1;			// 进入参数接收
 0000           ; 				uart0SendChar(':');
 0000           ; 				// 命令字符串匹配，匹配成功返显参数格式，错误则清除
 0000           ; 				if(HTCommandStrMatch()==0)
 0000           ; 				{
 0000           ; 					// 命令匹配错误
 0000           ; 					uart0SendChar(0x0d);
 0000           ; 					uart0SendChar(0x0a);
 0000           ; 					HTCmdBuf.itemPnt = 0;
 0000           ; 					HTCmdBuf.charPnt = 0;
 0000           ; 					//ControlCmd.cmdState == 0;
 0000           ; 					ControlCmd.cmdState = 0;
 0000           ; 					return 0;
 0000           ; 				}
 0000           ; 			}
 0000           ; 			else if(c == 0x0d )		// 命令接收结束
 0000           ; 			{
 0000           ; 				if(HTCmdBuf.charPnt != 0)
 0000           ; 				{
 0000           ; 					HTCmdBuf.cmdStr[HTCmdBuf.charPnt] = 0;		// 字符串结束标识
 0000           ; 					if(HTCommandStrMatch())	// 命令匹配成功
 0000           ; 					{
 0000           ; 						HTCmdBuf.charPnt = 0;
 0000           ; 						ControlCmd.pamLen = 0;		// 命令不带参数
 0000           ; 						ControlCmd.cmdState = 2;		// 设置接收到命令标识
 0000           ; 					}	
 0000           ; 					else	// 命令匹配错误
 0000           ; 					{
 0000           ; 						HTCmdBuf.itemPnt = 0;
 0000           ; 						HTCmdBuf.charPnt = 0;
 0000           ; 						//ControlCmd.cmdState == 0;
 0000           ; 						ControlCmd.cmdState = 0;
 0000           ; 					}
 0000           ; 				}
 0000           ; 				else
 0000           ; 				{
 0000           ; 					HTCmdBuf.itemPnt = 0;
 0000           ; 					HTCmdBuf.charPnt = 0;
 0000           ; 					//ControlCmd.cmdState == 0;
 0000           ; 					ControlCmd.cmdState = 0;
 0000           ; 				}
 0000           ; 				uart0SendChar(0x0d);
 0000           ; 				uart0SendChar(0x0a);
 0000           ; 				return 0;
 0000           ; 			}
 0000           ; 			else if(c == 0x08){		// 退格
 0000           ; 				if(HTCmdBuf.charPnt != 0)
 0000           ; 				{
 0000           ; 					HTCmdBuf.charPnt --;
 0000           ; 					HTCmdBuf.cmdStr[HTCmdBuf.charPnt] = 0;
 0000           ; 					uart0SendChar(0x08);
 0000           ; 					uart0SendChar(' ');
 0000           ; 					uart0SendChar(0x08);
 0000           ; 				}
 0000           ; 				else
 0000           ; 				{
 0000           ; 					HTCmdBuf.itemPnt = 0;
 0000           ; 					HTCmdBuf.charPnt = 0;
 0000           ; 					//ControlCmd.cmdState == 0;
 0000           ; 					ControlCmd.cmdState = 0;
 0000           ; 					uart0SendChar(0x0d);
 0000           ; 					uart0SendChar(0x0a);
 0000           ; 					return 0;
 0000           ; 				}
 0000           ; 			}
 0000           ; 			break;
 0000           ; 		case 1:		// 参数0
 0000           ; 		case 2:
 0000           ; 		case 3:
 0000           ; 		case 4:
 0000           ; 		case 5:
 0000           ; 			if(c == '-')
 0000           ; 			{
 0000           ; 				if(HTCmdBuf.charPnt == 0)
 0000           ; 				{
 0000           ; 					HTCmdBuf.pamStr[HTCmdBuf.itemPnt-1][0] = c;
 0000           ; 					HTCmdBuf.charPnt ++;
 0000           ; 					uart0SendChar(c);
 0000           ; 				}
 0000           ; 			}
 0000           ; 			else if((c>='0' && c<='9'))
 0000           ; 			{
 0000           ; 				if(HTCmdBuf.charPnt < 8)
 0000           ; 				{
 0000           ; 					HTCmdBuf.pamStr[HTCmdBuf.itemPnt-1][HTCmdBuf.charPnt] = c;
 0000           ; 					HTCmdBuf.charPnt ++;
 0000           ; 					uart0SendChar(c);
 0000           ; 				}
 0000           ; 			}
 0000           ; 			else if(c == ',')		// 参数分隔符
 0000           ; 			{
 0000           ; 				HTCmdBuf.pamStr[HTCmdBuf.itemPnt-1][HTCmdBuf.charPnt] = 0;
 0000           ; 				if(HTCmdBuf.itemPnt<6)
 0000           ; 				{
 0000           ; 					uart0SendChar(',');
 0000           ; 					if(HTCommandPammterConvert())
 0000           ; 					{
 0000           ; 						HTCmdBuf.itemPnt ++;
 0000           ; 						HTCmdBuf.charPnt = 0;
 0000           ; 					}
 0000           ; 				}
 0000           ; 			}
 0000           ; 			else if(c == 0x0d)
 0000           ; 			{
 0000           ; 				HTCmdBuf.pamStr[HTCmdBuf.itemPnt-1][HTCmdBuf.charPnt] = 0;
 0000           ; 				HTCmdBuf.charPnt = 0;
 0000           ; 				if(HTCommandPammterConvert())
 0000           ; 				{
 0000           ; 					HTCmdBuf.charPnt = 0;
 0000           ; 					ControlCmd.pamLen = HTCmdBuf.itemPnt;
 0000           ; 					ControlCmd.cmdState = 2;			// 设置命令接收完成标识
 0000           ; 				}
 0000           ; 				else		// 接收错误删除命令
 0000           ; 				{
 0000           ; 					HTCmdBuf.itemPnt = 0;
 0000           ; 					HTCmdBuf.charPnt = 0;
 0000           ; 					//ControlCmd.cmdState == 0;
 0000           ; 					ControlCmd.cmdState = 0;
 0000           ; 				}
 0000           ; 				uart0SendChar(0x0d);
 0000           ; 				uart0SendChar(0x0a);
 0000           ; 				return 0;
 0000           ; 			}
 0000           ; 			else if(c == 0x08)			// 退格
 0000           ; 			{
 0000           ; 				if(HTCmdBuf.charPnt != 0)
 0000           ; 				{
 0000           ; 					HTCmdBuf.charPnt --;
 0000           ; 					HTCmdBuf.pamStr[HTCmdBuf.itemPnt-1][HTCmdBuf.charPnt] = 0;
 0000           ; 					uart0SendChar(0x08);
 0000           ; 					uart0SendChar(' ');
 0000           ; 					uart0SendChar(0x08);
 0000           ; 				}
 0000           ; 				else			// 退回到上一个参数
 0000           ; 				{
 0000           ; 					if(HTCmdBuf.itemPnt > 1)
 0000           ; 					{
 0000           ; 						HTCmdBuf.itemPnt --;
 0000           ; 						for(i=0; i<10; i++)
 0000           ; 						{
 0000           ; 							if(HTCmdBuf.pamStr[HTCmdBuf.itemPnt-1][i] == 0)
 0000           ; 							{
 0000           ; 								HTCmdBuf.charPnt = i;
 0000           ; 								break;
 0000           ; 							}
 0000           ; 						}
 0000           ; 						uart0SendChar(0x08);
 0000           ; 						uart0SendChar(' ');
 0000           ; 						uart0SendChar(0x08);
 0000           ; 					}
 0000           ; 					else		// 删除命令
 0000           ; 					{
 0000           ; 						uart0SendChar(0x0d);
 0000           ; 						uart0SendChar(0x0a);
 0000           ; 						HTCmdBuf.itemPnt = 0;
 0000           ; 						HTCmdBuf.charPnt = 0;
 0000           ; 						//ControlCmd.cmdState == 0;
 0000           ; 						ControlCmd.cmdState = 0;
 0000           ; 						return 0;
 0000           ; 					}
 0000           ; 				}
 0000           ; 			}
 0000           ; 			break;
 0000           ; 		default:
 0000           ; 			break;
 0000           ; 		}
 0000           ; 	return 1;
 0000           ; }
 0000           ; */
 0000           ; 
 0000           ; void CommandClear(void){
 0000           ; 	unsigned char i;
 0000           ; 	unsigned char * pChar;
 0000           ; 	pChar = (unsigned char *)(&ControlCmd);
 0000 00E0              ldi R16,<_ControlCmd
 0002 10E0              ldi R17,>_ControlCmd
 0004           ;       for(i=0; i<sizeof(CONTROL_CMD); i++){
 0004 2227              clr R18
 0006 06C0              xjmp L5
 0008           L2:
 0008           ; 		*pChar = 0;
 0008 2224              clr R2
 000A F801              movw R30,R16
 000C 2082              std z+0,R2
 000E           ;               pChar ++;
 000E 0F5F              subi R16,255  ; offset = 1
 0010 1F4F              sbci R17,255
 0012           ;               }
 0012           L3:
 0012 2395              inc R18
 0014           L5:
 0014 2831              cpi R18,24
 0016 C0F3              brlo L2
 0018           X0:
 0018           L1:
 0018                   .dbline 0 ; func end
 0018 0895              ret
                        .area data(ram, con, rel)
 0000           L7:
 0000                   .blkb 1
                        .area idata
 0000 00                .byte 0
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                ;          pChar -> <dead>
                ;              i -> <dead>
                ;            cmd -> R10,R11
                ;              c -> R20
                        .even
 001A           _UICommandExplain::
 001A 0E940000          xcall push_xgsetF03C
 001E 402F              mov R20,R16
 0020           ; }
 0020           ; 
 0020           ; 
 0020           ; /*************************************************************************************************
 0020           ; typedef struct _UICOMMAND_BUF{
 0020           ;       unsigned char itemPnt;                  // 当前接收的项目号
 0020           ;       unsigned char charPnt;                  // 接收指针
 0020           ;       unsigned char cmdStr[10];               // 命令名称字符串
 0020           ; }UICOMMAND_BUF;
 0020           ; /************************************ 用户界面命令解释 *******************************************/
 0020           ; extern unsigned char checkFlag;
 0020           ; extern unsigned char UartReceiveBuf[60];
 0020           ; unsigned char UICommandExplain(unsigned char c){
 0020           ;       unsigned char i;
 0020           ;       unsigned char * pChar;
 0020           ;       unsigned int cmd;
 0020           ;       static unsigned char checkSum = 0;
 0020           ;       if(ControlCmd.cmdState == 2)
 0020 80910C00          lds R24,_ControlCmd
 0024 8230              cpi R24,2
 0026 11F4              brne L8
 0028           X1:
 0028           ; 		return 0;
 0028 0027              clr R16
 002A 4BC3              xjmp L6
 002C           L8:
 002C           ; 	if(ControlCmd.cmdState == 0)		// 清零
 002C 20900C00          lds R2,_ControlCmd
 0030 2220              tst R2
 0032 09F4              brne L10
 0034           X2:
 0034           ; 	{
 0034           ; 		CommandClear();
 0034 E5DF              xcall _CommandClear
 0036           ;       }
 0036           L10:
 0036           ; 	switch(UICmdBuf.itemPnt)
 0036 60910000          lds R22,_UICmdBuf
 003A 7727              clr R23
 003C 6030              cpi R22,0
 003E 6707              cpc R22,R23
 0040 49F1              breq L15
 0042           X3:
 0042 6130              cpi R22,1
 0044 E0E0              ldi R30,0
 0046 7E07              cpc R23,R30
 0048 09F4              brne X62
 004A 9FC1              xjmp L92
 004C           X62:
 004C           X4:
 004C 6230              cpi R22,2
 004E E0E0              ldi R30,0
 0050 7E07              cpc R23,R30
 0052 09F4              brne X63
 0054 9AC1              xjmp L92
 0056           X63:
 0056           X5:
 0056 6330              cpi R22,3
 0058 E0E0              ldi R30,0
 005A 7E07              cpc R23,R30
 005C 09F4              brne X64
 005E 95C1              xjmp L92
 0060           X64:
 0060           X6:
 0060 6430              cpi R22,4
 0062 E0E0              ldi R30,0
 0064 7E07              cpc R23,R30
 0066 09F4              brne X65
 0068 90C1              xjmp L92
 006A           X65:
 006A           X7:
 006A 6530              cpi R22,5
 006C E0E0              ldi R30,0
 006E 7E07              cpc R23,R30
 0070 09F4              brne X66
 0072 8BC1              xjmp L92
 0074           X66:
 0074           X8:
 0074 6630              cpi R22,6
 0076 E0E0              ldi R30,0
 0078 7E07              cpc R23,R30
 007A 09F4              brne X67
 007C 86C1              xjmp L92
 007E           X67:
 007E           X9:
 007E 6730              cpi R22,7
 0080 E0E0              ldi R30,0
 0082 7E07              cpc R23,R30
 0084 09F4              brne X68
 0086 81C1              xjmp L92
 0088           X68:
 0088           X10:
 0088 6830              cpi R22,8
 008A E0E0              ldi R30,0
 008C 7E07              cpc R23,R30
 008E 09F4              brne X69
 0090 7CC1              xjmp L92
 0092           X69:
 0092           X11:
 0092 08C3              xjmp L12
 0094           L15:
 0094           ; 	{
 0094           ; 		case 0:
 0094           ; 			if(c == '#')		// 命令开始标志
 0094 4332              cpi R20,35
 0096 29F5              brne L16
 0098           X12:
 0098           ; 			{
 0098           ; 				UICmdBuf.charPnt = 0;
 0098 2224              clr R2
 009A 20920100          sts _UICmdBuf+1,R2
 009E           ;                               ControlCmd.cmdState = 1;
 009E 81E0              ldi R24,1
 00A0 80930C00          sts _ControlCmd,R24
 00A4           ;                               if(EchoSW)
 00A4 20900000          lds R2,_EchoSW
 00A8 2220              tst R2
 00AA 09F4              brne X70
 00AC FBC2              xjmp L13
 00AE           X70:
 00AE           X13:
 00AE           ; 				{
 00AE           ; 					if(checkFlag)
 00AE 20900000          lds R2,_checkFlag
 00B2 2220              tst R2
 00B4 89F0              breq L21
 00B6           X14:
 00B6           ; 					{
 00B6           ; 						checkFlag = 0;
 00B6 2224              clr R2
 00B8 20920000          sts _checkFlag,R2
 00BC           ;                                               uart0SendChar(0x02);
 00BC 02E0              ldi R16,2
 00BE 10E0              ldi R17,0
 00C0 0E940000          xcall _uart0SendChar
 00C4           ;                                               uart0SendChar(c);
 00C4 042F              mov R16,R20
 00C6 1127              clr R17
 00C8 0E940000          xcall _uart0SendChar
 00CC           ;                                               checkSum += c;                  
 00CC 20900000          lds R2,L7
 00D0 240E              add R2,R20
 00D2 20920000          sts L7,R2
 00D6           ;                                       }
 00D6 E6C2              xjmp L13
 00D8           L21:
 00D8           ; 					else
 00D8           ; 						uart0SendChar(c);
 00D8 042F              mov R16,R20
 00DA 1127              clr R17
 00DC 0E940000          xcall _uart0SendChar
 00E0           ;                               }
 00E0           ;                       }
 00E0 E1C2              xjmp L13
 00E2           L16:
 00E2           ; 			else if(c >= '0' && c <= '9')
 00E2 4033              cpi R20,48
 00E4 80F1              brlo L23
 00E6           X15:
 00E6 89E3              ldi R24,57
 00E8 8417              cp R24,R20
 00EA 68F1              brlo L23
 00EC           X16:
 00EC           ; 			{
 00EC           ; 				if(UICmdBuf.charPnt < 4)
 00EC 80910100          lds R24,_UICmdBuf+1
 00F0 8430              cpi R24,4
 00F2 08F0              brlo X71
 00F4 D7C2              xjmp L13
 00F6           X71:
 00F6           X17:
 00F6           ; 				{
 00F6           ; 					UICmdBuf.cmdStr[UICmdBuf.charPnt] = c;
 00F6 80E0              ldi R24,<_UICmdBuf+2
 00F8 90E0              ldi R25,>_UICmdBuf+2
 00FA E0910100          lds R30,_UICmdBuf+1
 00FE FF27              clr R31
 0100 E80F              add R30,R24
 0102 F91F              adc R31,R25
 0104 4083              std z+0,R20
 0106           ;                                       UICmdBuf.charPnt ++;
 0106 80910100          lds R24,_UICmdBuf+1
 010A 8F5F              subi R24,255    ; addi 1
 010C 80930100          sts _UICmdBuf+1,R24
 0110           ;                                       if(EchoSW)
 0110 20900000          lds R2,_EchoSW
 0114 2220              tst R2
 0116 09F4              brne X72
 0118 C5C2              xjmp L13
 011A           X72:
 011A           X18:
 011A           ; 					{
 011A           ; 						if(checkFlag)
 011A 20900000          lds R2,_checkFlag
 011E 2220              tst R2
 0120 69F0              breq L33
 0122           X19:
 0122           ; 						{
 0122           ; 							checkFlag = 0;
 0122 2224              clr R2
 0124 20920000          sts _checkFlag,R2
 0128           ;                                                       uart0SendChar(c);
 0128 042F              mov R16,R20
 012A 1127              clr R17
 012C 0E940000          xcall _uart0SendChar
 0130           ;                                                       checkSum += c;
 0130 20900000          lds R2,L7
 0134 240E              add R2,R20
 0136 20920000          sts L7,R2
 013A           ;                                               }
 013A B4C2              xjmp L13
 013C           L33:
 013C           ; 						else
 013C           ; 							uart0SendChar(c);
 013C 042F              mov R16,R20
 013E 1127              clr R17
 0140 0E940000          xcall _uart0SendChar
 0144           ;                                       }
 0144           ;                               }
 0144           ;                       }
 0144 AFC2              xjmp L13
 0146           L23:
 0146           ; 			else if(c == '$')	// 出现参数符，结束命令进入参数接收
 0146 4432              cpi R20,36
 0148 09F0              breq X73
 014A 56C0              xjmp L35
 014C           X73:
 014C           X20:
 014C           ; 			{
 014C           ; 				if(UICmdBuf.charPnt != 0)
 014C 20900100          lds R2,_UICmdBuf+1
 0150 2220              tst R2
 0152 21F1              breq L37
 0154           X21:
 0154           ; 				{
 0154           ; 					UICmdBuf.cmdStr[UICmdBuf.charPnt] = 0;
 0154 80E0              ldi R24,<_UICmdBuf+2
 0156 90E0              ldi R25,>_UICmdBuf+2
 0158 E22D              mov R30,R2
 015A FF27              clr R31
 015C E80F              add R30,R24
 015E F91F              adc R31,R25
 0160 2224              clr R2
 0162 2082              std z+0,R2
 0164           ;                                       ControlCmd.cmdIdx = StringToInt(UICmdBuf.cmdStr);
 0164 00E0              ldi R16,<_UICmdBuf+2
 0166 10E0              ldi R17,>_UICmdBuf+2
 0168 0E940000          xcall _StringToInt
 016C 10930E00          sts _ControlCmd+1+1,R17
 0170 00930D00          sts _ControlCmd+1,R16
 0174           ;                                       if(checkFlag)
 0174 20900000          lds R2,_checkFlag
 0178 2220              tst R2
 017A B1F0              breq L38
 017C           X22:
 017C           ; 					{
 017C           ; 						cmd = StringToInt2(&UartReceiveBuf[1]);
 017C 00E0              ldi R16,<_UartReceiveBuf+1
 017E 10E0              ldi R17,>_UartReceiveBuf+1
 0180 0E940000          xcall _StringToInt2
 0184 5801              movw R10,R16
 0186           ;                                               if(ControlCmd.cmdIdx == cmd)
 0186 20900D00          lds R2,_ControlCmd+1
 018A 30900E00          lds R3,_ControlCmd+1+1
 018E 2016              cp R2,R16
 0190 3106              cpc R3,R17
 0192 51F4              brne L38
 0194           X23:
 0194           ; 							ControlCmd.cmdState = 1;
 0194 81E0              ldi R24,1
 0196 80930C00          sts _ControlCmd,R24
 019A           ;                                       }
 019A           ;                               }
 019A 06C0              xjmp L38
 019C           L37:
 019C           ; 				else
 019C           ; 				{
 019C           ; 					ControlCmd.cmdIdx = 0;
 019C 2224              clr R2
 019E 3324              clr R3
 01A0 30920E00          sts _ControlCmd+1+1,R3
 01A4 20920D00          sts _ControlCmd+1,R2
 01A8           ;                               }
 01A8           L38:
 01A8           ; 				if(EchoSW)
 01A8 20900000          lds R2,_EchoSW
 01AC 2220              tst R2
 01AE C9F0              breq L51
 01B0           X24:
 01B0           ; 				{
 01B0           ; 					if(checkFlag)
 01B0 20900000          lds R2,_checkFlag
 01B4 2220              tst R2
 01B6 69F0              breq L53
 01B8           X25:
 01B8           ; 					{
 01B8           ; 						checkFlag = 0;
 01B8 2224              clr R2
 01BA 20920000          sts _checkFlag,R2
 01BE           ;                                               uart0SendChar('$');
 01BE 04E2              ldi R16,36
 01C0 10E0              ldi R17,0
 01C2 0E940000          xcall _uart0SendChar
 01C6           ;                                               checkSum += '$';
 01C6 80910000          lds R24,L7
 01CA 8C5D              subi R24,220    ; addi 36
 01CC 80930000          sts L7,R24
 01D0           ;                                       }
 01D0 08C0              xjmp L54
 01D2           L53:
 01D2           ; 					else
 01D2           ; 					{
 01D2           ; 						uart0SendChar(' ');
 01D2 00E2              ldi R16,32
 01D4 10E0              ldi R17,0
 01D6 0E940000          xcall _uart0SendChar
 01DA           ;                                               uart0SendChar('$');
 01DA 04E2              ldi R16,36
 01DC 10E0              ldi R17,0
 01DE 0E940000          xcall _uart0SendChar
 01E2           ;                                       }
 01E2           L54:
 01E2           ; 				}
 01E2           L51:
 01E2           ; 				UICmdBuf.itemPnt ++;
 01E2 80910000          lds R24,_UICmdBuf
 01E6 8F5F              subi R24,255    ; addi 1
 01E8 80930000          sts _UICmdBuf,R24
 01EC           ;                               UICmdBuf.charPnt = 0;
 01EC 2224              clr R2
 01EE 20920100          sts _UICmdBuf+1,R2
 01F2           ;                               ControlCmd.pamLen = 0;
 01F2 20922300          sts _ControlCmd+23,R2
 01F6           ;                       }
 01F6 56C2              xjmp L13
 01F8           L35:
 01F8           ; 			else if(c == 0x0d)// 回车号，命令结束
 01F8 4D30              cpi R20,13
 01FA 09F0              breq X74
 01FC 89C0              xjmp L57
 01FE           X74:
 01FE           X26:
 01FE           ; 			{
 01FE           ; 				if(UICmdBuf.charPnt != 0)
 01FE 20900100          lds R2,_UICmdBuf+1
 0202 2220              tst R2
 0204 99F1              breq L59
 0206           X27:
 0206           ; 				{
 0206           ; 					UICmdBuf.cmdStr[UICmdBuf.charPnt] = 0;
 0206 80E0              ldi R24,<_UICmdBuf+2
 0208 90E0              ldi R25,>_UICmdBuf+2
 020A E22D              mov R30,R2
 020C FF27              clr R31
 020E E80F              add R30,R24
 0210 F91F              adc R31,R25
 0212 2224              clr R2
 0214 2082              std z+0,R2
 0216           ;                                       ControlCmd.cmdIdx = StringToInt(UICmdBuf.cmdStr);
 0216 00E0              ldi R16,<_UICmdBuf+2
 0218 10E0              ldi R17,>_UICmdBuf+2
 021A 0E940000          xcall _StringToInt
 021E 6801              movw R12,R16
 0220 D0920E00          sts _ControlCmd+1+1,R13
 0224 C0920D00          sts _ControlCmd+1,R12
 0228           ;                                       if(checkFlag)
 0228 20900000          lds R2,_checkFlag
 022C 2220              tst R2
 022E D1F0              breq L66
 0230           X28:
 0230           ; 					{
 0230           ; 						cmd = StringToInt(&UartReceiveBuf[1]);
 0230 00E0              ldi R16,<_UartReceiveBuf+1
 0232 10E0              ldi R17,>_UartReceiveBuf+1
 0234 0E940000          xcall _StringToInt
 0238 6801              movw R12,R16
 023A 5601              movw R10,R12
 023C           ;                                               if(ControlCmd.cmdIdx == cmd)
 023C 20900D00          lds R2,_ControlCmd+1
 0240 30900E00          lds R3,_ControlCmd+1+1
 0244 2016              cp R2,R16
 0246 3106              cpc R3,R17
 0248 21F4              brne L69
 024A           X29:
 024A           ; 							ControlCmd.cmdState = 2;
 024A 82E0              ldi R24,2
 024C 80930C00          sts _ControlCmd,R24
 0250 10C0              xjmp L60
 0252           L69:
 0252           ; 						else
 0252           ; 						{
 0252           ; 							ControlCmd.cmdState = 0;
 0252 2224              clr R2
 0254 20920C00          sts _ControlCmd,R2
 0258           ;                                                       uart0SendChar(0X04);            // EOT
 0258 04E0              ldi R16,4
 025A 10E0              ldi R17,0
 025C 0E940000          xcall _uart0SendChar
 0260           ;                                                       return 0;
 0260 0027              clr R16
 0262 2FC2              xjmp L6
 0264           L66:
 0264           ; 						}
 0264           ; 					}
 0264           ; 					else
 0264           ; 						ControlCmd.cmdState = 2;
 0264 82E0              ldi R24,2
 0266 80930C00          sts _ControlCmd,R24
 026A           ;                               }
 026A 03C0              xjmp L60
 026C           L59:
 026C           ; 				else
 026C           ; 				{
 026C           ; 					ControlCmd.cmdState = 0;
 026C 2224              clr R2
 026E 20920C00          sts _ControlCmd,R2
 0272           ;                               }
 0272           L60:
 0272           ; 				ControlCmd.pamLen = 0;
 0272 2224              clr R2
 0274 20922300          sts _ControlCmd+23,R2
 0278           ;                               UICmdBuf.itemPnt = 0;
 0278 20920000          sts _UICmdBuf,R2
 027C           ;                               UICmdBuf.charPnt = 0;
 027C 20920100          sts _UICmdBuf+1,R2
 0280           ;                               if(EchoSW)
 0280 20900000          lds R2,_EchoSW
 0284 2220              tst R2
 0286 09F4              brne X75
 0288 41C0              xjmp L74
 028A           X75:
 028A           X30:
 028A           ; 				{
 028A           ; 					if(checkFlag)
 028A 20900000          lds R2,_checkFlag
 028E 2220              tst R2
 0290 A9F1              breq L76
 0292           X31:
 0292           ; 					{
 0292           ; 						checkFlag = 0;
 0292 2224              clr R2
 0294 20920000          sts _checkFlag,R2
 0298           ;                                               uart0SendChar(0x0d);
 0298 0DE0              ldi R16,13
 029A 10E0              ldi R17,0
 029C 0E940000          xcall _uart0SendChar
 02A0           ;                                               uart0SendChar(0X03);
 02A0 03E0              ldi R16,3
 02A2 10E0              ldi R17,0
 02A4 0E940000          xcall _uart0SendChar
 02A8           ;                                               checkSum += 0x0d;
 02A8 80910000          lds R24,L7
 02AC 835F              subi R24,243    ; addi 13
 02AE 80930000          sts L7,R24
 02B2           ;                                               uart0SendChar((checkSum & 0x0F) + 'A');
 02B2 082F              mov R16,R24
 02B4 1127              clr R17
 02B6 0F70              andi R16,15
 02B8 1070              andi R17,0
 02BA 0F5B              subi R16,191  ; offset = 65
 02BC 1F4F              sbci R17,255
 02BE 0E940000          xcall _uart0SendChar
 02C2           ;                                               uart0SendChar(((checkSum & 0xF0) >> 4) + 'A');
 02C2 00910000          lds R16,L7
 02C6 1127              clr R17
 02C8 007F              andi R16,240
 02CA 1070              andi R17,0
 02CC 1595              asr R17
 02CE 0795              ror R16
 02D0 1595              asr R17
 02D2 0795              ror R16
 02D4 1595              asr R17
 02D6 0795              ror R16
 02D8 1595              asr R17
 02DA 0795              ror R16
 02DC 0F5B              subi R16,191  ; offset = 65
 02DE 1F4F              sbci R17,255
 02E0 0E940000          xcall _uart0SendChar
 02E4           ;                                               uart0SendChar(0x0d);
 02E4 0DE0              ldi R16,13
 02E6 10E0              ldi R17,0
 02E8 0E940000          xcall _uart0SendChar
 02EC           ;                                               uart0SendChar(0x0a);
 02EC 0AE0              ldi R16,10
 02EE 10E0              ldi R17,0
 02F0 0E940000          xcall _uart0SendChar
 02F4           ;                                               checkSum = 0;
 02F4 2224              clr R2
 02F6 20920000          sts L7,R2
 02FA           ;                                       }
 02FA 08C0              xjmp L77
 02FC           L76:
 02FC           ; 					else
 02FC           ; 					{
 02FC           ; 						uart0SendChar(0x0d);
 02FC 0DE0              ldi R16,13
 02FE 10E0              ldi R17,0
 0300 0E940000          xcall _uart0SendChar
 0304           ;                                               uart0SendChar(0x0a);
 0304 0AE0              ldi R16,10
 0306 10E0              ldi R17,0
 0308 0E940000          xcall _uart0SendChar
 030C           ;                                       }
 030C           L77:
 030C           ; 				}
 030C           L74:
 030C           ; 				return 0;
 030C 0027              clr R16
 030E D9C1              xjmp L6
 0310           L57:
 0310           ; 			}
 0310           ; 			else if(c == 0x08)		// 退格
 0310 4830              cpi R20,8
 0312 09F0              breq X76
 0314 C7C1              xjmp L13
 0316           X76:
 0316           X32:
 0316           ; 			{
 0316           ; 				if(UICmdBuf.charPnt != 0)
 0316 20900100          lds R2,_UICmdBuf+1
 031A 2220              tst R2
 031C F9F0              breq L80
 031E           X33:
 031E           ; 				{
 031E           ; 					UICmdBuf.charPnt--;
 031E 822D              mov R24,R2
 0320 8150              subi R24,1
 0322 80930100          sts _UICmdBuf+1,R24
 0326           ;                                       UICmdBuf.cmdStr[UICmdBuf.charPnt] = 0;
 0326 80E0              ldi R24,<_UICmdBuf+2
 0328 90E0              ldi R25,>_UICmdBuf+2
 032A E0910100          lds R30,_UICmdBuf+1
 032E FF27              clr R31
 0330 E80F              add R30,R24
 0332 F91F              adc R31,R25
 0334 2224              clr R2
 0336 2082              std z+0,R2
 0338           ;                                       if(EchoSW)
 0338 20900000          lds R2,_EchoSW
 033C 2220              tst R2
 033E 09F4              brne X77
 0340 B1C1              xjmp L13
 0342           X77:
 0342           X34:
 0342           ; 					{
 0342           ; 						uart0SendChar(0x08);
 0342 08E0              ldi R16,8
 0344 10E0              ldi R17,0
 0346 0E940000          xcall _uart0SendChar
 034A           ;                                               uart0SendChar(' ');
 034A 00E2              ldi R16,32
 034C 10E0              ldi R17,0
 034E 0E940000          xcall _uart0SendChar
 0352           ;                                               uart0SendChar(0x08);
 0352 08E0              ldi R16,8
 0354 10E0              ldi R17,0
 0356 0E940000          xcall _uart0SendChar
 035A           ;                                       }
 035A           ;                               }
 035A A4C1              xjmp L13
 035C           L80:
 035C           ; 				else		// 清除命令
 035C           ; 				{
 035C           ; 					ControlCmd.cmdState = 0;
 035C 2224              clr R2
 035E 20920C00          sts _ControlCmd,R2
 0362           ;                                       ControlCmd.pamLen = 0;
 0362 20922300          sts _ControlCmd+23,R2
 0366           ;                                       UICmdBuf.itemPnt = 0;
 0366 20920000          sts _UICmdBuf,R2
 036A           ;                                       UICmdBuf.charPnt = 0;
 036A 20920100          sts _UICmdBuf+1,R2
 036E           ;                                       if(EchoSW)
 036E 20900000          lds R2,_EchoSW
 0372 2220              tst R2
 0374 41F0              breq L90
 0376           X35:
 0376           ; 					{
 0376           ; 						uart0SendChar(0x0d);
 0376 0DE0              ldi R16,13
 0378 10E0              ldi R17,0
 037A 0E940000          xcall _uart0SendChar
 037E           ;                                               uart0SendChar(0x0a);
 037E 0AE0              ldi R16,10
 0380 10E0              ldi R17,0
 0382 0E940000          xcall _uart0SendChar
 0386           ;                                       }
 0386           L90:
 0386           ; 					return 0;
 0386 0027              clr R16
 0388 9CC1              xjmp L6
 038A           L92:
 038A           ; 				}
 038A           ; 			}
 038A           ; 			break;
 038A           ; 		case 1:
 038A           ; 		case 2:
 038A           ; 		case 3:
 038A           ; 		case 4:
 038A           ; 		case 5:
 038A           ; 		case 6:
 038A           ; 		case 7:
 038A           ; 		case 8:
 038A           ; 			if(c>='0' && c<= '9')
 038A 4033              cpi R20,48
 038C 80F1              brlo L93
 038E           X36:
 038E 89E3              ldi R24,57
 0390 8417              cp R24,R20
 0392 68F1              brlo L93
 0394           X37:
 0394           ; 			{
 0394           ; 				if(UICmdBuf.charPnt<5)
 0394 80910100          lds R24,_UICmdBuf+1
 0398 8530              cpi R24,5
 039A 08F0              brlo X78
 039C 83C1              xjmp L13
 039E           X78:
 039E           X38:
 039E           ; 				{
 039E           ; 					UICmdBuf.cmdStr[UICmdBuf.charPnt] = c;
 039E 80E0              ldi R24,<_UICmdBuf+2
 03A0 90E0              ldi R25,>_UICmdBuf+2
 03A2 E0910100          lds R30,_UICmdBuf+1
 03A6 FF27              clr R31
 03A8 E80F              add R30,R24
 03AA F91F              adc R31,R25
 03AC 4083              std z+0,R20
 03AE           ;                                       UICmdBuf.charPnt ++;
 03AE 80910100          lds R24,_UICmdBuf+1
 03B2 8F5F              subi R24,255    ; addi 1
 03B4 80930100          sts _UICmdBuf+1,R24
 03B8           ;                                       if(EchoSW)
 03B8 20900000          lds R2,_EchoSW
 03BC 2220              tst R2
 03BE 09F4              brne X79
 03C0 71C1              xjmp L13
 03C2           X79:
 03C2           X39:
 03C2           ; 					{
 03C2           ; 						if(checkFlag)
 03C2 20900000          lds R2,_checkFlag
 03C6 2220              tst R2
 03C8 69F0              breq L103
 03CA           X40:
 03CA           ; 						{
 03CA           ; 							checkFlag = 0;
 03CA 2224              clr R2
 03CC 20920000          sts _checkFlag,R2
 03D0           ;                                                       uart0SendChar(c);
 03D0 042F              mov R16,R20
 03D2 1127              clr R17
 03D4 0E940000          xcall _uart0SendChar
 03D8           ;                                                       checkSum += c;
 03D8 20900000          lds R2,L7
 03DC 240E              add R2,R20
 03DE 20920000          sts L7,R2
 03E2           ;                                               }
 03E2 60C1              xjmp L13
 03E4           L103:
 03E4           ; 						else
 03E4           ; 						{
 03E4           ; 							uart0SendChar(c);
 03E4 042F              mov R16,R20
 03E6 1127              clr R17
 03E8 0E940000          xcall _uart0SendChar
 03EC           ;                                               }
 03EC           ;                                       }
 03EC           ;                               }
 03EC           ;                       }
 03EC 5BC1              xjmp L13
 03EE           L93:
 03EE           ; 			else if(c == '$')
 03EE 4432              cpi R20,36
 03F0 09F0              breq X80
 03F2 81C0              xjmp L105
 03F4           X80:
 03F4           X41:
 03F4           ; 			{
 03F4           ; 				if(UICmdBuf.charPnt != 0)
 03F4 20900100          lds R2,_UICmdBuf+1
 03F8 2220              tst R2
 03FA 09F4              brne X81
 03FC 44C0              xjmp L107
 03FE           X81:
 03FE           X42:
 03FE           ; 				{
 03FE           ; 					UICmdBuf.cmdStr[UICmdBuf.charPnt] = 0;
 03FE 80E0              ldi R24,<_UICmdBuf+2
 0400 90E0              ldi R25,>_UICmdBuf+2
 0402 E22D              mov R30,R2
 0404 FF27              clr R31
 0406 E80F              add R30,R24
 0408 F91F              adc R31,R25
 040A 2224              clr R2
 040C 2082              std z+0,R2
 040E           ;                                       ControlCmd.pam[ControlCmd.pamLen] = StringToInt(UICmdBuf.cmdStr);
 040E 00E0              ldi R16,<_UICmdBuf+2
 0410 10E0              ldi R17,>_UICmdBuf+2
 0412 0E940000          xcall _StringToInt
 0416 5801              movw R10,R16
 0418 80E0              ldi R24,<_ControlCmd+3
 041A 90E0              ldi R25,>_ControlCmd+3
 041C E0912300          lds R30,_ControlCmd+23
 0420 FF27              clr R31
 0422 EE0F              lsl R30
 0424 FF1F              rol R31
 0426 E80F              add R30,R24
 0428 F91F              adc R31,R25
 042A B182              std z+1,R11
 042C A082              std z+0,R10
 042E           ;                                       ControlCmd.pamLen ++;
 042E 80912300          lds R24,_ControlCmd+23
 0432 8F5F              subi R24,255    ; addi 1
 0434 80932300          sts _ControlCmd+23,R24
 0438           ;                                       UICmdBuf.itemPnt ++;
 0438 80910000          lds R24,_UICmdBuf
 043C 8F5F              subi R24,255    ; addi 1
 043E 80930000          sts _UICmdBuf,R24
 0442           ;                                       UICmdBuf.charPnt = 0;
 0442 2224              clr R2
 0444 20920100          sts _UICmdBuf+1,R2
 0448           ;                                       if(EchoSW)
 0448 20900000          lds R2,_EchoSW
 044C 2220              tst R2
 044E 09F4              brne X82
 0450 29C1              xjmp L13
 0452           X82:
 0452           X43:
 0452           ; 					{
 0452           ; 						if(checkFlag)
 0452 20900000          lds R2,_checkFlag
 0456 2220              tst R2
 0458 69F0              breq L119
 045A           X44:
 045A           ; 						{
 045A           ; 							checkFlag = 0;
 045A 2224              clr R2
 045C 20920000          sts _checkFlag,R2
 0460           ;                                                       uart0SendChar('$');
 0460 04E2              ldi R16,36
 0462 10E0              ldi R17,0
 0464 0E940000          xcall _uart0SendChar
 0468           ;                                                       checkSum += '$';
 0468 80910000          lds R24,L7
 046C 8C5D              subi R24,220    ; addi 36
 046E 80930000          sts L7,R24
 0472           ;                                               }
 0472 18C1              xjmp L13
 0474           L119:
 0474           ; 						else
 0474           ; 						{
 0474           ; 							uart0SendChar(' ');
 0474 00E2              ldi R16,32
 0476 10E0              ldi R17,0
 0478 0E940000          xcall _uart0SendChar
 047C           ;                                                       uart0SendChar('$');
 047C 04E2              ldi R16,36
 047E 10E0              ldi R17,0
 0480 0E940000          xcall _uart0SendChar
 0484           ;                                               }
 0484           ;                                       }
 0484           ;                               }
 0484 0FC1              xjmp L13
 0486           L107:
 0486           ; 				else
 0486           ; 				{
 0486           ; 					ControlCmd.pam[ControlCmd.pamLen] = 0;
 0486 80E0              ldi R24,<_ControlCmd+3
 0488 90E0              ldi R25,>_ControlCmd+3
 048A E0912300          lds R30,_ControlCmd+23
 048E FF27              clr R31
 0490 EE0F              lsl R30
 0492 FF1F              rol R31
 0494 E80F              add R30,R24
 0496 F91F              adc R31,R25
 0498 2224              clr R2
 049A 3324              clr R3
 049C 3182              std z+1,R3
 049E 2082              std z+0,R2
 04A0           ;                                       ControlCmd.pamLen ++;
 04A0 80912300          lds R24,_ControlCmd+23
 04A4 8F5F              subi R24,255    ; addi 1
 04A6 80932300          sts _ControlCmd+23,R24
 04AA           ;                                       UICmdBuf.itemPnt ++;
 04AA 80910000          lds R24,_UICmdBuf
 04AE 8F5F              subi R24,255    ; addi 1
 04B0 80930000          sts _UICmdBuf,R24
 04B4           ;                                       UICmdBuf.charPnt = 0;
 04B4 20920100          sts _UICmdBuf+1,R2
 04B8           ;                                       if(EchoSW)
 04B8 20900000          lds R2,_EchoSW
 04BC 2220              tst R2
 04BE 09F4              brne X83
 04C0 F1C0              xjmp L13
 04C2           X83:
 04C2           X45:
 04C2           ; 					{
 04C2           ; 						if(checkFlag)
 04C2 20900000          lds R2,_checkFlag
 04C6 2220              tst R2
 04C8 69F0              breq L127
 04CA           X46:
 04CA           ; 						{
 04CA           ; 							checkFlag = 0;
 04CA 2224              clr R2
 04CC 20920000          sts _checkFlag,R2
 04D0           ;                                                       uart0SendChar('$');
 04D0 04E2              ldi R16,36
 04D2 10E0              ldi R17,0
 04D4 0E940000          xcall _uart0SendChar
 04D8           ;                                                       checkSum += '$';
 04D8 80910000          lds R24,L7
 04DC 8C5D              subi R24,220    ; addi 36
 04DE 80930000          sts L7,R24
 04E2           ;                                               }
 04E2 E0C0              xjmp L13
 04E4           L127:
 04E4           ; 						else
 04E4           ; 						{
 04E4           ; 							uart0SendChar(' ');
 04E4 00E2              ldi R16,32
 04E6 10E0              ldi R17,0
 04E8 0E940000          xcall _uart0SendChar
 04EC           ;                                                       uart0SendChar('$');
 04EC 04E2              ldi R16,36
 04EE 10E0              ldi R17,0
 04F0 0E940000          xcall _uart0SendChar
 04F4           ;                                               }
 04F4           ;                                       }
 04F4           ;                               }
 04F4           ;                       }
 04F4 D7C0              xjmp L13
 04F6           L105:
 04F6           ; 			else if(c == '-')	// 负号
 04F6 4D32              cpi R20,45
 04F8 B1F4              brne L129
 04FA           X47:
 04FA           ; 			{
 04FA           ; 				if(UICmdBuf.charPnt==0)
 04FA 20900100          lds R2,_UICmdBuf+1
 04FE 2220              tst R2
 0500 09F0              breq X84
 0502 D0C0              xjmp L13
 0504           X84:
 0504           X48:
 0504           ; 				{
 0504           ; 					UICmdBuf.cmdStr[0] = '-';
 0504 8DE2              ldi R24,45
 0506 80930200          sts _UICmdBuf+2,R24
 050A           ;                                       UICmdBuf.charPnt ++;
 050A 822D              mov R24,R2
 050C 8F5F              subi R24,255    ; addi 1
 050E 80930100          sts _UICmdBuf+1,R24
 0512           ;                                       if(EchoSW)
 0512 20900000          lds R2,_EchoSW
 0516 2220              tst R2
 0518 09F4              brne X85
 051A C4C0              xjmp L13
 051C           X85:
 051C           X49:
 051C           ; 						uart0SendChar(c);
 051C 042F              mov R16,R20
 051E 1127              clr R17
 0520 0E940000          xcall _uart0SendChar
 0524           ;                               }
 0524           ;                       }
 0524 BFC0              xjmp L13
 0526           L129:
 0526           ; 			else if(c == 0x0d)	// 回车号，命令结束
 0526 4D30              cpi R20,13
 0528 09F0              breq X86
 052A 81C0              xjmp L138
 052C           X86:
 052C           X50:
 052C           ; 			{
 052C           ; 				if(UICmdBuf.charPnt != 0)
 052C 20900100          lds R2,_UICmdBuf+1
 0530 2220              tst R2
 0532 E9F0              breq L140
 0534           X51:
 0534           ; 				{
 0534           ; 					UICmdBuf.cmdStr[UICmdBuf.charPnt] = 0;
 0534 80E0              ldi R24,<_UICmdBuf+2
 0536 90E0              ldi R25,>_UICmdBuf+2
 0538 E22D              mov R30,R2
 053A FF27              clr R31
 053C E80F              add R30,R24
 053E F91F              adc R31,R25
 0540 2224              clr R2
 0542 2082              std z+0,R2
 0544           ;                                       ControlCmd.pam[ControlCmd.pamLen] = StringToInt(UICmdBuf.cmdStr);
 0544 00E0              ldi R16,<_UICmdBuf+2
 0546 10E0              ldi R17,>_UICmdBuf+2
 0548 0E940000          xcall _StringToInt
 054C 5801              movw R10,R16
 054E 80E0              ldi R24,<_ControlCmd+3
 0550 90E0              ldi R25,>_ControlCmd+3
 0552 E0912300          lds R30,_ControlCmd+23
 0556 FF27              clr R31
 0558 EE0F              lsl R30
 055A FF1F              rol R31
 055C E80F              add R30,R24
 055E F91F              adc R31,R25
 0560 B182              std z+1,R11
 0562 A082              std z+0,R10
 0564           ;                                       ControlCmd.pamLen ++;
 0564 80912300          lds R24,_ControlCmd+23
 0568 8F5F              subi R24,255    ; addi 1
 056A 80932300          sts _ControlCmd+23,R24
 056E           ;                               }
 056E           L140:
 056E           ; 				if(checkFlag)
 056E 20900000          lds R2,_checkFlag
 0572 2220              tst R2
 0574 61F0              breq L149
 0576           X52:
 0576           ; 				{
 0576           ; 					if(ControlCmd.cmdState == 1)
 0576 80910C00          lds R24,_ControlCmd
 057A 8130              cpi R24,1
 057C 21F4              brne L151
 057E           X53:
 057E           ; 						ControlCmd.cmdState = 2;
 057E 82E0              ldi R24,2
 0580 80930C00          sts _ControlCmd,R24
 0584 07C0              xjmp L150
 0586           L151:
 0586           ; 					else
 0586           ; 						ControlCmd.cmdState = 0;
 0586 2224              clr R2
 0588 20920C00          sts _ControlCmd,R2
 058C           ;                               }
 058C 03C0              xjmp L150
 058E           L149:
 058E           ; 				else
 058E           ; 					ControlCmd.cmdState = 2;
 058E 82E0              ldi R24,2
 0590 80930C00          sts _ControlCmd,R24
 0594           L150:
 0594           ; 					
 0594           ; 				UICmdBuf.itemPnt = 0;
 0594 2224              clr R2
 0596 20920000          sts _UICmdBuf,R2
 059A           ;                               UICmdBuf.charPnt = 0;
 059A 20920100          sts _UICmdBuf+1,R2
 059E           ;                               if(EchoSW)
 059E 20900000          lds R2,_EchoSW
 05A2 2220              tst R2
 05A4 09F4              brne X87
 05A6 41C0              xjmp L154
 05A8           X87:
 05A8           X54:
 05A8           ; 				{
 05A8           ; 					if(checkFlag)
 05A8 20900000          lds R2,_checkFlag
 05AC 2220              tst R2
 05AE A9F1              breq L156
 05B0           X55:
 05B0           ; 					{
 05B0           ; 						checkFlag = 0;
 05B0 2224              clr R2
 05B2 20920000          sts _checkFlag,R2
 05B6           ;                                               uart0SendChar(0x0d);
 05B6 0DE0              ldi R16,13
 05B8 10E0              ldi R17,0
 05BA 0E940000          xcall _uart0SendChar
 05BE           ;                                               uart0SendChar(0X03);
 05BE 03E0              ldi R16,3
 05C0 10E0              ldi R17,0
 05C2 0E940000          xcall _uart0SendChar
 05C6           ;                                               checkSum += 0x0d;
 05C6 80910000          lds R24,L7
 05CA 835F              subi R24,243    ; addi 13
 05CC 80930000          sts L7,R24
 05D0           ;                                               uart0SendChar((checkSum & 0x0F) + 'A');
 05D0 082F              mov R16,R24
 05D2 1127              clr R17
 05D4 0F70              andi R16,15
 05D6 1070              andi R17,0
 05D8 0F5B              subi R16,191  ; offset = 65
 05DA 1F4F              sbci R17,255
 05DC 0E940000          xcall _uart0SendChar
 05E0           ;                                               uart0SendChar(((checkSum & 0xF0) >> 4) + 'A');
 05E0 00910000          lds R16,L7
 05E4 1127              clr R17
 05E6 007F              andi R16,240
 05E8 1070              andi R17,0
 05EA 1595              asr R17
 05EC 0795              ror R16
 05EE 1595              asr R17
 05F0 0795              ror R16
 05F2 1595              asr R17
 05F4 0795              ror R16
 05F6 1595              asr R17
 05F8 0795              ror R16
 05FA 0F5B              subi R16,191  ; offset = 65
 05FC 1F4F              sbci R17,255
 05FE 0E940000          xcall _uart0SendChar
 0602           ;                                               uart0SendChar(0x0D);
 0602 0DE0              ldi R16,13
 0604 10E0              ldi R17,0
 0606 0E940000          xcall _uart0SendChar
 060A           ;                                               uart0SendChar(0x0a);
 060A 0AE0              ldi R16,10
 060C 10E0              ldi R17,0
 060E 0E940000          xcall _uart0SendChar
 0612           ;                                               checkSum = 0;
 0612 2224              clr R2
 0614 20920000          sts L7,R2
 0618           ;                                       }
 0618 08C0              xjmp L157
 061A           L156:
 061A           ; 					else
 061A           ; 					{
 061A           ; 						uart0SendChar(0x0D);
 061A 0DE0              ldi R16,13
 061C 10E0              ldi R17,0
 061E 0E940000          xcall _uart0SendChar
 0622           ;                                               uart0SendChar(0x0a);
 0622 0AE0              ldi R16,10
 0624 10E0              ldi R17,0
 0626 0E940000          xcall _uart0SendChar
 062A           ;                                       }
 062A           L157:
 062A           ; 				}
 062A           L154:
 062A           ; 				return 0;
 062A 0027              clr R16
 062C 4AC0              xjmp L6
 062E           L138:
 062E           ; 			}
 062E           ; 			else if(c == 0x08){		// 退格
 062E 4830              cpi R20,8
 0630 C9F5              brne L13
 0632           X56:
 0632           ; 				if(UICmdBuf.charPnt != 0)
 0632 20900100          lds R2,_UICmdBuf+1
 0636 2220              tst R2
 0638 F1F0              breq L160
 063A           X57:
 063A           ; 				{
 063A           ; 					UICmdBuf.charPnt--;
 063A 822D              mov R24,R2
 063C 8150              subi R24,1
 063E 80930100          sts _UICmdBuf+1,R24
 0642           ;                                       UICmdBuf.cmdStr[UICmdBuf.charPnt] = 0;
 0642 80E0              ldi R24,<_UICmdBuf+2
 0644 90E0              ldi R25,>_UICmdBuf+2
 0646 E0910100          lds R30,_UICmdBuf+1
 064A FF27              clr R31
 064C E80F              add R30,R24
 064E F91F              adc R31,R25
 0650 2224              clr R2
 0652 2082              std z+0,R2
 0654           ;                                       if(EchoSW)
 0654 20900000          lds R2,_EchoSW
 0658 2220              tst R2
 065A 21F1              breq L13
 065C           X58:
 065C           ; 					{
 065C           ; 						uart0SendChar(0x08);
 065C 08E0              ldi R16,8
 065E 10E0              ldi R17,0
 0660 0E940000          xcall _uart0SendChar
 0664           ;                                               uart0SendChar(' ');
 0664 00E2              ldi R16,32
 0666 10E0              ldi R17,0
 0668 0E940000          xcall _uart0SendChar
 066C           ;                                               uart0SendChar(0x08);
 066C 08E0              ldi R16,8
 066E 10E0              ldi R17,0
 0670 0E940000          xcall _uart0SendChar
 0674           ;                                       }
 0674           ;                               }
 0674 17C0              xjmp L13
 0676           L160:
 0676           ; 				else		// 清除命令
 0676           ; 				{
 0676           ; 					ControlCmd.cmdState = 0;
 0676 2224              clr R2
 0678 20920C00          sts _ControlCmd,R2
 067C           ;                                       ControlCmd.pamLen = 0;
 067C 20922300          sts _ControlCmd+23,R2
 0680           ;                                       UICmdBuf.itemPnt = 0;
 0680 20920000          sts _UICmdBuf,R2
 0684           ;                                       UICmdBuf.charPnt = 0;
 0684 20920100          sts _UICmdBuf+1,R2
 0688           ;                                       if(EchoSW)
 0688 20900000          lds R2,_EchoSW
 068C 2220              tst R2
 068E 41F0              breq L170
 0690           X59:
 0690           ; 					{
 0690           ; 						uart0SendChar(0x0d);
 0690 0DE0              ldi R16,13
 0692 10E0              ldi R17,0
 0694 0E940000          xcall _uart0SendChar
 0698           ;                                               uart0SendChar(0x0a);
 0698 0AE0              ldi R16,10
 069A 10E0              ldi R17,0
 069C 0E940000          xcall _uart0SendChar
 06A0           ;                                       }
 06A0           L170:
 06A0           ; 					return 0;
 06A0 0027              clr R16
 06A2 0FC0              xjmp L6
 06A4           L12:
 06A4           L13:
 06A4           ; 				}
 06A4           ; 			}
 06A4           ; 			break;
 06A4           ; 		}
 06A4           ; 	if(UICmdBuf.itemPnt > 8)
 06A4 88E0              ldi R24,8
 06A6 20900000          lds R2,_UICmdBuf
 06AA 8215              cp R24,R2
 06AC 10F4              brsh L172
 06AE           X60:
 06AE           ; 	{
 06AE           ; 		UICmdBuf.itemPnt = 8;
 06AE 80930000          sts _UICmdBuf,R24
 06B2           ;       }
 06B2           L172:
 06B2           ; 	if(ControlCmd.pamLen >8)
 06B2 88E0              ldi R24,8
 06B4 20902300          lds R2,_ControlCmd+23
 06B8 8215              cp R24,R2
 06BA 10F4              brsh L174
 06BC           X61:
 06BC           ; 	{
 06BC           ; 		ControlCmd.pamLen = 8;
 06BC 80932300          sts _ControlCmd+23,R24
 06C0           ;       }
 06C0           L174:
 06C0           ; 	return 1;
 06C0 01E0              ldi R16,1
 06C2           L6:
 06C2                   .dbline 0 ; func end
 06C2 0C940000          xjmp pop_xgsetF03C
                        .area data(ram, con, rel)
 0001           L179:
 0001                   .blkb 1
                        .area idata
 0001 00                .byte 0
                        .area data(ram, con, rel)
                        .area text(rom, con, rel)
                ;              i -> R10
                ;              c -> R20
                        .even
 06C6           _CommandExplain::
 06C6 0E940000          xcall push_xgsetF00C
 06CA 402F              mov R20,R16
 06CC           ; }
 06CC           ; 
 06CC           ; /*
 06CC           ; void CommandExplain(unsigned char c)
 06CC           ; {
 06CC           ;       static unsigned char receiveSW = 0;
 06CC           ;       unsigned char i;
 06CC           ;               
 06CC           ;       if(receiveSW == 0)
 06CC           ;       {
 06CC           ;               if(c == '#')
 06CC           ;               {
 06CC           ;                       receiveSW = 1;
 06CC           ;               }
 06CC           ;               else 
 06CC           ;               {
 06CC           ;                       receiveSW = 2;
 06CC           ;               }
 06CC           ;       }
 06CC           ;       switch(receiveSW)
 06CC           ;       {
 06CC           ;               case 0:
 06CC           ;                       break;
 06CC           ;               case 1:
 06CC           ;                       i = UICommandExplain(c);
 06CC           ;                       if(i == 0)
 06CC           ;                               receiveSW = 0;
 06CC           ;                       break;
 06CC           ;               case 2:
 06CC           ;                       i = HTCommandExplain(c);
 06CC           ;                       if(i == 0)
 06CC           ;                               receiveSW = 0;
 06CC           ;                       break;
 06CC           ;       }
 06CC           ; }
 06CC           ; */
 06CC           ; 
 06CC           ; void CommandExplain(unsigned char c)
 06CC           ; {
 06CC           ;       static unsigned char receiveSW = 0;
 06CC           ;       unsigned char i;
 06CC           ;               
 06CC           ;       if(receiveSW == 0)
 06CC 20900100          lds R2,L179
 06D0 2220              tst R2
 06D2 29F4              brne L180
 06D4           X88:
 06D4           ; 	{
 06D4           ; 		if(c == '#')
 06D4 4332              cpi R20,35
 06D6 19F4              brne L182
 06D8           X89:
 06D8           ; 		{
 06D8           ; 			receiveSW = 1;
 06D8 81E0              ldi R24,1
 06DA 80930100          sts L179,R24
 06DE           ;               }
 06DE           L182:
 06DE           ; 	}
 06DE           L180:
 06DE           ; 	switch(receiveSW)
 06DE 60910100          lds R22,L179
 06E2 7727              clr R23
 06E4 6030              cpi R22,0
 06E6 6707              cpc R22,R23
 06E8 69F0              breq L185
 06EA           X90:
 06EA 6130              cpi R22,1
 06EC E0E0              ldi R30,0
 06EE 7E07              cpc R23,R30
 06F0 09F0              breq L188
 06F2           X91:
 06F2 08C0              xjmp L184
 06F4           L188:
 06F4           ; 	{
 06F4           ; 		case 0:
 06F4           ; 			break;
 06F4           ; 		case 1:
 06F4           ; 			i = UICommandExplain(c);
 06F4 042F              mov R16,R20
 06F6 91DC              xcall _UICommandExplain
 06F8 A02E              mov R10,R16
 06FA           ;                       if(i == 0)
 06FA 0023              tst R16
 06FC 19F4              brne L185
 06FE           X92:
 06FE           ; 				receiveSW = 0;
 06FE 2224              clr R2
 0700 20920100          sts L179,R2
 0704           ;                       break;
 0704           L184:
 0704           L185:
 0704           L178:
 0704                   .dbline 0 ; func end
 0704 0C940000          xjmp pop_xgsetF00C
                        .area bss(ram, con, rel)
 0000           _UICmdBuf::
 0000                   .blkb 12
 000C           _ControlCmd::
 000C                   .blkb 24
 0024           ;       }
 0024           ; }
